
FreeRTOS1Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000551c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800582c  0800582c  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  0800582c  0800582c  0001582c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005834  08005834  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005838  08005838  00015838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800583c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020064  2**0
                  CONTENTS
 10 .bss          00014554  20000064  20000064  00020064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200145b8  200145b8  00020064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010513  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002646  00000000  00000000  000305ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001068  00000000  00000000  00032c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ca2  00000000  00000000  00033c98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022e08  00000000  00000000  0003493a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001265b  00000000  00000000  00057742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5c1e  00000000  00000000  00069d9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004994  00000000  00000000  0013f9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000009c  00000000  00000000  00144350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005694 	.word	0x08005694

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	08005694 	.word	0x08005694

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012e98 	.word	0x20012e98
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b086      	sub	sp, #24
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 f9f5 	bl	8000a00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f837 	bl	8000688 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  //Enable the CYCCNT counter.
  DWT_CTRL |= (1 <<0 );     // set 0th bit to 1
 800061a:	4b14      	ldr	r3, [pc, #80]	; (800066c <main+0x60>)
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	4a13      	ldr	r2, [pc, #76]	; (800066c <main+0x60>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000626:	f004 fb4f 	bl	8004cc8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 800062a:	f003 fdcf 	bl	80041cc <SEGGER_SYSVIEW_Start>

  /* USER CODE BEGIN 2 */
  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello World from Task-1", 2, &task1_handle);
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	4b0d      	ldr	r3, [pc, #52]	; (8000670 <main+0x64>)
 800063a:	22c8      	movs	r2, #200	; 0xc8
 800063c:	490d      	ldr	r1, [pc, #52]	; (8000674 <main+0x68>)
 800063e:	480e      	ldr	r0, [pc, #56]	; (8000678 <main+0x6c>)
 8000640:	f001 fa7d 	bl	8001b3e <xTaskCreate>
 8000644:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS);
 8000646:	2301      	movs	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello World from Task-2", 2, &task2_handle);
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	9301      	str	r3, [sp, #4]
 800064e:	2302      	movs	r3, #2
 8000650:	9300      	str	r3, [sp, #0]
 8000652:	4b0a      	ldr	r3, [pc, #40]	; (800067c <main+0x70>)
 8000654:	22c8      	movs	r2, #200	; 0xc8
 8000656:	490a      	ldr	r1, [pc, #40]	; (8000680 <main+0x74>)
 8000658:	480a      	ldr	r0, [pc, #40]	; (8000684 <main+0x78>)
 800065a:	f001 fa70 	bl	8001b3e <xTaskCreate>
 800065e:	60f8      	str	r0, [r7, #12]

  configASSERT(status = pdPASS);
 8000660:	2301      	movs	r3, #1
 8000662:	60fb      	str	r3, [r7, #12]

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000664:	f001 fbe6 	bl	8001e34 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x5c>
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	080056ac 	.word	0x080056ac
 8000674:	080056c4 	.word	0x080056c4
 8000678:	08000759 	.word	0x08000759
 800067c:	080056cc 	.word	0x080056cc
 8000680:	080056e4 	.word	0x080056e4
 8000684:	08000795 	.word	0x08000795

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	; 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 0320 	add.w	r3, r7, #32
 8000692:	2230      	movs	r2, #48	; 0x30
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f004 fb70 	bl	8004d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	4b27      	ldr	r3, [pc, #156]	; (8000750 <SystemClock_Config+0xc8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	4a26      	ldr	r2, [pc, #152]	; (8000750 <SystemClock_Config+0xc8>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	; 0x40
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xc8>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c4:	60bb      	str	r3, [r7, #8]
 80006c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <SystemClock_Config+0xcc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a20      	ldr	r2, [pc, #128]	; (8000754 <SystemClock_Config+0xcc>)
 80006d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <SystemClock_Config+0xcc>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f0:	2302      	movs	r3, #2
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f4:	2300      	movs	r3, #0
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f8:	2308      	movs	r3, #8
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 80006fc:	2332      	movs	r3, #50	; 0x32
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000700:	2304      	movs	r3, #4
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000704:	2304      	movs	r3, #4
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 0320 	add.w	r3, r7, #32
 800070c:	4618      	mov	r0, r3
 800070e:	f000 fa9b 	bl	8000c48 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000718:	f000 f86c 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071c:	230f      	movs	r3, #15
 800071e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000720:	2302      	movs	r3, #2
 8000722:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f000 fcfe 	bl	8001138 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000742:	f000 f857 	bl	80007f4 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler (void* parameters)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	; 0x70
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	/*This static variable will not get created in Task's private stack memory*/
	char msg[100];
	while(1)
		{
//			printf("%s\n", (char*)parameters);
			snprintf(msg, 100, "%s\n", (char*)parameters);
 8000760:	f107 000c 	add.w	r0, r7, #12
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <task1_handler+0x34>)
 8000768:	2164      	movs	r1, #100	; 0x64
 800076a:	f004 fac3 	bl	8004cf4 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 800076e:	f107 030c 	add.w	r3, r7, #12
 8000772:	4618      	mov	r0, r3
 8000774:	f004 fa2a 	bl	8004bcc <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();    // for cooperative scheduling, it leaves the processor after it's work done
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <task1_handler+0x38>)
 800077a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	f3bf 8f4f 	dsb	sy
 8000784:	f3bf 8f6f 	isb	sy
			snprintf(msg, 100, "%s\n", (char*)parameters);
 8000788:	e7ea      	b.n	8000760 <task1_handler+0x8>
 800078a:	bf00      	nop
 800078c:	080056ec 	.word	0x080056ec
 8000790:	e000ed04 	.word	0xe000ed04

08000794 <task2_handler>:
		}
}

static void task2_handler (void* parameters)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b09c      	sub	sp, #112	; 0x70
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1)
		{
//			printf("%s\n", (char*)parameters);
			snprintf(msg, 100, "%s\n", (char*)parameters);
 800079c:	f107 000c 	add.w	r0, r7, #12
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a09      	ldr	r2, [pc, #36]	; (80007c8 <task2_handler+0x34>)
 80007a4:	2164      	movs	r1, #100	; 0x64
 80007a6:	f004 faa5 	bl	8004cf4 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	4618      	mov	r0, r3
 80007b0:	f004 fa0c 	bl	8004bcc <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <task2_handler+0x38>)
 80007b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	f3bf 8f4f 	dsb	sy
 80007c0:	f3bf 8f6f 	isb	sy
			snprintf(msg, 100, "%s\n", (char*)parameters);
 80007c4:	e7ea      	b.n	800079c <task2_handler+0x8>
 80007c6:	bf00      	nop
 80007c8:	080056ec 	.word	0x080056ec
 80007cc:	e000ed04 	.word	0xe000ed04

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 f92f 	bl	8000a44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40001000 	.word	0x40001000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	607b      	str	r3, [r7, #4]
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <HAL_MspInit+0x4c>)
 800080c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080e:	4a0f      	ldr	r2, [pc, #60]	; (800084c <HAL_MspInit+0x4c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000814:	6453      	str	r3, [r2, #68]	; 0x44
 8000816:	4b0d      	ldr	r3, [pc, #52]	; (800084c <HAL_MspInit+0x4c>)
 8000818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081e:	607b      	str	r3, [r7, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	603b      	str	r3, [r7, #0]
 8000826:	4b09      	ldr	r3, [pc, #36]	; (800084c <HAL_MspInit+0x4c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	4a08      	ldr	r2, [pc, #32]	; (800084c <HAL_MspInit+0x4c>)
 800082c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000830:	6413      	str	r3, [r2, #64]	; 0x40
 8000832:	4b06      	ldr	r3, [pc, #24]	; (800084c <HAL_MspInit+0x4c>)
 8000834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800083a:	603b      	str	r3, [r7, #0]
 800083c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  vInitPrioGroupValue();
 800083e:	f001 ffa3 	bl	8002788 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08e      	sub	sp, #56	; 0x38
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000858:	2300      	movs	r3, #0
 800085a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800085c:	2300      	movs	r3, #0
 800085e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
 8000864:	4b33      	ldr	r3, [pc, #204]	; (8000934 <HAL_InitTick+0xe4>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a32      	ldr	r2, [pc, #200]	; (8000934 <HAL_InitTick+0xe4>)
 800086a:	f043 0310 	orr.w	r3, r3, #16
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b30      	ldr	r3, [pc, #192]	; (8000934 <HAL_InitTick+0xe4>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800087c:	f107 0210 	add.w	r2, r7, #16
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fe22 	bl	80014d0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000892:	2b00      	cmp	r3, #0
 8000894:	d103      	bne.n	800089e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000896:	f000 fe07 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 800089a:	6378      	str	r0, [r7, #52]	; 0x34
 800089c:	e004      	b.n	80008a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800089e:	f000 fe03 	bl	80014a8 <HAL_RCC_GetPCLK1Freq>
 80008a2:	4603      	mov	r3, r0
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80008aa:	4a23      	ldr	r2, [pc, #140]	; (8000938 <HAL_InitTick+0xe8>)
 80008ac:	fba2 2303 	umull	r2, r3, r2, r3
 80008b0:	0c9b      	lsrs	r3, r3, #18
 80008b2:	3b01      	subs	r3, #1
 80008b4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <HAL_InitTick+0xec>)
 80008b8:	4a21      	ldr	r2, [pc, #132]	; (8000940 <HAL_InitTick+0xf0>)
 80008ba:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008bc:	4b1f      	ldr	r3, [pc, #124]	; (800093c <HAL_InitTick+0xec>)
 80008be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008c4:	4a1d      	ldr	r2, [pc, #116]	; (800093c <HAL_InitTick+0xec>)
 80008c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <HAL_InitTick+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_InitTick+0xec>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <HAL_InitTick+0xec>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008dc:	4817      	ldr	r0, [pc, #92]	; (800093c <HAL_InitTick+0xec>)
 80008de:	f000 fe29 	bl	8001534 <HAL_TIM_Base_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d11b      	bne.n	8000928 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008f0:	4812      	ldr	r0, [pc, #72]	; (800093c <HAL_InitTick+0xec>)
 80008f2:	f000 fe79 	bl	80015e8 <HAL_TIM_Base_Start_IT>
 80008f6:	4603      	mov	r3, r0
 80008f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008fc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000900:	2b00      	cmp	r3, #0
 8000902:	d111      	bne.n	8000928 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000904:	2036      	movs	r0, #54	; 0x36
 8000906:	f000 f991 	bl	8000c2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d808      	bhi.n	8000922 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000910:	2200      	movs	r2, #0
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	2036      	movs	r0, #54	; 0x36
 8000916:	f000 f96d 	bl	8000bf4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800091a:	4a0a      	ldr	r2, [pc, #40]	; (8000944 <HAL_InitTick+0xf4>)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	e002      	b.n	8000928 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000928:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800092c:	4618      	mov	r0, r3
 800092e:	3738      	adds	r7, #56	; 0x38
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	40023800 	.word	0x40023800
 8000938:	431bde83 	.word	0x431bde83
 800093c:	20000080 	.word	0x20000080
 8000940:	40001000 	.word	0x40001000
 8000944:	20000004 	.word	0x20000004

08000948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800094c:	e7fe      	b.n	800094c <NMI_Handler+0x4>

0800094e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <HardFault_Handler+0x4>

08000954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <MemManage_Handler+0x4>

0800095a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800095e:	e7fe      	b.n	800095e <BusFault_Handler+0x4>

08000960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000964:	e7fe      	b.n	8000964 <UsageFault_Handler+0x4>

08000966 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000978:	4802      	ldr	r0, [pc, #8]	; (8000984 <TIM6_DAC_IRQHandler+0x10>)
 800097a:	f000 fea5 	bl	80016c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000080 	.word	0x20000080

08000988 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <SystemInit+0x20>)
 800098e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000992:	4a05      	ldr	r2, [pc, #20]	; (80009a8 <SystemInit+0x20>)
 8000994:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000998:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	e000ed00 	.word	0xe000ed00

080009ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009b0:	480d      	ldr	r0, [pc, #52]	; (80009e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009b2:	490e      	ldr	r1, [pc, #56]	; (80009ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009b4:	4a0e      	ldr	r2, [pc, #56]	; (80009f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b8:	e002      	b.n	80009c0 <LoopCopyDataInit>

080009ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009be:	3304      	adds	r3, #4

080009c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009c4:	d3f9      	bcc.n	80009ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009c6:	4a0b      	ldr	r2, [pc, #44]	; (80009f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009c8:	4c0b      	ldr	r4, [pc, #44]	; (80009f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009cc:	e001      	b.n	80009d2 <LoopFillZerobss>

080009ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009d0:	3204      	adds	r2, #4

080009d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009d4:	d3fb      	bcc.n	80009ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009d6:	f7ff ffd7 	bl	8000988 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009da:	f004 f9d7 	bl	8004d8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009de:	f7ff fe15 	bl	800060c <main>
  bx  lr    
 80009e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009ec:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80009f0:	0800583c 	.word	0x0800583c
  ldr r2, =_sbss
 80009f4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80009f8:	200145b8 	.word	0x200145b8

080009fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009fc:	e7fe      	b.n	80009fc <ADC_IRQHandler>
	...

08000a00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a04:	4b0e      	ldr	r3, [pc, #56]	; (8000a40 <HAL_Init+0x40>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <HAL_Init+0x40>)
 8000a0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <HAL_Init+0x40>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <HAL_Init+0x40>)
 8000a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a1c:	4b08      	ldr	r3, [pc, #32]	; (8000a40 <HAL_Init+0x40>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a07      	ldr	r2, [pc, #28]	; (8000a40 <HAL_Init+0x40>)
 8000a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a28:	2003      	movs	r0, #3
 8000a2a:	f000 f8d8 	bl	8000bde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a2e:	200f      	movs	r0, #15
 8000a30:	f7ff ff0e 	bl	8000850 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a34:	f7ff fee4 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a38:	2300      	movs	r3, #0
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	bd80      	pop	{r7, pc}
 8000a3e:	bf00      	nop
 8000a40:	40023c00 	.word	0x40023c00

08000a44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <HAL_IncTick+0x20>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <HAL_IncTick+0x24>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4413      	add	r3, r2
 8000a54:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <HAL_IncTick+0x24>)
 8000a56:	6013      	str	r3, [r2, #0]
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	20000008 	.word	0x20000008
 8000a68:	200000c8 	.word	0x200000c8

08000a6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <HAL_GetTick+0x14>)
 8000a72:	681b      	ldr	r3, [r3, #0]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	200000c8 	.word	0x200000c8

08000a84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b085      	sub	sp, #20
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	f003 0307 	and.w	r3, r3, #7
 8000a92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a94:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a9a:	68ba      	ldr	r2, [r7, #8]
 8000a9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000aa0:	4013      	ands	r3, r2
 8000aa2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000aac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ab0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ab6:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	60d3      	str	r3, [r2, #12]
}
 8000abc:	bf00      	nop
 8000abe:	3714      	adds	r7, #20
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000ed00 	.word	0xe000ed00

08000acc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <__NVIC_GetPriorityGrouping+0x18>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	f003 0307 	and.w	r3, r3, #7
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	db0b      	blt.n	8000b12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	f003 021f 	and.w	r2, r3, #31
 8000b00:	4907      	ldr	r1, [pc, #28]	; (8000b20 <__NVIC_EnableIRQ+0x38>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	095b      	lsrs	r3, r3, #5
 8000b08:	2001      	movs	r0, #1
 8000b0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000e100 	.word	0xe000e100

08000b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	6039      	str	r1, [r7, #0]
 8000b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	db0a      	blt.n	8000b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	b2da      	uxtb	r2, r3
 8000b3c:	490c      	ldr	r1, [pc, #48]	; (8000b70 <__NVIC_SetPriority+0x4c>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	0112      	lsls	r2, r2, #4
 8000b44:	b2d2      	uxtb	r2, r2
 8000b46:	440b      	add	r3, r1
 8000b48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b4c:	e00a      	b.n	8000b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	b2da      	uxtb	r2, r3
 8000b52:	4908      	ldr	r1, [pc, #32]	; (8000b74 <__NVIC_SetPriority+0x50>)
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	f003 030f 	and.w	r3, r3, #15
 8000b5a:	3b04      	subs	r3, #4
 8000b5c:	0112      	lsls	r2, r2, #4
 8000b5e:	b2d2      	uxtb	r2, r2
 8000b60:	440b      	add	r3, r1
 8000b62:	761a      	strb	r2, [r3, #24]
}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000e100 	.word	0xe000e100
 8000b74:	e000ed00 	.word	0xe000ed00

08000b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	f1c3 0307 	rsb	r3, r3, #7
 8000b92:	2b04      	cmp	r3, #4
 8000b94:	bf28      	it	cs
 8000b96:	2304      	movcs	r3, #4
 8000b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9a:	69fb      	ldr	r3, [r7, #28]
 8000b9c:	3304      	adds	r3, #4
 8000b9e:	2b06      	cmp	r3, #6
 8000ba0:	d902      	bls.n	8000ba8 <NVIC_EncodePriority+0x30>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	3b03      	subs	r3, #3
 8000ba6:	e000      	b.n	8000baa <NVIC_EncodePriority+0x32>
 8000ba8:	2300      	movs	r3, #0
 8000baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bac:	f04f 32ff 	mov.w	r2, #4294967295
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43da      	mvns	r2, r3
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	401a      	ands	r2, r3
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000bca:	43d9      	mvns	r1, r3
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bd0:	4313      	orrs	r3, r2
         );
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	3724      	adds	r7, #36	; 0x24
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f7ff ff4c 	bl	8000a84 <__NVIC_SetPriorityGrouping>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
 8000c00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c02:	2300      	movs	r3, #0
 8000c04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c06:	f7ff ff61 	bl	8000acc <__NVIC_GetPriorityGrouping>
 8000c0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c0c:	687a      	ldr	r2, [r7, #4]
 8000c0e:	68b9      	ldr	r1, [r7, #8]
 8000c10:	6978      	ldr	r0, [r7, #20]
 8000c12:	f7ff ffb1 	bl	8000b78 <NVIC_EncodePriority>
 8000c16:	4602      	mov	r2, r0
 8000c18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c1c:	4611      	mov	r1, r2
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff ff80 	bl	8000b24 <__NVIC_SetPriority>
}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f7ff ff54 	bl	8000ae8 <__NVIC_EnableIRQ>
}
 8000c40:	bf00      	nop
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e267      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d075      	beq.n	8000d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c66:	4b88      	ldr	r3, [pc, #544]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d00c      	beq.n	8000c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c72:	4b85      	ldr	r3, [pc, #532]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c7a:	2b08      	cmp	r3, #8
 8000c7c:	d112      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c7e:	4b82      	ldr	r3, [pc, #520]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c8a:	d10b      	bne.n	8000ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c8c:	4b7e      	ldr	r3, [pc, #504]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d05b      	beq.n	8000d50 <HAL_RCC_OscConfig+0x108>
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d157      	bne.n	8000d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	e242      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cac:	d106      	bne.n	8000cbc <HAL_RCC_OscConfig+0x74>
 8000cae:	4b76      	ldr	r3, [pc, #472]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a75      	ldr	r2, [pc, #468]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	e01d      	b.n	8000cf8 <HAL_RCC_OscConfig+0xb0>
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cc4:	d10c      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x98>
 8000cc6:	4b70      	ldr	r3, [pc, #448]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a6f      	ldr	r2, [pc, #444]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000ccc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	4b6d      	ldr	r3, [pc, #436]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a6c      	ldr	r2, [pc, #432]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	e00b      	b.n	8000cf8 <HAL_RCC_OscConfig+0xb0>
 8000ce0:	4b69      	ldr	r3, [pc, #420]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a68      	ldr	r2, [pc, #416]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000ce6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cea:	6013      	str	r3, [r2, #0]
 8000cec:	4b66      	ldr	r3, [pc, #408]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a65      	ldr	r2, [pc, #404]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d013      	beq.n	8000d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff feb4 	bl	8000a6c <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff feb0 	bl	8000a6c <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e207      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d1a:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d0f0      	beq.n	8000d08 <HAL_RCC_OscConfig+0xc0>
 8000d26:	e014      	b.n	8000d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d28:	f7ff fea0 	bl	8000a6c <HAL_GetTick>
 8000d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d2e:	e008      	b.n	8000d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d30:	f7ff fe9c 	bl	8000a6c <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	693b      	ldr	r3, [r7, #16]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	2b64      	cmp	r3, #100	; 0x64
 8000d3c:	d901      	bls.n	8000d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e1f3      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d42:	4b51      	ldr	r3, [pc, #324]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d1f0      	bne.n	8000d30 <HAL_RCC_OscConfig+0xe8>
 8000d4e:	e000      	b.n	8000d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0302 	and.w	r3, r3, #2
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d063      	beq.n	8000e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d00b      	beq.n	8000d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d6a:	4b47      	ldr	r3, [pc, #284]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d72:	2b08      	cmp	r3, #8
 8000d74:	d11c      	bne.n	8000db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d76:	4b44      	ldr	r3, [pc, #272]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d116      	bne.n	8000db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d82:	4b41      	ldr	r3, [pc, #260]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f003 0302 	and.w	r3, r3, #2
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d005      	beq.n	8000d9a <HAL_RCC_OscConfig+0x152>
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	68db      	ldr	r3, [r3, #12]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d001      	beq.n	8000d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	e1c7      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	691b      	ldr	r3, [r3, #16]
 8000da6:	00db      	lsls	r3, r3, #3
 8000da8:	4937      	ldr	r1, [pc, #220]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000daa:	4313      	orrs	r3, r2
 8000dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dae:	e03a      	b.n	8000e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d020      	beq.n	8000dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000db8:	4b34      	ldr	r3, [pc, #208]	; (8000e8c <HAL_RCC_OscConfig+0x244>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dbe:	f7ff fe55 	bl	8000a6c <HAL_GetTick>
 8000dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc4:	e008      	b.n	8000dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dc6:	f7ff fe51 	bl	8000a6c <HAL_GetTick>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	1ad3      	subs	r3, r2, r3
 8000dd0:	2b02      	cmp	r3, #2
 8000dd2:	d901      	bls.n	8000dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dd4:	2303      	movs	r3, #3
 8000dd6:	e1a8      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f003 0302 	and.w	r3, r3, #2
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d0f0      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	691b      	ldr	r3, [r3, #16]
 8000df0:	00db      	lsls	r3, r3, #3
 8000df2:	4925      	ldr	r1, [pc, #148]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000df4:	4313      	orrs	r3, r2
 8000df6:	600b      	str	r3, [r1, #0]
 8000df8:	e015      	b.n	8000e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dfa:	4b24      	ldr	r3, [pc, #144]	; (8000e8c <HAL_RCC_OscConfig+0x244>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e00:	f7ff fe34 	bl	8000a6c <HAL_GetTick>
 8000e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e06:	e008      	b.n	8000e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000e08:	f7ff fe30 	bl	8000a6c <HAL_GetTick>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	2b02      	cmp	r3, #2
 8000e14:	d901      	bls.n	8000e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e16:	2303      	movs	r3, #3
 8000e18:	e187      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e1a:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0302 	and.w	r3, r3, #2
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f0      	bne.n	8000e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0308 	and.w	r3, r3, #8
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d036      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d016      	beq.n	8000e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_RCC_OscConfig+0x248>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e40:	f7ff fe14 	bl	8000a6c <HAL_GetTick>
 8000e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e46:	e008      	b.n	8000e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e48:	f7ff fe10 	bl	8000a6c <HAL_GetTick>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	1ad3      	subs	r3, r2, r3
 8000e52:	2b02      	cmp	r3, #2
 8000e54:	d901      	bls.n	8000e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e56:	2303      	movs	r3, #3
 8000e58:	e167      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <HAL_RCC_OscConfig+0x240>)
 8000e5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0f0      	beq.n	8000e48 <HAL_RCC_OscConfig+0x200>
 8000e66:	e01b      	b.n	8000ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <HAL_RCC_OscConfig+0x248>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e6e:	f7ff fdfd 	bl	8000a6c <HAL_GetTick>
 8000e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e74:	e00e      	b.n	8000e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e76:	f7ff fdf9 	bl	8000a6c <HAL_GetTick>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	1ad3      	subs	r3, r2, r3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d907      	bls.n	8000e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e84:	2303      	movs	r3, #3
 8000e86:	e150      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	42470000 	.word	0x42470000
 8000e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e94:	4b88      	ldr	r3, [pc, #544]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000e96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e98:	f003 0302 	and.w	r3, r3, #2
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d1ea      	bne.n	8000e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f003 0304 	and.w	r3, r3, #4
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	f000 8097 	beq.w	8000fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000eb2:	4b81      	ldr	r3, [pc, #516]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10f      	bne.n	8000ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b7d      	ldr	r3, [pc, #500]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a7c      	ldr	r2, [pc, #496]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b7a      	ldr	r3, [pc, #488]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eda:	2301      	movs	r3, #1
 8000edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ede:	4b77      	ldr	r3, [pc, #476]	; (80010bc <HAL_RCC_OscConfig+0x474>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d118      	bne.n	8000f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000eea:	4b74      	ldr	r3, [pc, #464]	; (80010bc <HAL_RCC_OscConfig+0x474>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a73      	ldr	r2, [pc, #460]	; (80010bc <HAL_RCC_OscConfig+0x474>)
 8000ef0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fdb9 	bl	8000a6c <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000efe:	f7ff fdb5 	bl	8000a6c <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e10c      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f10:	4b6a      	ldr	r3, [pc, #424]	; (80010bc <HAL_RCC_OscConfig+0x474>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d0f0      	beq.n	8000efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d106      	bne.n	8000f32 <HAL_RCC_OscConfig+0x2ea>
 8000f24:	4b64      	ldr	r3, [pc, #400]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f28:	4a63      	ldr	r2, [pc, #396]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f2a:	f043 0301 	orr.w	r3, r3, #1
 8000f2e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f30:	e01c      	b.n	8000f6c <HAL_RCC_OscConfig+0x324>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	689b      	ldr	r3, [r3, #8]
 8000f36:	2b05      	cmp	r3, #5
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x30c>
 8000f3a:	4b5f      	ldr	r3, [pc, #380]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3e:	4a5e      	ldr	r2, [pc, #376]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6713      	str	r3, [r2, #112]	; 0x70
 8000f46:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f4a:	4a5b      	ldr	r2, [pc, #364]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	6713      	str	r3, [r2, #112]	; 0x70
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0x324>
 8000f54:	4b58      	ldr	r3, [pc, #352]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f58:	4a57      	ldr	r2, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f5a:	f023 0301 	bic.w	r3, r3, #1
 8000f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f60:	4b55      	ldr	r3, [pc, #340]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f64:	4a54      	ldr	r2, [pc, #336]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f66:	f023 0304 	bic.w	r3, r3, #4
 8000f6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	689b      	ldr	r3, [r3, #8]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d015      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f74:	f7ff fd7a 	bl	8000a6c <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f7a:	e00a      	b.n	8000f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fd76 	bl	8000a6c <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e0cb      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f92:	4b49      	ldr	r3, [pc, #292]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0ee      	beq.n	8000f7c <HAL_RCC_OscConfig+0x334>
 8000f9e:	e014      	b.n	8000fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa0:	f7ff fd64 	bl	8000a6c <HAL_GetTick>
 8000fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa6:	e00a      	b.n	8000fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa8:	f7ff fd60 	bl	8000a6c <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d901      	bls.n	8000fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e0b5      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fbe:	4b3e      	ldr	r3, [pc, #248]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ee      	bne.n	8000fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fca:	7dfb      	ldrb	r3, [r7, #23]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd0:	4b39      	ldr	r3, [pc, #228]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80a1 	beq.w	8001128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fe6:	4b34      	ldr	r3, [pc, #208]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8000fe8:	689b      	ldr	r3, [r3, #8]
 8000fea:	f003 030c 	and.w	r3, r3, #12
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d05c      	beq.n	80010ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d141      	bne.n	800107e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ffa:	4b31      	ldr	r3, [pc, #196]	; (80010c0 <HAL_RCC_OscConfig+0x478>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001000:	f7ff fd34 	bl	8000a6c <HAL_GetTick>
 8001004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001006:	e008      	b.n	800101a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001008:	f7ff fd30 	bl	8000a6c <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	1ad3      	subs	r3, r2, r3
 8001012:	2b02      	cmp	r3, #2
 8001014:	d901      	bls.n	800101a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001016:	2303      	movs	r3, #3
 8001018:	e087      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800101a:	4b27      	ldr	r3, [pc, #156]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f0      	bne.n	8001008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	69da      	ldr	r2, [r3, #28]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a1b      	ldr	r3, [r3, #32]
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001034:	019b      	lsls	r3, r3, #6
 8001036:	431a      	orrs	r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800103c:	085b      	lsrs	r3, r3, #1
 800103e:	3b01      	subs	r3, #1
 8001040:	041b      	lsls	r3, r3, #16
 8001042:	431a      	orrs	r2, r3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001048:	061b      	lsls	r3, r3, #24
 800104a:	491b      	ldr	r1, [pc, #108]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 800104c:	4313      	orrs	r3, r2
 800104e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_RCC_OscConfig+0x478>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001056:	f7ff fd09 	bl	8000a6c <HAL_GetTick>
 800105a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800105c:	e008      	b.n	8001070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800105e:	f7ff fd05 	bl	8000a6c <HAL_GetTick>
 8001062:	4602      	mov	r2, r0
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	2b02      	cmp	r3, #2
 800106a:	d901      	bls.n	8001070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800106c:	2303      	movs	r3, #3
 800106e:	e05c      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0f0      	beq.n	800105e <HAL_RCC_OscConfig+0x416>
 800107c:	e054      	b.n	8001128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800107e:	4b10      	ldr	r3, [pc, #64]	; (80010c0 <HAL_RCC_OscConfig+0x478>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fcf2 	bl	8000a6c <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800108c:	f7ff fcee 	bl	8000a6c <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e045      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800109e:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_RCC_OscConfig+0x470>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x444>
 80010aa:	e03d      	b.n	8001128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	699b      	ldr	r3, [r3, #24]
 80010b0:	2b01      	cmp	r3, #1
 80010b2:	d107      	bne.n	80010c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e038      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40007000 	.word	0x40007000
 80010c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_RCC_OscConfig+0x4ec>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	699b      	ldr	r3, [r3, #24]
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d028      	beq.n	8001124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010dc:	429a      	cmp	r2, r3
 80010de:	d121      	bne.n	8001124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d11a      	bne.n	8001124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010ee:	68fa      	ldr	r2, [r7, #12]
 80010f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010f4:	4013      	ands	r3, r2
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d111      	bne.n	8001124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110a:	085b      	lsrs	r3, r3, #1
 800110c:	3b01      	subs	r3, #1
 800110e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001110:	429a      	cmp	r2, r3
 8001112:	d107      	bne.n	8001124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800111e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001120:	429a      	cmp	r2, r3
 8001122:	d001      	beq.n	8001128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3718      	adds	r7, #24
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800

08001138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d101      	bne.n	800114c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0cc      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800114c:	4b68      	ldr	r3, [pc, #416]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	683a      	ldr	r2, [r7, #0]
 8001156:	429a      	cmp	r2, r3
 8001158:	d90c      	bls.n	8001174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800115a:	4b65      	ldr	r3, [pc, #404]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4a58      	ldr	r2, [pc, #352]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	4a52      	ldr	r2, [pc, #328]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d044      	beq.n	8001258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d119      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d003      	beq.n	80011f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d107      	bne.n	8001206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011f6:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d109      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e06f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001206:	4b3b      	ldr	r3, [pc, #236]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0302 	and.w	r3, r3, #2
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e067      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001216:	4b37      	ldr	r3, [pc, #220]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f023 0203 	bic.w	r2, r3, #3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	4934      	ldr	r1, [pc, #208]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	4313      	orrs	r3, r2
 8001226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001228:	f7ff fc20 	bl	8000a6c <HAL_GetTick>
 800122c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800122e:	e00a      	b.n	8001246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001230:	f7ff fc1c 	bl	8000a6c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	f241 3288 	movw	r2, #5000	; 0x1388
 800123e:	4293      	cmp	r3, r2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e04f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001246:	4b2b      	ldr	r3, [pc, #172]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 020c 	and.w	r2, r3, #12
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	009b      	lsls	r3, r3, #2
 8001254:	429a      	cmp	r2, r3
 8001256:	d1eb      	bne.n	8001230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001258:	4b25      	ldr	r3, [pc, #148]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	683a      	ldr	r2, [r7, #0]
 8001262:	429a      	cmp	r2, r3
 8001264:	d20c      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001266:	4b22      	ldr	r3, [pc, #136]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001268:	683a      	ldr	r2, [r7, #0]
 800126a:	b2d2      	uxtb	r2, r2
 800126c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	; (80012f0 <HAL_RCC_ClockConfig+0x1b8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800128e:	689b      	ldr	r3, [r3, #8]
 8001290:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 800129a:	4313      	orrs	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012aa:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f821 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <HAL_RCC_ClockConfig+0x1bc>)
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	; (80012f8 <HAL_RCC_ClockConfig+0x1c0>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	; (80012fc <HAL_RCC_ClockConfig+0x1c4>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <HAL_RCC_ClockConfig+0x1c8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff fab6 	bl	8000850 <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40023c00 	.word	0x40023c00
 80012f4:	40023800 	.word	0x40023800
 80012f8:	080057bc 	.word	0x080057bc
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001308:	b090      	sub	sp, #64	; 0x40
 800130a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800130c:	2300      	movs	r3, #0
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
 8001310:	2300      	movs	r3, #0
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001314:	2300      	movs	r3, #0
 8001316:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001318:	2300      	movs	r3, #0
 800131a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800131c:	4b59      	ldr	r3, [pc, #356]	; (8001484 <HAL_RCC_GetSysClockFreq+0x180>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 030c 	and.w	r3, r3, #12
 8001324:	2b08      	cmp	r3, #8
 8001326:	d00d      	beq.n	8001344 <HAL_RCC_GetSysClockFreq+0x40>
 8001328:	2b08      	cmp	r3, #8
 800132a:	f200 80a1 	bhi.w	8001470 <HAL_RCC_GetSysClockFreq+0x16c>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <HAL_RCC_GetSysClockFreq+0x34>
 8001332:	2b04      	cmp	r3, #4
 8001334:	d003      	beq.n	800133e <HAL_RCC_GetSysClockFreq+0x3a>
 8001336:	e09b      	b.n	8001470 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001338:	4b53      	ldr	r3, [pc, #332]	; (8001488 <HAL_RCC_GetSysClockFreq+0x184>)
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800133c:	e09b      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <HAL_RCC_GetSysClockFreq+0x188>)
 8001340:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001342:	e098      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001344:	4b4f      	ldr	r3, [pc, #316]	; (8001484 <HAL_RCC_GetSysClockFreq+0x180>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800134c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800134e:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <HAL_RCC_GetSysClockFreq+0x180>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d028      	beq.n	80013ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_RCC_GetSysClockFreq+0x180>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	099b      	lsrs	r3, r3, #6
 8001360:	2200      	movs	r2, #0
 8001362:	623b      	str	r3, [r7, #32]
 8001364:	627a      	str	r2, [r7, #36]	; 0x24
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800136c:	2100      	movs	r1, #0
 800136e:	4b47      	ldr	r3, [pc, #284]	; (800148c <HAL_RCC_GetSysClockFreq+0x188>)
 8001370:	fb03 f201 	mul.w	r2, r3, r1
 8001374:	2300      	movs	r3, #0
 8001376:	fb00 f303 	mul.w	r3, r0, r3
 800137a:	4413      	add	r3, r2
 800137c:	4a43      	ldr	r2, [pc, #268]	; (800148c <HAL_RCC_GetSysClockFreq+0x188>)
 800137e:	fba0 1202 	umull	r1, r2, r0, r2
 8001382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001384:	460a      	mov	r2, r1
 8001386:	62ba      	str	r2, [r7, #40]	; 0x28
 8001388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800138a:	4413      	add	r3, r2
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001390:	2200      	movs	r2, #0
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	61fa      	str	r2, [r7, #28]
 8001396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800139a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800139e:	f7fe ffb7 	bl	8000310 <__aeabi_uldivmod>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4613      	mov	r3, r2
 80013a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80013aa:	e053      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ac:	4b35      	ldr	r3, [pc, #212]	; (8001484 <HAL_RCC_GetSysClockFreq+0x180>)
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	2200      	movs	r2, #0
 80013b4:	613b      	str	r3, [r7, #16]
 80013b6:	617a      	str	r2, [r7, #20]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80013be:	f04f 0b00 	mov.w	fp, #0
 80013c2:	4652      	mov	r2, sl
 80013c4:	465b      	mov	r3, fp
 80013c6:	f04f 0000 	mov.w	r0, #0
 80013ca:	f04f 0100 	mov.w	r1, #0
 80013ce:	0159      	lsls	r1, r3, #5
 80013d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013d4:	0150      	lsls	r0, r2, #5
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	ebb2 080a 	subs.w	r8, r2, sl
 80013de:	eb63 090b 	sbc.w	r9, r3, fp
 80013e2:	f04f 0200 	mov.w	r2, #0
 80013e6:	f04f 0300 	mov.w	r3, #0
 80013ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80013ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80013f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80013f6:	ebb2 0408 	subs.w	r4, r2, r8
 80013fa:	eb63 0509 	sbc.w	r5, r3, r9
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	00eb      	lsls	r3, r5, #3
 8001408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800140c:	00e2      	lsls	r2, r4, #3
 800140e:	4614      	mov	r4, r2
 8001410:	461d      	mov	r5, r3
 8001412:	eb14 030a 	adds.w	r3, r4, sl
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	eb45 030b 	adc.w	r3, r5, fp
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	f04f 0200 	mov.w	r2, #0
 8001422:	f04f 0300 	mov.w	r3, #0
 8001426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800142a:	4629      	mov	r1, r5
 800142c:	028b      	lsls	r3, r1, #10
 800142e:	4621      	mov	r1, r4
 8001430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001434:	4621      	mov	r1, r4
 8001436:	028a      	lsls	r2, r1, #10
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800143e:	2200      	movs	r2, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	60fa      	str	r2, [r7, #12]
 8001444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001448:	f7fe ff62 	bl	8000310 <__aeabi_uldivmod>
 800144c:	4602      	mov	r2, r0
 800144e:	460b      	mov	r3, r1
 8001450:	4613      	mov	r3, r2
 8001452:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001454:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_GetSysClockFreq+0x180>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	0c1b      	lsrs	r3, r3, #16
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	3301      	adds	r3, #1
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	fbb2 f3f3 	udiv	r3, r2, r3
 800146c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800146e:	e002      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <HAL_RCC_GetSysClockFreq+0x184>)
 8001472:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001478:	4618      	mov	r0, r3
 800147a:	3740      	adds	r7, #64	; 0x40
 800147c:	46bd      	mov	sp, r7
 800147e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800
 8001488:	00f42400 	.word	0x00f42400
 800148c:	017d7840 	.word	0x017d7840

08001490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000000 	.word	0x20000000

080014a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80014ac:	f7ff fff0 	bl	8001490 <HAL_RCC_GetHCLKFreq>
 80014b0:	4602      	mov	r2, r0
 80014b2:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	0a9b      	lsrs	r3, r3, #10
 80014b8:	f003 0307 	and.w	r3, r3, #7
 80014bc:	4903      	ldr	r1, [pc, #12]	; (80014cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014be:	5ccb      	ldrb	r3, [r1, r3]
 80014c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	080057cc 	.word	0x080057cc

080014d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	220f      	movs	r2, #15
 80014de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014e0:	4b12      	ldr	r3, [pc, #72]	; (800152c <HAL_RCC_GetClockConfig+0x5c>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0203 	and.w	r2, r3, #3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <HAL_RCC_GetClockConfig+0x5c>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <HAL_RCC_GetClockConfig+0x5c>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <HAL_RCC_GetClockConfig+0x5c>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	08db      	lsrs	r3, r3, #3
 800150a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001512:	4b07      	ldr	r3, [pc, #28]	; (8001530 <HAL_RCC_GetClockConfig+0x60>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0207 	and.w	r2, r3, #7
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	601a      	str	r2, [r3, #0]
}
 800151e:	bf00      	nop
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40023800 	.word	0x40023800
 8001530:	40023c00 	.word	0x40023c00

08001534 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d101      	bne.n	8001546 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	e041      	b.n	80015ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800154c:	b2db      	uxtb	r3, r3
 800154e:	2b00      	cmp	r3, #0
 8001550:	d106      	bne.n	8001560 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2200      	movs	r2, #0
 8001556:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 f839 	bl	80015d2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2202      	movs	r2, #2
 8001564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3304      	adds	r3, #4
 8001570:	4619      	mov	r1, r3
 8001572:	4610      	mov	r0, r2
 8001574:	f000 f9d8 	bl	8001928 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2201      	movs	r2, #1
 80015ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015d2:	b480      	push	{r7}
 80015d4:	b083      	sub	sp, #12
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d001      	beq.n	8001600 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e04e      	b.n	800169e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2202      	movs	r2, #2
 8001604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68da      	ldr	r2, [r3, #12]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_TIM_Base_Start_IT+0xc4>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d022      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800162a:	d01d      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a1f      	ldr	r2, [pc, #124]	; (80016b0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d018      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a1e      	ldr	r2, [pc, #120]	; (80016b4 <HAL_TIM_Base_Start_IT+0xcc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d013      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a1c      	ldr	r2, [pc, #112]	; (80016b8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d00e      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a1b      	ldr	r2, [pc, #108]	; (80016bc <HAL_TIM_Base_Start_IT+0xd4>)
 8001650:	4293      	cmp	r3, r2
 8001652:	d009      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a19      	ldr	r2, [pc, #100]	; (80016c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d004      	beq.n	8001668 <HAL_TIM_Base_Start_IT+0x80>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a18      	ldr	r2, [pc, #96]	; (80016c4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d111      	bne.n	800168c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 0307 	and.w	r3, r3, #7
 8001672:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2b06      	cmp	r3, #6
 8001678:	d010      	beq.n	800169c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f042 0201 	orr.w	r2, r2, #1
 8001688:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800168a:	e007      	b.n	800169c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f042 0201 	orr.w	r2, r2, #1
 800169a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40010000 	.word	0x40010000
 80016b0:	40000400 	.word	0x40000400
 80016b4:	40000800 	.word	0x40000800
 80016b8:	40000c00 	.word	0x40000c00
 80016bc:	40010400 	.word	0x40010400
 80016c0:	40014000 	.word	0x40014000
 80016c4:	40001800 	.word	0x40001800

080016c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d122      	bne.n	8001724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0302 	and.w	r3, r3, #2
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d11b      	bne.n	8001724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0202 	mvn.w	r2, #2
 80016f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2201      	movs	r2, #1
 80016fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8ee 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 8001710:	e005      	b.n	800171e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8e0 	bl	80018d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8f1 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b04      	cmp	r3, #4
 8001730:	d122      	bne.n	8001778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0304 	and.w	r3, r3, #4
 800173c:	2b04      	cmp	r3, #4
 800173e:	d11b      	bne.n	8001778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0204 	mvn.w	r2, #4
 8001748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2202      	movs	r2, #2
 800174e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f8c4 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 8001764:	e005      	b.n	8001772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f8b6 	bl	80018d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f8c7 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b08      	cmp	r3, #8
 8001784:	d122      	bne.n	80017cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0308 	and.w	r3, r3, #8
 8001790:	2b08      	cmp	r3, #8
 8001792:	d11b      	bne.n	80017cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0208 	mvn.w	r2, #8
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2204      	movs	r2, #4
 80017a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f003 0303 	and.w	r3, r3, #3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f89a 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f88c 	bl	80018d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f89d 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0310 	and.w	r3, r3, #16
 80017d6:	2b10      	cmp	r3, #16
 80017d8:	d122      	bne.n	8001820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0310 	and.w	r3, r3, #16
 80017e4:	2b10      	cmp	r3, #16
 80017e6:	d11b      	bne.n	8001820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0210 	mvn.w	r2, #16
 80017f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2208      	movs	r2, #8
 80017f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001802:	2b00      	cmp	r3, #0
 8001804:	d003      	beq.n	800180e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f000 f870 	bl	80018ec <HAL_TIM_IC_CaptureCallback>
 800180c:	e005      	b.n	800181a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f000 f862 	bl	80018d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001814:	6878      	ldr	r0, [r7, #4]
 8001816:	f000 f873 	bl	8001900 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2200      	movs	r2, #0
 800181e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b01      	cmp	r3, #1
 800182c:	d10e      	bne.n	800184c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b01      	cmp	r3, #1
 800183a:	d107      	bne.n	800184c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f06f 0201 	mvn.w	r2, #1
 8001844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7fe ffc2 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001856:	2b80      	cmp	r3, #128	; 0x80
 8001858:	d10e      	bne.n	8001878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001864:	2b80      	cmp	r3, #128	; 0x80
 8001866:	d107      	bne.n	8001878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f902 	bl	8001a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001882:	2b40      	cmp	r3, #64	; 0x40
 8001884:	d10e      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001890:	2b40      	cmp	r3, #64	; 0x40
 8001892:	d107      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800189c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f000 f838 	bl	8001914 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0320 	and.w	r3, r3, #32
 80018bc:	2b20      	cmp	r3, #32
 80018be:	d107      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0220 	mvn.w	r2, #32
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f8cc 	bl	8001a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr

08001914 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a40      	ldr	r2, [pc, #256]	; (8001a3c <TIM_Base_SetConfig+0x114>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d013      	beq.n	8001968 <TIM_Base_SetConfig+0x40>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001946:	d00f      	beq.n	8001968 <TIM_Base_SetConfig+0x40>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a3d      	ldr	r2, [pc, #244]	; (8001a40 <TIM_Base_SetConfig+0x118>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d00b      	beq.n	8001968 <TIM_Base_SetConfig+0x40>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a3c      	ldr	r2, [pc, #240]	; (8001a44 <TIM_Base_SetConfig+0x11c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d007      	beq.n	8001968 <TIM_Base_SetConfig+0x40>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a3b      	ldr	r2, [pc, #236]	; (8001a48 <TIM_Base_SetConfig+0x120>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d003      	beq.n	8001968 <TIM_Base_SetConfig+0x40>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <TIM_Base_SetConfig+0x124>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d108      	bne.n	800197a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800196e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	68fa      	ldr	r2, [r7, #12]
 8001976:	4313      	orrs	r3, r2
 8001978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a2f      	ldr	r2, [pc, #188]	; (8001a3c <TIM_Base_SetConfig+0x114>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d02b      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001988:	d027      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a2c      	ldr	r2, [pc, #176]	; (8001a40 <TIM_Base_SetConfig+0x118>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d023      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a2b      	ldr	r2, [pc, #172]	; (8001a44 <TIM_Base_SetConfig+0x11c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d01f      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <TIM_Base_SetConfig+0x120>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d01b      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a29      	ldr	r2, [pc, #164]	; (8001a4c <TIM_Base_SetConfig+0x124>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d017      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a28      	ldr	r2, [pc, #160]	; (8001a50 <TIM_Base_SetConfig+0x128>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d013      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4a27      	ldr	r2, [pc, #156]	; (8001a54 <TIM_Base_SetConfig+0x12c>)
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d00f      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a26      	ldr	r2, [pc, #152]	; (8001a58 <TIM_Base_SetConfig+0x130>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d00b      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a25      	ldr	r2, [pc, #148]	; (8001a5c <TIM_Base_SetConfig+0x134>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d007      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a24      	ldr	r2, [pc, #144]	; (8001a60 <TIM_Base_SetConfig+0x138>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d003      	beq.n	80019da <TIM_Base_SetConfig+0xb2>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a23      	ldr	r2, [pc, #140]	; (8001a64 <TIM_Base_SetConfig+0x13c>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d108      	bne.n	80019ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	68db      	ldr	r3, [r3, #12]
 80019e6:	68fa      	ldr	r2, [r7, #12]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	689a      	ldr	r2, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <TIM_Base_SetConfig+0x114>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d003      	beq.n	8001a20 <TIM_Base_SetConfig+0xf8>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	4a0c      	ldr	r2, [pc, #48]	; (8001a4c <TIM_Base_SetConfig+0x124>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d103      	bne.n	8001a28 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	691a      	ldr	r2, [r3, #16]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	615a      	str	r2, [r3, #20]
}
 8001a2e:	bf00      	nop
 8001a30:	3714      	adds	r7, #20
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	40010000 	.word	0x40010000
 8001a40:	40000400 	.word	0x40000400
 8001a44:	40000800 	.word	0x40000800
 8001a48:	40000c00 	.word	0x40000c00
 8001a4c:	40010400 	.word	0x40010400
 8001a50:	40014000 	.word	0x40014000
 8001a54:	40014400 	.word	0x40014400
 8001a58:	40014800 	.word	0x40014800
 8001a5c:	40001800 	.word	0x40001800
 8001a60:	40001c00 	.word	0x40001c00
 8001a64:	40002000 	.word	0x40002000

08001a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a70:	bf00      	nop
 8001a72:	370c      	adds	r7, #12
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a84:	bf00      	nop
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f103 0208 	add.w	r2, r3, #8
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8001aa8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f103 0208 	add.w	r2, r3, #8
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f103 0208 	add.w	r2, r3, #8
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001aea:	b480      	push	{r7}
 8001aec:	b085      	sub	sp, #20
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	687a      	ldr	r2, [r7, #4]
 8001afe:	6892      	ldr	r2, [r2, #8]
 8001b00:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6852      	ldr	r2, [r2, #4]
 8001b0a:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	429a      	cmp	r2, r3
 8001b14:	d103      	bne.n	8001b1e <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689a      	ldr	r2, [r3, #8]
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1e5a      	subs	r2, r3, #1
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b08c      	sub	sp, #48	; 0x30
 8001b42:	af04      	add	r7, sp, #16
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	009b      	lsls	r3, r3, #2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 ffc2 	bl	8002adc <pvPortMalloc>
 8001b58:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d013      	beq.n	8001b88 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001b60:	2058      	movs	r0, #88	; 0x58
 8001b62:	f000 ffbb 	bl	8002adc <pvPortMalloc>
 8001b66:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d008      	beq.n	8001b80 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8001b6e:	2258      	movs	r2, #88	; 0x58
 8001b70:	2100      	movs	r1, #0
 8001b72:	69f8      	ldr	r0, [r7, #28]
 8001b74:	f003 f902 	bl	8004d7c <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	697a      	ldr	r2, [r7, #20]
 8001b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8001b7e:	e005      	b.n	8001b8c <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8001b80:	6978      	ldr	r0, [r7, #20]
 8001b82:	f001 f865 	bl	8002c50 <vPortFree>
 8001b86:	e001      	b.n	8001b8c <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d013      	beq.n	8001bba <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	2300      	movs	r3, #0
 8001b96:	9303      	str	r3, [sp, #12]
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68b9      	ldr	r1, [r7, #8]
 8001ba8:	68f8      	ldr	r0, [r7, #12]
 8001baa:	f000 f80e 	bl	8001bca <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001bae:	69f8      	ldr	r0, [r7, #28]
 8001bb0:	f000 f89a 	bl	8001ce8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	61bb      	str	r3, [r7, #24]
 8001bb8:	e002      	b.n	8001bc0 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001bba:	f04f 33ff 	mov.w	r3, #4294967295
 8001bbe:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001bc0:	69bb      	ldr	r3, [r7, #24]
    }
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3720      	adds	r7, #32
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b088      	sub	sp, #32
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	60f8      	str	r0, [r7, #12]
 8001bd2:	60b9      	str	r1, [r7, #8]
 8001bd4:	607a      	str	r2, [r7, #4]
 8001bd6:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bda:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	461a      	mov	r2, r3
 8001be2:	21a5      	movs	r1, #165	; 0xa5
 8001be4:	f003 f8ca 	bl	8004d7c <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001bfa:	69bb      	ldr	r3, [r7, #24]
 8001bfc:	f023 0307 	bic.w	r3, r3, #7
 8001c00:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <prvInitialiseNewTask+0x58>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8001c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c10:	f383 8811 	msr	BASEPRI, r3
 8001c14:	f3bf 8f6f 	isb	sy
 8001c18:	f3bf 8f4f 	dsb	sy
 8001c1c:	617b      	str	r3, [r7, #20]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8001c1e:	bf00      	nop
 8001c20:	e7fe      	b.n	8001c20 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01e      	beq.n	8001c66 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
 8001c2c:	e012      	b.n	8001c54 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001c2e:	68ba      	ldr	r2, [r7, #8]
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	4413      	add	r3, r2
 8001c34:	7819      	ldrb	r1, [r3, #0]
 8001c36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	3334      	adds	r3, #52	; 0x34
 8001c3e:	460a      	mov	r2, r1
 8001c40:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	4413      	add	r3, r2
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	3301      	adds	r3, #1
 8001c52:	61fb      	str	r3, [r7, #28]
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	2b09      	cmp	r3, #9
 8001c58:	d9e9      	bls.n	8001c2e <prvInitialiseNewTask+0x64>
 8001c5a:	e000      	b.n	8001c5e <prvInitialiseNewTask+0x94>
            {
                break;
 8001c5c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8001c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d90a      	bls.n	8001c82 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8001c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c70:	f383 8811 	msr	BASEPRI, r3
 8001c74:	f3bf 8f6f 	isb	sy
 8001c78:	f3bf 8f4f 	dsb	sy
 8001c7c:	613b      	str	r3, [r7, #16]
    }
 8001c7e:	bf00      	nop
 8001c80:	e7fe      	b.n	8001c80 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c84:	2b04      	cmp	r3, #4
 8001c86:	d901      	bls.n	8001c8c <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001c88:	2304      	movs	r3, #4
 8001c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c90:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8001c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c96:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c9a:	3304      	adds	r3, #4
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff ff17 	bl	8001ad0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ca4:	3318      	adds	r3, #24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff12 	bl	8001ad0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cb0:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb4:	f1c3 0205 	rsb	r2, r3, #5
 8001cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cba:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	69b8      	ldr	r0, [r7, #24]
 8001cc8:	f000 fc30 	bl	800252c <pxPortInitialiseStack>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cd0:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cda:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001cdc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001ce8:	b5b0      	push	{r4, r5, r7, lr}
 8001cea:	b086      	sub	sp, #24
 8001cec:	af02      	add	r7, sp, #8
 8001cee:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001cf0:	f000 fdc8 	bl	8002884 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001cf4:	4b49      	ldr	r3, [pc, #292]	; (8001e1c <prvAddNewTaskToReadyList+0x134>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <prvAddNewTaskToReadyList+0x134>)
 8001cfc:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001cfe:	4b48      	ldr	r3, [pc, #288]	; (8001e20 <prvAddNewTaskToReadyList+0x138>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d109      	bne.n	8001d1a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001d06:	4a46      	ldr	r2, [pc, #280]	; (8001e20 <prvAddNewTaskToReadyList+0x138>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <prvAddNewTaskToReadyList+0x134>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d110      	bne.n	8001d36 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001d14:	f000 fb70 	bl	80023f8 <prvInitialiseTaskLists>
 8001d18:	e00d      	b.n	8001d36 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001d1a:	4b42      	ldr	r3, [pc, #264]	; (8001e24 <prvAddNewTaskToReadyList+0x13c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d109      	bne.n	8001d36 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001d22:	4b3f      	ldr	r3, [pc, #252]	; (8001e20 <prvAddNewTaskToReadyList+0x138>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d802      	bhi.n	8001d36 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001d30:	4a3b      	ldr	r2, [pc, #236]	; (8001e20 <prvAddNewTaskToReadyList+0x138>)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001d36:	4b3c      	ldr	r3, [pc, #240]	; (8001e28 <prvAddNewTaskToReadyList+0x140>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	4a3a      	ldr	r2, [pc, #232]	; (8001e28 <prvAddNewTaskToReadyList+0x140>)
 8001d3e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <prvAddNewTaskToReadyList+0x140>)
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d016      	beq.n	8001d7c <prvAddNewTaskToReadyList+0x94>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 fd99 	bl	8004888 <SEGGER_SYSVIEW_OnTaskCreate>
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	461d      	mov	r5, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461c      	mov	r4, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	1ae3      	subs	r3, r4, r3
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	462b      	mov	r3, r5
 8001d78:	f001 f908 	bl	8002f8c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f002 fe06 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2201      	movs	r2, #1
 8001d8a:	409a      	lsls	r2, r3
 8001d8c:	4b27      	ldr	r3, [pc, #156]	; (8001e2c <prvAddNewTaskToReadyList+0x144>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <prvAddNewTaskToReadyList+0x144>)
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d9a:	4925      	ldr	r1, [pc, #148]	; (8001e30 <prvAddNewTaskToReadyList+0x148>)
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	440b      	add	r3, r1
 8001da6:	3304      	adds	r3, #4
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	609a      	str	r2, [r3, #8]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689a      	ldr	r2, [r3, #8]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	3204      	adds	r2, #4
 8001dc2:	605a      	str	r2, [r3, #4]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	1d1a      	adds	r2, r3, #4
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	4a15      	ldr	r2, [pc, #84]	; (8001e30 <prvAddNewTaskToReadyList+0x148>)
 8001dda:	441a      	add	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	615a      	str	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de4:	4912      	ldr	r1, [pc, #72]	; (8001e30 <prvAddNewTaskToReadyList+0x148>)
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	440b      	add	r3, r1
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	1c59      	adds	r1, r3, #1
 8001df4:	480e      	ldr	r0, [pc, #56]	; (8001e30 <prvAddNewTaskToReadyList+0x148>)
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4403      	add	r3, r0
 8001e00:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001e02:	f000 fd6f 	bl	80028e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001e06:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <prvAddNewTaskToReadyList+0x13c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e0e:	4b04      	ldr	r3, [pc, #16]	; (8001e20 <prvAddNewTaskToReadyList+0x138>)
 8001e10:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001e12:	bf00      	nop
 8001e14:	3710      	adds	r7, #16
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	200001a4 	.word	0x200001a4
 8001e20:	200000cc 	.word	0x200000cc
 8001e24:	200001b0 	.word	0x200001b0
 8001e28:	200001c0 	.word	0x200001c0
 8001e2c:	200001ac 	.word	0x200001ac
 8001e30:	200000d0 	.word	0x200000d0

08001e34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <vTaskStartScheduler+0x98>)
 8001e3c:	9301      	str	r3, [sp, #4]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	9300      	str	r3, [sp, #0]
 8001e42:	2300      	movs	r3, #0
 8001e44:	2282      	movs	r2, #130	; 0x82
 8001e46:	4922      	ldr	r1, [pc, #136]	; (8001ed0 <vTaskStartScheduler+0x9c>)
 8001e48:	4822      	ldr	r0, [pc, #136]	; (8001ed4 <vTaskStartScheduler+0xa0>)
 8001e4a:	f7ff fe78 	bl	8001b3e <xTaskCreate>
 8001e4e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d124      	bne.n	8001ea0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8001e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e5a:	f383 8811 	msr	BASEPRI, r3
 8001e5e:	f3bf 8f6f 	isb	sy
 8001e62:	f3bf 8f4f 	dsb	sy
 8001e66:	60bb      	str	r3, [r7, #8]
    }
 8001e68:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <vTaskStartScheduler+0xa4>)
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001e72:	4b1a      	ldr	r3, [pc, #104]	; (8001edc <vTaskStartScheduler+0xa8>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001e78:	4b19      	ldr	r3, [pc, #100]	; (8001ee0 <vTaskStartScheduler+0xac>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001e7e:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <vTaskStartScheduler+0xb0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	4b12      	ldr	r3, [pc, #72]	; (8001ecc <vTaskStartScheduler+0x98>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d102      	bne.n	8001e90 <vTaskStartScheduler+0x5c>
 8001e8a:	f002 fce1 	bl	8004850 <SEGGER_SYSVIEW_OnIdle>
 8001e8e:	e004      	b.n	8001e9a <vTaskStartScheduler+0x66>
 8001e90:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <vTaskStartScheduler+0xb0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f002 fd39 	bl	800490c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8001e9a:	f000 fbd3 	bl	8002644 <xPortStartScheduler>
 8001e9e:	e00e      	b.n	8001ebe <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea6:	d10a      	bne.n	8001ebe <vTaskStartScheduler+0x8a>
        __asm volatile
 8001ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eac:	f383 8811 	msr	BASEPRI, r3
 8001eb0:	f3bf 8f6f 	isb	sy
 8001eb4:	f3bf 8f4f 	dsb	sy
 8001eb8:	607b      	str	r3, [r7, #4]
    }
 8001eba:	bf00      	nop
 8001ebc:	e7fe      	b.n	8001ebc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <vTaskStartScheduler+0xb4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	200001c8 	.word	0x200001c8
 8001ed0:	080056f0 	.word	0x080056f0
 8001ed4:	080023d5 	.word	0x080023d5
 8001ed8:	200001c4 	.word	0x200001c4
 8001edc:	200001b0 	.word	0x200001b0
 8001ee0:	200001a8 	.word	0x200001a8
 8001ee4:	200000cc 	.word	0x200000cc
 8001ee8:	2000000c 	.word	0x2000000c

08001eec <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <vTaskSuspendAll+0x18>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a03      	ldr	r2, [pc, #12]	; (8001f04 <vTaskSuspendAll+0x18>)
 8001ef8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	200001cc 	.word	0x200001cc

08001f08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001f16:	4b6d      	ldr	r3, [pc, #436]	; (80020cc <xTaskResumeAll+0x1c4>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10a      	bne.n	8001f34 <xTaskResumeAll+0x2c>
        __asm volatile
 8001f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f22:	f383 8811 	msr	BASEPRI, r3
 8001f26:	f3bf 8f6f 	isb	sy
 8001f2a:	f3bf 8f4f 	dsb	sy
 8001f2e:	607b      	str	r3, [r7, #4]
    }
 8001f30:	bf00      	nop
 8001f32:	e7fe      	b.n	8001f32 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001f34:	f000 fca6 	bl	8002884 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001f38:	4b64      	ldr	r3, [pc, #400]	; (80020cc <xTaskResumeAll+0x1c4>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	4a63      	ldr	r2, [pc, #396]	; (80020cc <xTaskResumeAll+0x1c4>)
 8001f40:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f42:	4b62      	ldr	r3, [pc, #392]	; (80020cc <xTaskResumeAll+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	f040 80b8 	bne.w	80020bc <xTaskResumeAll+0x1b4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001f4c:	4b60      	ldr	r3, [pc, #384]	; (80020d0 <xTaskResumeAll+0x1c8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 80b3 	beq.w	80020bc <xTaskResumeAll+0x1b4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001f56:	e08e      	b.n	8002076 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f58:	4b5e      	ldr	r3, [pc, #376]	; (80020d4 <xTaskResumeAll+0x1cc>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	69fa      	ldr	r2, [r7, #28]
 8001f6c:	6a12      	ldr	r2, [r2, #32]
 8001f6e:	609a      	str	r2, [r3, #8]
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	6a1b      	ldr	r3, [r3, #32]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	69d2      	ldr	r2, [r2, #28]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3318      	adds	r3, #24
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d103      	bne.n	8001f8e <xTaskResumeAll+0x86>
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	6a1a      	ldr	r2, [r3, #32]
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	2200      	movs	r2, #0
 8001f92:	629a      	str	r2, [r3, #40]	; 0x28
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	1e5a      	subs	r2, r3, #1
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	69fa      	ldr	r2, [r7, #28]
 8001faa:	68d2      	ldr	r2, [r2, #12]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	69fa      	ldr	r2, [r7, #28]
 8001fb4:	6892      	ldr	r2, [r2, #8]
 8001fb6:	605a      	str	r2, [r3, #4]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	685a      	ldr	r2, [r3, #4]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d103      	bne.n	8001fcc <xTaskResumeAll+0xc4>
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	68da      	ldr	r2, [r3, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	615a      	str	r2, [r3, #20]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	1e5a      	subs	r2, r3, #1
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f002 fcd6 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartReady>
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe8:	2201      	movs	r2, #1
 8001fea:	409a      	lsls	r2, r3
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <xTaskResumeAll+0x1d0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	4a39      	ldr	r2, [pc, #228]	; (80020d8 <xTaskResumeAll+0x1d0>)
 8001ff4:	6013      	str	r3, [r2, #0]
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ffa:	4938      	ldr	r1, [pc, #224]	; (80020dc <xTaskResumeAll+0x1d4>)
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	3304      	adds	r3, #4
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	609a      	str	r2, [r3, #8]
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	60da      	str	r2, [r3, #12]
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	3204      	adds	r2, #4
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	1d1a      	adds	r2, r3, #4
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002030:	4613      	mov	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	4a28      	ldr	r2, [pc, #160]	; (80020dc <xTaskResumeAll+0x1d4>)
 800203a:	441a      	add	r2, r3
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	615a      	str	r2, [r3, #20]
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	4925      	ldr	r1, [pc, #148]	; (80020dc <xTaskResumeAll+0x1d4>)
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	1c59      	adds	r1, r3, #1
 8002054:	4821      	ldr	r0, [pc, #132]	; (80020dc <xTaskResumeAll+0x1d4>)
 8002056:	4613      	mov	r3, r2
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4403      	add	r3, r0
 8002060:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002066:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <xTaskResumeAll+0x1d8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	429a      	cmp	r2, r3
 800206e:	d302      	bcc.n	8002076 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002070:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <xTaskResumeAll+0x1dc>)
 8002072:	2201      	movs	r2, #1
 8002074:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002076:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <xTaskResumeAll+0x1cc>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	f47f af6c 	bne.w	8001f58 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002086:	f000 fa35 	bl	80024f4 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800208a:	4b17      	ldr	r3, [pc, #92]	; (80020e8 <xTaskResumeAll+0x1e0>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d010      	beq.n	80020b8 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002096:	f000 f83b 	bl	8002110 <xTaskIncrementTick>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <xTaskResumeAll+0x1dc>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	3b01      	subs	r3, #1
 80020aa:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f1      	bne.n	8002096 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80020b2:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <xTaskResumeAll+0x1e0>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <xTaskResumeAll+0x1dc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80020bc:	f000 fc12 	bl	80028e4 <vPortExitCritical>

    return xAlreadyYielded;
 80020c0:	697b      	ldr	r3, [r7, #20]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3720      	adds	r7, #32
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	200001cc 	.word	0x200001cc
 80020d0:	200001a4 	.word	0x200001a4
 80020d4:	20000164 	.word	0x20000164
 80020d8:	200001ac 	.word	0x200001ac
 80020dc:	200000d0 	.word	0x200000d0
 80020e0:	200000cc 	.word	0x200000cc
 80020e4:	200001b8 	.word	0x200001b8
 80020e8:	200001b4 	.word	0x200001b4

080020ec <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80020f2:	f000 fcb3 	bl	8002a5c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80020f6:	2300      	movs	r3, #0
 80020f8:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80020fa:	4b04      	ldr	r3, [pc, #16]	; (800210c <xTaskGetTickCountFromISR+0x20>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002100:	683b      	ldr	r3, [r7, #0]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	200001a8 	.word	0x200001a8

08002110 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002116:	2300      	movs	r3, #0
 8002118:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800211a:	4b70      	ldr	r3, [pc, #448]	; (80022dc <xTaskIncrementTick+0x1cc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	f040 80d1 	bne.w	80022c6 <xTaskIncrementTick+0x1b6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002124:	4b6e      	ldr	r3, [pc, #440]	; (80022e0 <xTaskIncrementTick+0x1d0>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 800212c:	4a6c      	ldr	r2, [pc, #432]	; (80022e0 <xTaskIncrementTick+0x1d0>)
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d120      	bne.n	800217a <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002138:	4b6a      	ldr	r3, [pc, #424]	; (80022e4 <xTaskIncrementTick+0x1d4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d00a      	beq.n	8002158 <xTaskIncrementTick+0x48>
        __asm volatile
 8002142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002146:	f383 8811 	msr	BASEPRI, r3
 800214a:	f3bf 8f6f 	isb	sy
 800214e:	f3bf 8f4f 	dsb	sy
 8002152:	607b      	str	r3, [r7, #4]
    }
 8002154:	bf00      	nop
 8002156:	e7fe      	b.n	8002156 <xTaskIncrementTick+0x46>
 8002158:	4b62      	ldr	r3, [pc, #392]	; (80022e4 <xTaskIncrementTick+0x1d4>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	4b62      	ldr	r3, [pc, #392]	; (80022e8 <xTaskIncrementTick+0x1d8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a60      	ldr	r2, [pc, #384]	; (80022e4 <xTaskIncrementTick+0x1d4>)
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	4a60      	ldr	r2, [pc, #384]	; (80022e8 <xTaskIncrementTick+0x1d8>)
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	6013      	str	r3, [r2, #0]
 800216c:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <xTaskIncrementTick+0x1dc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	4a5e      	ldr	r2, [pc, #376]	; (80022ec <xTaskIncrementTick+0x1dc>)
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	f000 f9bd 	bl	80024f4 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800217a:	4b5d      	ldr	r3, [pc, #372]	; (80022f0 <xTaskIncrementTick+0x1e0>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6a3a      	ldr	r2, [r7, #32]
 8002180:	429a      	cmp	r2, r3
 8002182:	f0c0 80a5 	bcc.w	80022d0 <xTaskIncrementTick+0x1c0>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002186:	4b57      	ldr	r3, [pc, #348]	; (80022e4 <xTaskIncrementTick+0x1d4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002190:	4b57      	ldr	r3, [pc, #348]	; (80022f0 <xTaskIncrementTick+0x1e0>)
 8002192:	f04f 32ff 	mov.w	r2, #4294967295
 8002196:	601a      	str	r2, [r3, #0]
                    break;
 8002198:	e09a      	b.n	80022d0 <xTaskIncrementTick+0x1c0>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800219a:	4b52      	ldr	r3, [pc, #328]	; (80022e4 <xTaskIncrementTick+0x1d4>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80021aa:	6a3a      	ldr	r2, [r7, #32]
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	429a      	cmp	r2, r3
 80021b0:	d203      	bcs.n	80021ba <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80021b2:	4a4f      	ldr	r2, [pc, #316]	; (80022f0 <xTaskIncrementTick+0x1e0>)
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80021b8:	e08a      	b.n	80022d0 <xTaskIncrementTick+0x1c0>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	695b      	ldr	r3, [r3, #20]
 80021be:	613b      	str	r3, [r7, #16]
 80021c0:	69bb      	ldr	r3, [r7, #24]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	68d2      	ldr	r2, [r2, #12]
 80021c8:	609a      	str	r2, [r3, #8]
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	6892      	ldr	r2, [r2, #8]
 80021d2:	605a      	str	r2, [r3, #4]
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	3304      	adds	r3, #4
 80021dc:	429a      	cmp	r2, r3
 80021de:	d103      	bne.n	80021e8 <xTaskIncrementTick+0xd8>
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	68da      	ldr	r2, [r3, #12]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	605a      	str	r2, [r3, #4]
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	2200      	movs	r2, #0
 80021ec:	615a      	str	r2, [r3, #20]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	1e5a      	subs	r2, r3, #1
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d01e      	beq.n	800223e <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	69db      	ldr	r3, [r3, #28]
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	6a12      	ldr	r2, [r2, #32]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	6a1b      	ldr	r3, [r3, #32]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	69d2      	ldr	r2, [r2, #28]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	3318      	adds	r3, #24
 8002222:	429a      	cmp	r2, r3
 8002224:	d103      	bne.n	800222e <xTaskIncrementTick+0x11e>
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	6a1a      	ldr	r2, [r3, #32]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	605a      	str	r2, [r3, #4]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2200      	movs	r2, #0
 8002232:	629a      	str	r2, [r3, #40]	; 0x28
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	1e5a      	subs	r2, r3, #1
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	4618      	mov	r0, r3
 8002242:	f002 fba5 	bl	8004990 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224a:	2201      	movs	r2, #1
 800224c:	409a      	lsls	r2, r3
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <xTaskIncrementTick+0x1e4>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <xTaskIncrementTick+0x1e4>)
 8002256:	6013      	str	r3, [r2, #0]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800225c:	4926      	ldr	r1, [pc, #152]	; (80022f8 <xTaskIncrementTick+0x1e8>)
 800225e:	4613      	mov	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	4413      	add	r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	440b      	add	r3, r1
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	609a      	str	r2, [r3, #8]
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	60da      	str	r2, [r3, #12]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	3204      	adds	r2, #4
 8002284:	605a      	str	r2, [r3, #4]
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	1d1a      	adds	r2, r3, #4
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	609a      	str	r2, [r3, #8]
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4a17      	ldr	r2, [pc, #92]	; (80022f8 <xTaskIncrementTick+0x1e8>)
 800229c:	441a      	add	r2, r3
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	615a      	str	r2, [r3, #20]
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a6:	4914      	ldr	r1, [pc, #80]	; (80022f8 <xTaskIncrementTick+0x1e8>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	009b      	lsls	r3, r3, #2
 80022ac:	4413      	add	r3, r2
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	1c59      	adds	r1, r3, #1
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <xTaskIncrementTick+0x1e8>)
 80022b8:	4613      	mov	r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4403      	add	r3, r0
 80022c2:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022c4:	e75f      	b.n	8002186 <xTaskIncrementTick+0x76>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <xTaskIncrementTick+0x1ec>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	3301      	adds	r3, #1
 80022cc:	4a0b      	ldr	r2, [pc, #44]	; (80022fc <xTaskIncrementTick+0x1ec>)
 80022ce:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80022d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3728      	adds	r7, #40	; 0x28
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	200001cc 	.word	0x200001cc
 80022e0:	200001a8 	.word	0x200001a8
 80022e4:	2000015c 	.word	0x2000015c
 80022e8:	20000160 	.word	0x20000160
 80022ec:	200001bc 	.word	0x200001bc
 80022f0:	200001c4 	.word	0x200001c4
 80022f4:	200001ac 	.word	0x200001ac
 80022f8:	200000d0 	.word	0x200000d0
 80022fc:	200001b4 	.word	0x200001b4

08002300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b086      	sub	sp, #24
 8002304:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002306:	4b2d      	ldr	r3, [pc, #180]	; (80023bc <vTaskSwitchContext+0xbc>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800230e:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <vTaskSwitchContext+0xc0>)
 8002310:	2201      	movs	r2, #1
 8002312:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002314:	e04d      	b.n	80023b2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002316:	4b2a      	ldr	r3, [pc, #168]	; (80023c0 <vTaskSwitchContext+0xc0>)
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800231c:	4b29      	ldr	r3, [pc, #164]	; (80023c4 <vTaskSwitchContext+0xc4>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800232a:	7afb      	ldrb	r3, [r7, #11]
 800232c:	f1c3 031f 	rsb	r3, r3, #31
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	4925      	ldr	r1, [pc, #148]	; (80023c8 <vTaskSwitchContext+0xc8>)
 8002334:	697a      	ldr	r2, [r7, #20]
 8002336:	4613      	mov	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10a      	bne.n	800235c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234a:	f383 8811 	msr	BASEPRI, r3
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	f3bf 8f4f 	dsb	sy
 8002356:	607b      	str	r3, [r7, #4]
    }
 8002358:	bf00      	nop
 800235a:	e7fe      	b.n	800235a <vTaskSwitchContext+0x5a>
 800235c:	697a      	ldr	r2, [r7, #20]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4a18      	ldr	r2, [pc, #96]	; (80023c8 <vTaskSwitchContext+0xc8>)
 8002368:	4413      	add	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	605a      	str	r2, [r3, #4]
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	3308      	adds	r3, #8
 800237e:	429a      	cmp	r2, r3
 8002380:	d104      	bne.n	800238c <vTaskSwitchContext+0x8c>
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	4a0e      	ldr	r2, [pc, #56]	; (80023cc <vTaskSwitchContext+0xcc>)
 8002394:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002396:	4b0d      	ldr	r3, [pc, #52]	; (80023cc <vTaskSwitchContext+0xcc>)
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <vTaskSwitchContext+0xd0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d102      	bne.n	80023a8 <vTaskSwitchContext+0xa8>
 80023a2:	f002 fa55 	bl	8004850 <SEGGER_SYSVIEW_OnIdle>
}
 80023a6:	e004      	b.n	80023b2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <vTaskSwitchContext+0xcc>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f002 faad 	bl	800490c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200001cc 	.word	0x200001cc
 80023c0:	200001b8 	.word	0x200001b8
 80023c4:	200001ac 	.word	0x200001ac
 80023c8:	200000d0 	.word	0x200000d0
 80023cc:	200000cc 	.word	0x200000cc
 80023d0:	200001c8 	.word	0x200001c8

080023d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80023dc:	f000 f84c 	bl	8002478 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <prvIdleTask+0x20>)
 80023e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80023f0:	e7f4      	b.n	80023dc <prvIdleTask+0x8>
 80023f2:	bf00      	nop
 80023f4:	e000ed04 	.word	0xe000ed04

080023f8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023fe:	2300      	movs	r3, #0
 8002400:	607b      	str	r3, [r7, #4]
 8002402:	e00c      	b.n	800241e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4413      	add	r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <prvInitialiseTaskLists+0x60>)
 8002410:	4413      	add	r3, r2
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fb3c 	bl	8001a90 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	3301      	adds	r3, #1
 800241c:	607b      	str	r3, [r7, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b04      	cmp	r3, #4
 8002422:	d9ef      	bls.n	8002404 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002424:	480d      	ldr	r0, [pc, #52]	; (800245c <prvInitialiseTaskLists+0x64>)
 8002426:	f7ff fb33 	bl	8001a90 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800242a:	480d      	ldr	r0, [pc, #52]	; (8002460 <prvInitialiseTaskLists+0x68>)
 800242c:	f7ff fb30 	bl	8001a90 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002430:	480c      	ldr	r0, [pc, #48]	; (8002464 <prvInitialiseTaskLists+0x6c>)
 8002432:	f7ff fb2d 	bl	8001a90 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8002436:	480c      	ldr	r0, [pc, #48]	; (8002468 <prvInitialiseTaskLists+0x70>)
 8002438:	f7ff fb2a 	bl	8001a90 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800243c:	480b      	ldr	r0, [pc, #44]	; (800246c <prvInitialiseTaskLists+0x74>)
 800243e:	f7ff fb27 	bl	8001a90 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002442:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <prvInitialiseTaskLists+0x78>)
 8002444:	4a05      	ldr	r2, [pc, #20]	; (800245c <prvInitialiseTaskLists+0x64>)
 8002446:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002448:	4b0a      	ldr	r3, [pc, #40]	; (8002474 <prvInitialiseTaskLists+0x7c>)
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <prvInitialiseTaskLists+0x68>)
 800244c:	601a      	str	r2, [r3, #0]
}
 800244e:	bf00      	nop
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
 8002456:	bf00      	nop
 8002458:	200000d0 	.word	0x200000d0
 800245c:	20000134 	.word	0x20000134
 8002460:	20000148 	.word	0x20000148
 8002464:	20000164 	.word	0x20000164
 8002468:	20000178 	.word	0x20000178
 800246c:	20000190 	.word	0x20000190
 8002470:	2000015c 	.word	0x2000015c
 8002474:	20000160 	.word	0x20000160

08002478 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800247e:	e019      	b.n	80024b4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8002480:	f000 fa00 	bl	8002884 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002484:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <prvCheckTasksWaitingTermination+0x50>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	68db      	ldr	r3, [r3, #12]
 800248a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	3304      	adds	r3, #4
 8002490:	4618      	mov	r0, r3
 8002492:	f7ff fb2a 	bl	8001aea <uxListRemove>
                --uxCurrentNumberOfTasks;
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <prvCheckTasksWaitingTermination+0x54>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	3b01      	subs	r3, #1
 800249c:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <prvCheckTasksWaitingTermination+0x54>)
 800249e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80024a0:	4b0b      	ldr	r3, [pc, #44]	; (80024d0 <prvCheckTasksWaitingTermination+0x58>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	4a0a      	ldr	r2, [pc, #40]	; (80024d0 <prvCheckTasksWaitingTermination+0x58>)
 80024a8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80024aa:	f000 fa1b 	bl	80028e4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f000 f810 	bl	80024d4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <prvCheckTasksWaitingTermination+0x58>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1e1      	bne.n	8002480 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80024bc:	bf00      	nop
 80024be:	bf00      	nop
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	20000178 	.word	0x20000178
 80024cc:	200001a4 	.word	0x200001a4
 80024d0:	2000018c 	.word	0x2000018c

080024d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	4618      	mov	r0, r3
 80024e2:	f000 fbb5 	bl	8002c50 <vPortFree>
            vPortFree( pxTCB );
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fbb2 	bl	8002c50 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80024ec:	bf00      	nop
 80024ee:	3708      	adds	r7, #8
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024f8:	4b0a      	ldr	r3, [pc, #40]	; (8002524 <prvResetNextTaskUnblockTime+0x30>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d104      	bne.n	800250c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002502:	4b09      	ldr	r3, [pc, #36]	; (8002528 <prvResetNextTaskUnblockTime+0x34>)
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800250a:	e005      	b.n	8002518 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <prvResetNextTaskUnblockTime+0x30>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	68db      	ldr	r3, [r3, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <prvResetNextTaskUnblockTime+0x34>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	2000015c 	.word	0x2000015c
 8002528:	200001c4 	.word	0x200001c4

0800252c <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	60f8      	str	r0, [r7, #12]
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	3b04      	subs	r3, #4
 800253c:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002544:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	3b04      	subs	r3, #4
 800254a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f023 0201 	bic.w	r2, r3, #1
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3b04      	subs	r3, #4
 800255a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800255c:	4a0c      	ldr	r2, [pc, #48]	; (8002590 <pxPortInitialiseStack+0x64>)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	3b14      	subs	r3, #20
 8002566:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002568:	687a      	ldr	r2, [r7, #4]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	3b04      	subs	r3, #4
 8002572:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f06f 0202 	mvn.w	r2, #2
 800257a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3b20      	subs	r3, #32
 8002580:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002582:	68fb      	ldr	r3, [r7, #12]
}
 8002584:	4618      	mov	r0, r3
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	08002595 	.word	0x08002595

08002594 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002594:	b480      	push	{r7}
 8002596:	b085      	sub	sp, #20
 8002598:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800259e:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <prvTaskExitError+0x54>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a6:	d00a      	beq.n	80025be <prvTaskExitError+0x2a>
        __asm volatile
 80025a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025ac:	f383 8811 	msr	BASEPRI, r3
 80025b0:	f3bf 8f6f 	isb	sy
 80025b4:	f3bf 8f4f 	dsb	sy
 80025b8:	60fb      	str	r3, [r7, #12]
    }
 80025ba:	bf00      	nop
 80025bc:	e7fe      	b.n	80025bc <prvTaskExitError+0x28>
        __asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	60bb      	str	r3, [r7, #8]
    }
 80025d0:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80025d2:	bf00      	nop
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d0fc      	beq.n	80025d4 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80025da:	bf00      	nop
 80025dc:	bf00      	nop
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	20000010 	.word	0x20000010
 80025ec:	00000000 	.word	0x00000000

080025f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <pxCurrentTCBConst2>)
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	6808      	ldr	r0, [r1, #0]
 80025f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025fa:	f380 8809 	msr	PSP, r0
 80025fe:	f3bf 8f6f 	isb	sy
 8002602:	f04f 0000 	mov.w	r0, #0
 8002606:	f380 8811 	msr	BASEPRI, r0
 800260a:	4770      	bx	lr
 800260c:	f3af 8000 	nop.w

08002610 <pxCurrentTCBConst2>:
 8002610:	200000cc 	.word	0x200000cc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002614:	bf00      	nop
 8002616:	bf00      	nop

08002618 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002618:	4808      	ldr	r0, [pc, #32]	; (800263c <prvPortStartFirstTask+0x24>)
 800261a:	6800      	ldr	r0, [r0, #0]
 800261c:	6800      	ldr	r0, [r0, #0]
 800261e:	f380 8808 	msr	MSP, r0
 8002622:	f04f 0000 	mov.w	r0, #0
 8002626:	f380 8814 	msr	CONTROL, r0
 800262a:	b662      	cpsie	i
 800262c:	b661      	cpsie	f
 800262e:	f3bf 8f4f 	dsb	sy
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	df00      	svc	0
 8002638:	bf00      	nop
 800263a:	0000      	.short	0x0000
 800263c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop

08002644 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800264a:	4b46      	ldr	r3, [pc, #280]	; (8002764 <xPortStartScheduler+0x120>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a46      	ldr	r2, [pc, #280]	; (8002768 <xPortStartScheduler+0x124>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10a      	bne.n	800266a <xPortStartScheduler+0x26>
        __asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	613b      	str	r3, [r7, #16]
    }
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800266a:	4b3e      	ldr	r3, [pc, #248]	; (8002764 <xPortStartScheduler+0x120>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a3f      	ldr	r2, [pc, #252]	; (800276c <xPortStartScheduler+0x128>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d10a      	bne.n	800268a <xPortStartScheduler+0x46>
        __asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	60fb      	str	r3, [r7, #12]
    }
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <xPortStartScheduler+0x12c>)
 800268c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	b2db      	uxtb	r3, r3
 8002694:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	22ff      	movs	r2, #255	; 0xff
 800269a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80026a4:	78fb      	ldrb	r3, [r7, #3]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80026ac:	b2da      	uxtb	r2, r3
 80026ae:	4b31      	ldr	r3, [pc, #196]	; (8002774 <xPortStartScheduler+0x130>)
 80026b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026b2:	4b31      	ldr	r3, [pc, #196]	; (8002778 <xPortStartScheduler+0x134>)
 80026b4:	2207      	movs	r2, #7
 80026b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026b8:	e009      	b.n	80026ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80026ba:	4b2f      	ldr	r3, [pc, #188]	; (8002778 <xPortStartScheduler+0x134>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3b01      	subs	r3, #1
 80026c0:	4a2d      	ldr	r2, [pc, #180]	; (8002778 <xPortStartScheduler+0x134>)
 80026c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026c4:	78fb      	ldrb	r3, [r7, #3]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	b2db      	uxtb	r3, r3
 80026cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d6:	2b80      	cmp	r3, #128	; 0x80
 80026d8:	d0ef      	beq.n	80026ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026da:	4b27      	ldr	r3, [pc, #156]	; (8002778 <xPortStartScheduler+0x134>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f1c3 0307 	rsb	r3, r3, #7
 80026e2:	2b04      	cmp	r3, #4
 80026e4:	d00a      	beq.n	80026fc <xPortStartScheduler+0xb8>
        __asm volatile
 80026e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	60bb      	str	r3, [r7, #8]
    }
 80026f8:	bf00      	nop
 80026fa:	e7fe      	b.n	80026fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026fc:	4b1e      	ldr	r3, [pc, #120]	; (8002778 <xPortStartScheduler+0x134>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	021b      	lsls	r3, r3, #8
 8002702:	4a1d      	ldr	r2, [pc, #116]	; (8002778 <xPortStartScheduler+0x134>)
 8002704:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002706:	4b1c      	ldr	r3, [pc, #112]	; (8002778 <xPortStartScheduler+0x134>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800270e:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <xPortStartScheduler+0x134>)
 8002710:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	b2da      	uxtb	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800271a:	4b18      	ldr	r3, [pc, #96]	; (800277c <xPortStartScheduler+0x138>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a17      	ldr	r2, [pc, #92]	; (800277c <xPortStartScheduler+0x138>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002726:	4b15      	ldr	r3, [pc, #84]	; (800277c <xPortStartScheduler+0x138>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a14      	ldr	r2, [pc, #80]	; (800277c <xPortStartScheduler+0x138>)
 800272c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002730:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002732:	f000 f963 	bl	80029fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002736:	4b12      	ldr	r3, [pc, #72]	; (8002780 <xPortStartScheduler+0x13c>)
 8002738:	2200      	movs	r2, #0
 800273a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800273c:	f000 f982 	bl	8002a44 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002740:	4b10      	ldr	r3, [pc, #64]	; (8002784 <xPortStartScheduler+0x140>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a0f      	ldr	r2, [pc, #60]	; (8002784 <xPortStartScheduler+0x140>)
 8002746:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800274a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800274c:	f7ff ff64 	bl	8002618 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002750:	f7ff fdd6 	bl	8002300 <vTaskSwitchContext>
    prvTaskExitError();
 8002754:	f7ff ff1e 	bl	8002594 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	e000ed00 	.word	0xe000ed00
 8002768:	410fc271 	.word	0x410fc271
 800276c:	410fc270 	.word	0x410fc270
 8002770:	e000e400 	.word	0xe000e400
 8002774:	200001d0 	.word	0x200001d0
 8002778:	200001d4 	.word	0x200001d4
 800277c:	e000ed20 	.word	0xe000ed20
 8002780:	20000010 	.word	0x20000010
 8002784:	e000ef34 	.word	0xe000ef34

08002788 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002788:	b480      	push	{r7}
 800278a:	b087      	sub	sp, #28
 800278c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <vInitPrioGroupValue+0xe4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a37      	ldr	r2, [pc, #220]	; (8002870 <vInitPrioGroupValue+0xe8>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d10a      	bne.n	80027ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	613b      	str	r3, [r7, #16]
    }
 80027aa:	bf00      	nop
 80027ac:	e7fe      	b.n	80027ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80027ae:	4b2f      	ldr	r3, [pc, #188]	; (800286c <vInitPrioGroupValue+0xe4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a30      	ldr	r2, [pc, #192]	; (8002874 <vInitPrioGroupValue+0xec>)
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d10a      	bne.n	80027ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	60fb      	str	r3, [r7, #12]
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80027ce:	4b2a      	ldr	r3, [pc, #168]	; (8002878 <vInitPrioGroupValue+0xf0>)
 80027d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	22ff      	movs	r2, #255	; 0xff
 80027de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80027e8:	78fb      	ldrb	r3, [r7, #3]
 80027ea:	b2db      	uxtb	r3, r3
 80027ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b22      	ldr	r3, [pc, #136]	; (800287c <vInitPrioGroupValue+0xf4>)
 80027f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80027f6:	4b22      	ldr	r3, [pc, #136]	; (8002880 <vInitPrioGroupValue+0xf8>)
 80027f8:	2207      	movs	r2, #7
 80027fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80027fc:	e009      	b.n	8002812 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80027fe:	4b20      	ldr	r3, [pc, #128]	; (8002880 <vInitPrioGroupValue+0xf8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	3b01      	subs	r3, #1
 8002804:	4a1e      	ldr	r2, [pc, #120]	; (8002880 <vInitPrioGroupValue+0xf8>)
 8002806:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	b2db      	uxtb	r3, r3
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	b2db      	uxtb	r3, r3
 8002810:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002812:	78fb      	ldrb	r3, [r7, #3]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d0ef      	beq.n	80027fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800281e:	4b18      	ldr	r3, [pc, #96]	; (8002880 <vInitPrioGroupValue+0xf8>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f1c3 0307 	rsb	r3, r3, #7
 8002826:	2b04      	cmp	r3, #4
 8002828:	d00a      	beq.n	8002840 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	60bb      	str	r3, [r7, #8]
    }
 800283c:	bf00      	nop
 800283e:	e7fe      	b.n	800283e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002840:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <vInitPrioGroupValue+0xf8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	021b      	lsls	r3, r3, #8
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <vInitPrioGroupValue+0xf8>)
 8002848:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800284a:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <vInitPrioGroupValue+0xf8>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <vInitPrioGroupValue+0xf8>)
 8002854:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	b2da      	uxtb	r2, r3
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800285e:	bf00      	nop
 8002860:	371c      	adds	r7, #28
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	410fc271 	.word	0x410fc271
 8002874:	410fc270 	.word	0x410fc270
 8002878:	e000e400 	.word	0xe000e400
 800287c:	200001d0 	.word	0x200001d0
 8002880:	200001d4 	.word	0x200001d4

08002884 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
        __asm volatile
 800288a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288e:	f383 8811 	msr	BASEPRI, r3
 8002892:	f3bf 8f6f 	isb	sy
 8002896:	f3bf 8f4f 	dsb	sy
 800289a:	607b      	str	r3, [r7, #4]
    }
 800289c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800289e:	4b0f      	ldr	r3, [pc, #60]	; (80028dc <vPortEnterCritical+0x58>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3301      	adds	r3, #1
 80028a4:	4a0d      	ldr	r2, [pc, #52]	; (80028dc <vPortEnterCritical+0x58>)
 80028a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80028a8:	4b0c      	ldr	r3, [pc, #48]	; (80028dc <vPortEnterCritical+0x58>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d10f      	bne.n	80028d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80028b0:	4b0b      	ldr	r3, [pc, #44]	; (80028e0 <vPortEnterCritical+0x5c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00a      	beq.n	80028d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	603b      	str	r3, [r7, #0]
    }
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <vPortEnterCritical+0x4a>
    }
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	20000010 	.word	0x20000010
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80028ea:	4b12      	ldr	r3, [pc, #72]	; (8002934 <vPortExitCritical+0x50>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10a      	bne.n	8002908 <vPortExitCritical+0x24>
        __asm volatile
 80028f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f6:	f383 8811 	msr	BASEPRI, r3
 80028fa:	f3bf 8f6f 	isb	sy
 80028fe:	f3bf 8f4f 	dsb	sy
 8002902:	607b      	str	r3, [r7, #4]
    }
 8002904:	bf00      	nop
 8002906:	e7fe      	b.n	8002906 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002908:	4b0a      	ldr	r3, [pc, #40]	; (8002934 <vPortExitCritical+0x50>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	3b01      	subs	r3, #1
 800290e:	4a09      	ldr	r2, [pc, #36]	; (8002934 <vPortExitCritical+0x50>)
 8002910:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002912:	4b08      	ldr	r3, [pc, #32]	; (8002934 <vPortExitCritical+0x50>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <vPortExitCritical+0x42>
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002924:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	20000010 	.word	0x20000010
	...

08002940 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002940:	f3ef 8009 	mrs	r0, PSP
 8002944:	f3bf 8f6f 	isb	sy
 8002948:	4b15      	ldr	r3, [pc, #84]	; (80029a0 <pxCurrentTCBConst>)
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f01e 0f10 	tst.w	lr, #16
 8002950:	bf08      	it	eq
 8002952:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002956:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800295a:	6010      	str	r0, [r2, #0]
 800295c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002960:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002964:	f380 8811 	msr	BASEPRI, r0
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f7ff fcc6 	bl	8002300 <vTaskSwitchContext>
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	f380 8811 	msr	BASEPRI, r0
 800297c:	bc09      	pop	{r0, r3}
 800297e:	6819      	ldr	r1, [r3, #0]
 8002980:	6808      	ldr	r0, [r1, #0]
 8002982:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002986:	f01e 0f10 	tst.w	lr, #16
 800298a:	bf08      	it	eq
 800298c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002990:	f380 8809 	msr	PSP, r0
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	f3af 8000 	nop.w

080029a0 <pxCurrentTCBConst>:
 80029a0:	200000cc 	.word	0x200000cc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80029a4:	bf00      	nop
 80029a6:	bf00      	nop

080029a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
        __asm volatile
 80029ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029b2:	f383 8811 	msr	BASEPRI, r3
 80029b6:	f3bf 8f6f 	isb	sy
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	607b      	str	r3, [r7, #4]
    }
 80029c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80029c2:	f001 fecb 	bl	800475c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80029c6:	f7ff fba3 	bl	8002110 <xTaskIncrementTick>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d006      	beq.n	80029de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80029d0:	f001 ff22 	bl	8004818 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80029d4:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <SysTick_Handler+0x50>)
 80029d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e001      	b.n	80029e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80029de:	f001 feff 	bl	80047e0 <SEGGER_SYSVIEW_RecordExitISR>
 80029e2:	2300      	movs	r3, #0
 80029e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	f383 8811 	msr	BASEPRI, r3
    }
 80029ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80029ee:	bf00      	nop
 80029f0:	3708      	adds	r7, #8
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	e000ed04 	.word	0xe000ed04

080029fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002a00:	4b0b      	ldr	r3, [pc, #44]	; (8002a30 <vPortSetupTimerInterrupt+0x34>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002a06:	4b0b      	ldr	r3, [pc, #44]	; (8002a34 <vPortSetupTimerInterrupt+0x38>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <vPortSetupTimerInterrupt+0x3c>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a0a      	ldr	r2, [pc, #40]	; (8002a3c <vPortSetupTimerInterrupt+0x40>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	4a09      	ldr	r2, [pc, #36]	; (8002a40 <vPortSetupTimerInterrupt+0x44>)
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002a1e:	4b04      	ldr	r3, [pc, #16]	; (8002a30 <vPortSetupTimerInterrupt+0x34>)
 8002a20:	2207      	movs	r2, #7
 8002a22:	601a      	str	r2, [r3, #0]
}
 8002a24:	bf00      	nop
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	e000e010 	.word	0xe000e010
 8002a34:	e000e018 	.word	0xe000e018
 8002a38:	20000000 	.word	0x20000000
 8002a3c:	10624dd3 	.word	0x10624dd3
 8002a40:	e000e014 	.word	0xe000e014

08002a44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8002a44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002a54 <vPortEnableVFP+0x10>
 8002a48:	6801      	ldr	r1, [r0, #0]
 8002a4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a4e:	6001      	str	r1, [r0, #0]
 8002a50:	4770      	bx	lr
 8002a52:	0000      	.short	0x0000
 8002a54:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8002a58:	bf00      	nop
 8002a5a:	bf00      	nop

08002a5c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002a62:	f3ef 8305 	mrs	r3, IPSR
 8002a66:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2b0f      	cmp	r3, #15
 8002a6c:	d914      	bls.n	8002a98 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002a6e:	4a17      	ldr	r2, [pc, #92]	; (8002acc <vPortValidateInterruptPriority+0x70>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002a78:	4b15      	ldr	r3, [pc, #84]	; (8002ad0 <vPortValidateInterruptPriority+0x74>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	7afa      	ldrb	r2, [r7, #11]
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d20a      	bcs.n	8002a98 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8002a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a86:	f383 8811 	msr	BASEPRI, r3
 8002a8a:	f3bf 8f6f 	isb	sy
 8002a8e:	f3bf 8f4f 	dsb	sy
 8002a92:	607b      	str	r3, [r7, #4]
    }
 8002a94:	bf00      	nop
 8002a96:	e7fe      	b.n	8002a96 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002a98:	4b0e      	ldr	r3, [pc, #56]	; (8002ad4 <vPortValidateInterruptPriority+0x78>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002aa0:	4b0d      	ldr	r3, [pc, #52]	; (8002ad8 <vPortValidateInterruptPriority+0x7c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d90a      	bls.n	8002abe <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8002aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aac:	f383 8811 	msr	BASEPRI, r3
 8002ab0:	f3bf 8f6f 	isb	sy
 8002ab4:	f3bf 8f4f 	dsb	sy
 8002ab8:	603b      	str	r3, [r7, #0]
    }
 8002aba:	bf00      	nop
 8002abc:	e7fe      	b.n	8002abc <vPortValidateInterruptPriority+0x60>
    }
 8002abe:	bf00      	nop
 8002ac0:	3714      	adds	r7, #20
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
 8002aca:	bf00      	nop
 8002acc:	e000e3f0 	.word	0xe000e3f0
 8002ad0:	200001d0 	.word	0x200001d0
 8002ad4:	e000ed0c 	.word	0xe000ed0c
 8002ad8:	200001d4 	.word	0x200001d4

08002adc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8002ae8:	f7ff fa00 	bl	8001eec <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002aec:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <pvPortMalloc+0x160>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002af4:	f000 f908 	bl	8002d08 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8002afe:	2208      	movs	r2, #8
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	3308      	adds	r3, #8
 8002b0a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d804      	bhi.n	8002b20 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	e001      	b.n	8002b24 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	db70      	blt.n	8002c0c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d06d      	beq.n	8002c0c <pvPortMalloc+0x130>
 8002b30:	4b43      	ldr	r3, [pc, #268]	; (8002c40 <pvPortMalloc+0x164>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d868      	bhi.n	8002c0c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <pvPortMalloc+0x168>)
 8002b3c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002b3e:	4b41      	ldr	r3, [pc, #260]	; (8002c44 <pvPortMalloc+0x168>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b44:	e004      	b.n	8002b50 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b48:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d903      	bls.n	8002b62 <pvPortMalloc+0x86>
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f1      	bne.n	8002b46 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002b62:	4b36      	ldr	r3, [pc, #216]	; (8002c3c <pvPortMalloc+0x160>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d04f      	beq.n	8002c0c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4413      	add	r3, r2
 8002b74:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	6a3b      	ldr	r3, [r7, #32]
 8002b7c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	1ad2      	subs	r2, r2, r3
 8002b86:	2308      	movs	r3, #8
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d91f      	bls.n	8002bce <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b96:	697b      	ldr	r3, [r7, #20]
 8002b98:	f003 0307 	and.w	r3, r3, #7
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d00a      	beq.n	8002bb6 <pvPortMalloc+0xda>
        __asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	613b      	str	r3, [r7, #16]
    }
 8002bb2:	bf00      	nop
 8002bb4:	e7fe      	b.n	8002bb4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb8:	685a      	ldr	r2, [r3, #4]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	1ad2      	subs	r2, r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002bc8:	6978      	ldr	r0, [r7, #20]
 8002bca:	f000 f8f9 	bl	8002dc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <pvPortMalloc+0x164>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	4a19      	ldr	r2, [pc, #100]	; (8002c40 <pvPortMalloc+0x164>)
 8002bda:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002bdc:	4b18      	ldr	r3, [pc, #96]	; (8002c40 <pvPortMalloc+0x164>)
 8002bde:	681a      	ldr	r2, [r3, #0]
 8002be0:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <pvPortMalloc+0x16c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d203      	bcs.n	8002bf0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <pvPortMalloc+0x164>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <pvPortMalloc+0x16c>)
 8002bee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002c02:	4b12      	ldr	r3, [pc, #72]	; (8002c4c <pvPortMalloc+0x170>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <pvPortMalloc+0x170>)
 8002c0a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002c0c:	f7ff f97c 	bl	8001f08 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <pvPortMalloc+0x154>
        __asm volatile
 8002c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c1e:	f383 8811 	msr	BASEPRI, r3
 8002c22:	f3bf 8f6f 	isb	sy
 8002c26:	f3bf 8f4f 	dsb	sy
 8002c2a:	60fb      	str	r3, [r7, #12]
    }
 8002c2c:	bf00      	nop
 8002c2e:	e7fe      	b.n	8002c2e <pvPortMalloc+0x152>
    return pvReturn;
 8002c30:	69fb      	ldr	r3, [r7, #28]
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3728      	adds	r7, #40	; 0x28
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20012de0 	.word	0x20012de0
 8002c40:	20012de4 	.word	0x20012de4
 8002c44:	20012dd8 	.word	0x20012dd8
 8002c48:	20012de8 	.word	0x20012de8
 8002c4c:	20012dec 	.word	0x20012dec

08002c50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d049      	beq.n	8002cf6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002c62:	2308      	movs	r3, #8
 8002c64:	425b      	negs	r3, r3
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4413      	add	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	db0a      	blt.n	8002c8e <vPortFree+0x3e>
        __asm volatile
 8002c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7c:	f383 8811 	msr	BASEPRI, r3
 8002c80:	f3bf 8f6f 	isb	sy
 8002c84:	f3bf 8f4f 	dsb	sy
 8002c88:	60fb      	str	r3, [r7, #12]
    }
 8002c8a:	bf00      	nop
 8002c8c:	e7fe      	b.n	8002c8c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <vPortFree+0x5c>
        __asm volatile
 8002c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9a:	f383 8811 	msr	BASEPRI, r3
 8002c9e:	f3bf 8f6f 	isb	sy
 8002ca2:	f3bf 8f4f 	dsb	sy
 8002ca6:	60bb      	str	r3, [r7, #8]
    }
 8002ca8:	bf00      	nop
 8002caa:	e7fe      	b.n	8002caa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	0fdb      	lsrs	r3, r3, #31
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01c      	beq.n	8002cf6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d118      	bne.n	8002cf6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8002cd0:	f7ff f90c 	bl	8001eec <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <vPortFree+0xb0>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4413      	add	r3, r2
 8002cde:	4a08      	ldr	r2, [pc, #32]	; (8002d00 <vPortFree+0xb0>)
 8002ce0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002ce2:	6938      	ldr	r0, [r7, #16]
 8002ce4:	f000 f86c 	bl	8002dc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002ce8:	4b06      	ldr	r3, [pc, #24]	; (8002d04 <vPortFree+0xb4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	4a05      	ldr	r2, [pc, #20]	; (8002d04 <vPortFree+0xb4>)
 8002cf0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002cf2:	f7ff f909 	bl	8001f08 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	20012de4 	.word	0x20012de4
 8002d04:	20012df0 	.word	0x20012df0

08002d08 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d0e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002d12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002d14:	4b25      	ldr	r3, [pc, #148]	; (8002dac <prvHeapInit+0xa4>)
 8002d16:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00c      	beq.n	8002d3c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	3307      	adds	r3, #7
 8002d26:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f023 0307 	bic.w	r3, r3, #7
 8002d2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	4a1d      	ldr	r2, [pc, #116]	; (8002dac <prvHeapInit+0xa4>)
 8002d38:	4413      	add	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002d40:	4a1b      	ldr	r2, [pc, #108]	; (8002db0 <prvHeapInit+0xa8>)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002d46:	4b1a      	ldr	r3, [pc, #104]	; (8002db0 <prvHeapInit+0xa8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4413      	add	r3, r2
 8002d52:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002d54:	2208      	movs	r2, #8
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f023 0307 	bic.w	r3, r3, #7
 8002d62:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	4a13      	ldr	r2, [pc, #76]	; (8002db4 <prvHeapInit+0xac>)
 8002d68:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002d6a:	4b12      	ldr	r3, [pc, #72]	; (8002db4 <prvHeapInit+0xac>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002d72:	4b10      	ldr	r3, [pc, #64]	; (8002db4 <prvHeapInit+0xac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	1ad2      	subs	r2, r2, r3
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002d88:	4b0a      	ldr	r3, [pc, #40]	; (8002db4 <prvHeapInit+0xac>)
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4a08      	ldr	r2, [pc, #32]	; (8002db8 <prvHeapInit+0xb0>)
 8002d96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a07      	ldr	r2, [pc, #28]	; (8002dbc <prvHeapInit+0xb4>)
 8002d9e:	6013      	str	r3, [r2, #0]
}
 8002da0:	bf00      	nop
 8002da2:	3714      	adds	r7, #20
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	200001d8 	.word	0x200001d8
 8002db0:	20012dd8 	.word	0x20012dd8
 8002db4:	20012de0 	.word	0x20012de0
 8002db8:	20012de8 	.word	0x20012de8
 8002dbc:	20012de4 	.word	0x20012de4

08002dc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002dc8:	4b28      	ldr	r3, [pc, #160]	; (8002e6c <prvInsertBlockIntoFreeList+0xac>)
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	e002      	b.n	8002dd4 <prvInsertBlockIntoFreeList+0x14>
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d8f7      	bhi.n	8002dce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	4413      	add	r3, r2
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d108      	bne.n	8002e02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	441a      	add	r2, r3
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	68ba      	ldr	r2, [r7, #8]
 8002e0c:	441a      	add	r2, r3
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d118      	bne.n	8002e48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <prvInsertBlockIntoFreeList+0xb0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d00d      	beq.n	8002e3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	441a      	add	r2, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	e008      	b.n	8002e50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002e3e:	4b0c      	ldr	r3, [pc, #48]	; (8002e70 <prvInsertBlockIntoFreeList+0xb0>)
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	601a      	str	r2, [r3, #0]
 8002e46:	e003      	b.n	8002e50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002e50:	68fa      	ldr	r2, [r7, #12]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d002      	beq.n	8002e5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e5e:	bf00      	nop
 8002e60:	3714      	adds	r7, #20
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20012dd8 	.word	0x20012dd8
 8002e70:	20012de0 	.word	0x20012de0

08002e74 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	607b      	str	r3, [r7, #4]
 8002e7e:	e033      	b.n	8002ee8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002e80:	491e      	ldr	r1, [pc, #120]	; (8002efc <_cbSendTaskList+0x88>)
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	6818      	ldr	r0, [r3, #0]
 8002e90:	491a      	ldr	r1, [pc, #104]	; (8002efc <_cbSendTaskList+0x88>)
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	3304      	adds	r3, #4
 8002ea0:	6819      	ldr	r1, [r3, #0]
 8002ea2:	4c16      	ldr	r4, [pc, #88]	; (8002efc <_cbSendTaskList+0x88>)
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4423      	add	r3, r4
 8002eb0:	3308      	adds	r3, #8
 8002eb2:	681c      	ldr	r4, [r3, #0]
 8002eb4:	4d11      	ldr	r5, [pc, #68]	; (8002efc <_cbSendTaskList+0x88>)
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	4413      	add	r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	442b      	add	r3, r5
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	681d      	ldr	r5, [r3, #0]
 8002ec6:	4e0d      	ldr	r6, [pc, #52]	; (8002efc <_cbSendTaskList+0x88>)
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	4433      	add	r3, r6
 8002ed4:	3310      	adds	r3, #16
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	462b      	mov	r3, r5
 8002edc:	4622      	mov	r2, r4
 8002ede:	f000 f8bd 	bl	800305c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	607b      	str	r3, [r7, #4]
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <_cbSendTaskList+0x8c>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3c6      	bcc.n	8002e80 <_cbSendTaskList+0xc>
  }
}
 8002ef2:	bf00      	nop
 8002ef4:	bf00      	nop
 8002ef6:	370c      	adds	r7, #12
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002efc:	20012df4 	.word	0x20012df4
 8002f00:	20012e94 	.word	0x20012e94

08002f04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002f0c:	f7ff f8ee 	bl	80020ec <xTaskGetTickCountFromISR>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2200      	movs	r2, #0
 8002f14:	469a      	mov	sl, r3
 8002f16:	4693      	mov	fp, r2
 8002f18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002f1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	f04f 0a00 	mov.w	sl, #0
 8002f28:	f04f 0b00 	mov.w	fp, #0
 8002f2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002f30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002f34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002f38:	4652      	mov	r2, sl
 8002f3a:	465b      	mov	r3, fp
 8002f3c:	1a14      	subs	r4, r2, r0
 8002f3e:	eb63 0501 	sbc.w	r5, r3, r1
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	00ab      	lsls	r3, r5, #2
 8002f4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002f50:	00a2      	lsls	r2, r4, #2
 8002f52:	4614      	mov	r4, r2
 8002f54:	461d      	mov	r5, r3
 8002f56:	eb14 0800 	adds.w	r8, r4, r0
 8002f5a:	eb45 0901 	adc.w	r9, r5, r1
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f72:	4690      	mov	r8, r2
 8002f74:	4699      	mov	r9, r3
 8002f76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002f7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002f7e:	4610      	mov	r0, r2
 8002f80:	4619      	mov	r1, r3
 8002f82:	3708      	adds	r7, #8
 8002f84:	46bd      	mov	sp, r7
 8002f86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002f8c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002f9a:	2205      	movs	r2, #5
 8002f9c:	492b      	ldr	r1, [pc, #172]	; (800304c <SYSVIEW_AddTask+0xc0>)
 8002f9e:	68b8      	ldr	r0, [r7, #8]
 8002fa0:	f001 fedc 	bl	8004d5c <memcmp>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d04b      	beq.n	8003042 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002faa:	4b29      	ldr	r3, [pc, #164]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b07      	cmp	r3, #7
 8002fb0:	d903      	bls.n	8002fba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002fb2:	4828      	ldr	r0, [pc, #160]	; (8003054 <SYSVIEW_AddTask+0xc8>)
 8002fb4:	f001 fe1e 	bl	8004bf4 <SEGGER_SYSVIEW_Warn>
    return;
 8002fb8:	e044      	b.n	8003044 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	4926      	ldr	r1, [pc, #152]	; (8003058 <SYSVIEW_AddTask+0xcc>)
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	4413      	add	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	440b      	add	r3, r1
 8002fca:	68fa      	ldr	r2, [r7, #12]
 8002fcc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002fce:	4b20      	ldr	r3, [pc, #128]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4921      	ldr	r1, [pc, #132]	; (8003058 <SYSVIEW_AddTask+0xcc>)
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	440b      	add	r3, r1
 8002fde:	3304      	adds	r3, #4
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002fe4:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8002fe6:	681a      	ldr	r2, [r3, #0]
 8002fe8:	491b      	ldr	r1, [pc, #108]	; (8003058 <SYSVIEW_AddTask+0xcc>)
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3308      	adds	r3, #8
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ffa:	4b15      	ldr	r3, [pc, #84]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	4916      	ldr	r1, [pc, #88]	; (8003058 <SYSVIEW_AddTask+0xcc>)
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	330c      	adds	r3, #12
 800300c:	683a      	ldr	r2, [r7, #0]
 800300e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	4910      	ldr	r1, [pc, #64]	; (8003058 <SYSVIEW_AddTask+0xcc>)
 8003016:	4613      	mov	r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	440b      	add	r3, r1
 8003020:	3310      	adds	r3, #16
 8003022:	69ba      	ldr	r2, [r7, #24]
 8003024:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8003026:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	4a08      	ldr	r2, [pc, #32]	; (8003050 <SYSVIEW_AddTask+0xc4>)
 800302e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	9300      	str	r3, [sp, #0]
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f80e 	bl	800305c <SYSVIEW_SendTaskInfo>
 8003040:	e000      	b.n	8003044 <SYSVIEW_AddTask+0xb8>
    return;
 8003042:	bf00      	nop

}
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	080056f8 	.word	0x080056f8
 8003050:	20012e94 	.word	0x20012e94
 8003054:	08005700 	.word	0x08005700
 8003058:	20012df4 	.word	0x20012df4

0800305c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800306a:	f107 0314 	add.w	r3, r7, #20
 800306e:	2214      	movs	r2, #20
 8003070:	2100      	movs	r1, #0
 8003072:	4618      	mov	r0, r3
 8003074:	f001 fe82 	bl	8004d7c <memset>
  TaskInfo.TaskID     = TaskID;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800308c:	f107 0314 	add.w	r3, r7, #20
 8003090:	4618      	mov	r0, r3
 8003092:	f001 fa15 	bl	80044c0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003096:	bf00      	nop
 8003098:	3728      	adds	r7, #40	; 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
	...

080030a0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80030a6:	4b24      	ldr	r3, [pc, #144]	; (8003138 <_DoInit+0x98>)
 80030a8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2203      	movs	r2, #3
 80030ae:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2203      	movs	r2, #3
 80030b4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a20      	ldr	r2, [pc, #128]	; (800313c <_DoInit+0x9c>)
 80030ba:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a20      	ldr	r2, [pc, #128]	; (8003140 <_DoInit+0xa0>)
 80030c0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2200      	movs	r2, #0
 80030d4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a17      	ldr	r2, [pc, #92]	; (800313c <_DoInit+0x9c>)
 80030e0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a17      	ldr	r2, [pc, #92]	; (8003144 <_DoInit+0xa4>)
 80030e6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2210      	movs	r2, #16
 80030ec:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3307      	adds	r3, #7
 8003104:	4a10      	ldr	r2, [pc, #64]	; (8003148 <_DoInit+0xa8>)
 8003106:	6810      	ldr	r0, [r2, #0]
 8003108:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800310a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a0e      	ldr	r2, [pc, #56]	; (800314c <_DoInit+0xac>)
 8003112:	6810      	ldr	r0, [r2, #0]
 8003114:	6018      	str	r0, [r3, #0]
 8003116:	8891      	ldrh	r1, [r2, #4]
 8003118:	7992      	ldrb	r2, [r2, #6]
 800311a:	8099      	strh	r1, [r3, #4]
 800311c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800311e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2220      	movs	r2, #32
 8003126:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8003128:	f3bf 8f5f 	dmb	sy
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	20012e98 	.word	0x20012e98
 800313c:	08005750 	.word	0x08005750
 8003140:	20012f40 	.word	0x20012f40
 8003144:	20013340 	.word	0x20013340
 8003148:	0800575c 	.word	0x0800575c
 800314c:	08005760 	.word	0x08005760

08003150 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b08c      	sub	sp, #48	; 0x30
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800315c:	4b3e      	ldr	r3, [pc, #248]	; (8003258 <SEGGER_RTT_ReadNoLock+0x108>)
 800315e:	623b      	str	r3, [r7, #32]
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d101      	bne.n	800316e <SEGGER_RTT_ReadNoLock+0x1e>
 800316a:	f7ff ff99 	bl	80030a0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	3360      	adds	r3, #96	; 0x60
 800317a:	4a37      	ldr	r2, [pc, #220]	; (8003258 <SEGGER_RTT_ReadNoLock+0x108>)
 800317c:	4413      	add	r3, r2
 800317e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	691b      	ldr	r3, [r3, #16]
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003190:	2300      	movs	r3, #0
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003194:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	429a      	cmp	r2, r3
 800319a:	d92b      	bls.n	80031f4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4293      	cmp	r3, r2
 80031ac:	bf28      	it	cs
 80031ae:	4613      	movcs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	685a      	ldr	r2, [r3, #4]
 80031b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031b8:	4413      	add	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031c2:	f001 fe09 	bl	8004dd8 <memcpy>
    NumBytesRead += NumBytesRem;
 80031c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	4413      	add	r3, r2
 80031cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80031ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	4413      	add	r3, r2
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	1ad3      	subs	r3, r2, r3
 80031dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	4413      	add	r3, r2
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d101      	bne.n	80031f4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80031f0:	2300      	movs	r3, #0
 80031f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80031fc:	697a      	ldr	r2, [r7, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4293      	cmp	r3, r2
 8003202:	bf28      	it	cs
 8003204:	4613      	movcs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d019      	beq.n	8003242 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	4413      	add	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	6939      	ldr	r1, [r7, #16]
 800321c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800321e:	f001 fddb 	bl	8004dd8 <memcpy>
    NumBytesRead += NumBytesRem;
 8003222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	4413      	add	r3, r2
 8003228:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800322a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	4413      	add	r3, r2
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800323a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	4413      	add	r3, r2
 8003240:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8003242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003244:	2b00      	cmp	r3, #0
 8003246:	d002      	beq.n	800324e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800324c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800324e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003250:	4618      	mov	r0, r3
 8003252:	3730      	adds	r7, #48	; 0x30
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20012e98 	.word	0x20012e98

0800325c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800326a:	4b3d      	ldr	r3, [pc, #244]	; (8003360 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800326c:	61bb      	str	r3, [r7, #24]
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	b2db      	uxtb	r3, r3
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <SEGGER_RTT_AllocUpBuffer+0x20>
 8003278:	f7ff ff12 	bl	80030a0 <_DoInit>
  SEGGER_RTT_LOCK();
 800327c:	f3ef 8311 	mrs	r3, BASEPRI
 8003280:	f04f 0120 	mov.w	r1, #32
 8003284:	f381 8811 	msr	BASEPRI, r1
 8003288:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800328a:	4b35      	ldr	r3, [pc, #212]	; (8003360 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800328c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8003292:	6939      	ldr	r1, [r7, #16]
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	4613      	mov	r3, r2
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4413      	add	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	440b      	add	r3, r1
 80032a2:	3304      	adds	r3, #4
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d008      	beq.n	80032bc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	3301      	adds	r3, #1
 80032ae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	69fa      	ldr	r2, [r7, #28]
 80032b6:	429a      	cmp	r2, r3
 80032b8:	dbeb      	blt.n	8003292 <SEGGER_RTT_AllocUpBuffer+0x36>
 80032ba:	e000      	b.n	80032be <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80032bc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	da3f      	bge.n	8003348 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80032c8:	6939      	ldr	r1, [r7, #16]
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	1c5a      	adds	r2, r3, #1
 80032ce:	4613      	mov	r3, r2
 80032d0:	005b      	lsls	r3, r3, #1
 80032d2:	4413      	add	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	440b      	add	r3, r1
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80032dc:	6939      	ldr	r1, [r7, #16]
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	440b      	add	r3, r1
 80032ec:	3304      	adds	r3, #4
 80032ee:	68ba      	ldr	r2, [r7, #8]
 80032f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80032f2:	6939      	ldr	r1, [r7, #16]
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	4613      	mov	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	4413      	add	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	440b      	add	r3, r1
 8003300:	3320      	adds	r3, #32
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8003306:	6939      	ldr	r1, [r7, #16]
 8003308:	69fa      	ldr	r2, [r7, #28]
 800330a:	4613      	mov	r3, r2
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	4413      	add	r3, r2
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	440b      	add	r3, r1
 8003314:	3328      	adds	r3, #40	; 0x28
 8003316:	2200      	movs	r2, #0
 8003318:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800331a:	6939      	ldr	r1, [r7, #16]
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	4613      	mov	r3, r2
 8003320:	005b      	lsls	r3, r3, #1
 8003322:	4413      	add	r3, r2
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	440b      	add	r3, r1
 8003328:	3324      	adds	r3, #36	; 0x24
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800332e:	6939      	ldr	r1, [r7, #16]
 8003330:	69fa      	ldr	r2, [r7, #28]
 8003332:	4613      	mov	r3, r2
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	4413      	add	r3, r2
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	440b      	add	r3, r1
 800333c:	332c      	adds	r3, #44	; 0x2c
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003342:	f3bf 8f5f 	dmb	sy
 8003346:	e002      	b.n	800334e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8003348:	f04f 33ff 	mov.w	r3, #4294967295
 800334c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003354:	69fb      	ldr	r3, [r7, #28]
}
 8003356:	4618      	mov	r0, r3
 8003358:	3720      	adds	r7, #32
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20012e98 	.word	0x20012e98

08003364 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af00      	add	r7, sp, #0
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	60b9      	str	r1, [r7, #8]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003372:	4b33      	ldr	r3, [pc, #204]	; (8003440 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d101      	bne.n	8003384 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003380:	f7ff fe8e 	bl	80030a0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003384:	4b2e      	ldr	r3, [pc, #184]	; (8003440 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8003386:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	461a      	mov	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	4293      	cmp	r3, r2
 8003392:	d24d      	bcs.n	8003430 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8003394:	f3ef 8311 	mrs	r3, BASEPRI
 8003398:	f04f 0120 	mov.w	r1, #32
 800339c:	f381 8811 	msr	BASEPRI, r1
 80033a0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d031      	beq.n	800340c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	68fa      	ldr	r2, [r7, #12]
 80033ac:	4613      	mov	r3, r2
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	4413      	add	r3, r2
 80033b2:	00db      	lsls	r3, r3, #3
 80033b4:	440b      	add	r3, r1
 80033b6:	3360      	adds	r3, #96	; 0x60
 80033b8:	68ba      	ldr	r2, [r7, #8]
 80033ba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	4613      	mov	r3, r2
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	4413      	add	r3, r2
 80033c6:	00db      	lsls	r3, r3, #3
 80033c8:	440b      	add	r3, r1
 80033ca:	3364      	adds	r3, #100	; 0x64
 80033cc:	687a      	ldr	r2, [r7, #4]
 80033ce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80033d0:	6979      	ldr	r1, [r7, #20]
 80033d2:	68fa      	ldr	r2, [r7, #12]
 80033d4:	4613      	mov	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	00db      	lsls	r3, r3, #3
 80033dc:	440b      	add	r3, r1
 80033de:	3368      	adds	r3, #104	; 0x68
 80033e0:	683a      	ldr	r2, [r7, #0]
 80033e2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80033e4:	6979      	ldr	r1, [r7, #20]
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4613      	mov	r3, r2
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	4413      	add	r3, r2
 80033ee:	00db      	lsls	r3, r3, #3
 80033f0:	440b      	add	r3, r1
 80033f2:	3370      	adds	r3, #112	; 0x70
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80033f8:	6979      	ldr	r1, [r7, #20]
 80033fa:	68fa      	ldr	r2, [r7, #12]
 80033fc:	4613      	mov	r3, r2
 80033fe:	005b      	lsls	r3, r3, #1
 8003400:	4413      	add	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	440b      	add	r3, r1
 8003406:	336c      	adds	r3, #108	; 0x6c
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	440b      	add	r3, r1
 800341a:	3374      	adds	r3, #116	; 0x74
 800341c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800341e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8003420:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800342a:	2300      	movs	r3, #0
 800342c:	61fb      	str	r3, [r7, #28]
 800342e:	e002      	b.n	8003436 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8003430:	f04f 33ff 	mov.w	r3, #4294967295
 8003434:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8003436:	69fb      	ldr	r3, [r7, #28]
}
 8003438:	4618      	mov	r0, r3
 800343a:	3720      	adds	r7, #32
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	20012e98 	.word	0x20012e98

08003444 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003444:	b480      	push	{r7}
 8003446:	b087      	sub	sp, #28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003454:	e002      	b.n	800345c <_EncodeStr+0x18>
    Len++;
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	3301      	adds	r3, #1
 800345a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800345c:	68ba      	ldr	r2, [r7, #8]
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f6      	bne.n	8003456 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	429a      	cmp	r2, r3
 800346e:	d901      	bls.n	8003474 <_EncodeStr+0x30>
    Len = Limit;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	2bfe      	cmp	r3, #254	; 0xfe
 8003478:	d806      	bhi.n	8003488 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	60fa      	str	r2, [r7, #12]
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]
 8003486:	e011      	b.n	80034ac <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	60fa      	str	r2, [r7, #12]
 800348e:	22ff      	movs	r2, #255	; 0xff
 8003490:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1c5a      	adds	r2, r3, #1
 8003496:	60fa      	str	r2, [r7, #12]
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	0a19      	lsrs	r1, r3, #8
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	1c5a      	adds	r2, r3, #1
 80034a6:	60fa      	str	r2, [r7, #12]
 80034a8:	b2ca      	uxtb	r2, r1
 80034aa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80034ac:	2300      	movs	r3, #0
 80034ae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80034b0:	e00a      	b.n	80034c8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80034b2:	68ba      	ldr	r2, [r7, #8]
 80034b4:	1c53      	adds	r3, r2, #1
 80034b6:	60bb      	str	r3, [r7, #8]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	1c59      	adds	r1, r3, #1
 80034bc:	60f9      	str	r1, [r7, #12]
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
    n++;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	3301      	adds	r3, #1
 80034c6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d3f0      	bcc.n	80034b2 <_EncodeStr+0x6e>
  }
  return pPayload;
 80034d0:	68fb      	ldr	r3, [r7, #12]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	371c      	adds	r7, #28
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
	...

080034f8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034fe:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <_HandleIncomingPacket+0xdc>)
 8003500:	7e1b      	ldrb	r3, [r3, #24]
 8003502:	4618      	mov	r0, r3
 8003504:	1cfb      	adds	r3, r7, #3
 8003506:	2201      	movs	r2, #1
 8003508:	4619      	mov	r1, r3
 800350a:	f7ff fe21 	bl	8003150 <SEGGER_RTT_ReadNoLock>
 800350e:	4603      	mov	r3, r0
 8003510:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	dd59      	ble.n	80035cc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	2b80      	cmp	r3, #128	; 0x80
 800351c:	d032      	beq.n	8003584 <_HandleIncomingPacket+0x8c>
 800351e:	2b80      	cmp	r3, #128	; 0x80
 8003520:	dc42      	bgt.n	80035a8 <_HandleIncomingPacket+0xb0>
 8003522:	2b07      	cmp	r3, #7
 8003524:	dc16      	bgt.n	8003554 <_HandleIncomingPacket+0x5c>
 8003526:	2b00      	cmp	r3, #0
 8003528:	dd3e      	ble.n	80035a8 <_HandleIncomingPacket+0xb0>
 800352a:	3b01      	subs	r3, #1
 800352c:	2b06      	cmp	r3, #6
 800352e:	d83b      	bhi.n	80035a8 <_HandleIncomingPacket+0xb0>
 8003530:	a201      	add	r2, pc, #4	; (adr r2, 8003538 <_HandleIncomingPacket+0x40>)
 8003532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003536:	bf00      	nop
 8003538:	0800355b 	.word	0x0800355b
 800353c:	08003561 	.word	0x08003561
 8003540:	08003567 	.word	0x08003567
 8003544:	0800356d 	.word	0x0800356d
 8003548:	08003573 	.word	0x08003573
 800354c:	08003579 	.word	0x08003579
 8003550:	0800357f 	.word	0x0800357f
 8003554:	2b7f      	cmp	r3, #127	; 0x7f
 8003556:	d034      	beq.n	80035c2 <_HandleIncomingPacket+0xca>
 8003558:	e026      	b.n	80035a8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800355a:	f000 fe37 	bl	80041cc <SEGGER_SYSVIEW_Start>
      break;
 800355e:	e035      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003560:	f000 feee 	bl	8004340 <SEGGER_SYSVIEW_Stop>
      break;
 8003564:	e032      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003566:	f001 f8c7 	bl	80046f8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800356a:	e02f      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800356c:	f001 f88c 	bl	8004688 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003570:	e02c      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003572:	f000 ff0b 	bl	800438c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003576:	e029      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003578:	f001 faea 	bl	8004b50 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800357c:	e026      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800357e:	f001 fac9 	bl	8004b14 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003582:	e023      	b.n	80035cc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003584:	4b13      	ldr	r3, [pc, #76]	; (80035d4 <_HandleIncomingPacket+0xdc>)
 8003586:	7e1b      	ldrb	r3, [r3, #24]
 8003588:	4618      	mov	r0, r3
 800358a:	1cfb      	adds	r3, r7, #3
 800358c:	2201      	movs	r2, #1
 800358e:	4619      	mov	r1, r3
 8003590:	f7ff fdde 	bl	8003150 <SEGGER_RTT_ReadNoLock>
 8003594:	4603      	mov	r3, r0
 8003596:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	dd13      	ble.n	80035c6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800359e:	78fb      	ldrb	r3, [r7, #3]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f001 fa37 	bl	8004a14 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80035a6:	e00e      	b.n	80035c6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80035a8:	78fb      	ldrb	r3, [r7, #3]
 80035aa:	b25b      	sxtb	r3, r3
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	da0c      	bge.n	80035ca <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80035b0:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <_HandleIncomingPacket+0xdc>)
 80035b2:	7e1b      	ldrb	r3, [r3, #24]
 80035b4:	4618      	mov	r0, r3
 80035b6:	1cfb      	adds	r3, r7, #3
 80035b8:	2201      	movs	r2, #1
 80035ba:	4619      	mov	r1, r3
 80035bc:	f7ff fdc8 	bl	8003150 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80035c0:	e003      	b.n	80035ca <_HandleIncomingPacket+0xd2>
      break;
 80035c2:	bf00      	nop
 80035c4:	e002      	b.n	80035cc <_HandleIncomingPacket+0xd4>
      break;
 80035c6:	bf00      	nop
 80035c8:	e000      	b.n	80035cc <_HandleIncomingPacket+0xd4>
      break;
 80035ca:	bf00      	nop
    }
  }
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	20014358 	.word	0x20014358

080035d8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b08c      	sub	sp, #48	; 0x30
 80035dc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80035de:	2301      	movs	r3, #1
 80035e0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80035e2:	1d3b      	adds	r3, r7, #4
 80035e4:	3301      	adds	r3, #1
 80035e6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ec:	4b31      	ldr	r3, [pc, #196]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 80035ee:	695b      	ldr	r3, [r3, #20]
 80035f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035f2:	e00b      	b.n	800360c <_TrySendOverflowPacket+0x34>
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	1c59      	adds	r1, r3, #1
 80035fc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80035fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
 8003606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003608:	09db      	lsrs	r3, r3, #7
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2b7f      	cmp	r3, #127	; 0x7f
 8003610:	d8f0      	bhi.n	80035f4 <_TrySendOverflowPacket+0x1c>
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800361a:	b2d2      	uxtb	r2, r2
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003620:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003622:	4b25      	ldr	r3, [pc, #148]	; (80036b8 <_TrySendOverflowPacket+0xe0>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003628:	4b22      	ldr	r3, [pc, #136]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	623b      	str	r3, [r7, #32]
 800363a:	e00b      	b.n	8003654 <_TrySendOverflowPacket+0x7c>
 800363c:	6a3b      	ldr	r3, [r7, #32]
 800363e:	b2da      	uxtb	r2, r3
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	1c59      	adds	r1, r3, #1
 8003644:	6279      	str	r1, [r7, #36]	; 0x24
 8003646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800364a:	b2d2      	uxtb	r2, r2
 800364c:	701a      	strb	r2, [r3, #0]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	09db      	lsrs	r3, r3, #7
 8003652:	623b      	str	r3, [r7, #32]
 8003654:	6a3b      	ldr	r3, [r7, #32]
 8003656:	2b7f      	cmp	r3, #127	; 0x7f
 8003658:	d8f0      	bhi.n	800363c <_TrySendOverflowPacket+0x64>
 800365a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	627a      	str	r2, [r7, #36]	; 0x24
 8003660:	6a3a      	ldr	r2, [r7, #32]
 8003662:	b2d2      	uxtb	r2, r2
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800366a:	4b12      	ldr	r3, [pc, #72]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 800366c:	785b      	ldrb	r3, [r3, #1]
 800366e:	4618      	mov	r0, r3
 8003670:	1d3b      	adds	r3, r7, #4
 8003672:	69fa      	ldr	r2, [r7, #28]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	461a      	mov	r2, r3
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	4619      	mov	r1, r3
 800367c:	f7fc fda8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003680:	4603      	mov	r3, r0
 8003682:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d009      	beq.n	800369e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800368a:	4a0a      	ldr	r2, [pc, #40]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003690:	4b08      	ldr	r3, [pc, #32]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	3b01      	subs	r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 800369a:	701a      	strb	r2, [r3, #0]
 800369c:	e004      	b.n	80036a8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800369e:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	3301      	adds	r3, #1
 80036a4:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <_TrySendOverflowPacket+0xdc>)
 80036a6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80036a8:	693b      	ldr	r3, [r7, #16]
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3730      	adds	r7, #48	; 0x30
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20014358 	.word	0x20014358
 80036b8:	e0001004 	.word	0xe0001004

080036bc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80036bc:	b580      	push	{r7, lr}
 80036be:	b08a      	sub	sp, #40	; 0x28
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80036c8:	4b6c      	ldr	r3, [pc, #432]	; (800387c <_SendPacket+0x1c0>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d010      	beq.n	80036f2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80036d0:	4b6a      	ldr	r3, [pc, #424]	; (800387c <_SendPacket+0x1c0>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80a3 	beq.w	8003820 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80036da:	4b68      	ldr	r3, [pc, #416]	; (800387c <_SendPacket+0x1c0>)
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d109      	bne.n	80036f6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80036e2:	f7ff ff79 	bl	80035d8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80036e6:	4b65      	ldr	r3, [pc, #404]	; (800387c <_SendPacket+0x1c0>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f040 809a 	bne.w	8003824 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80036f0:	e001      	b.n	80036f6 <_SendPacket+0x3a>
    goto Send;
 80036f2:	bf00      	nop
 80036f4:	e000      	b.n	80036f8 <_SendPacket+0x3c>
Send:
 80036f6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b1f      	cmp	r3, #31
 80036fc:	d809      	bhi.n	8003712 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80036fe:	4b5f      	ldr	r3, [pc, #380]	; (800387c <_SendPacket+0x1c0>)
 8003700:	69da      	ldr	r2, [r3, #28]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fa22 f303 	lsr.w	r3, r2, r3
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	f040 808b 	bne.w	8003828 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2b17      	cmp	r3, #23
 8003716:	d807      	bhi.n	8003728 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	3b01      	subs	r3, #1
 800371c:	60fb      	str	r3, [r7, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	b2da      	uxtb	r2, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	701a      	strb	r2, [r3, #0]
 8003726:	e03d      	b.n	80037a4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8003728:	68ba      	ldr	r2, [r7, #8]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	2b7f      	cmp	r3, #127	; 0x7f
 8003734:	d912      	bls.n	800375c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	09da      	lsrs	r2, r3, #7
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3b01      	subs	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	b2d2      	uxtb	r2, r2
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	b2db      	uxtb	r3, r3
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	3a01      	subs	r2, #1
 800374e:	60fa      	str	r2, [r7, #12]
 8003750:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003754:	b2da      	uxtb	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	701a      	strb	r2, [r3, #0]
 800375a:	e006      	b.n	800376a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	3b01      	subs	r3, #1
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	b2da      	uxtb	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b7f      	cmp	r3, #127	; 0x7f
 800376e:	d912      	bls.n	8003796 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	09da      	lsrs	r2, r3, #7
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3b01      	subs	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	b2d2      	uxtb	r2, r2
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	3a01      	subs	r2, #1
 8003788:	60fa      	str	r2, [r7, #12]
 800378a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800378e:	b2da      	uxtb	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	701a      	strb	r2, [r3, #0]
 8003794:	e006      	b.n	80037a4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	3b01      	subs	r3, #1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80037a4:	4b36      	ldr	r3, [pc, #216]	; (8003880 <_SendPacket+0x1c4>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80037aa:	4b34      	ldr	r3, [pc, #208]	; (800387c <_SendPacket+0x1c0>)
 80037ac:	68db      	ldr	r3, [r3, #12]
 80037ae:	69ba      	ldr	r2, [r7, #24]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	623b      	str	r3, [r7, #32]
 80037bc:	e00b      	b.n	80037d6 <_SendPacket+0x11a>
 80037be:	6a3b      	ldr	r3, [r7, #32]
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037c4:	1c59      	adds	r1, r3, #1
 80037c6:	6279      	str	r1, [r7, #36]	; 0x24
 80037c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80037cc:	b2d2      	uxtb	r2, r2
 80037ce:	701a      	strb	r2, [r3, #0]
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	09db      	lsrs	r3, r3, #7
 80037d4:	623b      	str	r3, [r7, #32]
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	2b7f      	cmp	r3, #127	; 0x7f
 80037da:	d8f0      	bhi.n	80037be <_SendPacket+0x102>
 80037dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037de:	1c5a      	adds	r2, r3, #1
 80037e0:	627a      	str	r2, [r7, #36]	; 0x24
 80037e2:	6a3a      	ldr	r2, [r7, #32]
 80037e4:	b2d2      	uxtb	r2, r2
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80037ec:	4b23      	ldr	r3, [pc, #140]	; (800387c <_SendPacket+0x1c0>)
 80037ee:	785b      	ldrb	r3, [r3, #1]
 80037f0:	4618      	mov	r0, r3
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	461a      	mov	r2, r3
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	f7fc fce8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003800:	4603      	mov	r3, r0
 8003802:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800380a:	4a1c      	ldr	r2, [pc, #112]	; (800387c <_SendPacket+0x1c0>)
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	60d3      	str	r3, [r2, #12]
 8003810:	e00b      	b.n	800382a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003812:	4b1a      	ldr	r3, [pc, #104]	; (800387c <_SendPacket+0x1c0>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	3301      	adds	r3, #1
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <_SendPacket+0x1c0>)
 800381c:	701a      	strb	r2, [r3, #0]
 800381e:	e004      	b.n	800382a <_SendPacket+0x16e>
    goto SendDone;
 8003820:	bf00      	nop
 8003822:	e002      	b.n	800382a <_SendPacket+0x16e>
      goto SendDone;
 8003824:	bf00      	nop
 8003826:	e000      	b.n	800382a <_SendPacket+0x16e>
      goto SendDone;
 8003828:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800382a:	4b14      	ldr	r3, [pc, #80]	; (800387c <_SendPacket+0x1c0>)
 800382c:	7e1b      	ldrb	r3, [r3, #24]
 800382e:	4619      	mov	r1, r3
 8003830:	4a14      	ldr	r2, [pc, #80]	; (8003884 <_SendPacket+0x1c8>)
 8003832:	460b      	mov	r3, r1
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	440b      	add	r3, r1
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4413      	add	r3, r2
 800383c:	336c      	adds	r3, #108	; 0x6c
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <_SendPacket+0x1c0>)
 8003842:	7e1b      	ldrb	r3, [r3, #24]
 8003844:	4618      	mov	r0, r3
 8003846:	490f      	ldr	r1, [pc, #60]	; (8003884 <_SendPacket+0x1c8>)
 8003848:	4603      	mov	r3, r0
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	4403      	add	r3, r0
 800384e:	00db      	lsls	r3, r3, #3
 8003850:	440b      	add	r3, r1
 8003852:	3370      	adds	r3, #112	; 0x70
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d00b      	beq.n	8003872 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <_SendPacket+0x1c0>)
 800385c:	789b      	ldrb	r3, [r3, #2]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d107      	bne.n	8003872 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003862:	4b06      	ldr	r3, [pc, #24]	; (800387c <_SendPacket+0x1c0>)
 8003864:	2201      	movs	r2, #1
 8003866:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003868:	f7ff fe46 	bl	80034f8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <_SendPacket+0x1c0>)
 800386e:	2200      	movs	r2, #0
 8003870:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003872:	bf00      	nop
 8003874:	3728      	adds	r7, #40	; 0x28
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	20014358 	.word	0x20014358
 8003880:	e0001004 	.word	0xe0001004
 8003884:	20012e98 	.word	0x20012e98

08003888 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8003888:	b580      	push	{r7, lr}
 800388a:	b08a      	sub	sp, #40	; 0x28
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	691b      	ldr	r3, [r3, #16]
 8003898:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	3301      	adds	r3, #1
 800389e:	2b80      	cmp	r3, #128	; 0x80
 80038a0:	d80a      	bhi.n	80038b8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	1c59      	adds	r1, r3, #1
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6051      	str	r1, [r2, #4]
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d15a      	bne.n	8003976 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	623b      	str	r3, [r7, #32]
 80038e0:	e00b      	b.n	80038fa <_StoreChar+0x72>
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	b2da      	uxtb	r2, r3
 80038e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038e8:	1c59      	adds	r1, r3, #1
 80038ea:	6279      	str	r1, [r7, #36]	; 0x24
 80038ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	09db      	lsrs	r3, r3, #7
 80038f8:	623b      	str	r3, [r7, #32]
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	2b7f      	cmp	r3, #127	; 0x7f
 80038fe:	d8f0      	bhi.n	80038e2 <_StoreChar+0x5a>
 8003900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003902:	1c5a      	adds	r2, r3, #1
 8003904:	627a      	str	r2, [r7, #36]	; 0x24
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	b2d2      	uxtb	r2, r2
 800390a:	701a      	strb	r2, [r3, #0]
 800390c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800390e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	2300      	movs	r3, #0
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	e00b      	b.n	8003932 <_StoreChar+0xaa>
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	b2da      	uxtb	r2, r3
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	1c59      	adds	r1, r3, #1
 8003922:	61f9      	str	r1, [r7, #28]
 8003924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003928:	b2d2      	uxtb	r2, r2
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	09db      	lsrs	r3, r3, #7
 8003930:	61bb      	str	r3, [r7, #24]
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	2b7f      	cmp	r3, #127	; 0x7f
 8003936:	d8f0      	bhi.n	800391a <_StoreChar+0x92>
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	1c5a      	adds	r2, r3, #1
 800393c:	61fa      	str	r2, [r7, #28]
 800393e:	69ba      	ldr	r2, [r7, #24]
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	701a      	strb	r2, [r3, #0]
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	221a      	movs	r2, #26
 800394e:	6939      	ldr	r1, [r7, #16]
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff feb3 	bl	80036bc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f7ff fdbf 	bl	80034de <_PreparePacket>
 8003960:	4602      	mov	r2, r0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	611a      	str	r2, [r3, #16]
  }
}
 8003976:	bf00      	nop
 8003978:	3728      	adds	r7, #40	; 0x28
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b08a      	sub	sp, #40	; 0x28
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
 800398c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8003992:	2301      	movs	r3, #1
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8003996:	2301      	movs	r3, #1
 8003998:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800399a:	e007      	b.n	80039ac <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a4:	623b      	str	r3, [r7, #32]
    Width++;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80039ac:	6a3a      	ldr	r2, [r7, #32]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d2f3      	bcs.n	800399c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80039b4:	683a      	ldr	r2, [r7, #0]
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d901      	bls.n	80039c0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80039c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11f      	bne.n	8003a0a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80039ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01c      	beq.n	8003a0a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80039d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d005      	beq.n	80039e6 <_PrintUnsigned+0x66>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <_PrintUnsigned+0x66>
        c = '0';
 80039e0:	2330      	movs	r3, #48	; 0x30
 80039e2:	76fb      	strb	r3, [r7, #27]
 80039e4:	e001      	b.n	80039ea <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80039e6:	2320      	movs	r3, #32
 80039e8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80039ea:	e007      	b.n	80039fc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80039ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ee:	3b01      	subs	r3, #1
 80039f0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80039f2:	7efb      	ldrb	r3, [r7, #27]
 80039f4:	4619      	mov	r1, r3
 80039f6:	68f8      	ldr	r0, [r7, #12]
 80039f8:	f7ff ff46 	bl	8003888 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80039fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <_PrintUnsigned+0x8a>
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a06:	429a      	cmp	r2, r3
 8003a08:	d3f0      	bcc.n	80039ec <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d903      	bls.n	8003a18 <_PrintUnsigned+0x98>
      NumDigits--;
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	e009      	b.n	8003a2c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	429a      	cmp	r2, r3
 8003a28:	d200      	bcs.n	8003a2c <_PrintUnsigned+0xac>
        break;
 8003a2a:	e005      	b.n	8003a38 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	687a      	ldr	r2, [r7, #4]
 8003a30:	fb02 f303 	mul.w	r3, r2, r3
 8003a34:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8003a36:	e7e8      	b.n	8003a0a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a46:	fb02 f303 	mul.w	r3, r2, r3
 8003a4a:	68ba      	ldr	r2, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <_PrintUnsigned+0x128>)
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	4413      	add	r3, r2
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	4619      	mov	r1, r3
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7ff ff14 	bl	8003888 <_StoreChar>
    Digit /= Base;
 8003a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a68:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8003a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e3      	bne.n	8003a38 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8003a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d011      	beq.n	8003a9e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d00e      	beq.n	8003a9e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003a80:	e006      	b.n	8003a90 <_PrintUnsigned+0x110>
        FieldWidth--;
 8003a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a84:	3b01      	subs	r3, #1
 8003a86:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8003a88:	2120      	movs	r1, #32
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f7ff fefc 	bl	8003888 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d003      	beq.n	8003a9e <_PrintUnsigned+0x11e>
 8003a96:	69fa      	ldr	r2, [r7, #28]
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d3f1      	bcc.n	8003a82 <_PrintUnsigned+0x102>
      }
    }
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	3728      	adds	r7, #40	; 0x28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	080057e8 	.word	0x080057e8

08003aac <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bfb8      	it	lt
 8003ac0:	425b      	neglt	r3, r3
 8003ac2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003ac8:	e007      	b.n	8003ada <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ad2:	613b      	str	r3, [r7, #16]
    Width++;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	3301      	adds	r3, #1
 8003ad8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	daf3      	bge.n	8003aca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d901      	bls.n	8003aee <_PrintInt+0x42>
    Width = NumDigits;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00a      	beq.n	8003b0a <_PrintInt+0x5e>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	db04      	blt.n	8003b04 <_PrintInt+0x58>
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d002      	beq.n	8003b0a <_PrintInt+0x5e>
    FieldWidth--;
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	f003 0302 	and.w	r3, r3, #2
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d002      	beq.n	8003b1a <_PrintInt+0x6e>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d016      	beq.n	8003b48 <_PrintInt+0x9c>
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d111      	bne.n	8003b48 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00e      	beq.n	8003b48 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b2a:	e006      	b.n	8003b3a <_PrintInt+0x8e>
        FieldWidth--;
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8003b32:	2120      	movs	r1, #32
 8003b34:	68f8      	ldr	r0, [r7, #12]
 8003b36:	f7ff fea7 	bl	8003888 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <_PrintInt+0x9c>
 8003b40:	697a      	ldr	r2, [r7, #20]
 8003b42:	6a3b      	ldr	r3, [r7, #32]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d3f1      	bcc.n	8003b2c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da07      	bge.n	8003b5e <_PrintInt+0xb2>
    v = -v;
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	425b      	negs	r3, r3
 8003b52:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8003b54:	212d      	movs	r1, #45	; 0x2d
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff fe96 	bl	8003888 <_StoreChar>
 8003b5c:	e008      	b.n	8003b70 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b60:	f003 0304 	and.w	r3, r3, #4
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8003b68:	212b      	movs	r1, #43	; 0x2b
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f7ff fe8c 	bl	8003888 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8003b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d019      	beq.n	8003bae <_PrintInt+0x102>
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	f003 0301 	and.w	r3, r3, #1
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d114      	bne.n	8003bae <_PrintInt+0x102>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d111      	bne.n	8003bae <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8003b8a:	6a3b      	ldr	r3, [r7, #32]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003b90:	e006      	b.n	8003ba0 <_PrintInt+0xf4>
        FieldWidth--;
 8003b92:	6a3b      	ldr	r3, [r7, #32]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8003b98:	2130      	movs	r1, #48	; 0x30
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	f7ff fe74 	bl	8003888 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8003ba0:	6a3b      	ldr	r3, [r7, #32]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <_PrintInt+0x102>
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d3f1      	bcc.n	8003b92 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8003bae:	68b9      	ldr	r1, [r7, #8]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	9301      	str	r3, [sp, #4]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	9300      	str	r3, [sp, #0]
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	68f8      	ldr	r0, [r7, #12]
 8003bbe:	f7ff fedf 	bl	8003980 <_PrintUnsigned>
}
 8003bc2:	bf00      	nop
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
	...

08003bcc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b098      	sub	sp, #96	; 0x60
 8003bd0:	af02      	add	r7, sp, #8
 8003bd2:	60f8      	str	r0, [r7, #12]
 8003bd4:	60b9      	str	r1, [r7, #8]
 8003bd6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8003bdc:	f04f 0120 	mov.w	r1, #32
 8003be0:	f381 8811 	msr	BASEPRI, r1
 8003be4:	633b      	str	r3, [r7, #48]	; 0x30
 8003be6:	48b7      	ldr	r0, [pc, #732]	; (8003ec4 <_VPrintTarget+0x2f8>)
 8003be8:	f7ff fc79 	bl	80034de <_PreparePacket>
 8003bec:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8003bee:	4bb5      	ldr	r3, [pc, #724]	; (8003ec4 <_VPrintTarget+0x2f8>)
 8003bf0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8003bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8003c12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8183 	beq.w	8003f22 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8003c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c20:	2b25      	cmp	r3, #37	; 0x25
 8003c22:	f040 8170 	bne.w	8003f06 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8003c26:	2300      	movs	r3, #0
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8003c36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003c3a:	3b23      	subs	r3, #35	; 0x23
 8003c3c:	2b0d      	cmp	r3, #13
 8003c3e:	d83f      	bhi.n	8003cc0 <_VPrintTarget+0xf4>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <_VPrintTarget+0x7c>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003cb1 	.word	0x08003cb1
 8003c4c:	08003cc1 	.word	0x08003cc1
 8003c50:	08003cc1 	.word	0x08003cc1
 8003c54:	08003cc1 	.word	0x08003cc1
 8003c58:	08003cc1 	.word	0x08003cc1
 8003c5c:	08003cc1 	.word	0x08003cc1
 8003c60:	08003cc1 	.word	0x08003cc1
 8003c64:	08003cc1 	.word	0x08003cc1
 8003c68:	08003ca1 	.word	0x08003ca1
 8003c6c:	08003cc1 	.word	0x08003cc1
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003cc1 	.word	0x08003cc1
 8003c78:	08003cc1 	.word	0x08003cc1
 8003c7c:	08003c91 	.word	0x08003c91
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8003c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c82:	f043 0301 	orr.w	r3, r3, #1
 8003c86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3301      	adds	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
 8003c8e:	e01a      	b.n	8003cc6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8003c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c92:	f043 0302 	orr.w	r3, r3, #2
 8003c96:	64bb      	str	r3, [r7, #72]	; 0x48
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	e012      	b.n	8003cc6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8003ca0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ca2:	f043 0304 	orr.w	r3, r3, #4
 8003ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	3301      	adds	r3, #1
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	e00a      	b.n	8003cc6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8003cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cb2:	f043 0308 	orr.w	r3, r3, #8
 8003cb6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	e002      	b.n	8003cc6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cc4:	bf00      	nop
        }
      } while (v);
 8003cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d1b0      	bne.n	8003c2e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8003cd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cdc:	2b2f      	cmp	r3, #47	; 0x2f
 8003cde:	d912      	bls.n	8003d06 <_VPrintTarget+0x13a>
 8003ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ce4:	2b39      	cmp	r3, #57	; 0x39
 8003ce6:	d80e      	bhi.n	8003d06 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	3301      	adds	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8003cee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4413      	add	r3, r2
 8003cf6:	005b      	lsls	r3, r3, #1
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003cfe:	4413      	add	r3, r2
 8003d00:	3b30      	subs	r3, #48	; 0x30
 8003d02:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8003d04:	e7e4      	b.n	8003cd0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8003d06:	2300      	movs	r3, #0
 8003d08:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8003d12:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d16:	2b2e      	cmp	r3, #46	; 0x2e
 8003d18:	d11d      	bne.n	8003d56 <_VPrintTarget+0x18a>
        sFormat++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8003d28:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d2c:	2b2f      	cmp	r3, #47	; 0x2f
 8003d2e:	d912      	bls.n	8003d56 <_VPrintTarget+0x18a>
 8003d30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d34:	2b39      	cmp	r3, #57	; 0x39
 8003d36:	d80e      	bhi.n	8003d56 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8003d3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d40:	4613      	mov	r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	4413      	add	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d4e:	4413      	add	r3, r2
 8003d50:	3b30      	subs	r3, #48	; 0x30
 8003d52:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8003d54:	e7e4      	b.n	8003d20 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8003d5e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d62:	2b6c      	cmp	r3, #108	; 0x6c
 8003d64:	d003      	beq.n	8003d6e <_VPrintTarget+0x1a2>
 8003d66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d6a:	2b68      	cmp	r3, #104	; 0x68
 8003d6c:	d107      	bne.n	8003d7e <_VPrintTarget+0x1b2>
          c = *sFormat;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8003d7c:	e7ef      	b.n	8003d5e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8003d7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003d82:	2b25      	cmp	r3, #37	; 0x25
 8003d84:	f000 80b3 	beq.w	8003eee <_VPrintTarget+0x322>
 8003d88:	2b25      	cmp	r3, #37	; 0x25
 8003d8a:	f2c0 80b7 	blt.w	8003efc <_VPrintTarget+0x330>
 8003d8e:	2b78      	cmp	r3, #120	; 0x78
 8003d90:	f300 80b4 	bgt.w	8003efc <_VPrintTarget+0x330>
 8003d94:	2b58      	cmp	r3, #88	; 0x58
 8003d96:	f2c0 80b1 	blt.w	8003efc <_VPrintTarget+0x330>
 8003d9a:	3b58      	subs	r3, #88	; 0x58
 8003d9c:	2b20      	cmp	r3, #32
 8003d9e:	f200 80ad 	bhi.w	8003efc <_VPrintTarget+0x330>
 8003da2:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <_VPrintTarget+0x1dc>)
 8003da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da8:	08003e9f 	.word	0x08003e9f
 8003dac:	08003efd 	.word	0x08003efd
 8003db0:	08003efd 	.word	0x08003efd
 8003db4:	08003efd 	.word	0x08003efd
 8003db8:	08003efd 	.word	0x08003efd
 8003dbc:	08003efd 	.word	0x08003efd
 8003dc0:	08003efd 	.word	0x08003efd
 8003dc4:	08003efd 	.word	0x08003efd
 8003dc8:	08003efd 	.word	0x08003efd
 8003dcc:	08003efd 	.word	0x08003efd
 8003dd0:	08003efd 	.word	0x08003efd
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e53 	.word	0x08003e53
 8003ddc:	08003efd 	.word	0x08003efd
 8003de0:	08003efd 	.word	0x08003efd
 8003de4:	08003efd 	.word	0x08003efd
 8003de8:	08003efd 	.word	0x08003efd
 8003dec:	08003efd 	.word	0x08003efd
 8003df0:	08003efd 	.word	0x08003efd
 8003df4:	08003efd 	.word	0x08003efd
 8003df8:	08003efd 	.word	0x08003efd
 8003dfc:	08003efd 	.word	0x08003efd
 8003e00:	08003efd 	.word	0x08003efd
 8003e04:	08003efd 	.word	0x08003efd
 8003e08:	08003ec9 	.word	0x08003ec9
 8003e0c:	08003efd 	.word	0x08003efd
 8003e10:	08003efd 	.word	0x08003efd
 8003e14:	08003efd 	.word	0x08003efd
 8003e18:	08003efd 	.word	0x08003efd
 8003e1c:	08003e79 	.word	0x08003e79
 8003e20:	08003efd 	.word	0x08003efd
 8003e24:	08003efd 	.word	0x08003efd
 8003e28:	08003e9f 	.word	0x08003e9f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	1d19      	adds	r1, r3, #4
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6011      	str	r1, [r2, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8003e3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8003e40:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8003e44:	f107 0314 	add.w	r3, r7, #20
 8003e48:	4611      	mov	r1, r2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f7ff fd1c 	bl	8003888 <_StoreChar>
        break;
 8003e50:	e055      	b.n	8003efe <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	1d19      	adds	r1, r3, #4
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	6011      	str	r1, [r2, #0]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003e60:	f107 0014 	add.w	r0, r7, #20
 8003e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e66:	9301      	str	r3, [sp, #4]
 8003e68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e6a:	9300      	str	r3, [sp, #0]
 8003e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e6e:	220a      	movs	r2, #10
 8003e70:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e72:	f7ff fe1b 	bl	8003aac <_PrintInt>
        break;
 8003e76:	e042      	b.n	8003efe <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1d19      	adds	r1, r3, #4
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	6011      	str	r1, [r2, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8003e86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003e88:	f107 0014 	add.w	r0, r7, #20
 8003e8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e96:	220a      	movs	r2, #10
 8003e98:	f7ff fd72 	bl	8003980 <_PrintUnsigned>
        break;
 8003e9c:	e02f      	b.n	8003efe <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	1d19      	adds	r1, r3, #4
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	6011      	str	r1, [r2, #0]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8003eac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003eae:	f107 0014 	add.w	r0, r7, #20
 8003eb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	f7ff fd5f 	bl	8003980 <_PrintUnsigned>
        break;
 8003ec2:	e01c      	b.n	8003efe <_VPrintTarget+0x332>
 8003ec4:	20014388 	.word	0x20014388
      case 'p':
        v = va_arg(*pParamList, int);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	1d19      	adds	r1, r3, #4
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6011      	str	r1, [r2, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8003ed6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003ed8:	f107 0014 	add.w	r0, r7, #20
 8003edc:	2300      	movs	r3, #0
 8003ede:	9301      	str	r3, [sp, #4]
 8003ee0:	2308      	movs	r3, #8
 8003ee2:	9300      	str	r3, [sp, #0]
 8003ee4:	2308      	movs	r3, #8
 8003ee6:	2210      	movs	r2, #16
 8003ee8:	f7ff fd4a 	bl	8003980 <_PrintUnsigned>
        break;
 8003eec:	e007      	b.n	8003efe <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8003eee:	f107 0314 	add.w	r3, r7, #20
 8003ef2:	2125      	movs	r1, #37	; 0x25
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fcc7 	bl	8003888 <_StoreChar>
        break;
 8003efa:	e000      	b.n	8003efe <_VPrintTarget+0x332>
      default:
        break;
 8003efc:	bf00      	nop
      }
      sFormat++;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	60fb      	str	r3, [r7, #12]
 8003f04:	e007      	b.n	8003f16 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8003f06:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003f0a:	f107 0314 	add.w	r3, r7, #20
 8003f0e:	4611      	mov	r1, r2
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7ff fcb9 	bl	8003888 <_StoreChar>
    }
  } while (*sFormat);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f47f ae72 	bne.w	8003c04 <_VPrintTarget+0x38>
 8003f20:	e000      	b.n	8003f24 <_VPrintTarget+0x358>
      break;
 8003f22:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d041      	beq.n	8003fae <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	643b      	str	r3, [r7, #64]	; 0x40
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f3a:	e00b      	b.n	8003f54 <_VPrintTarget+0x388>
 8003f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	6439      	str	r1, [r7, #64]	; 0x40
 8003f46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	09db      	lsrs	r3, r3, #7
 8003f52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f56:	2b7f      	cmp	r3, #127	; 0x7f
 8003f58:	d8f0      	bhi.n	8003f3c <_VPrintTarget+0x370>
 8003f5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	643a      	str	r2, [r7, #64]	; 0x40
 8003f60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f68:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f6e:	2300      	movs	r3, #0
 8003f70:	637b      	str	r3, [r7, #52]	; 0x34
 8003f72:	e00b      	b.n	8003f8c <_VPrintTarget+0x3c0>
 8003f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f7e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f88:	09db      	lsrs	r3, r3, #7
 8003f8a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f8e:	2b7f      	cmp	r3, #127	; 0x7f
 8003f90:	d8f0      	bhi.n	8003f74 <_VPrintTarget+0x3a8>
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	63ba      	str	r2, [r7, #56]	; 0x38
 8003f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	221a      	movs	r2, #26
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff fb87 	bl	80036bc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8003fb4:	bf00      	nop
 8003fb6:	3758      	adds	r7, #88	; 0x58
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003fd0:	4917      	ldr	r1, [pc, #92]	; (8004030 <SEGGER_SYSVIEW_Init+0x74>)
 8003fd2:	4818      	ldr	r0, [pc, #96]	; (8004034 <SEGGER_SYSVIEW_Init+0x78>)
 8003fd4:	f7ff f942 	bl	800325c <SEGGER_RTT_AllocUpBuffer>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	4b16      	ldr	r3, [pc, #88]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fde:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003fe0:	4b15      	ldr	r3, [pc, #84]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fe2:	785a      	ldrb	r2, [r3, #1]
 8003fe4:	4b14      	ldr	r3, [pc, #80]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fe6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003fe8:	4b13      	ldr	r3, [pc, #76]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8003fea:	7e1b      	ldrb	r3, [r3, #24]
 8003fec:	4618      	mov	r0, r3
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	2308      	movs	r3, #8
 8003ff4:	4a11      	ldr	r2, [pc, #68]	; (800403c <SEGGER_SYSVIEW_Init+0x80>)
 8003ff6:	490f      	ldr	r1, [pc, #60]	; (8004034 <SEGGER_SYSVIEW_Init+0x78>)
 8003ff8:	f7ff f9b4 	bl	8003364 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004002:	4b0f      	ldr	r3, [pc, #60]	; (8004040 <SEGGER_SYSVIEW_Init+0x84>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a0c      	ldr	r2, [pc, #48]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8004008:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800400a:	4a0b      	ldr	r2, [pc, #44]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8004016:	4a08      	ldr	r2, [pc, #32]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800401c:	4a06      	ldr	r2, [pc, #24]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8004022:	4b05      	ldr	r3, [pc, #20]	; (8004038 <SEGGER_SYSVIEW_Init+0x7c>)
 8004024:	2200      	movs	r2, #0
 8004026:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	20013350 	.word	0x20013350
 8004034:	08005768 	.word	0x08005768
 8004038:	20014358 	.word	0x20014358
 800403c:	20014350 	.word	0x20014350
 8004040:	e0001004 	.word	0xe0001004

08004044 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8004044:	b480      	push	{r7}
 8004046:	b083      	sub	sp, #12
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800404c:	4a04      	ldr	r2, [pc, #16]	; (8004060 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6113      	str	r3, [r2, #16]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20014358 	.word	0x20014358

08004064 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800406c:	f3ef 8311 	mrs	r3, BASEPRI
 8004070:	f04f 0120 	mov.w	r1, #32
 8004074:	f381 8811 	msr	BASEPRI, r1
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4808      	ldr	r0, [pc, #32]	; (800409c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800407c:	f7ff fa2f 	bl	80034de <_PreparePacket>
 8004080:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	68b9      	ldr	r1, [r7, #8]
 8004086:	68b8      	ldr	r0, [r7, #8]
 8004088:	f7ff fb18 	bl	80036bc <_SendPacket>
  RECORD_END();
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f383 8811 	msr	BASEPRI, r3
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20014388 	.word	0x20014388

080040a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b088      	sub	sp, #32
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040aa:	f3ef 8311 	mrs	r3, BASEPRI
 80040ae:	f04f 0120 	mov.w	r1, #32
 80040b2:	f381 8811 	msr	BASEPRI, r1
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	4816      	ldr	r0, [pc, #88]	; (8004114 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80040ba:	f7ff fa10 	bl	80034de <_PreparePacket>
 80040be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e00b      	b.n	80040e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	1c59      	adds	r1, r3, #1
 80040d6:	61f9      	str	r1, [r7, #28]
 80040d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b7f      	cmp	r3, #127	; 0x7f
 80040ea:	d8f0      	bhi.n	80040ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	6938      	ldr	r0, [r7, #16]
 8004102:	f7ff fadb 	bl	80036bc <_SendPacket>
  RECORD_END();
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f383 8811 	msr	BASEPRI, r3
}
 800410c:	bf00      	nop
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20014388 	.word	0x20014388

08004118 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b08c      	sub	sp, #48	; 0x30
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004124:	f3ef 8311 	mrs	r3, BASEPRI
 8004128:	f04f 0120 	mov.w	r1, #32
 800412c:	f381 8811 	msr	BASEPRI, r1
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	4825      	ldr	r0, [pc, #148]	; (80041c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004134:	f7ff f9d3 	bl	80034de <_PreparePacket>
 8004138:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	62bb      	str	r3, [r7, #40]	; 0x28
 8004146:	e00b      	b.n	8004160 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	b2da      	uxtb	r2, r3
 800414c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800414e:	1c59      	adds	r1, r3, #1
 8004150:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004152:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004156:	b2d2      	uxtb	r2, r2
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800415c:	09db      	lsrs	r3, r3, #7
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004162:	2b7f      	cmp	r3, #127	; 0x7f
 8004164:	d8f0      	bhi.n	8004148 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800416c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]
 8004172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004174:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	623b      	str	r3, [r7, #32]
 800417e:	e00b      	b.n	8004198 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004180:	6a3b      	ldr	r3, [r7, #32]
 8004182:	b2da      	uxtb	r2, r3
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1c59      	adds	r1, r3, #1
 8004188:	6279      	str	r1, [r7, #36]	; 0x24
 800418a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	09db      	lsrs	r3, r3, #7
 8004196:	623b      	str	r3, [r7, #32]
 8004198:	6a3b      	ldr	r3, [r7, #32]
 800419a:	2b7f      	cmp	r3, #127	; 0x7f
 800419c:	d8f0      	bhi.n	8004180 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800419e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041a0:	1c5a      	adds	r2, r3, #1
 80041a2:	627a      	str	r2, [r7, #36]	; 0x24
 80041a4:	6a3a      	ldr	r2, [r7, #32]
 80041a6:	b2d2      	uxtb	r2, r2
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	6979      	ldr	r1, [r7, #20]
 80041b2:	69b8      	ldr	r0, [r7, #24]
 80041b4:	f7ff fa82 	bl	80036bc <_SendPacket>
  RECORD_END();
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	f383 8811 	msr	BASEPRI, r3
}
 80041be:	bf00      	nop
 80041c0:	3730      	adds	r7, #48	; 0x30
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20014388 	.word	0x20014388

080041cc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08c      	sub	sp, #48	; 0x30
 80041d0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80041d2:	4b58      	ldr	r3, [pc, #352]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 80041d4:	2201      	movs	r2, #1
 80041d6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80041d8:	f3ef 8311 	mrs	r3, BASEPRI
 80041dc:	f04f 0120 	mov.w	r1, #32
 80041e0:	f381 8811 	msr	BASEPRI, r1
 80041e4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80041e6:	4b53      	ldr	r3, [pc, #332]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 80041e8:	785b      	ldrb	r3, [r3, #1]
 80041ea:	220a      	movs	r2, #10
 80041ec:	4952      	ldr	r1, [pc, #328]	; (8004338 <SEGGER_SYSVIEW_Start+0x16c>)
 80041ee:	4618      	mov	r0, r3
 80041f0:	f7fb ffee 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80041fa:	200a      	movs	r0, #10
 80041fc:	f7ff ff32 	bl	8004064 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004200:	f3ef 8311 	mrs	r3, BASEPRI
 8004204:	f04f 0120 	mov.w	r1, #32
 8004208:	f381 8811 	msr	BASEPRI, r1
 800420c:	60bb      	str	r3, [r7, #8]
 800420e:	484b      	ldr	r0, [pc, #300]	; (800433c <SEGGER_SYSVIEW_Start+0x170>)
 8004210:	f7ff f965 	bl	80034de <_PreparePacket>
 8004214:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800421e:	4b45      	ldr	r3, [pc, #276]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	62bb      	str	r3, [r7, #40]	; 0x28
 8004224:	e00b      	b.n	800423e <SEGGER_SYSVIEW_Start+0x72>
 8004226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004228:	b2da      	uxtb	r2, r3
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	1c59      	adds	r1, r3, #1
 800422e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8004230:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004234:	b2d2      	uxtb	r2, r2
 8004236:	701a      	strb	r2, [r3, #0]
 8004238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800423a:	09db      	lsrs	r3, r3, #7
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	2b7f      	cmp	r3, #127	; 0x7f
 8004242:	d8f0      	bhi.n	8004226 <SEGGER_SYSVIEW_Start+0x5a>
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	1c5a      	adds	r2, r3, #1
 8004248:	62fa      	str	r2, [r7, #44]	; 0x2c
 800424a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	701a      	strb	r2, [r3, #0]
 8004250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004252:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	627b      	str	r3, [r7, #36]	; 0x24
 8004258:	4b36      	ldr	r3, [pc, #216]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	623b      	str	r3, [r7, #32]
 800425e:	e00b      	b.n	8004278 <SEGGER_SYSVIEW_Start+0xac>
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	b2da      	uxtb	r2, r3
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	1c59      	adds	r1, r3, #1
 8004268:	6279      	str	r1, [r7, #36]	; 0x24
 800426a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	09db      	lsrs	r3, r3, #7
 8004276:	623b      	str	r3, [r7, #32]
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	2b7f      	cmp	r3, #127	; 0x7f
 800427c:	d8f0      	bhi.n	8004260 <SEGGER_SYSVIEW_Start+0x94>
 800427e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	627a      	str	r2, [r7, #36]	; 0x24
 8004284:	6a3a      	ldr	r2, [r7, #32]
 8004286:	b2d2      	uxtb	r2, r2
 8004288:	701a      	strb	r2, [r3, #0]
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	61fb      	str	r3, [r7, #28]
 8004292:	4b28      	ldr	r3, [pc, #160]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e00b      	b.n	80042b2 <SEGGER_SYSVIEW_Start+0xe6>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	61f9      	str	r1, [r7, #28]
 80042a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b7f      	cmp	r3, #127	; 0x7f
 80042b6:	d8f0      	bhi.n	800429a <SEGGER_SYSVIEW_Start+0xce>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	61fa      	str	r2, [r7, #28]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	2300      	movs	r3, #0
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e00b      	b.n	80042ea <SEGGER_SYSVIEW_Start+0x11e>
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	b2da      	uxtb	r2, r3
 80042d6:	697b      	ldr	r3, [r7, #20]
 80042d8:	1c59      	adds	r1, r3, #1
 80042da:	6179      	str	r1, [r7, #20]
 80042dc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042e0:	b2d2      	uxtb	r2, r2
 80042e2:	701a      	strb	r2, [r3, #0]
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	09db      	lsrs	r3, r3, #7
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b7f      	cmp	r3, #127	; 0x7f
 80042ee:	d8f0      	bhi.n	80042d2 <SEGGER_SYSVIEW_Start+0x106>
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	1c5a      	adds	r2, r3, #1
 80042f4:	617a      	str	r2, [r7, #20]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004300:	2218      	movs	r2, #24
 8004302:	6839      	ldr	r1, [r7, #0]
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f7ff f9d9 	bl	80036bc <_SendPacket>
      RECORD_END();
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004310:	4b08      	ldr	r3, [pc, #32]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004318:	4b06      	ldr	r3, [pc, #24]	; (8004334 <SEGGER_SYSVIEW_Start+0x168>)
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800431e:	f000 f9eb 	bl	80046f8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004322:	f000 f9b1 	bl	8004688 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004326:	f000 fc13 	bl	8004b50 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800432a:	bf00      	nop
 800432c:	3730      	adds	r7, #48	; 0x30
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	20014358 	.word	0x20014358
 8004338:	080057dc 	.word	0x080057dc
 800433c:	20014388 	.word	0x20014388

08004340 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004346:	f3ef 8311 	mrs	r3, BASEPRI
 800434a:	f04f 0120 	mov.w	r1, #32
 800434e:	f381 8811 	msr	BASEPRI, r1
 8004352:	607b      	str	r3, [r7, #4]
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <SEGGER_SYSVIEW_Stop+0x44>)
 8004356:	f7ff f8c2 	bl	80034de <_PreparePacket>
 800435a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800435c:	4b0a      	ldr	r3, [pc, #40]	; (8004388 <SEGGER_SYSVIEW_Stop+0x48>)
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d007      	beq.n	8004374 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004364:	220b      	movs	r2, #11
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	6838      	ldr	r0, [r7, #0]
 800436a:	f7ff f9a7 	bl	80036bc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800436e:	4b06      	ldr	r3, [pc, #24]	; (8004388 <SEGGER_SYSVIEW_Stop+0x48>)
 8004370:	2200      	movs	r2, #0
 8004372:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f383 8811 	msr	BASEPRI, r3
}
 800437a:	bf00      	nop
 800437c:	3708      	adds	r7, #8
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}
 8004382:	bf00      	nop
 8004384:	20014388 	.word	0x20014388
 8004388:	20014358 	.word	0x20014358

0800438c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b08c      	sub	sp, #48	; 0x30
 8004390:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004392:	f3ef 8311 	mrs	r3, BASEPRI
 8004396:	f04f 0120 	mov.w	r1, #32
 800439a:	f381 8811 	msr	BASEPRI, r1
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	4845      	ldr	r0, [pc, #276]	; (80044b8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80043a2:	f7ff f89c 	bl	80034de <_PreparePacket>
 80043a6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043b0:	4b42      	ldr	r3, [pc, #264]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80043b6:	e00b      	b.n	80043d0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80043c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043c6:	b2d2      	uxtb	r2, r2
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043cc:	09db      	lsrs	r3, r3, #7
 80043ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	2b7f      	cmp	r3, #127	; 0x7f
 80043d4:	d8f0      	bhi.n	80043b8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80043d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d8:	1c5a      	adds	r2, r3, #1
 80043da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ea:	4b34      	ldr	r3, [pc, #208]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	e00b      	b.n	800440a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043f8:	1c59      	adds	r1, r3, #1
 80043fa:	6279      	str	r1, [r7, #36]	; 0x24
 80043fc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004400:	b2d2      	uxtb	r2, r2
 8004402:	701a      	strb	r2, [r3, #0]
 8004404:	6a3b      	ldr	r3, [r7, #32]
 8004406:	09db      	lsrs	r3, r3, #7
 8004408:	623b      	str	r3, [r7, #32]
 800440a:	6a3b      	ldr	r3, [r7, #32]
 800440c:	2b7f      	cmp	r3, #127	; 0x7f
 800440e:	d8f0      	bhi.n	80043f2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	1c5a      	adds	r2, r3, #1
 8004414:	627a      	str	r2, [r7, #36]	; 0x24
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	b2d2      	uxtb	r2, r2
 800441a:	701a      	strb	r2, [r3, #0]
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	4b25      	ldr	r3, [pc, #148]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e00b      	b.n	8004444 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	b2da      	uxtb	r2, r3
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	1c59      	adds	r1, r3, #1
 8004434:	61f9      	str	r1, [r7, #28]
 8004436:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800443a:	b2d2      	uxtb	r2, r2
 800443c:	701a      	strb	r2, [r3, #0]
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	09db      	lsrs	r3, r3, #7
 8004442:	61bb      	str	r3, [r7, #24]
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b7f      	cmp	r3, #127	; 0x7f
 8004448:	d8f0      	bhi.n	800442c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	1c5a      	adds	r2, r3, #1
 800444e:	61fa      	str	r2, [r7, #28]
 8004450:	69ba      	ldr	r2, [r7, #24]
 8004452:	b2d2      	uxtb	r2, r2
 8004454:	701a      	strb	r2, [r3, #0]
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	2300      	movs	r3, #0
 8004460:	613b      	str	r3, [r7, #16]
 8004462:	e00b      	b.n	800447c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	b2da      	uxtb	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1c59      	adds	r1, r3, #1
 800446c:	6179      	str	r1, [r7, #20]
 800446e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	09db      	lsrs	r3, r3, #7
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	2b7f      	cmp	r3, #127	; 0x7f
 8004480:	d8f0      	bhi.n	8004464 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	1c5a      	adds	r2, r3, #1
 8004486:	617a      	str	r2, [r7, #20]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004492:	2218      	movs	r2, #24
 8004494:	6879      	ldr	r1, [r7, #4]
 8004496:	68b8      	ldr	r0, [r7, #8]
 8004498:	f7ff f910 	bl	80036bc <_SendPacket>
  RECORD_END();
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80044aa:	4b04      	ldr	r3, [pc, #16]	; (80044bc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80044ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ae:	4798      	blx	r3
  }
}
 80044b0:	bf00      	nop
 80044b2:	3730      	adds	r7, #48	; 0x30
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20014388 	.word	0x20014388
 80044bc:	20014358 	.word	0x20014358

080044c0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b092      	sub	sp, #72	; 0x48
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80044c8:	f3ef 8311 	mrs	r3, BASEPRI
 80044cc:	f04f 0120 	mov.w	r1, #32
 80044d0:	f381 8811 	msr	BASEPRI, r1
 80044d4:	617b      	str	r3, [r7, #20]
 80044d6:	486a      	ldr	r0, [pc, #424]	; (8004680 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80044d8:	f7ff f801 	bl	80034de <_PreparePacket>
 80044dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	647b      	str	r3, [r7, #68]	; 0x44
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	4b66      	ldr	r3, [pc, #408]	; (8004684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	1ad3      	subs	r3, r2, r3
 80044f0:	643b      	str	r3, [r7, #64]	; 0x40
 80044f2:	e00b      	b.n	800450c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80044f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044fa:	1c59      	adds	r1, r3, #1
 80044fc:	6479      	str	r1, [r7, #68]	; 0x44
 80044fe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	701a      	strb	r2, [r3, #0]
 8004506:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004508:	09db      	lsrs	r3, r3, #7
 800450a:	643b      	str	r3, [r7, #64]	; 0x40
 800450c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800450e:	2b7f      	cmp	r3, #127	; 0x7f
 8004510:	d8f0      	bhi.n	80044f4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004512:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004514:	1c5a      	adds	r2, r3, #1
 8004516:	647a      	str	r2, [r7, #68]	; 0x44
 8004518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
 800451e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004520:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
 800452c:	e00b      	b.n	8004546 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800452e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004530:	b2da      	uxtb	r2, r3
 8004532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004534:	1c59      	adds	r1, r3, #1
 8004536:	63f9      	str	r1, [r7, #60]	; 0x3c
 8004538:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800453c:	b2d2      	uxtb	r2, r2
 800453e:	701a      	strb	r2, [r3, #0]
 8004540:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004542:	09db      	lsrs	r3, r3, #7
 8004544:	63bb      	str	r3, [r7, #56]	; 0x38
 8004546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004548:	2b7f      	cmp	r3, #127	; 0x7f
 800454a:	d8f0      	bhi.n	800452e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800454c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004552:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]
 8004558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800455a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	4619      	mov	r1, r3
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f7fe ff6d 	bl	8003444 <_EncodeStr>
 800456a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800456c:	2209      	movs	r2, #9
 800456e:	68f9      	ldr	r1, [r7, #12]
 8004570:	6938      	ldr	r0, [r7, #16]
 8004572:	f7ff f8a3 	bl	80036bc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	4b40      	ldr	r3, [pc, #256]	; (8004684 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	633b      	str	r3, [r7, #48]	; 0x30
 800458a:	e00b      	b.n	80045a4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800458c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800458e:	b2da      	uxtb	r2, r3
 8004590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004592:	1c59      	adds	r1, r3, #1
 8004594:	6379      	str	r1, [r7, #52]	; 0x34
 8004596:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a0:	09db      	lsrs	r3, r3, #7
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	2b7f      	cmp	r3, #127	; 0x7f
 80045a8:	d8f0      	bhi.n	800458c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80045aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045ac:	1c5a      	adds	r2, r3, #1
 80045ae:	637a      	str	r2, [r7, #52]	; 0x34
 80045b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b2:	b2d2      	uxtb	r2, r2
 80045b4:	701a      	strb	r2, [r3, #0]
 80045b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045b8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80045c4:	e00b      	b.n	80045de <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80045c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045cc:	1c59      	adds	r1, r3, #1
 80045ce:	62f9      	str	r1, [r7, #44]	; 0x2c
 80045d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	701a      	strb	r2, [r3, #0]
 80045d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045da:	09db      	lsrs	r3, r3, #7
 80045dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80045de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e0:	2b7f      	cmp	r3, #127	; 0x7f
 80045e2:	d8f0      	bhi.n	80045c6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80045e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e6:	1c5a      	adds	r2, r3, #1
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	701a      	strb	r2, [r3, #0]
 80045f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	627b      	str	r3, [r7, #36]	; 0x24
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	691b      	ldr	r3, [r3, #16]
 80045fc:	623b      	str	r3, [r7, #32]
 80045fe:	e00b      	b.n	8004618 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6279      	str	r1, [r7, #36]	; 0x24
 800460a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800460e:	b2d2      	uxtb	r2, r2
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	6a3b      	ldr	r3, [r7, #32]
 8004614:	09db      	lsrs	r3, r3, #7
 8004616:	623b      	str	r3, [r7, #32]
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	2b7f      	cmp	r3, #127	; 0x7f
 800461c:	d8f0      	bhi.n	8004600 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800461e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	627a      	str	r2, [r7, #36]	; 0x24
 8004624:	6a3a      	ldr	r2, [r7, #32]
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	701a      	strb	r2, [r3, #0]
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	61fb      	str	r3, [r7, #28]
 8004632:	2300      	movs	r3, #0
 8004634:	61bb      	str	r3, [r7, #24]
 8004636:	e00b      	b.n	8004650 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	b2da      	uxtb	r2, r3
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	61f9      	str	r1, [r7, #28]
 8004642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004646:	b2d2      	uxtb	r2, r2
 8004648:	701a      	strb	r2, [r3, #0]
 800464a:	69bb      	ldr	r3, [r7, #24]
 800464c:	09db      	lsrs	r3, r3, #7
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b7f      	cmp	r3, #127	; 0x7f
 8004654:	d8f0      	bhi.n	8004638 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	61fa      	str	r2, [r7, #28]
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]
 8004662:	69fb      	ldr	r3, [r7, #28]
 8004664:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004666:	2215      	movs	r2, #21
 8004668:	68f9      	ldr	r1, [r7, #12]
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f7ff f826 	bl	80036bc <_SendPacket>
  RECORD_END();
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	f383 8811 	msr	BASEPRI, r3
}
 8004676:	bf00      	nop
 8004678:	3748      	adds	r7, #72	; 0x48
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	20014388 	.word	0x20014388
 8004684:	20014358 	.word	0x20014358

08004688 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800468c:	4b07      	ldr	r3, [pc, #28]	; (80046ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d008      	beq.n	80046a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004694:	4b05      	ldr	r3, [pc, #20]	; (80046ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004696:	6a1b      	ldr	r3, [r3, #32]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800469e:	4b03      	ldr	r3, [pc, #12]	; (80046ac <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4798      	blx	r3
  }
}
 80046a6:	bf00      	nop
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	20014358 	.word	0x20014358

080046b0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046b8:	f3ef 8311 	mrs	r3, BASEPRI
 80046bc:	f04f 0120 	mov.w	r1, #32
 80046c0:	f381 8811 	msr	BASEPRI, r1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	480b      	ldr	r0, [pc, #44]	; (80046f4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80046c8:	f7fe ff09 	bl	80034de <_PreparePacket>
 80046cc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80046ce:	2280      	movs	r2, #128	; 0x80
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	6938      	ldr	r0, [r7, #16]
 80046d4:	f7fe feb6 	bl	8003444 <_EncodeStr>
 80046d8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80046da:	220e      	movs	r2, #14
 80046dc:	68f9      	ldr	r1, [r7, #12]
 80046de:	6938      	ldr	r0, [r7, #16]
 80046e0:	f7fe ffec 	bl	80036bc <_SendPacket>
  RECORD_END();
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	f383 8811 	msr	BASEPRI, r3
}
 80046ea:	bf00      	nop
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	20014388 	.word	0x20014388

080046f8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80046f8:	b590      	push	{r4, r7, lr}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d01a      	beq.n	800473c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004706:	4b13      	ldr	r3, [pc, #76]	; (8004754 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d015      	beq.n	800473c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4798      	blx	r3
 8004718:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800471c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800471e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	000a      	movs	r2, r1
 800472c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800472e:	4613      	mov	r3, r2
 8004730:	461a      	mov	r2, r3
 8004732:	4621      	mov	r1, r4
 8004734:	200d      	movs	r0, #13
 8004736:	f7ff fcef 	bl	8004118 <SEGGER_SYSVIEW_RecordU32x2>
 800473a:	e006      	b.n	800474a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800473c:	4b06      	ldr	r3, [pc, #24]	; (8004758 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4619      	mov	r1, r3
 8004742:	200c      	movs	r0, #12
 8004744:	f7ff fcac 	bl	80040a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004748:	bf00      	nop
 800474a:	bf00      	nop
 800474c:	370c      	adds	r7, #12
 800474e:	46bd      	mov	sp, r7
 8004750:	bd90      	pop	{r4, r7, pc}
 8004752:	bf00      	nop
 8004754:	20014358 	.word	0x20014358
 8004758:	e0001004 	.word	0xe0001004

0800475c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004762:	f3ef 8311 	mrs	r3, BASEPRI
 8004766:	f04f 0120 	mov.w	r1, #32
 800476a:	f381 8811 	msr	BASEPRI, r1
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	4819      	ldr	r0, [pc, #100]	; (80047d8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004772:	f7fe feb4 	bl	80034de <_PreparePacket>
 8004776:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800477c:	4b17      	ldr	r3, [pc, #92]	; (80047dc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	617b      	str	r3, [r7, #20]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	e00b      	b.n	80047a8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	1c59      	adds	r1, r3, #1
 8004798:	6179      	str	r1, [r7, #20]
 800479a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800479e:	b2d2      	uxtb	r2, r2
 80047a0:	701a      	strb	r2, [r3, #0]
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	09db      	lsrs	r3, r3, #7
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	2b7f      	cmp	r3, #127	; 0x7f
 80047ac:	d8f0      	bhi.n	8004790 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	617a      	str	r2, [r7, #20]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	b2d2      	uxtb	r2, r2
 80047b8:	701a      	strb	r2, [r3, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80047be:	2202      	movs	r2, #2
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	68b8      	ldr	r0, [r7, #8]
 80047c4:	f7fe ff7a 	bl	80036bc <_SendPacket>
  RECORD_END();
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f383 8811 	msr	BASEPRI, r3
}
 80047ce:	bf00      	nop
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	20014388 	.word	0x20014388
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80047e6:	f3ef 8311 	mrs	r3, BASEPRI
 80047ea:	f04f 0120 	mov.w	r1, #32
 80047ee:	f381 8811 	msr	BASEPRI, r1
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	4807      	ldr	r0, [pc, #28]	; (8004814 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80047f6:	f7fe fe72 	bl	80034de <_PreparePacket>
 80047fa:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80047fc:	2203      	movs	r2, #3
 80047fe:	6839      	ldr	r1, [r7, #0]
 8004800:	6838      	ldr	r0, [r7, #0]
 8004802:	f7fe ff5b 	bl	80036bc <_SendPacket>
  RECORD_END();
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f383 8811 	msr	BASEPRI, r3
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20014388 	.word	0x20014388

08004818 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800481e:	f3ef 8311 	mrs	r3, BASEPRI
 8004822:	f04f 0120 	mov.w	r1, #32
 8004826:	f381 8811 	msr	BASEPRI, r1
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	4807      	ldr	r0, [pc, #28]	; (800484c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800482e:	f7fe fe56 	bl	80034de <_PreparePacket>
 8004832:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004834:	2212      	movs	r2, #18
 8004836:	6839      	ldr	r1, [r7, #0]
 8004838:	6838      	ldr	r0, [r7, #0]
 800483a:	f7fe ff3f 	bl	80036bc <_SendPacket>
  RECORD_END();
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f383 8811 	msr	BASEPRI, r3
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	20014388 	.word	0x20014388

08004850 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004856:	f3ef 8311 	mrs	r3, BASEPRI
 800485a:	f04f 0120 	mov.w	r1, #32
 800485e:	f381 8811 	msr	BASEPRI, r1
 8004862:	607b      	str	r3, [r7, #4]
 8004864:	4807      	ldr	r0, [pc, #28]	; (8004884 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004866:	f7fe fe3a 	bl	80034de <_PreparePacket>
 800486a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800486c:	2211      	movs	r2, #17
 800486e:	6839      	ldr	r1, [r7, #0]
 8004870:	6838      	ldr	r0, [r7, #0]
 8004872:	f7fe ff23 	bl	80036bc <_SendPacket>
  RECORD_END();
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f383 8811 	msr	BASEPRI, r3
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	20014388 	.word	0x20014388

08004888 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004888:	b580      	push	{r7, lr}
 800488a:	b088      	sub	sp, #32
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004890:	f3ef 8311 	mrs	r3, BASEPRI
 8004894:	f04f 0120 	mov.w	r1, #32
 8004898:	f381 8811 	msr	BASEPRI, r1
 800489c:	617b      	str	r3, [r7, #20]
 800489e:	4819      	ldr	r0, [pc, #100]	; (8004904 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80048a0:	f7fe fe1d 	bl	80034de <_PreparePacket>
 80048a4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80048aa:	4b17      	ldr	r3, [pc, #92]	; (8004908 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	61bb      	str	r3, [r7, #24]
 80048bc:	e00b      	b.n	80048d6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	1c59      	adds	r1, r3, #1
 80048c6:	61f9      	str	r1, [r7, #28]
 80048c8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80048cc:	b2d2      	uxtb	r2, r2
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	09db      	lsrs	r3, r3, #7
 80048d4:	61bb      	str	r3, [r7, #24]
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	2b7f      	cmp	r3, #127	; 0x7f
 80048da:	d8f0      	bhi.n	80048be <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	61fa      	str	r2, [r7, #28]
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80048ec:	2208      	movs	r2, #8
 80048ee:	68f9      	ldr	r1, [r7, #12]
 80048f0:	6938      	ldr	r0, [r7, #16]
 80048f2:	f7fe fee3 	bl	80036bc <_SendPacket>
  RECORD_END();
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f383 8811 	msr	BASEPRI, r3
}
 80048fc:	bf00      	nop
 80048fe:	3720      	adds	r7, #32
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	20014388 	.word	0x20014388
 8004908:	20014358 	.word	0x20014358

0800490c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004914:	f3ef 8311 	mrs	r3, BASEPRI
 8004918:	f04f 0120 	mov.w	r1, #32
 800491c:	f381 8811 	msr	BASEPRI, r1
 8004920:	617b      	str	r3, [r7, #20]
 8004922:	4819      	ldr	r0, [pc, #100]	; (8004988 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004924:	f7fe fddb 	bl	80034de <_PreparePacket>
 8004928:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800492e:	4b17      	ldr	r3, [pc, #92]	; (800498c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	61fb      	str	r3, [r7, #28]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	61bb      	str	r3, [r7, #24]
 8004940:	e00b      	b.n	800495a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	1c59      	adds	r1, r3, #1
 800494a:	61f9      	str	r1, [r7, #28]
 800494c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	09db      	lsrs	r3, r3, #7
 8004958:	61bb      	str	r3, [r7, #24]
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	2b7f      	cmp	r3, #127	; 0x7f
 800495e:	d8f0      	bhi.n	8004942 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	1c5a      	adds	r2, r3, #1
 8004964:	61fa      	str	r2, [r7, #28]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	b2d2      	uxtb	r2, r2
 800496a:	701a      	strb	r2, [r3, #0]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004970:	2204      	movs	r2, #4
 8004972:	68f9      	ldr	r1, [r7, #12]
 8004974:	6938      	ldr	r0, [r7, #16]
 8004976:	f7fe fea1 	bl	80036bc <_SendPacket>
  RECORD_END();
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f383 8811 	msr	BASEPRI, r3
}
 8004980:	bf00      	nop
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}
 8004988:	20014388 	.word	0x20014388
 800498c:	20014358 	.word	0x20014358

08004990 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004998:	f3ef 8311 	mrs	r3, BASEPRI
 800499c:	f04f 0120 	mov.w	r1, #32
 80049a0:	f381 8811 	msr	BASEPRI, r1
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	4819      	ldr	r0, [pc, #100]	; (8004a0c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80049a8:	f7fe fd99 	bl	80034de <_PreparePacket>
 80049ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80049b2:	4b17      	ldr	r3, [pc, #92]	; (8004a10 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	61bb      	str	r3, [r7, #24]
 80049c4:	e00b      	b.n	80049de <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	1c59      	adds	r1, r3, #1
 80049ce:	61f9      	str	r1, [r7, #28]
 80049d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80049d4:	b2d2      	uxtb	r2, r2
 80049d6:	701a      	strb	r2, [r3, #0]
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	09db      	lsrs	r3, r3, #7
 80049dc:	61bb      	str	r3, [r7, #24]
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	2b7f      	cmp	r3, #127	; 0x7f
 80049e2:	d8f0      	bhi.n	80049c6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	61fa      	str	r2, [r7, #28]
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	701a      	strb	r2, [r3, #0]
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80049f4:	2206      	movs	r2, #6
 80049f6:	68f9      	ldr	r1, [r7, #12]
 80049f8:	6938      	ldr	r0, [r7, #16]
 80049fa:	f7fe fe5f 	bl	80036bc <_SendPacket>
  RECORD_END();
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	f383 8811 	msr	BASEPRI, r3
}
 8004a04:	bf00      	nop
 8004a06:	3720      	adds	r7, #32
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	20014388 	.word	0x20014388
 8004a10:	20014358 	.word	0x20014358

08004a14 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b08c      	sub	sp, #48	; 0x30
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004a1e:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d06d      	beq.n	8004b02 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004a26:	4b39      	ldr	r3, [pc, #228]	; (8004b0c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a30:	e008      	b.n	8004a44 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d007      	beq.n	8004a4e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	3301      	adds	r3, #1
 8004a42:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a44:	79fb      	ldrb	r3, [r7, #7]
 8004a46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d3f2      	bcc.n	8004a32 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004a4c:	e000      	b.n	8004a50 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004a4e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d055      	beq.n	8004b02 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a56:	f3ef 8311 	mrs	r3, BASEPRI
 8004a5a:	f04f 0120 	mov.w	r1, #32
 8004a5e:	f381 8811 	msr	BASEPRI, r1
 8004a62:	617b      	str	r3, [r7, #20]
 8004a64:	482a      	ldr	r0, [pc, #168]	; (8004b10 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8004a66:	f7fe fd3a 	bl	80034de <_PreparePacket>
 8004a6a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	623b      	str	r3, [r7, #32]
 8004a78:	e00b      	b.n	8004a92 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	b2da      	uxtb	r2, r3
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	1c59      	adds	r1, r3, #1
 8004a82:	6279      	str	r1, [r7, #36]	; 0x24
 8004a84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	6a3b      	ldr	r3, [r7, #32]
 8004a8e:	09db      	lsrs	r3, r3, #7
 8004a90:	623b      	str	r3, [r7, #32]
 8004a92:	6a3b      	ldr	r3, [r7, #32]
 8004a94:	2b7f      	cmp	r3, #127	; 0x7f
 8004a96:	d8f0      	bhi.n	8004a7a <SEGGER_SYSVIEW_SendModule+0x66>
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	1c5a      	adds	r2, r3, #1
 8004a9c:	627a      	str	r2, [r7, #36]	; 0x24
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	61bb      	str	r3, [r7, #24]
 8004ab2:	e00b      	b.n	8004acc <SEGGER_SYSVIEW_SendModule+0xb8>
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	1c59      	adds	r1, r3, #1
 8004abc:	61f9      	str	r1, [r7, #28]
 8004abe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	701a      	strb	r2, [r3, #0]
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	09db      	lsrs	r3, r3, #7
 8004aca:	61bb      	str	r3, [r7, #24]
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	2b7f      	cmp	r3, #127	; 0x7f
 8004ad0:	d8f0      	bhi.n	8004ab4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004ad2:	69fb      	ldr	r3, [r7, #28]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	61fa      	str	r2, [r7, #28]
 8004ad8:	69ba      	ldr	r2, [r7, #24]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2280      	movs	r2, #128	; 0x80
 8004ae8:	4619      	mov	r1, r3
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f7fe fcaa 	bl	8003444 <_EncodeStr>
 8004af0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004af2:	2216      	movs	r2, #22
 8004af4:	68f9      	ldr	r1, [r7, #12]
 8004af6:	6938      	ldr	r0, [r7, #16]
 8004af8:	f7fe fde0 	bl	80036bc <_SendPacket>
      RECORD_END();
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8004b02:	bf00      	nop
 8004b04:	3730      	adds	r7, #48	; 0x30
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	20014380 	.word	0x20014380
 8004b10:	20014388 	.word	0x20014388

08004b14 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004b1a:	4b0c      	ldr	r3, [pc, #48]	; (8004b4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00f      	beq.n	8004b42 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1f2      	bne.n	8004b28 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004b42:	bf00      	nop
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	20014380 	.word	0x20014380

08004b50 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004b56:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5a:	f04f 0120 	mov.w	r1, #32
 8004b5e:	f381 8811 	msr	BASEPRI, r1
 8004b62:	60fb      	str	r3, [r7, #12]
 8004b64:	4817      	ldr	r0, [pc, #92]	; (8004bc4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004b66:	f7fe fcba 	bl	80034de <_PreparePacket>
 8004b6a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	617b      	str	r3, [r7, #20]
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	613b      	str	r3, [r7, #16]
 8004b7a:	e00b      	b.n	8004b94 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	1c59      	adds	r1, r3, #1
 8004b84:	6179      	str	r1, [r7, #20]
 8004b86:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004b8a:	b2d2      	uxtb	r2, r2
 8004b8c:	701a      	strb	r2, [r3, #0]
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	09db      	lsrs	r3, r3, #7
 8004b92:	613b      	str	r3, [r7, #16]
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	2b7f      	cmp	r3, #127	; 0x7f
 8004b98:	d8f0      	bhi.n	8004b7c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	617a      	str	r2, [r7, #20]
 8004ba0:	693a      	ldr	r2, [r7, #16]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004baa:	221b      	movs	r2, #27
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	68b8      	ldr	r0, [r7, #8]
 8004bb0:	f7fe fd84 	bl	80036bc <_SendPacket>
  RECORD_END();
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f383 8811 	msr	BASEPRI, r3
}
 8004bba:	bf00      	nop
 8004bbc:	3718      	adds	r7, #24
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}
 8004bc2:	bf00      	nop
 8004bc4:	20014388 	.word	0x20014388
 8004bc8:	20014384 	.word	0x20014384

08004bcc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8004bcc:	b40f      	push	{r0, r1, r2, r3}
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b082      	sub	sp, #8
 8004bd2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8004bda:	1d3b      	adds	r3, r7, #4
 8004bdc:	461a      	mov	r2, r3
 8004bde:	2100      	movs	r1, #0
 8004be0:	6938      	ldr	r0, [r7, #16]
 8004be2:	f7fe fff3 	bl	8003bcc <_VPrintTarget>
  va_end(ParamList);
}
 8004be6:	bf00      	nop
 8004be8:	3708      	adds	r7, #8
 8004bea:	46bd      	mov	sp, r7
 8004bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bf0:	b004      	add	sp, #16
 8004bf2:	4770      	bx	lr

08004bf4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b08a      	sub	sp, #40	; 0x28
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8004c00:	f04f 0120 	mov.w	r1, #32
 8004c04:	f381 8811 	msr	BASEPRI, r1
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	4827      	ldr	r0, [pc, #156]	; (8004ca8 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004c0c:	f7fe fc67 	bl	80034de <_PreparePacket>
 8004c10:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	6938      	ldr	r0, [r7, #16]
 8004c18:	f7fe fc14 	bl	8003444 <_EncodeStr>
 8004c1c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	627b      	str	r3, [r7, #36]	; 0x24
 8004c22:	2301      	movs	r3, #1
 8004c24:	623b      	str	r3, [r7, #32]
 8004c26:	e00b      	b.n	8004c40 <SEGGER_SYSVIEW_Warn+0x4c>
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	1c59      	adds	r1, r3, #1
 8004c30:	6279      	str	r1, [r7, #36]	; 0x24
 8004c32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c36:	b2d2      	uxtb	r2, r2
 8004c38:	701a      	strb	r2, [r3, #0]
 8004c3a:	6a3b      	ldr	r3, [r7, #32]
 8004c3c:	09db      	lsrs	r3, r3, #7
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	2b7f      	cmp	r3, #127	; 0x7f
 8004c44:	d8f0      	bhi.n	8004c28 <SEGGER_SYSVIEW_Warn+0x34>
 8004c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	627a      	str	r2, [r7, #36]	; 0x24
 8004c4c:	6a3a      	ldr	r2, [r7, #32]
 8004c4e:	b2d2      	uxtb	r2, r2
 8004c50:	701a      	strb	r2, [r3, #0]
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	61fb      	str	r3, [r7, #28]
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	61bb      	str	r3, [r7, #24]
 8004c5e:	e00b      	b.n	8004c78 <SEGGER_SYSVIEW_Warn+0x84>
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	b2da      	uxtb	r2, r3
 8004c64:	69fb      	ldr	r3, [r7, #28]
 8004c66:	1c59      	adds	r1, r3, #1
 8004c68:	61f9      	str	r1, [r7, #28]
 8004c6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004c6e:	b2d2      	uxtb	r2, r2
 8004c70:	701a      	strb	r2, [r3, #0]
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	09db      	lsrs	r3, r3, #7
 8004c76:	61bb      	str	r3, [r7, #24]
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004c7c:	d8f0      	bhi.n	8004c60 <SEGGER_SYSVIEW_Warn+0x6c>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	1c5a      	adds	r2, r3, #1
 8004c82:	61fa      	str	r2, [r7, #28]
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	b2d2      	uxtb	r2, r2
 8004c88:	701a      	strb	r2, [r3, #0]
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c8e:	221a      	movs	r2, #26
 8004c90:	68f9      	ldr	r1, [r7, #12]
 8004c92:	6938      	ldr	r0, [r7, #16]
 8004c94:	f7fe fd12 	bl	80036bc <_SendPacket>
  RECORD_END();
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	f383 8811 	msr	BASEPRI, r3
}
 8004c9e:	bf00      	nop
 8004ca0:	3728      	adds	r7, #40	; 0x28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	20014388 	.word	0x20014388

08004cac <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cb0:	4803      	ldr	r0, [pc, #12]	; (8004cc0 <_cbSendSystemDesc+0x14>)
 8004cb2:	f7ff fcfd 	bl	80046b0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cb6:	4803      	ldr	r0, [pc, #12]	; (8004cc4 <_cbSendSystemDesc+0x18>)
 8004cb8:	f7ff fcfa 	bl	80046b0 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004cbc:	bf00      	nop
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	08005770 	.word	0x08005770
 8004cc4:	080057ac 	.word	0x080057ac

08004cc8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	4b05      	ldr	r3, [pc, #20]	; (8004ce8 <SEGGER_SYSVIEW_Conf+0x20>)
 8004cd2:	6819      	ldr	r1, [r3, #0]
 8004cd4:	4b05      	ldr	r3, [pc, #20]	; (8004cec <SEGGER_SYSVIEW_Conf+0x24>)
 8004cd6:	4a06      	ldr	r2, [pc, #24]	; (8004cf0 <SEGGER_SYSVIEW_Conf+0x28>)
 8004cd8:	f7ff f970 	bl	8003fbc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004cdc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8004ce0:	f7ff f9b0 	bl	8004044 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004ce4:	bf00      	nop
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000000 	.word	0x20000000
 8004cec:	08004cad 	.word	0x08004cad
 8004cf0:	080057d4 	.word	0x080057d4

08004cf4 <sniprintf>:
 8004cf4:	b40c      	push	{r2, r3}
 8004cf6:	b530      	push	{r4, r5, lr}
 8004cf8:	4b17      	ldr	r3, [pc, #92]	; (8004d58 <sniprintf+0x64>)
 8004cfa:	1e0c      	subs	r4, r1, #0
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	b09d      	sub	sp, #116	; 0x74
 8004d00:	da08      	bge.n	8004d14 <sniprintf+0x20>
 8004d02:	238b      	movs	r3, #139	; 0x8b
 8004d04:	602b      	str	r3, [r5, #0]
 8004d06:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0a:	b01d      	add	sp, #116	; 0x74
 8004d0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d10:	b002      	add	sp, #8
 8004d12:	4770      	bx	lr
 8004d14:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d18:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d1c:	bf14      	ite	ne
 8004d1e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d22:	4623      	moveq	r3, r4
 8004d24:	9304      	str	r3, [sp, #16]
 8004d26:	9307      	str	r3, [sp, #28]
 8004d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d2c:	9002      	str	r0, [sp, #8]
 8004d2e:	9006      	str	r0, [sp, #24]
 8004d30:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d36:	ab21      	add	r3, sp, #132	; 0x84
 8004d38:	a902      	add	r1, sp, #8
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	9301      	str	r3, [sp, #4]
 8004d3e:	f000 f9ab 	bl	8005098 <_svfiprintf_r>
 8004d42:	1c43      	adds	r3, r0, #1
 8004d44:	bfbc      	itt	lt
 8004d46:	238b      	movlt	r3, #139	; 0x8b
 8004d48:	602b      	strlt	r3, [r5, #0]
 8004d4a:	2c00      	cmp	r4, #0
 8004d4c:	d0dd      	beq.n	8004d0a <sniprintf+0x16>
 8004d4e:	9b02      	ldr	r3, [sp, #8]
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
 8004d54:	e7d9      	b.n	8004d0a <sniprintf+0x16>
 8004d56:	bf00      	nop
 8004d58:	20000060 	.word	0x20000060

08004d5c <memcmp>:
 8004d5c:	b510      	push	{r4, lr}
 8004d5e:	3901      	subs	r1, #1
 8004d60:	4402      	add	r2, r0
 8004d62:	4290      	cmp	r0, r2
 8004d64:	d101      	bne.n	8004d6a <memcmp+0xe>
 8004d66:	2000      	movs	r0, #0
 8004d68:	e005      	b.n	8004d76 <memcmp+0x1a>
 8004d6a:	7803      	ldrb	r3, [r0, #0]
 8004d6c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004d70:	42a3      	cmp	r3, r4
 8004d72:	d001      	beq.n	8004d78 <memcmp+0x1c>
 8004d74:	1b18      	subs	r0, r3, r4
 8004d76:	bd10      	pop	{r4, pc}
 8004d78:	3001      	adds	r0, #1
 8004d7a:	e7f2      	b.n	8004d62 <memcmp+0x6>

08004d7c <memset>:
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d100      	bne.n	8004d86 <memset+0xa>
 8004d84:	4770      	bx	lr
 8004d86:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8a:	e7f9      	b.n	8004d80 <memset+0x4>

08004d8c <__libc_init_array>:
 8004d8c:	b570      	push	{r4, r5, r6, lr}
 8004d8e:	4d0d      	ldr	r5, [pc, #52]	; (8004dc4 <__libc_init_array+0x38>)
 8004d90:	4c0d      	ldr	r4, [pc, #52]	; (8004dc8 <__libc_init_array+0x3c>)
 8004d92:	1b64      	subs	r4, r4, r5
 8004d94:	10a4      	asrs	r4, r4, #2
 8004d96:	2600      	movs	r6, #0
 8004d98:	42a6      	cmp	r6, r4
 8004d9a:	d109      	bne.n	8004db0 <__libc_init_array+0x24>
 8004d9c:	4d0b      	ldr	r5, [pc, #44]	; (8004dcc <__libc_init_array+0x40>)
 8004d9e:	4c0c      	ldr	r4, [pc, #48]	; (8004dd0 <__libc_init_array+0x44>)
 8004da0:	f000 fc78 	bl	8005694 <_init>
 8004da4:	1b64      	subs	r4, r4, r5
 8004da6:	10a4      	asrs	r4, r4, #2
 8004da8:	2600      	movs	r6, #0
 8004daa:	42a6      	cmp	r6, r4
 8004dac:	d105      	bne.n	8004dba <__libc_init_array+0x2e>
 8004dae:	bd70      	pop	{r4, r5, r6, pc}
 8004db0:	f855 3b04 	ldr.w	r3, [r5], #4
 8004db4:	4798      	blx	r3
 8004db6:	3601      	adds	r6, #1
 8004db8:	e7ee      	b.n	8004d98 <__libc_init_array+0xc>
 8004dba:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dbe:	4798      	blx	r3
 8004dc0:	3601      	adds	r6, #1
 8004dc2:	e7f2      	b.n	8004daa <__libc_init_array+0x1e>
 8004dc4:	08005834 	.word	0x08005834
 8004dc8:	08005834 	.word	0x08005834
 8004dcc:	08005834 	.word	0x08005834
 8004dd0:	08005838 	.word	0x08005838

08004dd4 <__retarget_lock_acquire_recursive>:
 8004dd4:	4770      	bx	lr

08004dd6 <__retarget_lock_release_recursive>:
 8004dd6:	4770      	bx	lr

08004dd8 <memcpy>:
 8004dd8:	440a      	add	r2, r1
 8004dda:	4291      	cmp	r1, r2
 8004ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de0:	d100      	bne.n	8004de4 <memcpy+0xc>
 8004de2:	4770      	bx	lr
 8004de4:	b510      	push	{r4, lr}
 8004de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dee:	4291      	cmp	r1, r2
 8004df0:	d1f9      	bne.n	8004de6 <memcpy+0xe>
 8004df2:	bd10      	pop	{r4, pc}

08004df4 <_free_r>:
 8004df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004df6:	2900      	cmp	r1, #0
 8004df8:	d044      	beq.n	8004e84 <_free_r+0x90>
 8004dfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dfe:	9001      	str	r0, [sp, #4]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f1a1 0404 	sub.w	r4, r1, #4
 8004e06:	bfb8      	it	lt
 8004e08:	18e4      	addlt	r4, r4, r3
 8004e0a:	f000 f8df 	bl	8004fcc <__malloc_lock>
 8004e0e:	4a1e      	ldr	r2, [pc, #120]	; (8004e88 <_free_r+0x94>)
 8004e10:	9801      	ldr	r0, [sp, #4]
 8004e12:	6813      	ldr	r3, [r2, #0]
 8004e14:	b933      	cbnz	r3, 8004e24 <_free_r+0x30>
 8004e16:	6063      	str	r3, [r4, #4]
 8004e18:	6014      	str	r4, [r2, #0]
 8004e1a:	b003      	add	sp, #12
 8004e1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e20:	f000 b8da 	b.w	8004fd8 <__malloc_unlock>
 8004e24:	42a3      	cmp	r3, r4
 8004e26:	d908      	bls.n	8004e3a <_free_r+0x46>
 8004e28:	6825      	ldr	r5, [r4, #0]
 8004e2a:	1961      	adds	r1, r4, r5
 8004e2c:	428b      	cmp	r3, r1
 8004e2e:	bf01      	itttt	eq
 8004e30:	6819      	ldreq	r1, [r3, #0]
 8004e32:	685b      	ldreq	r3, [r3, #4]
 8004e34:	1949      	addeq	r1, r1, r5
 8004e36:	6021      	streq	r1, [r4, #0]
 8004e38:	e7ed      	b.n	8004e16 <_free_r+0x22>
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	b10b      	cbz	r3, 8004e44 <_free_r+0x50>
 8004e40:	42a3      	cmp	r3, r4
 8004e42:	d9fa      	bls.n	8004e3a <_free_r+0x46>
 8004e44:	6811      	ldr	r1, [r2, #0]
 8004e46:	1855      	adds	r5, r2, r1
 8004e48:	42a5      	cmp	r5, r4
 8004e4a:	d10b      	bne.n	8004e64 <_free_r+0x70>
 8004e4c:	6824      	ldr	r4, [r4, #0]
 8004e4e:	4421      	add	r1, r4
 8004e50:	1854      	adds	r4, r2, r1
 8004e52:	42a3      	cmp	r3, r4
 8004e54:	6011      	str	r1, [r2, #0]
 8004e56:	d1e0      	bne.n	8004e1a <_free_r+0x26>
 8004e58:	681c      	ldr	r4, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	6053      	str	r3, [r2, #4]
 8004e5e:	440c      	add	r4, r1
 8004e60:	6014      	str	r4, [r2, #0]
 8004e62:	e7da      	b.n	8004e1a <_free_r+0x26>
 8004e64:	d902      	bls.n	8004e6c <_free_r+0x78>
 8004e66:	230c      	movs	r3, #12
 8004e68:	6003      	str	r3, [r0, #0]
 8004e6a:	e7d6      	b.n	8004e1a <_free_r+0x26>
 8004e6c:	6825      	ldr	r5, [r4, #0]
 8004e6e:	1961      	adds	r1, r4, r5
 8004e70:	428b      	cmp	r3, r1
 8004e72:	bf04      	itt	eq
 8004e74:	6819      	ldreq	r1, [r3, #0]
 8004e76:	685b      	ldreq	r3, [r3, #4]
 8004e78:	6063      	str	r3, [r4, #4]
 8004e7a:	bf04      	itt	eq
 8004e7c:	1949      	addeq	r1, r1, r5
 8004e7e:	6021      	streq	r1, [r4, #0]
 8004e80:	6054      	str	r4, [r2, #4]
 8004e82:	e7ca      	b.n	8004e1a <_free_r+0x26>
 8004e84:	b003      	add	sp, #12
 8004e86:	bd30      	pop	{r4, r5, pc}
 8004e88:	200145ac 	.word	0x200145ac

08004e8c <sbrk_aligned>:
 8004e8c:	b570      	push	{r4, r5, r6, lr}
 8004e8e:	4e0e      	ldr	r6, [pc, #56]	; (8004ec8 <sbrk_aligned+0x3c>)
 8004e90:	460c      	mov	r4, r1
 8004e92:	6831      	ldr	r1, [r6, #0]
 8004e94:	4605      	mov	r5, r0
 8004e96:	b911      	cbnz	r1, 8004e9e <sbrk_aligned+0x12>
 8004e98:	f000 fba6 	bl	80055e8 <_sbrk_r>
 8004e9c:	6030      	str	r0, [r6, #0]
 8004e9e:	4621      	mov	r1, r4
 8004ea0:	4628      	mov	r0, r5
 8004ea2:	f000 fba1 	bl	80055e8 <_sbrk_r>
 8004ea6:	1c43      	adds	r3, r0, #1
 8004ea8:	d00a      	beq.n	8004ec0 <sbrk_aligned+0x34>
 8004eaa:	1cc4      	adds	r4, r0, #3
 8004eac:	f024 0403 	bic.w	r4, r4, #3
 8004eb0:	42a0      	cmp	r0, r4
 8004eb2:	d007      	beq.n	8004ec4 <sbrk_aligned+0x38>
 8004eb4:	1a21      	subs	r1, r4, r0
 8004eb6:	4628      	mov	r0, r5
 8004eb8:	f000 fb96 	bl	80055e8 <_sbrk_r>
 8004ebc:	3001      	adds	r0, #1
 8004ebe:	d101      	bne.n	8004ec4 <sbrk_aligned+0x38>
 8004ec0:	f04f 34ff 	mov.w	r4, #4294967295
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	bd70      	pop	{r4, r5, r6, pc}
 8004ec8:	200145b0 	.word	0x200145b0

08004ecc <_malloc_r>:
 8004ecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ed0:	1ccd      	adds	r5, r1, #3
 8004ed2:	f025 0503 	bic.w	r5, r5, #3
 8004ed6:	3508      	adds	r5, #8
 8004ed8:	2d0c      	cmp	r5, #12
 8004eda:	bf38      	it	cc
 8004edc:	250c      	movcc	r5, #12
 8004ede:	2d00      	cmp	r5, #0
 8004ee0:	4607      	mov	r7, r0
 8004ee2:	db01      	blt.n	8004ee8 <_malloc_r+0x1c>
 8004ee4:	42a9      	cmp	r1, r5
 8004ee6:	d905      	bls.n	8004ef4 <_malloc_r+0x28>
 8004ee8:	230c      	movs	r3, #12
 8004eea:	603b      	str	r3, [r7, #0]
 8004eec:	2600      	movs	r6, #0
 8004eee:	4630      	mov	r0, r6
 8004ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ef4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004fc8 <_malloc_r+0xfc>
 8004ef8:	f000 f868 	bl	8004fcc <__malloc_lock>
 8004efc:	f8d8 3000 	ldr.w	r3, [r8]
 8004f00:	461c      	mov	r4, r3
 8004f02:	bb5c      	cbnz	r4, 8004f5c <_malloc_r+0x90>
 8004f04:	4629      	mov	r1, r5
 8004f06:	4638      	mov	r0, r7
 8004f08:	f7ff ffc0 	bl	8004e8c <sbrk_aligned>
 8004f0c:	1c43      	adds	r3, r0, #1
 8004f0e:	4604      	mov	r4, r0
 8004f10:	d155      	bne.n	8004fbe <_malloc_r+0xf2>
 8004f12:	f8d8 4000 	ldr.w	r4, [r8]
 8004f16:	4626      	mov	r6, r4
 8004f18:	2e00      	cmp	r6, #0
 8004f1a:	d145      	bne.n	8004fa8 <_malloc_r+0xdc>
 8004f1c:	2c00      	cmp	r4, #0
 8004f1e:	d048      	beq.n	8004fb2 <_malloc_r+0xe6>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	4631      	mov	r1, r6
 8004f24:	4638      	mov	r0, r7
 8004f26:	eb04 0903 	add.w	r9, r4, r3
 8004f2a:	f000 fb5d 	bl	80055e8 <_sbrk_r>
 8004f2e:	4581      	cmp	r9, r0
 8004f30:	d13f      	bne.n	8004fb2 <_malloc_r+0xe6>
 8004f32:	6821      	ldr	r1, [r4, #0]
 8004f34:	1a6d      	subs	r5, r5, r1
 8004f36:	4629      	mov	r1, r5
 8004f38:	4638      	mov	r0, r7
 8004f3a:	f7ff ffa7 	bl	8004e8c <sbrk_aligned>
 8004f3e:	3001      	adds	r0, #1
 8004f40:	d037      	beq.n	8004fb2 <_malloc_r+0xe6>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	442b      	add	r3, r5
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	f8d8 3000 	ldr.w	r3, [r8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d038      	beq.n	8004fc2 <_malloc_r+0xf6>
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	42a2      	cmp	r2, r4
 8004f54:	d12b      	bne.n	8004fae <_malloc_r+0xe2>
 8004f56:	2200      	movs	r2, #0
 8004f58:	605a      	str	r2, [r3, #4]
 8004f5a:	e00f      	b.n	8004f7c <_malloc_r+0xb0>
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	1b52      	subs	r2, r2, r5
 8004f60:	d41f      	bmi.n	8004fa2 <_malloc_r+0xd6>
 8004f62:	2a0b      	cmp	r2, #11
 8004f64:	d917      	bls.n	8004f96 <_malloc_r+0xca>
 8004f66:	1961      	adds	r1, r4, r5
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	6025      	str	r5, [r4, #0]
 8004f6c:	bf18      	it	ne
 8004f6e:	6059      	strne	r1, [r3, #4]
 8004f70:	6863      	ldr	r3, [r4, #4]
 8004f72:	bf08      	it	eq
 8004f74:	f8c8 1000 	streq.w	r1, [r8]
 8004f78:	5162      	str	r2, [r4, r5]
 8004f7a:	604b      	str	r3, [r1, #4]
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	f104 060b 	add.w	r6, r4, #11
 8004f82:	f000 f829 	bl	8004fd8 <__malloc_unlock>
 8004f86:	f026 0607 	bic.w	r6, r6, #7
 8004f8a:	1d23      	adds	r3, r4, #4
 8004f8c:	1af2      	subs	r2, r6, r3
 8004f8e:	d0ae      	beq.n	8004eee <_malloc_r+0x22>
 8004f90:	1b9b      	subs	r3, r3, r6
 8004f92:	50a3      	str	r3, [r4, r2]
 8004f94:	e7ab      	b.n	8004eee <_malloc_r+0x22>
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	6862      	ldr	r2, [r4, #4]
 8004f9a:	d1dd      	bne.n	8004f58 <_malloc_r+0x8c>
 8004f9c:	f8c8 2000 	str.w	r2, [r8]
 8004fa0:	e7ec      	b.n	8004f7c <_malloc_r+0xb0>
 8004fa2:	4623      	mov	r3, r4
 8004fa4:	6864      	ldr	r4, [r4, #4]
 8004fa6:	e7ac      	b.n	8004f02 <_malloc_r+0x36>
 8004fa8:	4634      	mov	r4, r6
 8004faa:	6876      	ldr	r6, [r6, #4]
 8004fac:	e7b4      	b.n	8004f18 <_malloc_r+0x4c>
 8004fae:	4613      	mov	r3, r2
 8004fb0:	e7cc      	b.n	8004f4c <_malloc_r+0x80>
 8004fb2:	230c      	movs	r3, #12
 8004fb4:	603b      	str	r3, [r7, #0]
 8004fb6:	4638      	mov	r0, r7
 8004fb8:	f000 f80e 	bl	8004fd8 <__malloc_unlock>
 8004fbc:	e797      	b.n	8004eee <_malloc_r+0x22>
 8004fbe:	6025      	str	r5, [r4, #0]
 8004fc0:	e7dc      	b.n	8004f7c <_malloc_r+0xb0>
 8004fc2:	605b      	str	r3, [r3, #4]
 8004fc4:	deff      	udf	#255	; 0xff
 8004fc6:	bf00      	nop
 8004fc8:	200145ac 	.word	0x200145ac

08004fcc <__malloc_lock>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__malloc_lock+0x8>)
 8004fce:	f7ff bf01 	b.w	8004dd4 <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	200145a8 	.word	0x200145a8

08004fd8 <__malloc_unlock>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__malloc_unlock+0x8>)
 8004fda:	f7ff befc 	b.w	8004dd6 <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	200145a8 	.word	0x200145a8

08004fe4 <__ssputs_r>:
 8004fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fe8:	688e      	ldr	r6, [r1, #8]
 8004fea:	461f      	mov	r7, r3
 8004fec:	42be      	cmp	r6, r7
 8004fee:	680b      	ldr	r3, [r1, #0]
 8004ff0:	4682      	mov	sl, r0
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	4690      	mov	r8, r2
 8004ff6:	d82c      	bhi.n	8005052 <__ssputs_r+0x6e>
 8004ff8:	898a      	ldrh	r2, [r1, #12]
 8004ffa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004ffe:	d026      	beq.n	800504e <__ssputs_r+0x6a>
 8005000:	6965      	ldr	r5, [r4, #20]
 8005002:	6909      	ldr	r1, [r1, #16]
 8005004:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005008:	eba3 0901 	sub.w	r9, r3, r1
 800500c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005010:	1c7b      	adds	r3, r7, #1
 8005012:	444b      	add	r3, r9
 8005014:	106d      	asrs	r5, r5, #1
 8005016:	429d      	cmp	r5, r3
 8005018:	bf38      	it	cc
 800501a:	461d      	movcc	r5, r3
 800501c:	0553      	lsls	r3, r2, #21
 800501e:	d527      	bpl.n	8005070 <__ssputs_r+0x8c>
 8005020:	4629      	mov	r1, r5
 8005022:	f7ff ff53 	bl	8004ecc <_malloc_r>
 8005026:	4606      	mov	r6, r0
 8005028:	b360      	cbz	r0, 8005084 <__ssputs_r+0xa0>
 800502a:	6921      	ldr	r1, [r4, #16]
 800502c:	464a      	mov	r2, r9
 800502e:	f7ff fed3 	bl	8004dd8 <memcpy>
 8005032:	89a3      	ldrh	r3, [r4, #12]
 8005034:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800503c:	81a3      	strh	r3, [r4, #12]
 800503e:	6126      	str	r6, [r4, #16]
 8005040:	6165      	str	r5, [r4, #20]
 8005042:	444e      	add	r6, r9
 8005044:	eba5 0509 	sub.w	r5, r5, r9
 8005048:	6026      	str	r6, [r4, #0]
 800504a:	60a5      	str	r5, [r4, #8]
 800504c:	463e      	mov	r6, r7
 800504e:	42be      	cmp	r6, r7
 8005050:	d900      	bls.n	8005054 <__ssputs_r+0x70>
 8005052:	463e      	mov	r6, r7
 8005054:	6820      	ldr	r0, [r4, #0]
 8005056:	4632      	mov	r2, r6
 8005058:	4641      	mov	r1, r8
 800505a:	f000 faab 	bl	80055b4 <memmove>
 800505e:	68a3      	ldr	r3, [r4, #8]
 8005060:	1b9b      	subs	r3, r3, r6
 8005062:	60a3      	str	r3, [r4, #8]
 8005064:	6823      	ldr	r3, [r4, #0]
 8005066:	4433      	add	r3, r6
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	2000      	movs	r0, #0
 800506c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005070:	462a      	mov	r2, r5
 8005072:	f000 fac9 	bl	8005608 <_realloc_r>
 8005076:	4606      	mov	r6, r0
 8005078:	2800      	cmp	r0, #0
 800507a:	d1e0      	bne.n	800503e <__ssputs_r+0x5a>
 800507c:	6921      	ldr	r1, [r4, #16]
 800507e:	4650      	mov	r0, sl
 8005080:	f7ff feb8 	bl	8004df4 <_free_r>
 8005084:	230c      	movs	r3, #12
 8005086:	f8ca 3000 	str.w	r3, [sl]
 800508a:	89a3      	ldrh	r3, [r4, #12]
 800508c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005090:	81a3      	strh	r3, [r4, #12]
 8005092:	f04f 30ff 	mov.w	r0, #4294967295
 8005096:	e7e9      	b.n	800506c <__ssputs_r+0x88>

08005098 <_svfiprintf_r>:
 8005098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800509c:	4698      	mov	r8, r3
 800509e:	898b      	ldrh	r3, [r1, #12]
 80050a0:	061b      	lsls	r3, r3, #24
 80050a2:	b09d      	sub	sp, #116	; 0x74
 80050a4:	4607      	mov	r7, r0
 80050a6:	460d      	mov	r5, r1
 80050a8:	4614      	mov	r4, r2
 80050aa:	d50e      	bpl.n	80050ca <_svfiprintf_r+0x32>
 80050ac:	690b      	ldr	r3, [r1, #16]
 80050ae:	b963      	cbnz	r3, 80050ca <_svfiprintf_r+0x32>
 80050b0:	2140      	movs	r1, #64	; 0x40
 80050b2:	f7ff ff0b 	bl	8004ecc <_malloc_r>
 80050b6:	6028      	str	r0, [r5, #0]
 80050b8:	6128      	str	r0, [r5, #16]
 80050ba:	b920      	cbnz	r0, 80050c6 <_svfiprintf_r+0x2e>
 80050bc:	230c      	movs	r3, #12
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	f04f 30ff 	mov.w	r0, #4294967295
 80050c4:	e0d0      	b.n	8005268 <_svfiprintf_r+0x1d0>
 80050c6:	2340      	movs	r3, #64	; 0x40
 80050c8:	616b      	str	r3, [r5, #20]
 80050ca:	2300      	movs	r3, #0
 80050cc:	9309      	str	r3, [sp, #36]	; 0x24
 80050ce:	2320      	movs	r3, #32
 80050d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80050d4:	f8cd 800c 	str.w	r8, [sp, #12]
 80050d8:	2330      	movs	r3, #48	; 0x30
 80050da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005280 <_svfiprintf_r+0x1e8>
 80050de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80050e2:	f04f 0901 	mov.w	r9, #1
 80050e6:	4623      	mov	r3, r4
 80050e8:	469a      	mov	sl, r3
 80050ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050ee:	b10a      	cbz	r2, 80050f4 <_svfiprintf_r+0x5c>
 80050f0:	2a25      	cmp	r2, #37	; 0x25
 80050f2:	d1f9      	bne.n	80050e8 <_svfiprintf_r+0x50>
 80050f4:	ebba 0b04 	subs.w	fp, sl, r4
 80050f8:	d00b      	beq.n	8005112 <_svfiprintf_r+0x7a>
 80050fa:	465b      	mov	r3, fp
 80050fc:	4622      	mov	r2, r4
 80050fe:	4629      	mov	r1, r5
 8005100:	4638      	mov	r0, r7
 8005102:	f7ff ff6f 	bl	8004fe4 <__ssputs_r>
 8005106:	3001      	adds	r0, #1
 8005108:	f000 80a9 	beq.w	800525e <_svfiprintf_r+0x1c6>
 800510c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800510e:	445a      	add	r2, fp
 8005110:	9209      	str	r2, [sp, #36]	; 0x24
 8005112:	f89a 3000 	ldrb.w	r3, [sl]
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 80a1 	beq.w	800525e <_svfiprintf_r+0x1c6>
 800511c:	2300      	movs	r3, #0
 800511e:	f04f 32ff 	mov.w	r2, #4294967295
 8005122:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005126:	f10a 0a01 	add.w	sl, sl, #1
 800512a:	9304      	str	r3, [sp, #16]
 800512c:	9307      	str	r3, [sp, #28]
 800512e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005132:	931a      	str	r3, [sp, #104]	; 0x68
 8005134:	4654      	mov	r4, sl
 8005136:	2205      	movs	r2, #5
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	4850      	ldr	r0, [pc, #320]	; (8005280 <_svfiprintf_r+0x1e8>)
 800513e:	f7fb f897 	bl	8000270 <memchr>
 8005142:	9a04      	ldr	r2, [sp, #16]
 8005144:	b9d8      	cbnz	r0, 800517e <_svfiprintf_r+0xe6>
 8005146:	06d0      	lsls	r0, r2, #27
 8005148:	bf44      	itt	mi
 800514a:	2320      	movmi	r3, #32
 800514c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005150:	0711      	lsls	r1, r2, #28
 8005152:	bf44      	itt	mi
 8005154:	232b      	movmi	r3, #43	; 0x2b
 8005156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800515a:	f89a 3000 	ldrb.w	r3, [sl]
 800515e:	2b2a      	cmp	r3, #42	; 0x2a
 8005160:	d015      	beq.n	800518e <_svfiprintf_r+0xf6>
 8005162:	9a07      	ldr	r2, [sp, #28]
 8005164:	4654      	mov	r4, sl
 8005166:	2000      	movs	r0, #0
 8005168:	f04f 0c0a 	mov.w	ip, #10
 800516c:	4621      	mov	r1, r4
 800516e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005172:	3b30      	subs	r3, #48	; 0x30
 8005174:	2b09      	cmp	r3, #9
 8005176:	d94d      	bls.n	8005214 <_svfiprintf_r+0x17c>
 8005178:	b1b0      	cbz	r0, 80051a8 <_svfiprintf_r+0x110>
 800517a:	9207      	str	r2, [sp, #28]
 800517c:	e014      	b.n	80051a8 <_svfiprintf_r+0x110>
 800517e:	eba0 0308 	sub.w	r3, r0, r8
 8005182:	fa09 f303 	lsl.w	r3, r9, r3
 8005186:	4313      	orrs	r3, r2
 8005188:	9304      	str	r3, [sp, #16]
 800518a:	46a2      	mov	sl, r4
 800518c:	e7d2      	b.n	8005134 <_svfiprintf_r+0x9c>
 800518e:	9b03      	ldr	r3, [sp, #12]
 8005190:	1d19      	adds	r1, r3, #4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	9103      	str	r1, [sp, #12]
 8005196:	2b00      	cmp	r3, #0
 8005198:	bfbb      	ittet	lt
 800519a:	425b      	neglt	r3, r3
 800519c:	f042 0202 	orrlt.w	r2, r2, #2
 80051a0:	9307      	strge	r3, [sp, #28]
 80051a2:	9307      	strlt	r3, [sp, #28]
 80051a4:	bfb8      	it	lt
 80051a6:	9204      	strlt	r2, [sp, #16]
 80051a8:	7823      	ldrb	r3, [r4, #0]
 80051aa:	2b2e      	cmp	r3, #46	; 0x2e
 80051ac:	d10c      	bne.n	80051c8 <_svfiprintf_r+0x130>
 80051ae:	7863      	ldrb	r3, [r4, #1]
 80051b0:	2b2a      	cmp	r3, #42	; 0x2a
 80051b2:	d134      	bne.n	800521e <_svfiprintf_r+0x186>
 80051b4:	9b03      	ldr	r3, [sp, #12]
 80051b6:	1d1a      	adds	r2, r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	9203      	str	r2, [sp, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	bfb8      	it	lt
 80051c0:	f04f 33ff 	movlt.w	r3, #4294967295
 80051c4:	3402      	adds	r4, #2
 80051c6:	9305      	str	r3, [sp, #20]
 80051c8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005290 <_svfiprintf_r+0x1f8>
 80051cc:	7821      	ldrb	r1, [r4, #0]
 80051ce:	2203      	movs	r2, #3
 80051d0:	4650      	mov	r0, sl
 80051d2:	f7fb f84d 	bl	8000270 <memchr>
 80051d6:	b138      	cbz	r0, 80051e8 <_svfiprintf_r+0x150>
 80051d8:	9b04      	ldr	r3, [sp, #16]
 80051da:	eba0 000a 	sub.w	r0, r0, sl
 80051de:	2240      	movs	r2, #64	; 0x40
 80051e0:	4082      	lsls	r2, r0
 80051e2:	4313      	orrs	r3, r2
 80051e4:	3401      	adds	r4, #1
 80051e6:	9304      	str	r3, [sp, #16]
 80051e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051ec:	4825      	ldr	r0, [pc, #148]	; (8005284 <_svfiprintf_r+0x1ec>)
 80051ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051f2:	2206      	movs	r2, #6
 80051f4:	f7fb f83c 	bl	8000270 <memchr>
 80051f8:	2800      	cmp	r0, #0
 80051fa:	d038      	beq.n	800526e <_svfiprintf_r+0x1d6>
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <_svfiprintf_r+0x1f0>)
 80051fe:	bb1b      	cbnz	r3, 8005248 <_svfiprintf_r+0x1b0>
 8005200:	9b03      	ldr	r3, [sp, #12]
 8005202:	3307      	adds	r3, #7
 8005204:	f023 0307 	bic.w	r3, r3, #7
 8005208:	3308      	adds	r3, #8
 800520a:	9303      	str	r3, [sp, #12]
 800520c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520e:	4433      	add	r3, r6
 8005210:	9309      	str	r3, [sp, #36]	; 0x24
 8005212:	e768      	b.n	80050e6 <_svfiprintf_r+0x4e>
 8005214:	fb0c 3202 	mla	r2, ip, r2, r3
 8005218:	460c      	mov	r4, r1
 800521a:	2001      	movs	r0, #1
 800521c:	e7a6      	b.n	800516c <_svfiprintf_r+0xd4>
 800521e:	2300      	movs	r3, #0
 8005220:	3401      	adds	r4, #1
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	4619      	mov	r1, r3
 8005226:	f04f 0c0a 	mov.w	ip, #10
 800522a:	4620      	mov	r0, r4
 800522c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005230:	3a30      	subs	r2, #48	; 0x30
 8005232:	2a09      	cmp	r2, #9
 8005234:	d903      	bls.n	800523e <_svfiprintf_r+0x1a6>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d0c6      	beq.n	80051c8 <_svfiprintf_r+0x130>
 800523a:	9105      	str	r1, [sp, #20]
 800523c:	e7c4      	b.n	80051c8 <_svfiprintf_r+0x130>
 800523e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005242:	4604      	mov	r4, r0
 8005244:	2301      	movs	r3, #1
 8005246:	e7f0      	b.n	800522a <_svfiprintf_r+0x192>
 8005248:	ab03      	add	r3, sp, #12
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	462a      	mov	r2, r5
 800524e:	4b0f      	ldr	r3, [pc, #60]	; (800528c <_svfiprintf_r+0x1f4>)
 8005250:	a904      	add	r1, sp, #16
 8005252:	4638      	mov	r0, r7
 8005254:	f3af 8000 	nop.w
 8005258:	1c42      	adds	r2, r0, #1
 800525a:	4606      	mov	r6, r0
 800525c:	d1d6      	bne.n	800520c <_svfiprintf_r+0x174>
 800525e:	89ab      	ldrh	r3, [r5, #12]
 8005260:	065b      	lsls	r3, r3, #25
 8005262:	f53f af2d 	bmi.w	80050c0 <_svfiprintf_r+0x28>
 8005266:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005268:	b01d      	add	sp, #116	; 0x74
 800526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800526e:	ab03      	add	r3, sp, #12
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	462a      	mov	r2, r5
 8005274:	4b05      	ldr	r3, [pc, #20]	; (800528c <_svfiprintf_r+0x1f4>)
 8005276:	a904      	add	r1, sp, #16
 8005278:	4638      	mov	r0, r7
 800527a:	f000 f879 	bl	8005370 <_printf_i>
 800527e:	e7eb      	b.n	8005258 <_svfiprintf_r+0x1c0>
 8005280:	080057f8 	.word	0x080057f8
 8005284:	08005802 	.word	0x08005802
 8005288:	00000000 	.word	0x00000000
 800528c:	08004fe5 	.word	0x08004fe5
 8005290:	080057fe 	.word	0x080057fe

08005294 <_printf_common>:
 8005294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005298:	4616      	mov	r6, r2
 800529a:	4699      	mov	r9, r3
 800529c:	688a      	ldr	r2, [r1, #8]
 800529e:	690b      	ldr	r3, [r1, #16]
 80052a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bfb8      	it	lt
 80052a8:	4613      	movlt	r3, r2
 80052aa:	6033      	str	r3, [r6, #0]
 80052ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052b0:	4607      	mov	r7, r0
 80052b2:	460c      	mov	r4, r1
 80052b4:	b10a      	cbz	r2, 80052ba <_printf_common+0x26>
 80052b6:	3301      	adds	r3, #1
 80052b8:	6033      	str	r3, [r6, #0]
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	0699      	lsls	r1, r3, #26
 80052be:	bf42      	ittt	mi
 80052c0:	6833      	ldrmi	r3, [r6, #0]
 80052c2:	3302      	addmi	r3, #2
 80052c4:	6033      	strmi	r3, [r6, #0]
 80052c6:	6825      	ldr	r5, [r4, #0]
 80052c8:	f015 0506 	ands.w	r5, r5, #6
 80052cc:	d106      	bne.n	80052dc <_printf_common+0x48>
 80052ce:	f104 0a19 	add.w	sl, r4, #25
 80052d2:	68e3      	ldr	r3, [r4, #12]
 80052d4:	6832      	ldr	r2, [r6, #0]
 80052d6:	1a9b      	subs	r3, r3, r2
 80052d8:	42ab      	cmp	r3, r5
 80052da:	dc26      	bgt.n	800532a <_printf_common+0x96>
 80052dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052e0:	1e13      	subs	r3, r2, #0
 80052e2:	6822      	ldr	r2, [r4, #0]
 80052e4:	bf18      	it	ne
 80052e6:	2301      	movne	r3, #1
 80052e8:	0692      	lsls	r2, r2, #26
 80052ea:	d42b      	bmi.n	8005344 <_printf_common+0xb0>
 80052ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052f0:	4649      	mov	r1, r9
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d01e      	beq.n	8005338 <_printf_common+0xa4>
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6922      	ldr	r2, [r4, #16]
 80052fe:	f003 0306 	and.w	r3, r3, #6
 8005302:	2b04      	cmp	r3, #4
 8005304:	bf02      	ittt	eq
 8005306:	68e5      	ldreq	r5, [r4, #12]
 8005308:	6833      	ldreq	r3, [r6, #0]
 800530a:	1aed      	subeq	r5, r5, r3
 800530c:	68a3      	ldr	r3, [r4, #8]
 800530e:	bf0c      	ite	eq
 8005310:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005314:	2500      	movne	r5, #0
 8005316:	4293      	cmp	r3, r2
 8005318:	bfc4      	itt	gt
 800531a:	1a9b      	subgt	r3, r3, r2
 800531c:	18ed      	addgt	r5, r5, r3
 800531e:	2600      	movs	r6, #0
 8005320:	341a      	adds	r4, #26
 8005322:	42b5      	cmp	r5, r6
 8005324:	d11a      	bne.n	800535c <_printf_common+0xc8>
 8005326:	2000      	movs	r0, #0
 8005328:	e008      	b.n	800533c <_printf_common+0xa8>
 800532a:	2301      	movs	r3, #1
 800532c:	4652      	mov	r2, sl
 800532e:	4649      	mov	r1, r9
 8005330:	4638      	mov	r0, r7
 8005332:	47c0      	blx	r8
 8005334:	3001      	adds	r0, #1
 8005336:	d103      	bne.n	8005340 <_printf_common+0xac>
 8005338:	f04f 30ff 	mov.w	r0, #4294967295
 800533c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005340:	3501      	adds	r5, #1
 8005342:	e7c6      	b.n	80052d2 <_printf_common+0x3e>
 8005344:	18e1      	adds	r1, r4, r3
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	2030      	movs	r0, #48	; 0x30
 800534a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800534e:	4422      	add	r2, r4
 8005350:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005354:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005358:	3302      	adds	r3, #2
 800535a:	e7c7      	b.n	80052ec <_printf_common+0x58>
 800535c:	2301      	movs	r3, #1
 800535e:	4622      	mov	r2, r4
 8005360:	4649      	mov	r1, r9
 8005362:	4638      	mov	r0, r7
 8005364:	47c0      	blx	r8
 8005366:	3001      	adds	r0, #1
 8005368:	d0e6      	beq.n	8005338 <_printf_common+0xa4>
 800536a:	3601      	adds	r6, #1
 800536c:	e7d9      	b.n	8005322 <_printf_common+0x8e>
	...

08005370 <_printf_i>:
 8005370:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	7e0f      	ldrb	r7, [r1, #24]
 8005376:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005378:	2f78      	cmp	r7, #120	; 0x78
 800537a:	4691      	mov	r9, r2
 800537c:	4680      	mov	r8, r0
 800537e:	460c      	mov	r4, r1
 8005380:	469a      	mov	sl, r3
 8005382:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005386:	d807      	bhi.n	8005398 <_printf_i+0x28>
 8005388:	2f62      	cmp	r7, #98	; 0x62
 800538a:	d80a      	bhi.n	80053a2 <_printf_i+0x32>
 800538c:	2f00      	cmp	r7, #0
 800538e:	f000 80d4 	beq.w	800553a <_printf_i+0x1ca>
 8005392:	2f58      	cmp	r7, #88	; 0x58
 8005394:	f000 80c0 	beq.w	8005518 <_printf_i+0x1a8>
 8005398:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800539c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053a0:	e03a      	b.n	8005418 <_printf_i+0xa8>
 80053a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053a6:	2b15      	cmp	r3, #21
 80053a8:	d8f6      	bhi.n	8005398 <_printf_i+0x28>
 80053aa:	a101      	add	r1, pc, #4	; (adr r1, 80053b0 <_printf_i+0x40>)
 80053ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053b0:	08005409 	.word	0x08005409
 80053b4:	0800541d 	.word	0x0800541d
 80053b8:	08005399 	.word	0x08005399
 80053bc:	08005399 	.word	0x08005399
 80053c0:	08005399 	.word	0x08005399
 80053c4:	08005399 	.word	0x08005399
 80053c8:	0800541d 	.word	0x0800541d
 80053cc:	08005399 	.word	0x08005399
 80053d0:	08005399 	.word	0x08005399
 80053d4:	08005399 	.word	0x08005399
 80053d8:	08005399 	.word	0x08005399
 80053dc:	08005521 	.word	0x08005521
 80053e0:	08005449 	.word	0x08005449
 80053e4:	080054db 	.word	0x080054db
 80053e8:	08005399 	.word	0x08005399
 80053ec:	08005399 	.word	0x08005399
 80053f0:	08005543 	.word	0x08005543
 80053f4:	08005399 	.word	0x08005399
 80053f8:	08005449 	.word	0x08005449
 80053fc:	08005399 	.word	0x08005399
 8005400:	08005399 	.word	0x08005399
 8005404:	080054e3 	.word	0x080054e3
 8005408:	682b      	ldr	r3, [r5, #0]
 800540a:	1d1a      	adds	r2, r3, #4
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	602a      	str	r2, [r5, #0]
 8005410:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005414:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005418:	2301      	movs	r3, #1
 800541a:	e09f      	b.n	800555c <_printf_i+0x1ec>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	682b      	ldr	r3, [r5, #0]
 8005420:	0607      	lsls	r7, r0, #24
 8005422:	f103 0104 	add.w	r1, r3, #4
 8005426:	6029      	str	r1, [r5, #0]
 8005428:	d501      	bpl.n	800542e <_printf_i+0xbe>
 800542a:	681e      	ldr	r6, [r3, #0]
 800542c:	e003      	b.n	8005436 <_printf_i+0xc6>
 800542e:	0646      	lsls	r6, r0, #25
 8005430:	d5fb      	bpl.n	800542a <_printf_i+0xba>
 8005432:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005436:	2e00      	cmp	r6, #0
 8005438:	da03      	bge.n	8005442 <_printf_i+0xd2>
 800543a:	232d      	movs	r3, #45	; 0x2d
 800543c:	4276      	negs	r6, r6
 800543e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005442:	485a      	ldr	r0, [pc, #360]	; (80055ac <_printf_i+0x23c>)
 8005444:	230a      	movs	r3, #10
 8005446:	e012      	b.n	800546e <_printf_i+0xfe>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	6820      	ldr	r0, [r4, #0]
 800544c:	1d19      	adds	r1, r3, #4
 800544e:	6029      	str	r1, [r5, #0]
 8005450:	0605      	lsls	r5, r0, #24
 8005452:	d501      	bpl.n	8005458 <_printf_i+0xe8>
 8005454:	681e      	ldr	r6, [r3, #0]
 8005456:	e002      	b.n	800545e <_printf_i+0xee>
 8005458:	0641      	lsls	r1, r0, #25
 800545a:	d5fb      	bpl.n	8005454 <_printf_i+0xe4>
 800545c:	881e      	ldrh	r6, [r3, #0]
 800545e:	4853      	ldr	r0, [pc, #332]	; (80055ac <_printf_i+0x23c>)
 8005460:	2f6f      	cmp	r7, #111	; 0x6f
 8005462:	bf0c      	ite	eq
 8005464:	2308      	moveq	r3, #8
 8005466:	230a      	movne	r3, #10
 8005468:	2100      	movs	r1, #0
 800546a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800546e:	6865      	ldr	r5, [r4, #4]
 8005470:	60a5      	str	r5, [r4, #8]
 8005472:	2d00      	cmp	r5, #0
 8005474:	bfa2      	ittt	ge
 8005476:	6821      	ldrge	r1, [r4, #0]
 8005478:	f021 0104 	bicge.w	r1, r1, #4
 800547c:	6021      	strge	r1, [r4, #0]
 800547e:	b90e      	cbnz	r6, 8005484 <_printf_i+0x114>
 8005480:	2d00      	cmp	r5, #0
 8005482:	d04b      	beq.n	800551c <_printf_i+0x1ac>
 8005484:	4615      	mov	r5, r2
 8005486:	fbb6 f1f3 	udiv	r1, r6, r3
 800548a:	fb03 6711 	mls	r7, r3, r1, r6
 800548e:	5dc7      	ldrb	r7, [r0, r7]
 8005490:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005494:	4637      	mov	r7, r6
 8005496:	42bb      	cmp	r3, r7
 8005498:	460e      	mov	r6, r1
 800549a:	d9f4      	bls.n	8005486 <_printf_i+0x116>
 800549c:	2b08      	cmp	r3, #8
 800549e:	d10b      	bne.n	80054b8 <_printf_i+0x148>
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	07de      	lsls	r6, r3, #31
 80054a4:	d508      	bpl.n	80054b8 <_printf_i+0x148>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	6861      	ldr	r1, [r4, #4]
 80054aa:	4299      	cmp	r1, r3
 80054ac:	bfde      	ittt	le
 80054ae:	2330      	movle	r3, #48	; 0x30
 80054b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054b8:	1b52      	subs	r2, r2, r5
 80054ba:	6122      	str	r2, [r4, #16]
 80054bc:	f8cd a000 	str.w	sl, [sp]
 80054c0:	464b      	mov	r3, r9
 80054c2:	aa03      	add	r2, sp, #12
 80054c4:	4621      	mov	r1, r4
 80054c6:	4640      	mov	r0, r8
 80054c8:	f7ff fee4 	bl	8005294 <_printf_common>
 80054cc:	3001      	adds	r0, #1
 80054ce:	d14a      	bne.n	8005566 <_printf_i+0x1f6>
 80054d0:	f04f 30ff 	mov.w	r0, #4294967295
 80054d4:	b004      	add	sp, #16
 80054d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	f043 0320 	orr.w	r3, r3, #32
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	4833      	ldr	r0, [pc, #204]	; (80055b0 <_printf_i+0x240>)
 80054e4:	2778      	movs	r7, #120	; 0x78
 80054e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	6829      	ldr	r1, [r5, #0]
 80054ee:	061f      	lsls	r7, r3, #24
 80054f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80054f4:	d402      	bmi.n	80054fc <_printf_i+0x18c>
 80054f6:	065f      	lsls	r7, r3, #25
 80054f8:	bf48      	it	mi
 80054fa:	b2b6      	uxthmi	r6, r6
 80054fc:	07df      	lsls	r7, r3, #31
 80054fe:	bf48      	it	mi
 8005500:	f043 0320 	orrmi.w	r3, r3, #32
 8005504:	6029      	str	r1, [r5, #0]
 8005506:	bf48      	it	mi
 8005508:	6023      	strmi	r3, [r4, #0]
 800550a:	b91e      	cbnz	r6, 8005514 <_printf_i+0x1a4>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	f023 0320 	bic.w	r3, r3, #32
 8005512:	6023      	str	r3, [r4, #0]
 8005514:	2310      	movs	r3, #16
 8005516:	e7a7      	b.n	8005468 <_printf_i+0xf8>
 8005518:	4824      	ldr	r0, [pc, #144]	; (80055ac <_printf_i+0x23c>)
 800551a:	e7e4      	b.n	80054e6 <_printf_i+0x176>
 800551c:	4615      	mov	r5, r2
 800551e:	e7bd      	b.n	800549c <_printf_i+0x12c>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	6826      	ldr	r6, [r4, #0]
 8005524:	6961      	ldr	r1, [r4, #20]
 8005526:	1d18      	adds	r0, r3, #4
 8005528:	6028      	str	r0, [r5, #0]
 800552a:	0635      	lsls	r5, r6, #24
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	d501      	bpl.n	8005534 <_printf_i+0x1c4>
 8005530:	6019      	str	r1, [r3, #0]
 8005532:	e002      	b.n	800553a <_printf_i+0x1ca>
 8005534:	0670      	lsls	r0, r6, #25
 8005536:	d5fb      	bpl.n	8005530 <_printf_i+0x1c0>
 8005538:	8019      	strh	r1, [r3, #0]
 800553a:	2300      	movs	r3, #0
 800553c:	6123      	str	r3, [r4, #16]
 800553e:	4615      	mov	r5, r2
 8005540:	e7bc      	b.n	80054bc <_printf_i+0x14c>
 8005542:	682b      	ldr	r3, [r5, #0]
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	602a      	str	r2, [r5, #0]
 8005548:	681d      	ldr	r5, [r3, #0]
 800554a:	6862      	ldr	r2, [r4, #4]
 800554c:	2100      	movs	r1, #0
 800554e:	4628      	mov	r0, r5
 8005550:	f7fa fe8e 	bl	8000270 <memchr>
 8005554:	b108      	cbz	r0, 800555a <_printf_i+0x1ea>
 8005556:	1b40      	subs	r0, r0, r5
 8005558:	6060      	str	r0, [r4, #4]
 800555a:	6863      	ldr	r3, [r4, #4]
 800555c:	6123      	str	r3, [r4, #16]
 800555e:	2300      	movs	r3, #0
 8005560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005564:	e7aa      	b.n	80054bc <_printf_i+0x14c>
 8005566:	6923      	ldr	r3, [r4, #16]
 8005568:	462a      	mov	r2, r5
 800556a:	4649      	mov	r1, r9
 800556c:	4640      	mov	r0, r8
 800556e:	47d0      	blx	sl
 8005570:	3001      	adds	r0, #1
 8005572:	d0ad      	beq.n	80054d0 <_printf_i+0x160>
 8005574:	6823      	ldr	r3, [r4, #0]
 8005576:	079b      	lsls	r3, r3, #30
 8005578:	d413      	bmi.n	80055a2 <_printf_i+0x232>
 800557a:	68e0      	ldr	r0, [r4, #12]
 800557c:	9b03      	ldr	r3, [sp, #12]
 800557e:	4298      	cmp	r0, r3
 8005580:	bfb8      	it	lt
 8005582:	4618      	movlt	r0, r3
 8005584:	e7a6      	b.n	80054d4 <_printf_i+0x164>
 8005586:	2301      	movs	r3, #1
 8005588:	4632      	mov	r2, r6
 800558a:	4649      	mov	r1, r9
 800558c:	4640      	mov	r0, r8
 800558e:	47d0      	blx	sl
 8005590:	3001      	adds	r0, #1
 8005592:	d09d      	beq.n	80054d0 <_printf_i+0x160>
 8005594:	3501      	adds	r5, #1
 8005596:	68e3      	ldr	r3, [r4, #12]
 8005598:	9903      	ldr	r1, [sp, #12]
 800559a:	1a5b      	subs	r3, r3, r1
 800559c:	42ab      	cmp	r3, r5
 800559e:	dcf2      	bgt.n	8005586 <_printf_i+0x216>
 80055a0:	e7eb      	b.n	800557a <_printf_i+0x20a>
 80055a2:	2500      	movs	r5, #0
 80055a4:	f104 0619 	add.w	r6, r4, #25
 80055a8:	e7f5      	b.n	8005596 <_printf_i+0x226>
 80055aa:	bf00      	nop
 80055ac:	08005809 	.word	0x08005809
 80055b0:	0800581a 	.word	0x0800581a

080055b4 <memmove>:
 80055b4:	4288      	cmp	r0, r1
 80055b6:	b510      	push	{r4, lr}
 80055b8:	eb01 0402 	add.w	r4, r1, r2
 80055bc:	d902      	bls.n	80055c4 <memmove+0x10>
 80055be:	4284      	cmp	r4, r0
 80055c0:	4623      	mov	r3, r4
 80055c2:	d807      	bhi.n	80055d4 <memmove+0x20>
 80055c4:	1e43      	subs	r3, r0, #1
 80055c6:	42a1      	cmp	r1, r4
 80055c8:	d008      	beq.n	80055dc <memmove+0x28>
 80055ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055d2:	e7f8      	b.n	80055c6 <memmove+0x12>
 80055d4:	4402      	add	r2, r0
 80055d6:	4601      	mov	r1, r0
 80055d8:	428a      	cmp	r2, r1
 80055da:	d100      	bne.n	80055de <memmove+0x2a>
 80055dc:	bd10      	pop	{r4, pc}
 80055de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055e6:	e7f7      	b.n	80055d8 <memmove+0x24>

080055e8 <_sbrk_r>:
 80055e8:	b538      	push	{r3, r4, r5, lr}
 80055ea:	4d06      	ldr	r5, [pc, #24]	; (8005604 <_sbrk_r+0x1c>)
 80055ec:	2300      	movs	r3, #0
 80055ee:	4604      	mov	r4, r0
 80055f0:	4608      	mov	r0, r1
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	f000 f840 	bl	8005678 <_sbrk>
 80055f8:	1c43      	adds	r3, r0, #1
 80055fa:	d102      	bne.n	8005602 <_sbrk_r+0x1a>
 80055fc:	682b      	ldr	r3, [r5, #0]
 80055fe:	b103      	cbz	r3, 8005602 <_sbrk_r+0x1a>
 8005600:	6023      	str	r3, [r4, #0]
 8005602:	bd38      	pop	{r3, r4, r5, pc}
 8005604:	200145a4 	.word	0x200145a4

08005608 <_realloc_r>:
 8005608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800560c:	4680      	mov	r8, r0
 800560e:	4614      	mov	r4, r2
 8005610:	460e      	mov	r6, r1
 8005612:	b921      	cbnz	r1, 800561e <_realloc_r+0x16>
 8005614:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005618:	4611      	mov	r1, r2
 800561a:	f7ff bc57 	b.w	8004ecc <_malloc_r>
 800561e:	b92a      	cbnz	r2, 800562c <_realloc_r+0x24>
 8005620:	f7ff fbe8 	bl	8004df4 <_free_r>
 8005624:	4625      	mov	r5, r4
 8005626:	4628      	mov	r0, r5
 8005628:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800562c:	f000 f81b 	bl	8005666 <_malloc_usable_size_r>
 8005630:	4284      	cmp	r4, r0
 8005632:	4607      	mov	r7, r0
 8005634:	d802      	bhi.n	800563c <_realloc_r+0x34>
 8005636:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800563a:	d812      	bhi.n	8005662 <_realloc_r+0x5a>
 800563c:	4621      	mov	r1, r4
 800563e:	4640      	mov	r0, r8
 8005640:	f7ff fc44 	bl	8004ecc <_malloc_r>
 8005644:	4605      	mov	r5, r0
 8005646:	2800      	cmp	r0, #0
 8005648:	d0ed      	beq.n	8005626 <_realloc_r+0x1e>
 800564a:	42bc      	cmp	r4, r7
 800564c:	4622      	mov	r2, r4
 800564e:	4631      	mov	r1, r6
 8005650:	bf28      	it	cs
 8005652:	463a      	movcs	r2, r7
 8005654:	f7ff fbc0 	bl	8004dd8 <memcpy>
 8005658:	4631      	mov	r1, r6
 800565a:	4640      	mov	r0, r8
 800565c:	f7ff fbca 	bl	8004df4 <_free_r>
 8005660:	e7e1      	b.n	8005626 <_realloc_r+0x1e>
 8005662:	4635      	mov	r5, r6
 8005664:	e7df      	b.n	8005626 <_realloc_r+0x1e>

08005666 <_malloc_usable_size_r>:
 8005666:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800566a:	1f18      	subs	r0, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	bfbc      	itt	lt
 8005670:	580b      	ldrlt	r3, [r1, r0]
 8005672:	18c0      	addlt	r0, r0, r3
 8005674:	4770      	bx	lr
	...

08005678 <_sbrk>:
 8005678:	4a04      	ldr	r2, [pc, #16]	; (800568c <_sbrk+0x14>)
 800567a:	6811      	ldr	r1, [r2, #0]
 800567c:	4603      	mov	r3, r0
 800567e:	b909      	cbnz	r1, 8005684 <_sbrk+0xc>
 8005680:	4903      	ldr	r1, [pc, #12]	; (8005690 <_sbrk+0x18>)
 8005682:	6011      	str	r1, [r2, #0]
 8005684:	6810      	ldr	r0, [r2, #0]
 8005686:	4403      	add	r3, r0
 8005688:	6013      	str	r3, [r2, #0]
 800568a:	4770      	bx	lr
 800568c:	200145b4 	.word	0x200145b4
 8005690:	200145b8 	.word	0x200145b8

08005694 <_init>:
 8005694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005696:	bf00      	nop
 8005698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800569a:	bc08      	pop	{r3}
 800569c:	469e      	mov	lr, r3
 800569e:	4770      	bx	lr

080056a0 <_fini>:
 80056a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056a2:	bf00      	nop
 80056a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a6:	bc08      	pop	{r3}
 80056a8:	469e      	mov	lr, r3
 80056aa:	4770      	bx	lr
