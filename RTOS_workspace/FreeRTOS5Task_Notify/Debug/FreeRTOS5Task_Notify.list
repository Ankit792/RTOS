
FreeRTOS5Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000846c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000264  080085fc  080085fc  000185fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008860  08008860  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08008860  08008860  00018860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008868  08008868  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008868  08008868  00018868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800886c  0800886c  0001886c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08008870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00014608  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014680  20014680  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014772  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003334  00000000  00000000  0003485d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001418  00000000  00000000  00037b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f65  00000000  00000000  00038fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002475e  00000000  00000000  00039f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016d2c  00000000  00000000  0005e673  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9cbc  00000000  00000000  0007539f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b48  00000000  00000000  0014f05c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d3  00000000  00000000  00154ba4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080085e4 	.word	0x080085e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080085e4 	.word	0x080085e4

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f5c 	.word	0x20012f5c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fc7b 	bl	8000f0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f8bb 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f923 	bl	8000864 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800061e:	4849      	ldr	r0, [pc, #292]	; (8000744 <main+0x138>)
 8000620:	f004 fe8c 	bl	800533c <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <main+0x13c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a47      	ldr	r2, [pc, #284]	; (8000748 <main+0x13c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000630:	f007 f878 	bl	8007724 <SEGGER_SYSVIEW_Conf>
  printf("in main loop");
 8000634:	4845      	ldr	r0, [pc, #276]	; (800074c <main+0x140>)
 8000636:	f007 f93b 	bl	80078b0 <iprintf>
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 4, &ledg_task_handle);
 800063a:	4b45      	ldr	r3, [pc, #276]	; (8000750 <main+0x144>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2304      	movs	r3, #4
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	4943      	ldr	r1, [pc, #268]	; (8000754 <main+0x148>)
 8000648:	4843      	ldr	r0, [pc, #268]	; (8000758 <main+0x14c>)
 800064a:	f002 fa73 	bl	8002b34 <xTaskCreate>
 800064e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d00a      	beq.n	800066c <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000668:	bf00      	nop
 800066a:	e7fe      	b.n	800066a <main+0x5e>

  next_task_handle = ledg_task_handle;
 800066c:	4b38      	ldr	r3, [pc, #224]	; (8000750 <main+0x144>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3a      	ldr	r2, [pc, #232]	; (800075c <main+0x150>)
 8000672:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 3, &ledr_task_handle);
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x154>)
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2303      	movs	r3, #3
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	4938      	ldr	r1, [pc, #224]	; (8000764 <main+0x158>)
 8000682:	4839      	ldr	r0, [pc, #228]	; (8000768 <main+0x15c>)
 8000684:	f002 fa56 	bl	8002b34 <xTaskCreate>
 8000688:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00a      	beq.n	80006a6 <main+0x9a>
        __asm volatile
 8000690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000694:	f383 8811 	msr	BASEPRI, r3
 8000698:	f3bf 8f6f 	isb	sy
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	60fb      	str	r3, [r7, #12]
    }
 80006a2:	bf00      	nop
 80006a4:	e7fe      	b.n	80006a4 <main+0x98>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <main+0x160>)
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	492f      	ldr	r1, [pc, #188]	; (8000770 <main+0x164>)
 80006b4:	482f      	ldr	r0, [pc, #188]	; (8000774 <main+0x168>)
 80006b6:	f002 fa3d 	bl	8002b34 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00a      	beq.n	80006d8 <main+0xcc>
        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60bb      	str	r3, [r7, #8]
    }
 80006d4:	bf00      	nop
 80006d6:	e7fe      	b.n	80006d6 <main+0xca>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 1, &ledb_task_handle);
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <main+0x16c>)
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	22c8      	movs	r2, #200	; 0xc8
 80006e4:	4925      	ldr	r1, [pc, #148]	; (800077c <main+0x170>)
 80006e6:	4826      	ldr	r0, [pc, #152]	; (8000780 <main+0x174>)
 80006e8:	f002 fa24 	bl	8002b34 <xTaskCreate>
 80006ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d00a      	beq.n	800070a <main+0xfe>
        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	607b      	str	r3, [r7, #4]
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <main+0xfc>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 5, &btn_task_handle);   // highest priority
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <main+0x178>)
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2305      	movs	r3, #5
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	22c8      	movs	r2, #200	; 0xc8
 8000716:	491c      	ldr	r1, [pc, #112]	; (8000788 <main+0x17c>)
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <main+0x180>)
 800071a:	f002 fa0b 	bl	8002b34 <xTaskCreate>
 800071e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d00a      	beq.n	800073c <main+0x130>
        __asm volatile
 8000726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072a:	f383 8811 	msr	BASEPRI, r3
 800072e:	f3bf 8f6f 	isb	sy
 8000732:	f3bf 8f4f 	dsb	sy
 8000736:	603b      	str	r3, [r7, #0]
    }
 8000738:	bf00      	nop
 800073a:	e7fe      	b.n	800073a <main+0x12e>


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800073c:	f002 fc68 	bl	8003010 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000740:	e7fe      	b.n	8000740 <main+0x134>
 8000742:	bf00      	nop
 8000744:	0007a120 	.word	0x0007a120
 8000748:	e0001000 	.word	0xe0001000
 800074c:	080085fc 	.word	0x080085fc
 8000750:	20000094 	.word	0x20000094
 8000754:	0800860c 	.word	0x0800860c
 8000758:	080009d9 	.word	0x080009d9
 800075c:	200000a8 	.word	0x200000a8
 8000760:	20000098 	.word	0x20000098
 8000764:	0800861c 	.word	0x0800861c
 8000768:	08000ac1 	.word	0x08000ac1
 800076c:	2000009c 	.word	0x2000009c
 8000770:	0800862c 	.word	0x0800862c
 8000774:	08000a51 	.word	0x08000a51
 8000778:	200000a0 	.word	0x200000a0
 800077c:	0800863c 	.word	0x0800863c
 8000780:	08000b31 	.word	0x08000b31
 8000784:	200000a4 	.word	0x200000a4
 8000788:	0800864c 	.word	0x0800864c
 800078c:	08000ba9 	.word	0x08000ba9

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 f8eb 	bl	800797a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a27      	ldr	r2, [pc, #156]	; (800085c <SystemClock_Config+0xcc>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xd0>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000804:	23a8      	movs	r3, #168	; 0xa8
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fe85 	bl	8001524 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000820:	f000 fa00 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2105      	movs	r1, #5
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f8e6 	bl	8001a14 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084e:	f000 f9e9 	bl	8000c24 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <MX_GPIO_Init+0x160>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a50      	ldr	r2, [pc, #320]	; (80009c4 <MX_GPIO_Init+0x160>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <MX_GPIO_Init+0x160>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x160>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a49      	ldr	r2, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a42      	ldr	r2, [pc, #264]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	482f      	ldr	r0, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x164>)
 800090c:	f000 fdd6 	bl	80014bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000910:	2200      	movs	r2, #0
 8000912:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000916:	482d      	ldr	r0, [pc, #180]	; (80009cc <MX_GPIO_Init+0x168>)
 8000918:	f000 fdd0 	bl	80014bc <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091c:	2308      	movs	r3, #8
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4825      	ldr	r0, [pc, #148]	; (80009c8 <MX_GPIO_Init+0x164>)
 8000934:	f000 fc0e 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4820      	ldr	r0, [pc, #128]	; (80009d0 <MX_GPIO_Init+0x16c>)
 800094e:	f000 fc01 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000952:	2304      	movs	r3, #4
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x170>)
 8000966:	f000 fbf5 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800096a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0x168>)
 8000984:	f000 fbe6 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000988:	2320      	movs	r3, #32
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_GPIO_Init+0x168>)
 800099c:	f000 fbda 	bl	8001154 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x164>)
 80009b6:	f000 fbcd 	bl	8001154 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		printf("Toggling green LED");
 80009e0:	4816      	ldr	r0, [pc, #88]	; (8000a3c <led_green_handler+0x64>)
 80009e2:	f006 ff65 	bl	80078b0 <iprintf>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e6:	4815      	ldr	r0, [pc, #84]	; (8000a3c <led_green_handler+0x64>)
 80009e8:	f006 fdf0 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4813      	ldr	r0, [pc, #76]	; (8000a40 <led_green_handler+0x68>)
 80009f2:	f000 fd7c 	bl	80014ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f003 f8b6 	bl	8003b74 <xTaskGenericNotifyWait>
 8000a08:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1e7      	bne.n	80009e0 <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a10:	f002 fb60 	bl	80030d4 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <led_green_handler+0x6c>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0b      	ldr	r2, [pc, #44]	; (8000a48 <led_green_handler+0x70>)
 8000a1a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a1c:	f002 fb68 	bl	80030f0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4806      	ldr	r0, [pc, #24]	; (8000a40 <led_green_handler+0x68>)
 8000a28:	f000 fd48 	bl	80014bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000a2c:	4807      	ldr	r0, [pc, #28]	; (8000a4c <led_green_handler+0x74>)
 8000a2e:	f006 fdcd 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000a32:	2000      	movs	r0, #0
 8000a34:	f002 fa06 	bl	8002e44 <vTaskDelete>
		printf("Toggling green LED");
 8000a38:	e7d2      	b.n	80009e0 <led_green_handler+0x8>
 8000a3a:	bf00      	nop
 8000a3c:	08008658 	.word	0x08008658
 8000a40:	40020c00 	.word	0x40020c00
 8000a44:	2000009c 	.word	0x2000009c
 8000a48:	200000a8 	.word	0x200000a8
 8000a4c:	0800866c 	.word	0x0800866c

08000a50 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a58:	4814      	ldr	r0, [pc, #80]	; (8000aac <led_orange_handler+0x5c>)
 8000a5a:	f006 fdb7 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13 );
 8000a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a62:	4813      	ldr	r0, [pc, #76]	; (8000ab0 <led_orange_handler+0x60>)
 8000a64:	f000 fd43 	bl	80014ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000a68:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	2300      	movs	r3, #0
 8000a70:	2200      	movs	r2, #0
 8000a72:	2100      	movs	r1, #0
 8000a74:	2000      	movs	r0, #0
 8000a76:	f003 f87d 	bl	8003b74 <xTaskGenericNotifyWait>
 8000a7a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d1ea      	bne.n	8000a58 <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000a82:	f002 fb27 	bl	80030d4 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <led_orange_handler+0x64>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a0b      	ldr	r2, [pc, #44]	; (8000ab8 <led_orange_handler+0x68>)
 8000a8c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a8e:	f002 fb2f 	bl	80030f0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8000a92:	2201      	movs	r2, #1
 8000a94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <led_orange_handler+0x60>)
 8000a9a:	f000 fd0f 	bl	80014bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000a9e:	4807      	ldr	r0, [pc, #28]	; (8000abc <led_orange_handler+0x6c>)
 8000aa0:	f006 fd94 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000aa4:	2000      	movs	r0, #0
 8000aa6:	f002 f9cd 	bl	8002e44 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000aaa:	e7d5      	b.n	8000a58 <led_orange_handler+0x8>
 8000aac:	08008684 	.word	0x08008684
 8000ab0:	40020c00 	.word	0x40020c00
 8000ab4:	20000098 	.word	0x20000098
 8000ab8:	200000a8 	.word	0x200000a8
 8000abc:	08008698 	.word	0x08008698

08000ac0 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af02      	add	r7, sp, #8
 8000ac6:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000ac8:	4814      	ldr	r0, [pc, #80]	; (8000b1c <led_red_handler+0x5c>)
 8000aca:	f006 fd7f 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ace:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad2:	4813      	ldr	r0, [pc, #76]	; (8000b20 <led_red_handler+0x60>)
 8000ad4:	f000 fd0b 	bl	80014ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(600));
 8000ad8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000adc:	9300      	str	r3, [sp, #0]
 8000ade:	2300      	movs	r3, #0
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	f003 f845 	bl	8003b74 <xTaskGenericNotifyWait>
 8000aea:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	2b01      	cmp	r3, #1
 8000af0:	d1ea      	bne.n	8000ac8 <led_red_handler+0x8>
			vTaskSuspendAll();
 8000af2:	f002 faef 	bl	80030d4 <vTaskSuspendAll>
			next_task_handle = ledb_task_handle;
 8000af6:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <led_red_handler+0x64>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <led_red_handler+0x68>)
 8000afc:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000afe:	f002 faf7 	bl	80030f0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 8000b02:	2201      	movs	r2, #1
 8000b04:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b08:	4805      	ldr	r0, [pc, #20]	; (8000b20 <led_red_handler+0x60>)
 8000b0a:	f000 fcd7 	bl	80014bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000b0e:	4807      	ldr	r0, [pc, #28]	; (8000b2c <led_red_handler+0x6c>)
 8000b10:	f006 fd5c 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(NULL);
 8000b14:	2000      	movs	r0, #0
 8000b16:	f002 f995 	bl	8002e44 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b1a:	e7d5      	b.n	8000ac8 <led_red_handler+0x8>
 8000b1c:	080086b0 	.word	0x080086b0
 8000b20:	40020c00 	.word	0x40020c00
 8000b24:	200000a0 	.word	0x200000a0
 8000b28:	200000a8 	.word	0x200000a8
 8000b2c:	080086c4 	.word	0x080086c4

08000b30 <led_blue_handler>:
	}
}


static void led_blue_handler(void* parameters)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af02      	add	r7, sp, #8
 8000b36:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000b38:	4816      	ldr	r0, [pc, #88]	; (8000b94 <led_blue_handler+0x64>)
 8000b3a:	f006 fd47 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b42:	4815      	ldr	r0, [pc, #84]	; (8000b98 <led_blue_handler+0x68>)
 8000b44:	f000 fcd3 	bl	80014ee <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b48:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	2200      	movs	r2, #0
 8000b52:	2100      	movs	r1, #0
 8000b54:	2000      	movs	r0, #0
 8000b56:	f003 f80d 	bl	8003b74 <xTaskGenericNotifyWait>
 8000b5a:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	2b01      	cmp	r3, #1
 8000b60:	d1ea      	bne.n	8000b38 <led_blue_handler+0x8>
			vTaskSuspendAll();
 8000b62:	f002 fab7 	bl	80030d4 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b66:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <led_blue_handler+0x6c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b6c:	f002 fac0 	bl	80030f0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 8000b70:	2201      	movs	r2, #1
 8000b72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b76:	4808      	ldr	r0, [pc, #32]	; (8000b98 <led_blue_handler+0x68>)
 8000b78:	f000 fca0 	bl	80014bc <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue LED task");
 8000b7c:	4808      	ldr	r0, [pc, #32]	; (8000ba0 <led_blue_handler+0x70>)
 8000b7e:	f006 fd25 	bl	80075cc <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(btn_task_handle);
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <led_blue_handler+0x74>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4618      	mov	r0, r3
 8000b88:	f002 f95c 	bl	8002e44 <vTaskDelete>
			vTaskDelete(NULL);
 8000b8c:	2000      	movs	r0, #0
 8000b8e:	f002 f959 	bl	8002e44 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000b92:	e7d1      	b.n	8000b38 <led_blue_handler+0x8>
 8000b94:	080086d8 	.word	0x080086d8
 8000b98:	40020c00 	.word	0x40020c00
 8000b9c:	200000a8 	.word	0x200000a8
 8000ba0:	080086ec 	.word	0x080086ec
 8000ba4:	200000a4 	.word	0x200000a4

08000ba8 <button_handler>:
		}
	}
}

static void button_handler(void* parameters)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af02      	add	r7, sp, #8
 8000bae:	6078      	str	r0, [r7, #4]
	uint8_t btn_read = 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73fb      	strb	r3, [r7, #15]
	printf("not working");
 8000bb8:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <button_handler+0x4c>)
 8000bba:	f006 fe79 	bl	80078b0 <iprintf>
	while(1){

		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <button_handler+0x50>)
 8000bc2:	f000 fc63 	bl	800148c <HAL_GPIO_ReadPin>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	73bb      	strb	r3, [r7, #14]

		if(btn_read)
 8000bca:	7bbb      	ldrb	r3, [r7, #14]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d00b      	beq.n	8000be8 <button_handler+0x40>
		{
			if(! prev_read)
 8000bd0:	7bfb      	ldrb	r3, [r7, #15]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d108      	bne.n	8000be8 <button_handler+0x40>
				xTaskNotify(next_task_handle,0,eNoAction);
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <button_handler+0x54>)
 8000bd8:	6818      	ldr	r0, [r3, #0]
 8000bda:	2300      	movs	r3, #0
 8000bdc:	9300      	str	r3, [sp, #0]
 8000bde:	2300      	movs	r3, #0
 8000be0:	2200      	movs	r2, #0
 8000be2:	2100      	movs	r1, #0
 8000be4:	f003 f84e 	bl	8003c84 <xTaskGenericNotify>
		}
		prev_read = btn_read;
 8000be8:	7bbb      	ldrb	r3, [r7, #14]
 8000bea:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000bec:	200a      	movs	r0, #10
 8000bee:	f002 f9d7 	bl	8002fa0 <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bf2:	e7e4      	b.n	8000bbe <button_handler+0x16>
 8000bf4:	08008704 	.word	0x08008704
 8000bf8:	40020000 	.word	0x40020000
 8000bfc:	200000a8 	.word	0x200000a8

08000c00 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a04      	ldr	r2, [pc, #16]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d101      	bne.n	8000c16 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c12:	f000 f99d 	bl	8000f50 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40001000 	.word	0x40001000

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c44:	6453      	str	r3, [r2, #68]	; 0x44
 8000c46:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	603b      	str	r3, [r7, #0]
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x4c>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000c6e:	f003 fd73 	bl	8004758 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023800 	.word	0x40023800

08000c80 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08e      	sub	sp, #56	; 0x38
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	4b33      	ldr	r3, [pc, #204]	; (8000d64 <HAL_InitTick+0xe4>)
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	4a32      	ldr	r2, [pc, #200]	; (8000d64 <HAL_InitTick+0xe4>)
 8000c9a:	f043 0310 	orr.w	r3, r3, #16
 8000c9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca0:	4b30      	ldr	r3, [pc, #192]	; (8000d64 <HAL_InitTick+0xe4>)
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cac:	f107 0210 	add.w	r2, r7, #16
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4611      	mov	r1, r2
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f001 f878 	bl	8001dac <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d103      	bne.n	8000cce <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc6:	f001 f85d 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8000cca:	6378      	str	r0, [r7, #52]	; 0x34
 8000ccc:	e004      	b.n	8000cd8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cce:	f001 f859 	bl	8001d84 <HAL_RCC_GetPCLK1Freq>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cda:	4a23      	ldr	r2, [pc, #140]	; (8000d68 <HAL_InitTick+0xe8>)
 8000cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ce0:	0c9b      	lsrs	r3, r3, #18
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ce6:	4b21      	ldr	r3, [pc, #132]	; (8000d6c <HAL_InitTick+0xec>)
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <HAL_InitTick+0xf0>)
 8000cea:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cec:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <HAL_InitTick+0xec>)
 8000cee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cf2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cf4:	4a1d      	ldr	r2, [pc, #116]	; (8000d6c <HAL_InitTick+0xec>)
 8000cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <HAL_InitTick+0xec>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b1a      	ldr	r3, [pc, #104]	; (8000d6c <HAL_InitTick+0xec>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d06:	4b19      	ldr	r3, [pc, #100]	; (8000d6c <HAL_InitTick+0xec>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d0c:	4817      	ldr	r0, [pc, #92]	; (8000d6c <HAL_InitTick+0xec>)
 8000d0e:	f001 f87f 	bl	8001e10 <HAL_TIM_Base_Init>
 8000d12:	4603      	mov	r3, r0
 8000d14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d11b      	bne.n	8000d58 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d20:	4812      	ldr	r0, [pc, #72]	; (8000d6c <HAL_InitTick+0xec>)
 8000d22:	f001 f8cf 	bl	8001ec4 <HAL_TIM_Base_Start_IT>
 8000d26:	4603      	mov	r3, r0
 8000d28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d111      	bne.n	8000d58 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d34:	2036      	movs	r0, #54	; 0x36
 8000d36:	f000 f9ff 	bl	8001138 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d808      	bhi.n	8000d52 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	2036      	movs	r0, #54	; 0x36
 8000d46:	f000 f9db 	bl	8001100 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <HAL_InitTick+0xf4>)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6013      	str	r3, [r2, #0]
 8000d50:	e002      	b.n	8000d58 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3738      	adds	r7, #56	; 0x38
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	40023800 	.word	0x40023800
 8000d68:	431bde83 	.word	0x431bde83
 8000d6c:	200000ac 	.word	0x200000ac
 8000d70:	40001000 	.word	0x40001000
 8000d74:	20000004 	.word	0x20000004

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <TIM6_DAC_IRQHandler+0x10>)
 8000daa:	f001 f8fb 	bl	8001fa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200000ac 	.word	0x200000ac

08000db8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	e00a      	b.n	8000de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dca:	f3af 8000 	nop.w
 8000dce:	4601      	mov	r1, r0
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	60ba      	str	r2, [r7, #8]
 8000dd6:	b2ca      	uxtb	r2, r1
 8000dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	3301      	adds	r3, #1
 8000dde:	617b      	str	r3, [r7, #20]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	dbf0      	blt.n	8000dca <_read+0x12>
  }

  return len;
 8000de8:	687b      	ldr	r3, [r7, #4]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3718      	adds	r7, #24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}

08000df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000df2:	b580      	push	{r7, lr}
 8000df4:	b086      	sub	sp, #24
 8000df6:	af00      	add	r7, sp, #0
 8000df8:	60f8      	str	r0, [r7, #12]
 8000dfa:	60b9      	str	r1, [r7, #8]
 8000dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
 8000e02:	e009      	b.n	8000e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	1c5a      	adds	r2, r3, #1
 8000e08:	60ba      	str	r2, [r7, #8]
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf1      	blt.n	8000e04 <_write+0x12>
  }
  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_close>:

int _close(int file)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	b083      	sub	sp, #12
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b083      	sub	sp, #12
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e52:	605a      	str	r2, [r3, #4]
  return 0;
 8000e54:	2300      	movs	r3, #0
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <_isatty>:

int _isatty(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e6a:	2301      	movs	r3, #1
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
	...

08000e94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack     /* set stack pointer */
 8000eb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ebe:	490e      	ldr	r1, [pc, #56]	; (8000ef8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ec0:	4a0e      	ldr	r2, [pc, #56]	; (8000efc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec4:	e002      	b.n	8000ecc <LoopCopyDataInit>

08000ec6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ec6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eca:	3304      	adds	r3, #4

08000ecc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ecc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ece:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed0:	d3f9      	bcc.n	8000ec6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed2:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ed4:	4c0b      	ldr	r4, [pc, #44]	; (8000f04 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed8:	e001      	b.n	8000ede <LoopFillZerobss>

08000eda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000edc:	3204      	adds	r2, #4

08000ede <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ede:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee0:	d3fb      	bcc.n	8000eda <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ee2:	f7ff ffd7 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ee6:	f006 fd97 	bl	8007a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eea:	f7ff fb8f 	bl	800060c <main>
  bx  lr
 8000eee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ef0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ef4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ef8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000efc:	08008870 	.word	0x08008870
  ldr r2, =_sbss
 8000f00:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f04:	20014680 	.word	0x20014680

08000f08 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f08:	e7fe      	b.n	8000f08 <ADC_IRQHandler>
	...

08000f0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_Init+0x40>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a0d      	ldr	r2, [pc, #52]	; (8000f4c <HAL_Init+0x40>)
 8000f16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0a      	ldr	r2, [pc, #40]	; (8000f4c <HAL_Init+0x40>)
 8000f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <HAL_Init+0x40>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a07      	ldr	r2, [pc, #28]	; (8000f4c <HAL_Init+0x40>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f34:	2003      	movs	r0, #3
 8000f36:	f000 f8d8 	bl	80010ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3a:	200f      	movs	r0, #15
 8000f3c:	f7ff fea0 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f40:	f7ff fe76 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40023c00 	.word	0x40023c00

08000f50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <HAL_IncTick+0x20>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <HAL_IncTick+0x24>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4413      	add	r3, r2
 8000f60:	4a04      	ldr	r2, [pc, #16]	; (8000f74 <HAL_IncTick+0x24>)
 8000f62:	6013      	str	r3, [r2, #0]
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000008 	.word	0x20000008
 8000f74:	200000f4 	.word	0x200000f4

08000f78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	; (8000f8c <HAL_GetTick+0x14>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	200000f4 	.word	0x200000f4

08000f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f003 0307 	and.w	r3, r3, #7
 8000f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fa0:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fa6:	68ba      	ldr	r2, [r7, #8]
 8000fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fac:	4013      	ands	r3, r2
 8000fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	60d3      	str	r3, [r2, #12]
}
 8000fc8:	bf00      	nop
 8000fca:	3714      	adds	r7, #20
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fdc:	4b04      	ldr	r3, [pc, #16]	; (8000ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	0a1b      	lsrs	r3, r3, #8
 8000fe2:	f003 0307 	and.w	r3, r3, #7
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001002:	2b00      	cmp	r3, #0
 8001004:	db0b      	blt.n	800101e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	f003 021f 	and.w	r2, r3, #31
 800100c:	4907      	ldr	r1, [pc, #28]	; (800102c <__NVIC_EnableIRQ+0x38>)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	095b      	lsrs	r3, r3, #5
 8001014:	2001      	movs	r0, #1
 8001016:	fa00 f202 	lsl.w	r2, r0, r2
 800101a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800101e:	bf00      	nop
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	e000e100 	.word	0xe000e100

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001084:	b480      	push	{r7}
 8001086:	b089      	sub	sp, #36	; 0x24
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	f1c3 0307 	rsb	r3, r3, #7
 800109e:	2b04      	cmp	r3, #4
 80010a0:	bf28      	it	cs
 80010a2:	2304      	movcs	r3, #4
 80010a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3304      	adds	r3, #4
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d902      	bls.n	80010b4 <NVIC_EncodePriority+0x30>
 80010ae:	69fb      	ldr	r3, [r7, #28]
 80010b0:	3b03      	subs	r3, #3
 80010b2:	e000      	b.n	80010b6 <NVIC_EncodePriority+0x32>
 80010b4:	2300      	movs	r3, #0
 80010b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	f04f 32ff 	mov.w	r2, #4294967295
 80010bc:	69bb      	ldr	r3, [r7, #24]
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	401a      	ands	r2, r3
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010cc:	f04f 31ff 	mov.w	r1, #4294967295
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	fa01 f303 	lsl.w	r3, r1, r3
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010dc:	4313      	orrs	r3, r2
         );
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3724      	adds	r7, #36	; 0x24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ff4c 	bl	8000f90 <__NVIC_SetPriorityGrouping>
}
 80010f8:	bf00      	nop
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001100:	b580      	push	{r7, lr}
 8001102:	b086      	sub	sp, #24
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	60b9      	str	r1, [r7, #8]
 800110a:	607a      	str	r2, [r7, #4]
 800110c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001112:	f7ff ff61 	bl	8000fd8 <__NVIC_GetPriorityGrouping>
 8001116:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	6978      	ldr	r0, [r7, #20]
 800111e:	f7ff ffb1 	bl	8001084 <NVIC_EncodePriority>
 8001122:	4602      	mov	r2, r0
 8001124:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001128:	4611      	mov	r1, r2
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff80 	bl	8001030 <__NVIC_SetPriority>
}
 8001130:	bf00      	nop
 8001132:	3718      	adds	r7, #24
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}

08001138 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff54 	bl	8000ff4 <__NVIC_EnableIRQ>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001154:	b480      	push	{r7}
 8001156:	b089      	sub	sp, #36	; 0x24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800115e:	2300      	movs	r3, #0
 8001160:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
 800116e:	e16b      	b.n	8001448 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001170:	2201      	movs	r2, #1
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	697a      	ldr	r2, [r7, #20]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	429a      	cmp	r2, r3
 800118a:	f040 815a 	bne.w	8001442 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	2b01      	cmp	r3, #1
 8001198:	d005      	beq.n	80011a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d130      	bne.n	8001208 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	4013      	ands	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68da      	ldr	r2, [r3, #12]
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011dc:	2201      	movs	r2, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	091b      	lsrs	r3, r3, #4
 80011f2:	f003 0201 	and.w	r2, r3, #1
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4313      	orrs	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f003 0303 	and.w	r3, r3, #3
 8001210:	2b03      	cmp	r3, #3
 8001212:	d017      	beq.n	8001244 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800121a:	69fb      	ldr	r3, [r7, #28]
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	2203      	movs	r2, #3
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689a      	ldr	r2, [r3, #8]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	fa02 f303 	lsl.w	r3, r2, r3
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	4313      	orrs	r3, r2
 800123c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f003 0303 	and.w	r3, r3, #3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d123      	bne.n	8001298 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	08da      	lsrs	r2, r3, #3
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	3208      	adds	r2, #8
 8001258:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800125c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800125e:	69fb      	ldr	r3, [r7, #28]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	220f      	movs	r2, #15
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	691a      	ldr	r2, [r3, #16]
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4313      	orrs	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	08da      	lsrs	r2, r3, #3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	3208      	adds	r2, #8
 8001292:	69b9      	ldr	r1, [r7, #24]
 8001294:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	005b      	lsls	r3, r3, #1
 80012a2:	2203      	movs	r2, #3
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	43db      	mvns	r3, r3
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	4013      	ands	r3, r2
 80012ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0203 	and.w	r2, r3, #3
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	f000 80b4 	beq.w	8001442 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
 80012de:	4b60      	ldr	r3, [pc, #384]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	4a5f      	ldr	r2, [pc, #380]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <HAL_GPIO_Init+0x30c>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012f2:	60fb      	str	r3, [r7, #12]
 80012f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012f6:	4a5b      	ldr	r2, [pc, #364]	; (8001464 <HAL_GPIO_Init+0x310>)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	3302      	adds	r3, #2
 80012fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001302:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0303 	and.w	r3, r3, #3
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	220f      	movs	r2, #15
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a52      	ldr	r2, [pc, #328]	; (8001468 <HAL_GPIO_Init+0x314>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d02b      	beq.n	800137a <HAL_GPIO_Init+0x226>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x318>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d025      	beq.n	8001376 <HAL_GPIO_Init+0x222>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a50      	ldr	r2, [pc, #320]	; (8001470 <HAL_GPIO_Init+0x31c>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d01f      	beq.n	8001372 <HAL_GPIO_Init+0x21e>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a4f      	ldr	r2, [pc, #316]	; (8001474 <HAL_GPIO_Init+0x320>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d019      	beq.n	800136e <HAL_GPIO_Init+0x21a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a4e      	ldr	r2, [pc, #312]	; (8001478 <HAL_GPIO_Init+0x324>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d013      	beq.n	800136a <HAL_GPIO_Init+0x216>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a4d      	ldr	r2, [pc, #308]	; (800147c <HAL_GPIO_Init+0x328>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d00d      	beq.n	8001366 <HAL_GPIO_Init+0x212>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_GPIO_Init+0x32c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d007      	beq.n	8001362 <HAL_GPIO_Init+0x20e>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a4b      	ldr	r2, [pc, #300]	; (8001484 <HAL_GPIO_Init+0x330>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d101      	bne.n	800135e <HAL_GPIO_Init+0x20a>
 800135a:	2307      	movs	r3, #7
 800135c:	e00e      	b.n	800137c <HAL_GPIO_Init+0x228>
 800135e:	2308      	movs	r3, #8
 8001360:	e00c      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001362:	2306      	movs	r3, #6
 8001364:	e00a      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001366:	2305      	movs	r3, #5
 8001368:	e008      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136a:	2304      	movs	r3, #4
 800136c:	e006      	b.n	800137c <HAL_GPIO_Init+0x228>
 800136e:	2303      	movs	r3, #3
 8001370:	e004      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001372:	2302      	movs	r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x228>
 8001376:	2301      	movs	r3, #1
 8001378:	e000      	b.n	800137c <HAL_GPIO_Init+0x228>
 800137a:	2300      	movs	r3, #0
 800137c:	69fa      	ldr	r2, [r7, #28]
 800137e:	f002 0203 	and.w	r2, r2, #3
 8001382:	0092      	lsls	r2, r2, #2
 8001384:	4093      	lsls	r3, r2
 8001386:	69ba      	ldr	r2, [r7, #24]
 8001388:	4313      	orrs	r3, r2
 800138a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800138c:	4935      	ldr	r1, [pc, #212]	; (8001464 <HAL_GPIO_Init+0x310>)
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	089b      	lsrs	r3, r3, #2
 8001392:	3302      	adds	r3, #2
 8001394:	69ba      	ldr	r2, [r7, #24]
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800139a:	4b3b      	ldr	r3, [pc, #236]	; (8001488 <HAL_GPIO_Init+0x334>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	43db      	mvns	r3, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4013      	ands	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013be:	4a32      	ldr	r2, [pc, #200]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013c4:	4b30      	ldr	r3, [pc, #192]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	43db      	mvns	r3, r3
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	4013      	ands	r3, r2
 80013d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d003      	beq.n	80013e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	4313      	orrs	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013e8:	4a27      	ldr	r2, [pc, #156]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013ea:	69bb      	ldr	r3, [r7, #24]
 80013ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ee:	4b26      	ldr	r3, [pc, #152]	; (8001488 <HAL_GPIO_Init+0x334>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	43db      	mvns	r3, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4013      	ands	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800140a:	69ba      	ldr	r2, [r7, #24]
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	4313      	orrs	r3, r2
 8001410:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001412:	4a1d      	ldr	r2, [pc, #116]	; (8001488 <HAL_GPIO_Init+0x334>)
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <HAL_GPIO_Init+0x334>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	43db      	mvns	r3, r3
 8001422:	69ba      	ldr	r2, [r7, #24]
 8001424:	4013      	ands	r3, r2
 8001426:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d003      	beq.n	800143c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143c:	4a12      	ldr	r2, [pc, #72]	; (8001488 <HAL_GPIO_Init+0x334>)
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3301      	adds	r3, #1
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	2b0f      	cmp	r3, #15
 800144c:	f67f ae90 	bls.w	8001170 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	3724      	adds	r7, #36	; 0x24
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	40023800 	.word	0x40023800
 8001464:	40013800 	.word	0x40013800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020400 	.word	0x40020400
 8001470:	40020800 	.word	0x40020800
 8001474:	40020c00 	.word	0x40020c00
 8001478:	40021000 	.word	0x40021000
 800147c:	40021400 	.word	0x40021400
 8001480:	40021800 	.word	0x40021800
 8001484:	40021c00 	.word	0x40021c00
 8001488:	40013c00 	.word	0x40013c00

0800148c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	460b      	mov	r3, r1
 8001496:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	691a      	ldr	r2, [r3, #16]
 800149c:	887b      	ldrh	r3, [r7, #2]
 800149e:	4013      	ands	r3, r2
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d002      	beq.n	80014aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80014a4:	2301      	movs	r3, #1
 80014a6:	73fb      	strb	r3, [r7, #15]
 80014a8:	e001      	b.n	80014ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	460b      	mov	r3, r1
 80014c6:	807b      	strh	r3, [r7, #2]
 80014c8:	4613      	mov	r3, r2
 80014ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014cc:	787b      	ldrb	r3, [r7, #1]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d003      	beq.n	80014da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d8:	e003      	b.n	80014e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014da:	887b      	ldrh	r3, [r7, #2]
 80014dc:	041a      	lsls	r2, r3, #16
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	619a      	str	r2, [r3, #24]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b085      	sub	sp, #20
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
 80014f6:	460b      	mov	r3, r1
 80014f8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001500:	887a      	ldrh	r2, [r7, #2]
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	4013      	ands	r3, r2
 8001506:	041a      	lsls	r2, r3, #16
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	43d9      	mvns	r1, r3
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	400b      	ands	r3, r1
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	619a      	str	r2, [r3, #24]
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e267      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	d075      	beq.n	800162e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d00c      	beq.n	8001568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800154e:	4b85      	ldr	r3, [pc, #532]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001556:	2b08      	cmp	r3, #8
 8001558:	d112      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155a:	4b82      	ldr	r3, [pc, #520]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800155c:	685b      	ldr	r3, [r3, #4]
 800155e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001566:	d10b      	bne.n	8001580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	4b7e      	ldr	r3, [pc, #504]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d05b      	beq.n	800162c <HAL_RCC_OscConfig+0x108>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d157      	bne.n	800162c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e242      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001588:	d106      	bne.n	8001598 <HAL_RCC_OscConfig+0x74>
 800158a:	4b76      	ldr	r3, [pc, #472]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a75      	ldr	r2, [pc, #468]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e01d      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015a0:	d10c      	bne.n	80015bc <HAL_RCC_OscConfig+0x98>
 80015a2:	4b70      	ldr	r3, [pc, #448]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6f      	ldr	r2, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015ac:	6013      	str	r3, [r2, #0]
 80015ae:	4b6d      	ldr	r3, [pc, #436]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a6c      	ldr	r2, [pc, #432]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	e00b      	b.n	80015d4 <HAL_RCC_OscConfig+0xb0>
 80015bc:	4b69      	ldr	r3, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a68      	ldr	r2, [pc, #416]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b66      	ldr	r3, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a65      	ldr	r2, [pc, #404]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d013      	beq.n	8001604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015dc:	f7ff fccc 	bl	8000f78 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e4:	f7ff fcc8 	bl	8000f78 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b64      	cmp	r3, #100	; 0x64
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e207      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d0f0      	beq.n	80015e4 <HAL_RCC_OscConfig+0xc0>
 8001602:	e014      	b.n	800162e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001604:	f7ff fcb8 	bl	8000f78 <HAL_GetTick>
 8001608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800160a:	e008      	b.n	800161e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800160c:	f7ff fcb4 	bl	8000f78 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b64      	cmp	r3, #100	; 0x64
 8001618:	d901      	bls.n	800161e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800161a:	2303      	movs	r3, #3
 800161c:	e1f3      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800161e:	4b51      	ldr	r3, [pc, #324]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f0      	bne.n	800160c <HAL_RCC_OscConfig+0xe8>
 800162a:	e000      	b.n	800162e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800162c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d063      	beq.n	8001702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800163a:	4b4a      	ldr	r3, [pc, #296]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f003 030c 	and.w	r3, r3, #12
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00b      	beq.n	800165e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800164e:	2b08      	cmp	r3, #8
 8001650:	d11c      	bne.n	800168c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001652:	4b44      	ldr	r3, [pc, #272]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d116      	bne.n	800168c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d005      	beq.n	8001676 <HAL_RCC_OscConfig+0x152>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d001      	beq.n	8001676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e1c7      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001676:	4b3b      	ldr	r3, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4937      	ldr	r1, [pc, #220]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001686:	4313      	orrs	r3, r2
 8001688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168a:	e03a      	b.n	8001702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d020      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001694:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x244>)
 8001696:	2201      	movs	r2, #1
 8001698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fc6d 	bl	8000f78 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fc69 	bl	8000f78 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e1a8      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b4:	4b2b      	ldr	r3, [pc, #172]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b28      	ldr	r3, [pc, #160]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	4925      	ldr	r1, [pc, #148]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
 80016d4:	e015      	b.n	8001702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b24      	ldr	r3, [pc, #144]	; (8001768 <HAL_RCC_OscConfig+0x244>)
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016dc:	f7ff fc4c 	bl	8000f78 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016e4:	f7ff fc48 	bl	8000f78 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e187      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016f6:	4b1b      	ldr	r3, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d1f0      	bne.n	80016e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0308 	and.w	r3, r3, #8
 800170a:	2b00      	cmp	r3, #0
 800170c:	d036      	beq.n	800177c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d016      	beq.n	8001744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_RCC_OscConfig+0x248>)
 8001718:	2201      	movs	r2, #1
 800171a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800171c:	f7ff fc2c 	bl	8000f78 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001724:	f7ff fc28 	bl	8000f78 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e167      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001736:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_OscConfig+0x240>)
 8001738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x200>
 8001742:	e01b      	b.n	800177c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001744:	4b09      	ldr	r3, [pc, #36]	; (800176c <HAL_RCC_OscConfig+0x248>)
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800174a:	f7ff fc15 	bl	8000f78 <HAL_GetTick>
 800174e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001750:	e00e      	b.n	8001770 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001752:	f7ff fc11 	bl	8000f78 <HAL_GetTick>
 8001756:	4602      	mov	r2, r0
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	2b02      	cmp	r3, #2
 800175e:	d907      	bls.n	8001770 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e150      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
 8001764:	40023800 	.word	0x40023800
 8001768:	42470000 	.word	0x42470000
 800176c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001770:	4b88      	ldr	r3, [pc, #544]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1ea      	bne.n	8001752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	f000 8097 	beq.w	80018b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800178a:	2300      	movs	r3, #0
 800178c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800178e:	4b81      	ldr	r3, [pc, #516]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d10f      	bne.n	80017ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	60bb      	str	r3, [r7, #8]
 800179e:	4b7d      	ldr	r3, [pc, #500]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	4a7c      	ldr	r2, [pc, #496]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	; 0x40
 80017aa:	4b7a      	ldr	r3, [pc, #488]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017b6:	2301      	movs	r3, #1
 80017b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ba:	4b77      	ldr	r3, [pc, #476]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d118      	bne.n	80017f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017c6:	4b74      	ldr	r3, [pc, #464]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a73      	ldr	r2, [pc, #460]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017d2:	f7ff fbd1 	bl	8000f78 <HAL_GetTick>
 80017d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017d8:	e008      	b.n	80017ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017da:	f7ff fbcd 	bl	8000f78 <HAL_GetTick>
 80017de:	4602      	mov	r2, r0
 80017e0:	693b      	ldr	r3, [r7, #16]
 80017e2:	1ad3      	subs	r3, r2, r3
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d901      	bls.n	80017ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017e8:	2303      	movs	r3, #3
 80017ea:	e10c      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ec:	4b6a      	ldr	r3, [pc, #424]	; (8001998 <HAL_RCC_OscConfig+0x474>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f0      	beq.n	80017da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d106      	bne.n	800180e <HAL_RCC_OscConfig+0x2ea>
 8001800:	4b64      	ldr	r3, [pc, #400]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001804:	4a63      	ldr	r2, [pc, #396]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001806:	f043 0301 	orr.w	r3, r3, #1
 800180a:	6713      	str	r3, [r2, #112]	; 0x70
 800180c:	e01c      	b.n	8001848 <HAL_RCC_OscConfig+0x324>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	2b05      	cmp	r3, #5
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x30c>
 8001816:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800181a:	4a5e      	ldr	r2, [pc, #376]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800181c:	f043 0304 	orr.w	r3, r3, #4
 8001820:	6713      	str	r3, [r2, #112]	; 0x70
 8001822:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001826:	4a5b      	ldr	r2, [pc, #364]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6713      	str	r3, [r2, #112]	; 0x70
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0x324>
 8001830:	4b58      	ldr	r3, [pc, #352]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001834:	4a57      	ldr	r2, [pc, #348]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001836:	f023 0301 	bic.w	r3, r3, #1
 800183a:	6713      	str	r3, [r2, #112]	; 0x70
 800183c:	4b55      	ldr	r3, [pc, #340]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800183e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001842:	f023 0304 	bic.w	r3, r3, #4
 8001846:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d015      	beq.n	800187c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001850:	f7ff fb92 	bl	8000f78 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001856:	e00a      	b.n	800186e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001858:	f7ff fb8e 	bl	8000f78 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	f241 3288 	movw	r2, #5000	; 0x1388
 8001866:	4293      	cmp	r3, r2
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e0cb      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800186e:	4b49      	ldr	r3, [pc, #292]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001870:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001872:	f003 0302 	and.w	r3, r3, #2
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0ee      	beq.n	8001858 <HAL_RCC_OscConfig+0x334>
 800187a:	e014      	b.n	80018a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187c:	f7ff fb7c 	bl	8000f78 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fb78 	bl	8000f78 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e0b5      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800189a:	4b3e      	ldr	r3, [pc, #248]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800189c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1ee      	bne.n	8001884 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018a6:	7dfb      	ldrb	r3, [r7, #23]
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d105      	bne.n	80018b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a38      	ldr	r2, [pc, #224]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f000 80a1 	beq.w	8001a04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b08      	cmp	r3, #8
 80018cc:	d05c      	beq.n	8001988 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	2b02      	cmp	r3, #2
 80018d4:	d141      	bne.n	800195a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_RCC_OscConfig+0x478>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb4c 	bl	8000f78 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fb48 	bl	8000f78 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e087      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018f6:	4b27      	ldr	r3, [pc, #156]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	69da      	ldr	r2, [r3, #28]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a1b      	ldr	r3, [r3, #32]
 800190a:	431a      	orrs	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001910:	019b      	lsls	r3, r3, #6
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001918:	085b      	lsrs	r3, r3, #1
 800191a:	3b01      	subs	r3, #1
 800191c:	041b      	lsls	r3, r3, #16
 800191e:	431a      	orrs	r2, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001924:	061b      	lsls	r3, r3, #24
 8001926:	491b      	ldr	r1, [pc, #108]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 8001928:	4313      	orrs	r3, r2
 800192a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800192c:	4b1b      	ldr	r3, [pc, #108]	; (800199c <HAL_RCC_OscConfig+0x478>)
 800192e:	2201      	movs	r2, #1
 8001930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001932:	f7ff fb21 	bl	8000f78 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800193a:	f7ff fb1d 	bl	8000f78 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e05c      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800194c:	4b11      	ldr	r3, [pc, #68]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x416>
 8001958:	e054      	b.n	8001a04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x478>)
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001960:	f7ff fb0a 	bl	8000f78 <HAL_GetTick>
 8001964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001966:	e008      	b.n	800197a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001968:	f7ff fb06 	bl	8000f78 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	693b      	ldr	r3, [r7, #16]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d901      	bls.n	800197a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e045      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x470>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001982:	2b00      	cmp	r3, #0
 8001984:	d1f0      	bne.n	8001968 <HAL_RCC_OscConfig+0x444>
 8001986:	e03d      	b.n	8001a04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d107      	bne.n	80019a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e038      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
 8001994:	40023800 	.word	0x40023800
 8001998:	40007000 	.word	0x40007000
 800199c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_OscConfig+0x4ec>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d028      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d121      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019c6:	429a      	cmp	r2, r3
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80019d0:	4013      	ands	r3, r2
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80019d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019d8:	4293      	cmp	r3, r2
 80019da:	d111      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d107      	bne.n	8001a00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d001      	beq.n	8001a04 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e000      	b.n	8001a06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	40023800 	.word	0x40023800

08001a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0cc      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a28:	4b68      	ldr	r3, [pc, #416]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d90c      	bls.n	8001a50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a36:	4b65      	ldr	r3, [pc, #404]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	b2d2      	uxtb	r2, r2
 8001a3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a3e:	4b63      	ldr	r3, [pc, #396]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	683a      	ldr	r2, [r7, #0]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0b8      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d020      	beq.n	8001a9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b59      	ldr	r3, [pc, #356]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a58      	ldr	r2, [pc, #352]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a6e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001a72:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d005      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a80:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	4a52      	ldr	r2, [pc, #328]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a86:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001a8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a8c:	4b50      	ldr	r3, [pc, #320]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	494d      	ldr	r1, [pc, #308]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d044      	beq.n	8001b34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d107      	bne.n	8001ac2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ab2:	4b47      	ldr	r3, [pc, #284]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d119      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e07f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d003      	beq.n	8001ad2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad2:	4b3f      	ldr	r3, [pc, #252]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e06f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae2:	4b3b      	ldr	r3, [pc, #236]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d101      	bne.n	8001af2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	e067      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001af2:	4b37      	ldr	r3, [pc, #220]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f023 0203 	bic.w	r2, r3, #3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4934      	ldr	r1, [pc, #208]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b04:	f7ff fa38 	bl	8000f78 <HAL_GetTick>
 8001b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b0c:	f7ff fa34 	bl	8000f78 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e04f      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b22:	4b2b      	ldr	r3, [pc, #172]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 020c 	and.w	r2, r3, #12
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d1eb      	bne.n	8001b0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d20c      	bcs.n	8001b5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b42:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b4a:	4b20      	ldr	r3, [pc, #128]	; (8001bcc <HAL_RCC_ClockConfig+0x1b8>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d001      	beq.n	8001b5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e032      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0304 	and.w	r3, r3, #4
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	4916      	ldr	r1, [pc, #88]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d009      	beq.n	8001b9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b86:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	691b      	ldr	r3, [r3, #16]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	490e      	ldr	r1, [pc, #56]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b96:	4313      	orrs	r3, r2
 8001b98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b9a:	f000 f821 	bl	8001be0 <HAL_RCC_GetSysClockFreq>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	490a      	ldr	r1, [pc, #40]	; (8001bd4 <HAL_RCC_ClockConfig+0x1c0>)
 8001bac:	5ccb      	ldrb	r3, [r1, r3]
 8001bae:	fa22 f303 	lsr.w	r3, r2, r3
 8001bb2:	4a09      	ldr	r2, [pc, #36]	; (8001bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001bb6:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <HAL_RCC_ClockConfig+0x1c8>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7ff f860 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	40023c00 	.word	0x40023c00
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	080087ec 	.word	0x080087ec
 8001bd8:	20000000 	.word	0x20000000
 8001bdc:	20000004 	.word	0x20000004

08001be0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001be4:	b090      	sub	sp, #64	; 0x40
 8001be6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001be8:	2300      	movs	r3, #0
 8001bea:	637b      	str	r3, [r7, #52]	; 0x34
 8001bec:	2300      	movs	r3, #0
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bf8:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 030c 	and.w	r3, r3, #12
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d00d      	beq.n	8001c20 <HAL_RCC_GetSysClockFreq+0x40>
 8001c04:	2b08      	cmp	r3, #8
 8001c06:	f200 80a1 	bhi.w	8001d4c <HAL_RCC_GetSysClockFreq+0x16c>
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d002      	beq.n	8001c14 <HAL_RCC_GetSysClockFreq+0x34>
 8001c0e:	2b04      	cmp	r3, #4
 8001c10:	d003      	beq.n	8001c1a <HAL_RCC_GetSysClockFreq+0x3a>
 8001c12:	e09b      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c14:	4b53      	ldr	r3, [pc, #332]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001c18:	e09b      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c1a:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c1e:	e098      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c20:	4b4f      	ldr	r3, [pc, #316]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c2a:	4b4d      	ldr	r3, [pc, #308]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d028      	beq.n	8001c88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	099b      	lsrs	r3, r3, #6
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	623b      	str	r3, [r7, #32]
 8001c40:	627a      	str	r2, [r7, #36]	; 0x24
 8001c42:	6a3b      	ldr	r3, [r7, #32]
 8001c44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c48:	2100      	movs	r1, #0
 8001c4a:	4b47      	ldr	r3, [pc, #284]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c4c:	fb03 f201 	mul.w	r2, r3, r1
 8001c50:	2300      	movs	r3, #0
 8001c52:	fb00 f303 	mul.w	r3, r0, r3
 8001c56:	4413      	add	r3, r2
 8001c58:	4a43      	ldr	r2, [pc, #268]	; (8001d68 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c5a:	fba0 1202 	umull	r1, r2, r0, r2
 8001c5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001c60:	460a      	mov	r2, r1
 8001c62:	62ba      	str	r2, [r7, #40]	; 0x28
 8001c64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c66:	4413      	add	r3, r2
 8001c68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61bb      	str	r3, [r7, #24]
 8001c70:	61fa      	str	r2, [r7, #28]
 8001c72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001c7a:	f7fe fb49 	bl	8000310 <__aeabi_uldivmod>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	4613      	mov	r3, r2
 8001c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c86:	e053      	b.n	8001d30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c88:	4b35      	ldr	r3, [pc, #212]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	2200      	movs	r2, #0
 8001c90:	613b      	str	r3, [r7, #16]
 8001c92:	617a      	str	r2, [r7, #20]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c9a:	f04f 0b00 	mov.w	fp, #0
 8001c9e:	4652      	mov	r2, sl
 8001ca0:	465b      	mov	r3, fp
 8001ca2:	f04f 0000 	mov.w	r0, #0
 8001ca6:	f04f 0100 	mov.w	r1, #0
 8001caa:	0159      	lsls	r1, r3, #5
 8001cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cb0:	0150      	lsls	r0, r2, #5
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	ebb2 080a 	subs.w	r8, r2, sl
 8001cba:	eb63 090b 	sbc.w	r9, r3, fp
 8001cbe:	f04f 0200 	mov.w	r2, #0
 8001cc2:	f04f 0300 	mov.w	r3, #0
 8001cc6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001cca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001cce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cd2:	ebb2 0408 	subs.w	r4, r2, r8
 8001cd6:	eb63 0509 	sbc.w	r5, r3, r9
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	00eb      	lsls	r3, r5, #3
 8001ce4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ce8:	00e2      	lsls	r2, r4, #3
 8001cea:	4614      	mov	r4, r2
 8001cec:	461d      	mov	r5, r3
 8001cee:	eb14 030a 	adds.w	r3, r4, sl
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	eb45 030b 	adc.w	r3, r5, fp
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	f04f 0200 	mov.w	r2, #0
 8001cfe:	f04f 0300 	mov.w	r3, #0
 8001d02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d06:	4629      	mov	r1, r5
 8001d08:	028b      	lsls	r3, r1, #10
 8001d0a:	4621      	mov	r1, r4
 8001d0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d10:	4621      	mov	r1, r4
 8001d12:	028a      	lsls	r2, r1, #10
 8001d14:	4610      	mov	r0, r2
 8001d16:	4619      	mov	r1, r3
 8001d18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	60fa      	str	r2, [r7, #12]
 8001d20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d24:	f7fe faf4 	bl	8000310 <__aeabi_uldivmod>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	460b      	mov	r3, r1
 8001d2c:	4613      	mov	r3, r2
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d30:	4b0b      	ldr	r3, [pc, #44]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x180>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	0c1b      	lsrs	r3, r3, #16
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001d40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d4a:	e002      	b.n	8001d52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d4c:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001d50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3740      	adds	r7, #64	; 0x40
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d5e:	bf00      	nop
 8001d60:	40023800 	.word	0x40023800
 8001d64:	00f42400 	.word	0x00f42400
 8001d68:	017d7840 	.word	0x017d7840

08001d6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000

08001d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d88:	f7ff fff0 	bl	8001d6c <HAL_RCC_GetHCLKFreq>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	4b05      	ldr	r3, [pc, #20]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0a9b      	lsrs	r3, r3, #10
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	4903      	ldr	r1, [pc, #12]	; (8001da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d9a:	5ccb      	ldrb	r3, [r1, r3]
 8001d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40023800 	.word	0x40023800
 8001da8:	080087fc 	.word	0x080087fc

08001dac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	220f      	movs	r2, #15
 8001dba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	f003 0203 	and.w	r2, r3, #3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_RCC_GetClockConfig+0x5c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	08db      	lsrs	r3, r3, #3
 8001de6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dee:	4b07      	ldr	r3, [pc, #28]	; (8001e0c <HAL_RCC_GetClockConfig+0x60>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0207 	and.w	r2, r3, #7
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	601a      	str	r2, [r3, #0]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40023c00 	.word	0x40023c00

08001e10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e041      	b.n	8001ea6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d106      	bne.n	8001e3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f839 	bl	8001eae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2202      	movs	r2, #2
 8001e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	3304      	adds	r3, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4610      	mov	r0, r2
 8001e50:	f000 f9d8 	bl	8002204 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2201      	movs	r2, #1
 8001e58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}

08001eae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b085      	sub	sp, #20
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d001      	beq.n	8001edc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e04e      	b.n	8001f7a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2202      	movs	r2, #2
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <HAL_TIM_Base_Start_IT+0xc4>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d022      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f06:	d01d      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a1f      	ldr	r2, [pc, #124]	; (8001f8c <HAL_TIM_Base_Start_IT+0xc8>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d018      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a1e      	ldr	r2, [pc, #120]	; (8001f90 <HAL_TIM_Base_Start_IT+0xcc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d013      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a1c      	ldr	r2, [pc, #112]	; (8001f94 <HAL_TIM_Base_Start_IT+0xd0>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d00e      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1b      	ldr	r2, [pc, #108]	; (8001f98 <HAL_TIM_Base_Start_IT+0xd4>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d009      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a19      	ldr	r2, [pc, #100]	; (8001f9c <HAL_TIM_Base_Start_IT+0xd8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d004      	beq.n	8001f44 <HAL_TIM_Base_Start_IT+0x80>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d111      	bne.n	8001f68 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d010      	beq.n	8001f78 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f042 0201 	orr.w	r2, r2, #1
 8001f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f66:	e007      	b.n	8001f78 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f042 0201 	orr.w	r2, r2, #1
 8001f76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40000400 	.word	0x40000400
 8001f90:	40000800 	.word	0x40000800
 8001f94:	40000c00 	.word	0x40000c00
 8001f98:	40010400 	.word	0x40010400
 8001f9c:	40014000 	.word	0x40014000
 8001fa0:	40001800 	.word	0x40001800

08001fa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d122      	bne.n	8002000 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d11b      	bne.n	8002000 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f06f 0202 	mvn.w	r2, #2
 8001fd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d003      	beq.n	8001fee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f8ee 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8001fec:	e005      	b.n	8001ffa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 f8e0 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f000 f8f1 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	691b      	ldr	r3, [r3, #16]
 8002006:	f003 0304 	and.w	r3, r3, #4
 800200a:	2b04      	cmp	r3, #4
 800200c:	d122      	bne.n	8002054 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b04      	cmp	r3, #4
 800201a:	d11b      	bne.n	8002054 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f06f 0204 	mvn.w	r2, #4
 8002024:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2202      	movs	r2, #2
 800202a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f8c4 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002040:	e005      	b.n	800204e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 f8b6 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	f000 f8c7 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	2b08      	cmp	r3, #8
 8002060:	d122      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0308 	and.w	r3, r3, #8
 800206c:	2b08      	cmp	r3, #8
 800206e:	d11b      	bne.n	80020a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0208 	mvn.w	r2, #8
 8002078:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2204      	movs	r2, #4
 800207e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	f003 0303 	and.w	r3, r3, #3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800208e:	6878      	ldr	r0, [r7, #4]
 8002090:	f000 f89a 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 8002094:	e005      	b.n	80020a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f000 f88c 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f89d 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b10      	cmp	r3, #16
 80020b4:	d122      	bne.n	80020fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	f003 0310 	and.w	r3, r3, #16
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d11b      	bne.n	80020fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f06f 0210 	mvn.w	r2, #16
 80020cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2208      	movs	r2, #8
 80020d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f870 	bl	80021c8 <HAL_TIM_IC_CaptureCallback>
 80020e8:	e005      	b.n	80020f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f000 f862 	bl	80021b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f0:	6878      	ldr	r0, [r7, #4]
 80020f2:	f000 f873 	bl	80021dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	691b      	ldr	r3, [r3, #16]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b01      	cmp	r3, #1
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	f003 0301 	and.w	r3, r3, #1
 8002114:	2b01      	cmp	r3, #1
 8002116:	d107      	bne.n	8002128 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f06f 0201 	mvn.w	r2, #1
 8002120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7fe fd6c 	bl	8000c00 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b80      	cmp	r3, #128	; 0x80
 8002134:	d10e      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002140:	2b80      	cmp	r3, #128	; 0x80
 8002142:	d107      	bne.n	8002154 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800214c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 f902 	bl	8002358 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800215e:	2b40      	cmp	r3, #64	; 0x40
 8002160:	d10e      	bne.n	8002180 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800216c:	2b40      	cmp	r3, #64	; 0x40
 800216e:	d107      	bne.n	8002180 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f838 	bl	80021f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b20      	cmp	r3, #32
 800218c:	d10e      	bne.n	80021ac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b20      	cmp	r3, #32
 800219a:	d107      	bne.n	80021ac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f06f 0220 	mvn.w	r2, #32
 80021a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f000 f8cc 	bl	8002344 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021e4:	bf00      	nop
 80021e6:	370c      	adds	r7, #12
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021f8:	bf00      	nop
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a40      	ldr	r2, [pc, #256]	; (8002318 <TIM_Base_SetConfig+0x114>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d013      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002222:	d00f      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a3d      	ldr	r2, [pc, #244]	; (800231c <TIM_Base_SetConfig+0x118>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d00b      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	4a3c      	ldr	r2, [pc, #240]	; (8002320 <TIM_Base_SetConfig+0x11c>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d007      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	4a3b      	ldr	r2, [pc, #236]	; (8002324 <TIM_Base_SetConfig+0x120>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d003      	beq.n	8002244 <TIM_Base_SetConfig+0x40>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a3a      	ldr	r2, [pc, #232]	; (8002328 <TIM_Base_SetConfig+0x124>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d108      	bne.n	8002256 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800224a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4a2f      	ldr	r2, [pc, #188]	; (8002318 <TIM_Base_SetConfig+0x114>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d02b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002264:	d027      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a2c      	ldr	r2, [pc, #176]	; (800231c <TIM_Base_SetConfig+0x118>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d023      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a2b      	ldr	r2, [pc, #172]	; (8002320 <TIM_Base_SetConfig+0x11c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d01f      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a2a      	ldr	r2, [pc, #168]	; (8002324 <TIM_Base_SetConfig+0x120>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d01b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a29      	ldr	r2, [pc, #164]	; (8002328 <TIM_Base_SetConfig+0x124>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d017      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a28      	ldr	r2, [pc, #160]	; (800232c <TIM_Base_SetConfig+0x128>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d013      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a27      	ldr	r2, [pc, #156]	; (8002330 <TIM_Base_SetConfig+0x12c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00f      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a26      	ldr	r2, [pc, #152]	; (8002334 <TIM_Base_SetConfig+0x130>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00b      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a25      	ldr	r2, [pc, #148]	; (8002338 <TIM_Base_SetConfig+0x134>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d007      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a24      	ldr	r2, [pc, #144]	; (800233c <TIM_Base_SetConfig+0x138>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d003      	beq.n	80022b6 <TIM_Base_SetConfig+0xb2>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <TIM_Base_SetConfig+0x13c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d108      	bne.n	80022c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	68db      	ldr	r3, [r3, #12]
 80022c2:	68fa      	ldr	r2, [r7, #12]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	68fa      	ldr	r2, [r7, #12]
 80022da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <TIM_Base_SetConfig+0x114>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d003      	beq.n	80022fc <TIM_Base_SetConfig+0xf8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a0c      	ldr	r2, [pc, #48]	; (8002328 <TIM_Base_SetConfig+0x124>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d103      	bne.n	8002304 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	615a      	str	r2, [r3, #20]
}
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	40010000 	.word	0x40010000
 800231c:	40000400 	.word	0x40000400
 8002320:	40000800 	.word	0x40000800
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40010400 	.word	0x40010400
 800232c:	40014000 	.word	0x40014000
 8002330:	40014400 	.word	0x40014400
 8002334:	40014800 	.word	0x40014800
 8002338:	40001800 	.word	0x40001800
 800233c:	40001c00 	.word	0x40001c00
 8002340:	40002000 	.word	0x40002000

08002344 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002360:	bf00      	nop
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f103 0208 	add.w	r2, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f04f 32ff 	mov.w	r2, #4294967295
 8002384:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f103 0208 	add.w	r2, r3, #8
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f103 0208 	add.w	r2, r3, #8
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2200      	movs	r2, #0
 800239e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr

080023c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80023c6:	b480      	push	{r7}
 80023c8:	b085      	sub	sp, #20
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
 80023ce:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	601a      	str	r2, [r3, #0]
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800240e:	b480      	push	{r7}
 8002410:	b085      	sub	sp, #20
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002424:	d103      	bne.n	800242e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	691b      	ldr	r3, [r3, #16]
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	e00c      	b.n	8002448 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	3308      	adds	r3, #8
 8002432:	60fb      	str	r3, [r7, #12]
 8002434:	e002      	b.n	800243c <vListInsert+0x2e>
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68ba      	ldr	r2, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d2f6      	bcs.n	8002436 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	687a      	ldr	r2, [r7, #4]
 8002468:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	687a      	ldr	r2, [r7, #4]
 8002494:	6892      	ldr	r2, [r2, #8]
 8002496:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6852      	ldr	r2, [r2, #4]
 80024a0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d103      	bne.n	80024b4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	1e5a      	subs	r2, r3, #1
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3714      	adds	r7, #20
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80024de:	2301      	movs	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10a      	bne.n	8002502 <xQueueGenericReset+0x2e>
        __asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	60fb      	str	r3, [r7, #12]
    }
 80024fe:	bf00      	nop
 8002500:	e7fe      	b.n	8002500 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d05d      	beq.n	80025c4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800250c:	2b00      	cmp	r3, #0
 800250e:	d059      	beq.n	80025c4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002518:	2100      	movs	r1, #0
 800251a:	fba3 2302 	umull	r2, r3, r3, r2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d000      	beq.n	8002524 <xQueueGenericReset+0x50>
 8002522:	2101      	movs	r1, #1
 8002524:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002526:	2b00      	cmp	r3, #0
 8002528:	d14c      	bne.n	80025c4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800252a:	f002 f993 	bl	8004854 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002536:	6939      	ldr	r1, [r7, #16]
 8002538:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800253a:	fb01 f303 	mul.w	r3, r1, r3
 800253e:	441a      	add	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	2200      	movs	r2, #0
 8002548:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	693b      	ldr	r3, [r7, #16]
 8002550:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255a:	3b01      	subs	r3, #1
 800255c:	6939      	ldr	r1, [r7, #16]
 800255e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002560:	fb01 f303 	mul.w	r3, r1, r3
 8002564:	441a      	add	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	22ff      	movs	r2, #255	; 0xff
 800256e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	22ff      	movs	r2, #255	; 0xff
 8002576:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d114      	bne.n	80025aa <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	691b      	ldr	r3, [r3, #16]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01a      	beq.n	80025be <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	3310      	adds	r3, #16
 800258c:	4618      	mov	r0, r3
 800258e:	f001 f8c1 	bl	8003714 <xTaskRemoveFromEventList>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d012      	beq.n	80025be <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002598:	4b15      	ldr	r3, [pc, #84]	; (80025f0 <xQueueGenericReset+0x11c>)
 800259a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	f3bf 8f6f 	isb	sy
 80025a8:	e009      	b.n	80025be <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	3310      	adds	r3, #16
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff fedc 	bl	800236c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	3324      	adds	r3, #36	; 0x24
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff fed7 	bl	800236c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80025be:	f002 f979 	bl	80048b4 <vPortExitCritical>
 80025c2:	e001      	b.n	80025c8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10a      	bne.n	80025e4 <xQueueGenericReset+0x110>
        __asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	60bb      	str	r3, [r7, #8]
    }
 80025e0:	bf00      	nop
 80025e2:	e7fe      	b.n	80025e2 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80025e4:	697b      	ldr	r3, [r7, #20]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3718      	adds	r7, #24
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	e000ed04 	.word	0xe000ed04

080025f4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08a      	sub	sp, #40	; 0x28
 80025f8:	af02      	add	r7, sp, #8
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	4613      	mov	r3, r2
 8002600:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002602:	2300      	movs	r3, #0
 8002604:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d02e      	beq.n	800266a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800260c:	2100      	movs	r1, #0
 800260e:	68ba      	ldr	r2, [r7, #8]
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	fba3 2302 	umull	r2, r3, r3, r2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d000      	beq.n	800261c <xQueueGenericCreate+0x28>
 800261a:	2101      	movs	r1, #1
 800261c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800261e:	2b00      	cmp	r3, #0
 8002620:	d123      	bne.n	800266a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800262a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800262e:	d81c      	bhi.n	800266a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	68ba      	ldr	r2, [r7, #8]
 8002634:	fb02 f303 	mul.w	r3, r2, r3
 8002638:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	3350      	adds	r3, #80	; 0x50
 800263e:	4618      	mov	r0, r3
 8002640:	f002 fa34 	bl	8004aac <pvPortMalloc>
 8002644:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d01c      	beq.n	8002686 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	3350      	adds	r3, #80	; 0x50
 8002654:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002656:	79fa      	ldrb	r2, [r7, #7]
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	4613      	mov	r3, r2
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f000 f814 	bl	8002690 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002668:	e00d      	b.n	8002686 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d10a      	bne.n	8002686 <xQueueGenericCreate+0x92>
        __asm volatile
 8002670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002674:	f383 8811 	msr	BASEPRI, r3
 8002678:	f3bf 8f6f 	isb	sy
 800267c:	f3bf 8f4f 	dsb	sy
 8002680:	613b      	str	r3, [r7, #16]
    }
 8002682:	bf00      	nop
 8002684:	e7fe      	b.n	8002684 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002686:	69fb      	ldr	r3, [r7, #28]
    }
 8002688:	4618      	mov	r0, r3
 800268a:	3720      	adds	r7, #32
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
 800269c:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d103      	bne.n	80026ac <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	601a      	str	r2, [r3, #0]
 80026aa:	e002      	b.n	80026b2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	68fa      	ldr	r2, [r7, #12]
 80026b6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	68ba      	ldr	r2, [r7, #8]
 80026bc:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80026be:	2101      	movs	r1, #1
 80026c0:	69b8      	ldr	r0, [r7, #24]
 80026c2:	f7ff ff07 	bl	80024d4 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	78fa      	ldrb	r2, [r7, #3]
 80026ca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	68f9      	ldr	r1, [r7, #12]
 80026d4:	2073      	movs	r0, #115	; 0x73
 80026d6:	f004 f961 	bl	800699c <SEGGER_SYSVIEW_RecordU32x3>
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80026e4:	b590      	push	{r4, r7, lr}
 80026e6:	b08f      	sub	sp, #60	; 0x3c
 80026e8:	af02      	add	r7, sp, #8
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80026f0:	2300      	movs	r3, #0
 80026f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80026f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10a      	bne.n	8002714 <xQueueReceive+0x30>
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	623b      	str	r3, [r7, #32]
    }
 8002710:	bf00      	nop
 8002712:	e7fe      	b.n	8002712 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d103      	bne.n	8002722 <xQueueReceive+0x3e>
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <xQueueReceive+0x42>
 8002722:	2301      	movs	r3, #1
 8002724:	e000      	b.n	8002728 <xQueueReceive+0x44>
 8002726:	2300      	movs	r3, #0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d10a      	bne.n	8002742 <xQueueReceive+0x5e>
        __asm volatile
 800272c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002730:	f383 8811 	msr	BASEPRI, r3
 8002734:	f3bf 8f6f 	isb	sy
 8002738:	f3bf 8f4f 	dsb	sy
 800273c:	61fb      	str	r3, [r7, #28]
    }
 800273e:	bf00      	nop
 8002740:	e7fe      	b.n	8002740 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002742:	f001 f9f9 	bl	8003b38 <xTaskGetSchedulerState>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <xQueueReceive+0x6e>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d101      	bne.n	8002756 <xQueueReceive+0x72>
 8002752:	2301      	movs	r3, #1
 8002754:	e000      	b.n	8002758 <xQueueReceive+0x74>
 8002756:	2300      	movs	r3, #0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10a      	bne.n	8002772 <xQueueReceive+0x8e>
        __asm volatile
 800275c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002760:	f383 8811 	msr	BASEPRI, r3
 8002764:	f3bf 8f6f 	isb	sy
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	61bb      	str	r3, [r7, #24]
    }
 800276e:	bf00      	nop
 8002770:	e7fe      	b.n	8002770 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002772:	f002 f86f 	bl	8004854 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	2b00      	cmp	r3, #0
 8002780:	d02f      	beq.n	80027e2 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002782:	68b9      	ldr	r1, [r7, #8]
 8002784:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002786:	f000 f8bd 	bl	8002904 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800278a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800278c:	4618      	mov	r0, r3
 800278e:	f004 fe31 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 8002792:	4604      	mov	r4, r0
 8002794:	2000      	movs	r0, #0
 8002796:	f004 fe2d 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 800279a:	4602      	mov	r2, r0
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2101      	movs	r1, #1
 80027a0:	9100      	str	r1, [sp, #0]
 80027a2:	4621      	mov	r1, r4
 80027a4:	205c      	movs	r0, #92	; 0x5c
 80027a6:	f004 f96f 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	1e5a      	subs	r2, r3, #1
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00f      	beq.n	80027da <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027bc:	3310      	adds	r3, #16
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 ffa8 	bl	8003714 <xTaskRemoveFromEventList>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d007      	beq.n	80027da <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80027ca:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <xQueueReceive+0x21c>)
 80027cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80027da:	f002 f86b 	bl	80048b4 <vPortExitCritical>
                return pdPASS;
 80027de:	2301      	movs	r3, #1
 80027e0:	e08a      	b.n	80028f8 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d113      	bne.n	8002810 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80027e8:	f002 f864 	bl	80048b4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ee:	4618      	mov	r0, r3
 80027f0:	f004 fe00 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 80027f4:	4604      	mov	r4, r0
 80027f6:	2000      	movs	r0, #0
 80027f8:	f004 fdfc 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 80027fc:	4602      	mov	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2101      	movs	r1, #1
 8002802:	9100      	str	r1, [sp, #0]
 8002804:	4621      	mov	r1, r4
 8002806:	205c      	movs	r0, #92	; 0x5c
 8002808:	f004 f93e 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800280c:	2300      	movs	r3, #0
 800280e:	e073      	b.n	80028f8 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002812:	2b00      	cmp	r3, #0
 8002814:	d106      	bne.n	8002824 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002816:	f107 0310 	add.w	r3, r7, #16
 800281a:	4618      	mov	r0, r3
 800281c:	f001 f852 	bl	80038c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002820:	2301      	movs	r3, #1
 8002822:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002824:	f002 f846 	bl	80048b4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002828:	f000 fc54 	bl	80030d4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800282c:	f002 f812 	bl	8004854 <vPortEnterCritical>
 8002830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002836:	b25b      	sxtb	r3, r3
 8002838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800283c:	d103      	bne.n	8002846 <xQueueReceive+0x162>
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	2200      	movs	r2, #0
 8002842:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800284c:	b25b      	sxtb	r3, r3
 800284e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002852:	d103      	bne.n	800285c <xQueueReceive+0x178>
 8002854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800285c:	f002 f82a 	bl	80048b4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002860:	1d3a      	adds	r2, r7, #4
 8002862:	f107 0310 	add.w	r3, r7, #16
 8002866:	4611      	mov	r1, r2
 8002868:	4618      	mov	r0, r3
 800286a:	f001 f841 	bl	80038f0 <xTaskCheckForTimeOut>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d124      	bne.n	80028be <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002876:	f000 f8bd 	bl	80029f4 <prvIsQueueEmpty>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d018      	beq.n	80028b2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002882:	3324      	adds	r3, #36	; 0x24
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	4611      	mov	r1, r2
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fed7 	bl	800363c <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800288e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002890:	f000 f85e 	bl	8002950 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002894:	f000 fc2c 	bl	80030f0 <xTaskResumeAll>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	f47f af69 	bne.w	8002772 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80028a0:	4b17      	ldr	r3, [pc, #92]	; (8002900 <xQueueReceive+0x21c>)
 80028a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	f3bf 8f4f 	dsb	sy
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	e75f      	b.n	8002772 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80028b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028b4:	f000 f84c 	bl	8002950 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80028b8:	f000 fc1a 	bl	80030f0 <xTaskResumeAll>
 80028bc:	e759      	b.n	8002772 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80028be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028c0:	f000 f846 	bl	8002950 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80028c4:	f000 fc14 	bl	80030f0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80028c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80028ca:	f000 f893 	bl	80029f4 <prvIsQueueEmpty>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f43f af4e 	beq.w	8002772 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	4618      	mov	r0, r3
 80028da:	f004 fd8b 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 80028de:	4604      	mov	r4, r0
 80028e0:	2000      	movs	r0, #0
 80028e2:	f004 fd87 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 80028e6:	4602      	mov	r2, r0
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2101      	movs	r1, #1
 80028ec:	9100      	str	r1, [sp, #0]
 80028ee:	4621      	mov	r1, r4
 80028f0:	205c      	movs	r0, #92	; 0x5c
 80028f2:	f004 f8c9 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80028f6:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3734      	adds	r7, #52	; 0x34
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd90      	pop	{r4, r7, pc}
 8002900:	e000ed04 	.word	0xe000ed04

08002904 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291e:	441a      	add	r2, r3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68da      	ldr	r2, [r3, #12]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	429a      	cmp	r2, r3
 800292e:	d303      	bcc.n	8002938 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68d9      	ldr	r1, [r3, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	461a      	mov	r2, r3
 8002942:	6838      	ldr	r0, [r7, #0]
 8002944:	f005 f88e 	bl	8007a64 <memcpy>
    }
}
 8002948:	bf00      	nop
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002958:	f001 ff7c 	bl	8004854 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002962:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002964:	e011      	b.n	800298a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	2b00      	cmp	r3, #0
 800296c:	d012      	beq.n	8002994 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3324      	adds	r3, #36	; 0x24
 8002972:	4618      	mov	r0, r3
 8002974:	f000 fece 	bl	8003714 <xTaskRemoveFromEventList>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800297e:	f001 f81d 	bl	80039bc <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3b01      	subs	r3, #1
 8002986:	b2db      	uxtb	r3, r3
 8002988:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800298a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	dce9      	bgt.n	8002966 <prvUnlockQueue+0x16>
 8002992:	e000      	b.n	8002996 <prvUnlockQueue+0x46>
                    break;
 8002994:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	22ff      	movs	r2, #255	; 0xff
 800299a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 800299e:	f001 ff89 	bl	80048b4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80029a2:	f001 ff57 	bl	8004854 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80029ac:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029ae:	e011      	b.n	80029d4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	3310      	adds	r3, #16
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 fea9 	bl	8003714 <xTaskRemoveFromEventList>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80029c8:	f000 fff8 	bl	80039bc <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80029cc:	7bbb      	ldrb	r3, [r7, #14]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80029d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	dce9      	bgt.n	80029b0 <prvUnlockQueue+0x60>
 80029dc:	e000      	b.n	80029e0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80029de:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	22ff      	movs	r2, #255	; 0xff
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 80029e8:	f001 ff64 	bl	80048b4 <vPortExitCritical>
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80029fc:	f001 ff2a 	bl	8004854 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	e001      	b.n	8002a12 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a12:	f001 ff4f 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 8002a16:	68fb      	ldr	r3, [r7, #12]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b086      	sub	sp, #24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d10a      	bne.n	8002a4a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a38:	f383 8811 	msr	BASEPRI, r3
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f3bf 8f4f 	dsb	sy
 8002a44:	60fb      	str	r3, [r7, #12]
    }
 8002a46:	bf00      	nop
 8002a48:	e7fe      	b.n	8002a48 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d024      	beq.n	8002a9a <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	e01e      	b.n	8002a94 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002a56:	4a1c      	ldr	r2, [pc, #112]	; (8002ac8 <vQueueAddToRegistry+0xa8>)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d105      	bne.n	8002a72 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4a17      	ldr	r2, [pc, #92]	; (8002ac8 <vQueueAddToRegistry+0xa8>)
 8002a6c:	4413      	add	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
                    break;
 8002a70:	e013      	b.n	8002a9a <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d10a      	bne.n	8002a8e <vQueueAddToRegistry+0x6e>
 8002a78:	4a13      	ldr	r2, [pc, #76]	; (8002ac8 <vQueueAddToRegistry+0xa8>)
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4a0f      	ldr	r2, [pc, #60]	; (8002ac8 <vQueueAddToRegistry+0xa8>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	3301      	adds	r3, #1
 8002a92:	617b      	str	r3, [r7, #20]
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	2b07      	cmp	r3, #7
 8002a98:	d9dd      	bls.n	8002a56 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00f      	beq.n	8002ac0 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f004 fca0 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 8002ab4:	4601      	mov	r1, r0
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	461a      	mov	r2, r3
 8002aba:	2071      	movs	r0, #113	; 0x71
 8002abc:	f003 ff14 	bl	80068e8 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002ac0:	bf00      	nop
 8002ac2:	3718      	adds	r7, #24
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	200000f8 	.word	0x200000f8

08002acc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002adc:	f001 feba 	bl	8004854 <vPortEnterCritical>
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ae6:	b25b      	sxtb	r3, r3
 8002ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aec:	d103      	bne.n	8002af6 <vQueueWaitForMessageRestricted+0x2a>
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002afc:	b25b      	sxtb	r3, r3
 8002afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b02:	d103      	bne.n	8002b0c <vQueueWaitForMessageRestricted+0x40>
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b0c:	f001 fed2 	bl	80048b4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d106      	bne.n	8002b26 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	3324      	adds	r3, #36	; 0x24
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	68b9      	ldr	r1, [r7, #8]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fdaf 	bl	8003684 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff12 	bl	8002950 <prvUnlockQueue>
    }
 8002b2c:	bf00      	nop
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08c      	sub	sp, #48	; 0x30
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	603b      	str	r3, [r7, #0]
 8002b40:	4613      	mov	r3, r2
 8002b42:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002b44:	88fb      	ldrh	r3, [r7, #6]
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 ffaf 	bl	8004aac <pvPortMalloc>
 8002b4e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d013      	beq.n	8002b7e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002b56:	2058      	movs	r0, #88	; 0x58
 8002b58:	f001 ffa8 	bl	8004aac <pvPortMalloc>
 8002b5c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002b64:	2258      	movs	r2, #88	; 0x58
 8002b66:	2100      	movs	r1, #0
 8002b68:	69f8      	ldr	r0, [r7, #28]
 8002b6a:	f004 ff06 	bl	800797a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
 8002b74:	e005      	b.n	8002b82 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002b76:	6978      	ldr	r0, [r7, #20]
 8002b78:	f002 f852 	bl	8004c20 <vPortFree>
 8002b7c:	e001      	b.n	8002b82 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d013      	beq.n	8002bb0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002b88:	88fa      	ldrh	r2, [r7, #6]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	9303      	str	r3, [sp, #12]
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	9302      	str	r3, [sp, #8]
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	9301      	str	r3, [sp, #4]
 8002b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	68b9      	ldr	r1, [r7, #8]
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f000 f80e 	bl	8002bc0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ba4:	69f8      	ldr	r0, [r7, #28]
 8002ba6:	f000 f899 	bl	8002cdc <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002baa:	2301      	movs	r3, #1
 8002bac:	61bb      	str	r3, [r7, #24]
 8002bae:	e002      	b.n	8002bb6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002bb0:	f04f 33ff 	mov.w	r3, #4294967295
 8002bb4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
    }
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3720      	adds	r7, #32
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b088      	sub	sp, #32
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
 8002bcc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	009b      	lsls	r3, r3, #2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	21a5      	movs	r1, #165	; 0xa5
 8002bda:	f004 fece 	bl	800797a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002be8:	3b01      	subs	r3, #1
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f023 0307 	bic.w	r3, r3, #7
 8002bf6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00a      	beq.n	8002c18 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c06:	f383 8811 	msr	BASEPRI, r3
 8002c0a:	f3bf 8f6f 	isb	sy
 8002c0e:	f3bf 8f4f 	dsb	sy
 8002c12:	617b      	str	r3, [r7, #20]
    }
 8002c14:	bf00      	nop
 8002c16:	e7fe      	b.n	8002c16 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d01e      	beq.n	8002c5c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
 8002c22:	e012      	b.n	8002c4a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002c24:	68ba      	ldr	r2, [r7, #8]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	4413      	add	r3, r2
 8002c2a:	7819      	ldrb	r1, [r3, #0]
 8002c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	3334      	adds	r3, #52	; 0x34
 8002c34:	460a      	mov	r2, r1
 8002c36:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	4413      	add	r3, r2
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d006      	beq.n	8002c52 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	3301      	adds	r3, #1
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	2b09      	cmp	r3, #9
 8002c4e:	d9e9      	bls.n	8002c24 <prvInitialiseNewTask+0x64>
 8002c50:	e000      	b.n	8002c54 <prvInitialiseNewTask+0x94>
            {
                break;
 8002c52:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5e:	2b05      	cmp	r3, #5
 8002c60:	d90a      	bls.n	8002c78 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c66:	f383 8811 	msr	BASEPRI, r3
 8002c6a:	f3bf 8f6f 	isb	sy
 8002c6e:	f3bf 8f4f 	dsb	sy
 8002c72:	613b      	str	r3, [r7, #16]
    }
 8002c74:	bf00      	nop
 8002c76:	e7fe      	b.n	8002c76 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b05      	cmp	r3, #5
 8002c7c:	d901      	bls.n	8002c82 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002c7e:	2305      	movs	r3, #5
 8002c80:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c86:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8c:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c90:	3304      	adds	r3, #4
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fb8a 	bl	80023ac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fb85 	bl	80023ac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ca6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002caa:	f1c3 0206 	rsb	r2, r3, #6
 8002cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	68f9      	ldr	r1, [r7, #12]
 8002cbc:	69b8      	ldr	r0, [r7, #24]
 8002cbe:	f001 fc19 	bl	80044f4 <pxPortInitialiseStack>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cc6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d002      	beq.n	8002cd4 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cd2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cd4:	bf00      	nop
 8002cd6:	3720      	adds	r7, #32
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002cdc:	b5b0      	push	{r4, r5, r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af02      	add	r7, sp, #8
 8002ce2:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002ce4:	f001 fdb6 	bl	8004854 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	; (8002e28 <prvAddNewTaskToReadyList+0x14c>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	3301      	adds	r3, #1
 8002cee:	4a4e      	ldr	r2, [pc, #312]	; (8002e28 <prvAddNewTaskToReadyList+0x14c>)
 8002cf0:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002cf2:	4b4e      	ldr	r3, [pc, #312]	; (8002e2c <prvAddNewTaskToReadyList+0x150>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d109      	bne.n	8002d0e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002cfa:	4a4c      	ldr	r2, [pc, #304]	; (8002e2c <prvAddNewTaskToReadyList+0x150>)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <prvAddNewTaskToReadyList+0x14c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d110      	bne.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d08:	f000 fe7c 	bl	8003a04 <prvInitialiseTaskLists>
 8002d0c:	e00d      	b.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d0e:	4b48      	ldr	r3, [pc, #288]	; (8002e30 <prvAddNewTaskToReadyList+0x154>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d109      	bne.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002d16:	4b45      	ldr	r3, [pc, #276]	; (8002e2c <prvAddNewTaskToReadyList+0x150>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d802      	bhi.n	8002d2a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002d24:	4a41      	ldr	r2, [pc, #260]	; (8002e2c <prvAddNewTaskToReadyList+0x150>)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002d2a:	4b42      	ldr	r3, [pc, #264]	; (8002e34 <prvAddNewTaskToReadyList+0x158>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <prvAddNewTaskToReadyList+0x158>)
 8002d32:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002d34:	4b3f      	ldr	r3, [pc, #252]	; (8002e34 <prvAddNewTaskToReadyList+0x158>)
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d016      	beq.n	8002d70 <prvAddNewTaskToReadyList+0x94>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	4618      	mov	r0, r3
 8002d46:	f004 fa8f 	bl	8007268 <SEGGER_SYSVIEW_OnTaskCreate>
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5a:	461d      	mov	r5, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461c      	mov	r4, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d66:	1ae3      	subs	r3, r4, r3
 8002d68:	9300      	str	r3, [sp, #0]
 8002d6a:	462b      	mov	r3, r5
 8002d6c:	f002 f8f6 	bl	8004f5c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f004 fafc 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	409a      	lsls	r2, r3
 8002d80:	4b2d      	ldr	r3, [pc, #180]	; (8002e38 <prvAddNewTaskToReadyList+0x15c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	4a2c      	ldr	r2, [pc, #176]	; (8002e38 <prvAddNewTaskToReadyList+0x15c>)
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8e:	492b      	ldr	r1, [pc, #172]	; (8002e3c <prvAddNewTaskToReadyList+0x160>)
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	440b      	add	r3, r1
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	60da      	str	r2, [r3, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	3204      	adds	r2, #4
 8002db6:	605a      	str	r2, [r3, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	1d1a      	adds	r2, r3, #4
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	; (8002e3c <prvAddNewTaskToReadyList+0x160>)
 8002dce:	441a      	add	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	615a      	str	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd8:	4918      	ldr	r1, [pc, #96]	; (8002e3c <prvAddNewTaskToReadyList+0x160>)
 8002dda:	4613      	mov	r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	440b      	add	r3, r1
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	1c59      	adds	r1, r3, #1
 8002de8:	4814      	ldr	r0, [pc, #80]	; (8002e3c <prvAddNewTaskToReadyList+0x160>)
 8002dea:	4613      	mov	r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4403      	add	r3, r0
 8002df4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002df6:	f001 fd5d 	bl	80048b4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002dfa:	4b0d      	ldr	r3, [pc, #52]	; (8002e30 <prvAddNewTaskToReadyList+0x154>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00e      	beq.n	8002e20 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e02:	4b0a      	ldr	r3, [pc, #40]	; (8002e2c <prvAddNewTaskToReadyList+0x150>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d207      	bcs.n	8002e20 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <prvAddNewTaskToReadyList+0x164>)
 8002e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e16:	601a      	str	r2, [r3, #0]
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002e20:	bf00      	nop
 8002e22:	3710      	adds	r7, #16
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bdb0      	pop	{r4, r5, r7, pc}
 8002e28:	20000224 	.word	0x20000224
 8002e2c:	20000138 	.word	0x20000138
 8002e30:	20000230 	.word	0x20000230
 8002e34:	20000240 	.word	0x20000240
 8002e38:	2000022c 	.word	0x2000022c
 8002e3c:	2000013c 	.word	0x2000013c
 8002e40:	e000ed04 	.word	0xe000ed04

08002e44 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002e4c:	f001 fd02 	bl	8004854 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d102      	bne.n	8002e5c <vTaskDelete+0x18>
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <vTaskDelete+0x134>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	e000      	b.n	8002e5e <vTaskDelete+0x1a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	3304      	adds	r3, #4
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff fb0b 	bl	8002480 <uxListRemove>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d115      	bne.n	8002e9c <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e74:	4941      	ldr	r1, [pc, #260]	; (8002f7c <vTaskDelete+0x138>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10a      	bne.n	8002e9c <vTaskDelete+0x58>
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43da      	mvns	r2, r3
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <vTaskDelete+0x13c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4013      	ands	r3, r2
 8002e98:	4a39      	ldr	r2, [pc, #228]	; (8002f80 <vTaskDelete+0x13c>)
 8002e9a:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d004      	beq.n	8002eae <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff fae9 	bl	8002480 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <vTaskDelete+0x140>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	4a33      	ldr	r2, [pc, #204]	; (8002f84 <vTaskDelete+0x140>)
 8002eb6:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002eb8:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <vTaskDelete+0x134>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d118      	bne.n	8002ef4 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3304      	adds	r3, #4
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	482f      	ldr	r0, [pc, #188]	; (8002f88 <vTaskDelete+0x144>)
 8002eca:	f7ff fa7c 	bl	80023c6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002ece:	4b2f      	ldr	r3, [pc, #188]	; (8002f8c <vTaskDelete+0x148>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3301      	adds	r3, #1
 8002ed4:	4a2d      	ldr	r2, [pc, #180]	; (8002f8c <vTaskDelete+0x148>)
 8002ed6:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 fa8a 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	2022      	movs	r0, #34	; 0x22
 8002ee6:	f003 fcc3 	bl	8006870 <SEGGER_SYSVIEW_RecordU32>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	4618      	mov	r0, r3
 8002eee:	f002 f89d 	bl	800502c <SYSVIEW_DeleteTask>
 8002ef2:	e013      	b.n	8002f1c <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002ef4:	4b26      	ldr	r3, [pc, #152]	; (8002f90 <vTaskDelete+0x14c>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <vTaskDelete+0x14c>)
 8002efc:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	4618      	mov	r0, r3
 8002f02:	f004 fa77 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 8002f06:	4603      	mov	r3, r0
 8002f08:	4619      	mov	r1, r3
 8002f0a:	2022      	movs	r0, #34	; 0x22
 8002f0c:	f003 fcb0 	bl	8006870 <SEGGER_SYSVIEW_RecordU32>
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4618      	mov	r0, r3
 8002f14:	f002 f88a 	bl	800502c <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002f18:	f000 fdf2 	bl	8003b00 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002f1c:	f001 fcca 	bl	80048b4 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <vTaskDelete+0x134>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d002      	beq.n	8002f30 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fdd8 	bl	8003ae0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <vTaskDelete+0x150>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d01b      	beq.n	8002f70 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002f38:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <vTaskDelete+0x134>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d116      	bne.n	8002f70 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002f42:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <vTaskDelete+0x154>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d00a      	beq.n	8002f60 <vTaskDelete+0x11c>
        __asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	60bb      	str	r3, [r7, #8]
    }
 8002f5c:	bf00      	nop
 8002f5e:	e7fe      	b.n	8002f5e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002f60:	4b0e      	ldr	r3, [pc, #56]	; (8002f9c <vTaskDelete+0x158>)
 8002f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002f70:	bf00      	nop
 8002f72:	3710      	adds	r7, #16
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	20000138 	.word	0x20000138
 8002f7c:	2000013c 	.word	0x2000013c
 8002f80:	2000022c 	.word	0x2000022c
 8002f84:	20000240 	.word	0x20000240
 8002f88:	200001f8 	.word	0x200001f8
 8002f8c:	2000020c 	.word	0x2000020c
 8002f90:	20000224 	.word	0x20000224
 8002f94:	20000230 	.word	0x20000230
 8002f98:	2000024c 	.word	0x2000024c
 8002f9c:	e000ed04 	.word	0xe000ed04

08002fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01b      	beq.n	8002fea <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002fb2:	4b15      	ldr	r3, [pc, #84]	; (8003008 <vTaskDelay+0x68>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <vTaskDelay+0x30>
        __asm volatile
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
    }
 8002fcc:	bf00      	nop
 8002fce:	e7fe      	b.n	8002fce <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002fd0:	f000 f880 	bl	80030d4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	2023      	movs	r0, #35	; 0x23
 8002fd8:	f003 fc4a 	bl	8006870 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002fdc:	2100      	movs	r1, #0
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 ff84 	bl	8003eec <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002fe4:	f000 f884 	bl	80030f0 <xTaskResumeAll>
 8002fe8:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d107      	bne.n	8003000 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <vTaskDelay+0x6c>)
 8002ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	f3bf 8f4f 	dsb	sy
 8002ffc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003000:	bf00      	nop
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	2000024c 	.word	0x2000024c
 800300c:	e000ed04 	.word	0xe000ed04

08003010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8003016:	4b27      	ldr	r3, [pc, #156]	; (80030b4 <vTaskStartScheduler+0xa4>)
 8003018:	9301      	str	r3, [sp, #4]
 800301a:	2300      	movs	r3, #0
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	2300      	movs	r3, #0
 8003020:	2282      	movs	r2, #130	; 0x82
 8003022:	4925      	ldr	r1, [pc, #148]	; (80030b8 <vTaskStartScheduler+0xa8>)
 8003024:	4825      	ldr	r0, [pc, #148]	; (80030bc <vTaskStartScheduler+0xac>)
 8003026:	f7ff fd85 	bl	8002b34 <xTaskCreate>
 800302a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d102      	bne.n	8003038 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003032:	f000 ffdb 	bl	8003fec <xTimerCreateTimerTask>
 8003036:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d124      	bne.n	8003088 <vTaskStartScheduler+0x78>
        __asm volatile
 800303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003042:	f383 8811 	msr	BASEPRI, r3
 8003046:	f3bf 8f6f 	isb	sy
 800304a:	f3bf 8f4f 	dsb	sy
 800304e:	60bb      	str	r3, [r7, #8]
    }
 8003050:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003052:	4b1b      	ldr	r3, [pc, #108]	; (80030c0 <vTaskStartScheduler+0xb0>)
 8003054:	f04f 32ff 	mov.w	r2, #4294967295
 8003058:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800305a:	4b1a      	ldr	r3, [pc, #104]	; (80030c4 <vTaskStartScheduler+0xb4>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003060:	4b19      	ldr	r3, [pc, #100]	; (80030c8 <vTaskStartScheduler+0xb8>)
 8003062:	2200      	movs	r2, #0
 8003064:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8003066:	4b19      	ldr	r3, [pc, #100]	; (80030cc <vTaskStartScheduler+0xbc>)
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	4b12      	ldr	r3, [pc, #72]	; (80030b4 <vTaskStartScheduler+0xa4>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	429a      	cmp	r2, r3
 8003070:	d102      	bne.n	8003078 <vTaskStartScheduler+0x68>
 8003072:	f004 f8dd 	bl	8007230 <SEGGER_SYSVIEW_OnIdle>
 8003076:	e004      	b.n	8003082 <vTaskStartScheduler+0x72>
 8003078:	4b14      	ldr	r3, [pc, #80]	; (80030cc <vTaskStartScheduler+0xbc>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f004 f935 	bl	80072ec <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003082:	f001 fac7 	bl	8004614 <xPortStartScheduler>
 8003086:	e00e      	b.n	80030a6 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d10a      	bne.n	80030a6 <vTaskStartScheduler+0x96>
        __asm volatile
 8003090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003094:	f383 8811 	msr	BASEPRI, r3
 8003098:	f3bf 8f6f 	isb	sy
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	607b      	str	r3, [r7, #4]
    }
 80030a2:	bf00      	nop
 80030a4:	e7fe      	b.n	80030a4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80030a6:	4b0a      	ldr	r3, [pc, #40]	; (80030d0 <vTaskStartScheduler+0xc0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
}
 80030aa:	bf00      	nop
 80030ac:	3710      	adds	r7, #16
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	20000248 	.word	0x20000248
 80030b8:	08008710 	.word	0x08008710
 80030bc:	080039d5 	.word	0x080039d5
 80030c0:	20000244 	.word	0x20000244
 80030c4:	20000230 	.word	0x20000230
 80030c8:	20000228 	.word	0x20000228
 80030cc:	20000138 	.word	0x20000138
 80030d0:	2000000c 	.word	0x2000000c

080030d4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80030d4:	b480      	push	{r7}
 80030d6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80030d8:	4b04      	ldr	r3, [pc, #16]	; (80030ec <vTaskSuspendAll+0x18>)
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	3301      	adds	r3, #1
 80030de:	4a03      	ldr	r2, [pc, #12]	; (80030ec <vTaskSuspendAll+0x18>)
 80030e0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80030e2:	bf00      	nop
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr
 80030ec:	2000024c 	.word	0x2000024c

080030f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b088      	sub	sp, #32
 80030f4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80030fe:	4b73      	ldr	r3, [pc, #460]	; (80032cc <xTaskResumeAll+0x1dc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <xTaskResumeAll+0x2c>
        __asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	607b      	str	r3, [r7, #4]
    }
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800311c:	f001 fb9a 	bl	8004854 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003120:	4b6a      	ldr	r3, [pc, #424]	; (80032cc <xTaskResumeAll+0x1dc>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	3b01      	subs	r3, #1
 8003126:	4a69      	ldr	r2, [pc, #420]	; (80032cc <xTaskResumeAll+0x1dc>)
 8003128:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800312a:	4b68      	ldr	r3, [pc, #416]	; (80032cc <xTaskResumeAll+0x1dc>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	f040 80c4 	bne.w	80032bc <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <xTaskResumeAll+0x1e0>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	f000 80bf 	beq.w	80032bc <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800313e:	e08e      	b.n	800325e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003140:	4b64      	ldr	r3, [pc, #400]	; (80032d4 <xTaskResumeAll+0x1e4>)
 8003142:	68db      	ldr	r3, [r3, #12]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	6a12      	ldr	r2, [r2, #32]
 8003156:	609a      	str	r2, [r3, #8]
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	6a1b      	ldr	r3, [r3, #32]
 800315c:	69fa      	ldr	r2, [r7, #28]
 800315e:	69d2      	ldr	r2, [r2, #28]
 8003160:	605a      	str	r2, [r3, #4]
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3318      	adds	r3, #24
 800316a:	429a      	cmp	r2, r3
 800316c:	d103      	bne.n	8003176 <xTaskResumeAll+0x86>
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	6a1a      	ldr	r2, [r3, #32]
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	605a      	str	r2, [r3, #4]
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2200      	movs	r2, #0
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	1e5a      	subs	r2, r3, #1
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	60fb      	str	r3, [r7, #12]
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	68d2      	ldr	r2, [r2, #12]
 8003194:	609a      	str	r2, [r3, #8]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	69fa      	ldr	r2, [r7, #28]
 800319c:	6892      	ldr	r2, [r2, #8]
 800319e:	605a      	str	r2, [r3, #4]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	3304      	adds	r3, #4
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d103      	bne.n	80031b4 <xTaskResumeAll+0xc4>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	605a      	str	r2, [r3, #4]
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	2200      	movs	r2, #0
 80031b8:	615a      	str	r2, [r3, #20]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	1e5a      	subs	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f004 f8d2 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartReady>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	2201      	movs	r2, #1
 80031d2:	409a      	lsls	r2, r3
 80031d4:	4b40      	ldr	r3, [pc, #256]	; (80032d8 <xTaskResumeAll+0x1e8>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4313      	orrs	r3, r2
 80031da:	4a3f      	ldr	r2, [pc, #252]	; (80032d8 <xTaskResumeAll+0x1e8>)
 80031dc:	6013      	str	r3, [r2, #0]
 80031de:	69fb      	ldr	r3, [r7, #28]
 80031e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e2:	493e      	ldr	r1, [pc, #248]	; (80032dc <xTaskResumeAll+0x1ec>)
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	3304      	adds	r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60bb      	str	r3, [r7, #8]
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	60da      	str	r2, [r3, #12]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	3204      	adds	r2, #4
 800320a:	605a      	str	r2, [r3, #4]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	1d1a      	adds	r2, r3, #4
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003218:	4613      	mov	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	4413      	add	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4a2e      	ldr	r2, [pc, #184]	; (80032dc <xTaskResumeAll+0x1ec>)
 8003222:	441a      	add	r2, r3
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	615a      	str	r2, [r3, #20]
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800322c:	492b      	ldr	r1, [pc, #172]	; (80032dc <xTaskResumeAll+0x1ec>)
 800322e:	4613      	mov	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	1c59      	adds	r1, r3, #1
 800323c:	4827      	ldr	r0, [pc, #156]	; (80032dc <xTaskResumeAll+0x1ec>)
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4403      	add	r3, r0
 8003248:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800324e:	4b24      	ldr	r3, [pc, #144]	; (80032e0 <xTaskResumeAll+0x1f0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003254:	429a      	cmp	r2, r3
 8003256:	d302      	bcc.n	800325e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003258:	4b22      	ldr	r3, [pc, #136]	; (80032e4 <xTaskResumeAll+0x1f4>)
 800325a:	2201      	movs	r2, #1
 800325c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800325e:	4b1d      	ldr	r3, [pc, #116]	; (80032d4 <xTaskResumeAll+0x1e4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f47f af6c 	bne.w	8003140 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800326e:	f000 fc47 	bl	8003b00 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003272:	4b1d      	ldr	r3, [pc, #116]	; (80032e8 <xTaskResumeAll+0x1f8>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d010      	beq.n	80032a0 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800327e:	f000 f859 	bl	8003334 <xTaskIncrementTick>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003288:	4b16      	ldr	r3, [pc, #88]	; (80032e4 <xTaskResumeAll+0x1f4>)
 800328a:	2201      	movs	r2, #1
 800328c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	3b01      	subs	r3, #1
 8003292:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003294:	697b      	ldr	r3, [r7, #20]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f1      	bne.n	800327e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800329a:	4b13      	ldr	r3, [pc, #76]	; (80032e8 <xTaskResumeAll+0x1f8>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80032a0:	4b10      	ldr	r3, [pc, #64]	; (80032e4 <xTaskResumeAll+0x1f4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d009      	beq.n	80032bc <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80032a8:	2301      	movs	r3, #1
 80032aa:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80032ac:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <xTaskResumeAll+0x1fc>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80032bc:	f001 fafa 	bl	80048b4 <vPortExitCritical>

    return xAlreadyYielded;
 80032c0:	69bb      	ldr	r3, [r7, #24]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3720      	adds	r7, #32
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	2000024c 	.word	0x2000024c
 80032d0:	20000224 	.word	0x20000224
 80032d4:	200001e4 	.word	0x200001e4
 80032d8:	2000022c 	.word	0x2000022c
 80032dc:	2000013c 	.word	0x2000013c
 80032e0:	20000138 	.word	0x20000138
 80032e4:	20000238 	.word	0x20000238
 80032e8:	20000234 	.word	0x20000234
 80032ec:	e000ed04 	.word	0xe000ed04

080032f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80032f6:	4b05      	ldr	r3, [pc, #20]	; (800330c <xTaskGetTickCount+0x1c>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80032fc:	687b      	ldr	r3, [r7, #4]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	20000228 	.word	0x20000228

08003310 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b082      	sub	sp, #8
 8003314:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003316:	f001 fb89 	bl	8004a2c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800331e:	4b04      	ldr	r3, [pc, #16]	; (8003330 <xTaskGetTickCountFromISR+0x20>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003324:	683b      	ldr	r3, [r7, #0]
}
 8003326:	4618      	mov	r0, r3
 8003328:	3708      	adds	r7, #8
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	20000228 	.word	0x20000228

08003334 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08a      	sub	sp, #40	; 0x28
 8003338:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800333a:	2300      	movs	r3, #0
 800333c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333e:	4b7f      	ldr	r3, [pc, #508]	; (800353c <xTaskIncrementTick+0x208>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 80f0 	bne.w	8003528 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003348:	4b7d      	ldr	r3, [pc, #500]	; (8003540 <xTaskIncrementTick+0x20c>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003350:	4a7b      	ldr	r2, [pc, #492]	; (8003540 <xTaskIncrementTick+0x20c>)
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	2b00      	cmp	r3, #0
 800335a:	d120      	bne.n	800339e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800335c:	4b79      	ldr	r3, [pc, #484]	; (8003544 <xTaskIncrementTick+0x210>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00a      	beq.n	800337c <xTaskIncrementTick+0x48>
        __asm volatile
 8003366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336a:	f383 8811 	msr	BASEPRI, r3
 800336e:	f3bf 8f6f 	isb	sy
 8003372:	f3bf 8f4f 	dsb	sy
 8003376:	607b      	str	r3, [r7, #4]
    }
 8003378:	bf00      	nop
 800337a:	e7fe      	b.n	800337a <xTaskIncrementTick+0x46>
 800337c:	4b71      	ldr	r3, [pc, #452]	; (8003544 <xTaskIncrementTick+0x210>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	4b71      	ldr	r3, [pc, #452]	; (8003548 <xTaskIncrementTick+0x214>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a6f      	ldr	r2, [pc, #444]	; (8003544 <xTaskIncrementTick+0x210>)
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <xTaskIncrementTick+0x214>)
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	6013      	str	r3, [r2, #0]
 8003390:	4b6e      	ldr	r3, [pc, #440]	; (800354c <xTaskIncrementTick+0x218>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	3301      	adds	r3, #1
 8003396:	4a6d      	ldr	r2, [pc, #436]	; (800354c <xTaskIncrementTick+0x218>)
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	f000 fbb1 	bl	8003b00 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800339e:	4b6c      	ldr	r3, [pc, #432]	; (8003550 <xTaskIncrementTick+0x21c>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	f0c0 80aa 	bcc.w	80034fe <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033aa:	4b66      	ldr	r3, [pc, #408]	; (8003544 <xTaskIncrementTick+0x210>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d104      	bne.n	80033be <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033b4:	4b66      	ldr	r3, [pc, #408]	; (8003550 <xTaskIncrementTick+0x21c>)
 80033b6:	f04f 32ff 	mov.w	r2, #4294967295
 80033ba:	601a      	str	r2, [r3, #0]
                    break;
 80033bc:	e09f      	b.n	80034fe <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033be:	4b61      	ldr	r3, [pc, #388]	; (8003544 <xTaskIncrementTick+0x210>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80033ce:	6a3a      	ldr	r2, [r7, #32]
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d203      	bcs.n	80033de <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80033d6:	4a5e      	ldr	r2, [pc, #376]	; (8003550 <xTaskIncrementTick+0x21c>)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80033dc:	e08f      	b.n	80034fe <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	695b      	ldr	r3, [r3, #20]
 80033e2:	613b      	str	r3, [r7, #16]
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	68d2      	ldr	r2, [r2, #12]
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	68db      	ldr	r3, [r3, #12]
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	6892      	ldr	r2, [r2, #8]
 80033f6:	605a      	str	r2, [r3, #4]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	3304      	adds	r3, #4
 8003400:	429a      	cmp	r2, r3
 8003402:	d103      	bne.n	800340c <xTaskIncrementTick+0xd8>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2200      	movs	r2, #0
 8003410:	615a      	str	r2, [r3, #20]
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01e      	beq.n	8003462 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	60fb      	str	r3, [r7, #12]
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	69db      	ldr	r3, [r3, #28]
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	6a12      	ldr	r2, [r2, #32]
 8003432:	609a      	str	r2, [r3, #8]
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	6a1b      	ldr	r3, [r3, #32]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	69d2      	ldr	r2, [r2, #28]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685a      	ldr	r2, [r3, #4]
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	3318      	adds	r3, #24
 8003446:	429a      	cmp	r2, r3
 8003448:	d103      	bne.n	8003452 <xTaskIncrementTick+0x11e>
 800344a:	69bb      	ldr	r3, [r7, #24]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	605a      	str	r2, [r3, #4]
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	2200      	movs	r2, #0
 8003456:	629a      	str	r2, [r3, #40]	; 0x28
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	1e5a      	subs	r2, r3, #1
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003462:	69bb      	ldr	r3, [r7, #24]
 8003464:	4618      	mov	r0, r3
 8003466:	f003 ff83 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartReady>
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346e:	2201      	movs	r2, #1
 8003470:	409a      	lsls	r2, r3
 8003472:	4b38      	ldr	r3, [pc, #224]	; (8003554 <xTaskIncrementTick+0x220>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4313      	orrs	r3, r2
 8003478:	4a36      	ldr	r2, [pc, #216]	; (8003554 <xTaskIncrementTick+0x220>)
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003480:	4935      	ldr	r1, [pc, #212]	; (8003558 <xTaskIncrementTick+0x224>)
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	440b      	add	r3, r1
 800348c:	3304      	adds	r3, #4
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	60da      	str	r2, [r3, #12]
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	69ba      	ldr	r2, [r7, #24]
 80034a6:	3204      	adds	r2, #4
 80034a8:	605a      	str	r2, [r3, #4]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	1d1a      	adds	r2, r3, #4
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	609a      	str	r2, [r3, #8]
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034b6:	4613      	mov	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	4a26      	ldr	r2, [pc, #152]	; (8003558 <xTaskIncrementTick+0x224>)
 80034c0:	441a      	add	r2, r3
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	615a      	str	r2, [r3, #20]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ca:	4923      	ldr	r1, [pc, #140]	; (8003558 <xTaskIncrementTick+0x224>)
 80034cc:	4613      	mov	r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	4413      	add	r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	1c59      	adds	r1, r3, #1
 80034da:	481f      	ldr	r0, [pc, #124]	; (8003558 <xTaskIncrementTick+0x224>)
 80034dc:	4613      	mov	r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	4413      	add	r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4403      	add	r3, r0
 80034e6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80034e8:	69bb      	ldr	r3, [r7, #24]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <xTaskIncrementTick+0x228>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f2:	429a      	cmp	r2, r3
 80034f4:	f67f af59 	bls.w	80033aa <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80034f8:	2301      	movs	r3, #1
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034fc:	e755      	b.n	80033aa <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80034fe:	4b17      	ldr	r3, [pc, #92]	; (800355c <xTaskIncrementTick+0x228>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003504:	4914      	ldr	r1, [pc, #80]	; (8003558 <xTaskIncrementTick+0x224>)
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	440b      	add	r3, r1
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d901      	bls.n	800351a <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8003516:	2301      	movs	r3, #1
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800351a:	4b11      	ldr	r3, [pc, #68]	; (8003560 <xTaskIncrementTick+0x22c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d007      	beq.n	8003532 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003522:	2301      	movs	r3, #1
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e004      	b.n	8003532 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <xTaskIncrementTick+0x230>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	3301      	adds	r3, #1
 800352e:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <xTaskIncrementTick+0x230>)
 8003530:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003534:	4618      	mov	r0, r3
 8003536:	3728      	adds	r7, #40	; 0x28
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	2000024c 	.word	0x2000024c
 8003540:	20000228 	.word	0x20000228
 8003544:	200001dc 	.word	0x200001dc
 8003548:	200001e0 	.word	0x200001e0
 800354c:	2000023c 	.word	0x2000023c
 8003550:	20000244 	.word	0x20000244
 8003554:	2000022c 	.word	0x2000022c
 8003558:	2000013c 	.word	0x2000013c
 800355c:	20000138 	.word	0x20000138
 8003560:	20000238 	.word	0x20000238
 8003564:	20000234 	.word	0x20000234

08003568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800356e:	4b2d      	ldr	r3, [pc, #180]	; (8003624 <vTaskSwitchContext+0xbc>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d003      	beq.n	800357e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003576:	4b2c      	ldr	r3, [pc, #176]	; (8003628 <vTaskSwitchContext+0xc0>)
 8003578:	2201      	movs	r2, #1
 800357a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800357c:	e04d      	b.n	800361a <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800357e:	4b2a      	ldr	r3, [pc, #168]	; (8003628 <vTaskSwitchContext+0xc0>)
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003584:	4b29      	ldr	r3, [pc, #164]	; (800362c <vTaskSwitchContext+0xc4>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	fab3 f383 	clz	r3, r3
 8003590:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003592:	7afb      	ldrb	r3, [r7, #11]
 8003594:	f1c3 031f 	rsb	r3, r3, #31
 8003598:	617b      	str	r3, [r7, #20]
 800359a:	4925      	ldr	r1, [pc, #148]	; (8003630 <vTaskSwitchContext+0xc8>)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10a      	bne.n	80035c4 <vTaskSwitchContext+0x5c>
        __asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	607b      	str	r3, [r7, #4]
    }
 80035c0:	bf00      	nop
 80035c2:	e7fe      	b.n	80035c2 <vTaskSwitchContext+0x5a>
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	4a18      	ldr	r2, [pc, #96]	; (8003630 <vTaskSwitchContext+0xc8>)
 80035d0:	4413      	add	r3, r2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	605a      	str	r2, [r3, #4]
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3308      	adds	r3, #8
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d104      	bne.n	80035f4 <vTaskSwitchContext+0x8c>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	685a      	ldr	r2, [r3, #4]
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	605a      	str	r2, [r3, #4]
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a0e      	ldr	r2, [pc, #56]	; (8003634 <vTaskSwitchContext+0xcc>)
 80035fc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80035fe:	4b0d      	ldr	r3, [pc, #52]	; (8003634 <vTaskSwitchContext+0xcc>)
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	4b0d      	ldr	r3, [pc, #52]	; (8003638 <vTaskSwitchContext+0xd0>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	429a      	cmp	r2, r3
 8003608:	d102      	bne.n	8003610 <vTaskSwitchContext+0xa8>
 800360a:	f003 fe11 	bl	8007230 <SEGGER_SYSVIEW_OnIdle>
}
 800360e:	e004      	b.n	800361a <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003610:	4b08      	ldr	r3, [pc, #32]	; (8003634 <vTaskSwitchContext+0xcc>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f003 fe69 	bl	80072ec <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800361a:	bf00      	nop
 800361c:	3718      	adds	r7, #24
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	2000024c 	.word	0x2000024c
 8003628:	20000238 	.word	0x20000238
 800362c:	2000022c 	.word	0x2000022c
 8003630:	2000013c 	.word	0x2000013c
 8003634:	20000138 	.word	0x20000138
 8003638:	20000248 	.word	0x20000248

0800363c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10a      	bne.n	8003662 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	60fb      	str	r3, [r7, #12]
    }
 800365e:	bf00      	nop
 8003660:	e7fe      	b.n	8003660 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003662:	4b07      	ldr	r3, [pc, #28]	; (8003680 <vTaskPlaceOnEventList+0x44>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3318      	adds	r3, #24
 8003668:	4619      	mov	r1, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7fe fecf 	bl	800240e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003670:	2101      	movs	r1, #1
 8003672:	6838      	ldr	r0, [r7, #0]
 8003674:	f000 fc3a 	bl	8003eec <prvAddCurrentTaskToDelayedList>
}
 8003678:	bf00      	nop
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000138 	.word	0x20000138

08003684 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003684:	b580      	push	{r7, lr}
 8003686:	b086      	sub	sp, #24
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10a      	bne.n	80036ac <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800369a:	f383 8811 	msr	BASEPRI, r3
 800369e:	f3bf 8f6f 	isb	sy
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	613b      	str	r3, [r7, #16]
    }
 80036a8:	bf00      	nop
 80036aa:	e7fe      	b.n	80036aa <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	617b      	str	r3, [r7, #20]
 80036b2:	4b17      	ldr	r3, [pc, #92]	; (8003710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	61da      	str	r2, [r3, #28]
 80036ba:	4b15      	ldr	r3, [pc, #84]	; (8003710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	6892      	ldr	r2, [r2, #8]
 80036c2:	621a      	str	r2, [r3, #32]
 80036c4:	4b12      	ldr	r3, [pc, #72]	; (8003710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	3218      	adds	r2, #24
 80036ce:	605a      	str	r2, [r3, #4]
 80036d0:	4b0f      	ldr	r3, [pc, #60]	; (8003710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f103 0218 	add.w	r2, r3, #24
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	4b0c      	ldr	r3, [pc, #48]	; (8003710 <vTaskPlaceOnEventListRestricted+0x8c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	629a      	str	r2, [r3, #40]	; 0x28
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	1c5a      	adds	r2, r3, #1
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80036f4:	f04f 33ff 	mov.w	r3, #4294967295
 80036f8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80036fa:	2024      	movs	r0, #36	; 0x24
 80036fc:	f003 f89a 	bl	8006834 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003700:	6879      	ldr	r1, [r7, #4]
 8003702:	68b8      	ldr	r0, [r7, #8]
 8003704:	f000 fbf2 	bl	8003eec <prvAddCurrentTaskToDelayedList>
    }
 8003708:	bf00      	nop
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	20000138 	.word	0x20000138

08003714 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b08a      	sub	sp, #40	; 0x28
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	60fb      	str	r3, [r7, #12]
    }
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	61fb      	str	r3, [r7, #28]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	6a3a      	ldr	r2, [r7, #32]
 800374c:	6a12      	ldr	r2, [r2, #32]
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	6a3a      	ldr	r2, [r7, #32]
 8003756:	69d2      	ldr	r2, [r2, #28]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	3318      	adds	r3, #24
 8003762:	429a      	cmp	r2, r3
 8003764:	d103      	bne.n	800376e <xTaskRemoveFromEventList+0x5a>
 8003766:	6a3b      	ldr	r3, [r7, #32]
 8003768:	6a1a      	ldr	r2, [r3, #32]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	605a      	str	r2, [r3, #4]
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	2200      	movs	r2, #0
 8003772:	629a      	str	r2, [r3, #40]	; 0x28
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	1e5a      	subs	r2, r3, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b4b      	ldr	r3, [pc, #300]	; (80038ac <xTaskRemoveFromEventList+0x198>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d162      	bne.n	800384c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003786:	6a3b      	ldr	r3, [r7, #32]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	617b      	str	r3, [r7, #20]
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	6a3a      	ldr	r2, [r7, #32]
 8003792:	68d2      	ldr	r2, [r2, #12]
 8003794:	609a      	str	r2, [r3, #8]
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	6a3a      	ldr	r2, [r7, #32]
 800379c:	6892      	ldr	r2, [r2, #8]
 800379e:	605a      	str	r2, [r3, #4]
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	3304      	adds	r3, #4
 80037a8:	429a      	cmp	r2, r3
 80037aa:	d103      	bne.n	80037b4 <xTaskRemoveFromEventList+0xa0>
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	68da      	ldr	r2, [r3, #12]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	605a      	str	r2, [r3, #4]
 80037b4:	6a3b      	ldr	r3, [r7, #32]
 80037b6:	2200      	movs	r2, #0
 80037b8:	615a      	str	r2, [r3, #20]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	1e5a      	subs	r2, r3, #1
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	4618      	mov	r0, r3
 80037c8:	f003 fdd2 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartReady>
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	2201      	movs	r2, #1
 80037d2:	409a      	lsls	r2, r3
 80037d4:	4b36      	ldr	r3, [pc, #216]	; (80038b0 <xTaskRemoveFromEventList+0x19c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4313      	orrs	r3, r2
 80037da:	4a35      	ldr	r2, [pc, #212]	; (80038b0 <xTaskRemoveFromEventList+0x19c>)
 80037dc:	6013      	str	r3, [r2, #0]
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e2:	4934      	ldr	r1, [pc, #208]	; (80038b4 <xTaskRemoveFromEventList+0x1a0>)
 80037e4:	4613      	mov	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4413      	add	r3, r2
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	3304      	adds	r3, #4
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	613b      	str	r3, [r7, #16]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	689a      	ldr	r2, [r3, #8]
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	6a3a      	ldr	r2, [r7, #32]
 8003808:	3204      	adds	r2, #4
 800380a:	605a      	str	r2, [r3, #4]
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	1d1a      	adds	r2, r3, #4
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	609a      	str	r2, [r3, #8]
 8003814:	6a3b      	ldr	r3, [r7, #32]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	4613      	mov	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	4413      	add	r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4a24      	ldr	r2, [pc, #144]	; (80038b4 <xTaskRemoveFromEventList+0x1a0>)
 8003822:	441a      	add	r2, r3
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	615a      	str	r2, [r3, #20]
 8003828:	6a3b      	ldr	r3, [r7, #32]
 800382a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800382c:	4921      	ldr	r1, [pc, #132]	; (80038b4 <xTaskRemoveFromEventList+0x1a0>)
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	1c59      	adds	r1, r3, #1
 800383c:	481d      	ldr	r0, [pc, #116]	; (80038b4 <xTaskRemoveFromEventList+0x1a0>)
 800383e:	4613      	mov	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	4413      	add	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4403      	add	r3, r0
 8003848:	6019      	str	r1, [r3, #0]
 800384a:	e01b      	b.n	8003884 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800384c:	4b1a      	ldr	r3, [pc, #104]	; (80038b8 <xTaskRemoveFromEventList+0x1a4>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	61bb      	str	r3, [r7, #24]
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	61da      	str	r2, [r3, #28]
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	621a      	str	r2, [r3, #32]
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	6a3a      	ldr	r2, [r7, #32]
 8003866:	3218      	adds	r2, #24
 8003868:	605a      	str	r2, [r3, #4]
 800386a:	6a3b      	ldr	r3, [r7, #32]
 800386c:	f103 0218 	add.w	r2, r3, #24
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	609a      	str	r2, [r3, #8]
 8003874:	6a3b      	ldr	r3, [r7, #32]
 8003876:	4a10      	ldr	r2, [pc, #64]	; (80038b8 <xTaskRemoveFromEventList+0x1a4>)
 8003878:	629a      	str	r2, [r3, #40]	; 0x28
 800387a:	4b0f      	ldr	r3, [pc, #60]	; (80038b8 <xTaskRemoveFromEventList+0x1a4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3301      	adds	r3, #1
 8003880:	4a0d      	ldr	r2, [pc, #52]	; (80038b8 <xTaskRemoveFromEventList+0x1a4>)
 8003882:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003884:	6a3b      	ldr	r3, [r7, #32]
 8003886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <xTaskRemoveFromEventList+0x1a8>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800388e:	429a      	cmp	r2, r3
 8003890:	d905      	bls.n	800389e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003892:	2301      	movs	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003896:	4b0a      	ldr	r3, [pc, #40]	; (80038c0 <xTaskRemoveFromEventList+0x1ac>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	e001      	b.n	80038a2 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800389e:	2300      	movs	r3, #0
 80038a0:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3728      	adds	r7, #40	; 0x28
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	2000024c 	.word	0x2000024c
 80038b0:	2000022c 	.word	0x2000022c
 80038b4:	2000013c 	.word	0x2000013c
 80038b8:	200001e4 	.word	0x200001e4
 80038bc:	20000138 	.word	0x20000138
 80038c0:	20000238 	.word	0x20000238

080038c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80038cc:	4b06      	ldr	r3, [pc, #24]	; (80038e8 <vTaskInternalSetTimeOutState+0x24>)
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <vTaskInternalSetTimeOutState+0x28>)
 80038d6:	681a      	ldr	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	605a      	str	r2, [r3, #4]
}
 80038dc:	bf00      	nop
 80038de:	370c      	adds	r7, #12
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr
 80038e8:	2000023c 	.word	0x2000023c
 80038ec:	20000228 	.word	0x20000228

080038f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b088      	sub	sp, #32
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d10a      	bne.n	8003916 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003904:	f383 8811 	msr	BASEPRI, r3
 8003908:	f3bf 8f6f 	isb	sy
 800390c:	f3bf 8f4f 	dsb	sy
 8003910:	613b      	str	r3, [r7, #16]
    }
 8003912:	bf00      	nop
 8003914:	e7fe      	b.n	8003914 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d10a      	bne.n	8003932 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	60fb      	str	r3, [r7, #12]
    }
 800392e:	bf00      	nop
 8003930:	e7fe      	b.n	8003930 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003932:	f000 ff8f 	bl	8004854 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003936:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <xTaskCheckForTimeOut+0xc4>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394e:	d102      	bne.n	8003956 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
 8003954:	e026      	b.n	80039a4 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <xTaskCheckForTimeOut+0xc8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d00a      	beq.n	8003978 <xTaskCheckForTimeOut+0x88>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	429a      	cmp	r2, r3
 800396a:	d305      	bcc.n	8003978 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800396c:	2301      	movs	r3, #1
 800396e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2200      	movs	r2, #0
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e015      	b.n	80039a4 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	697a      	ldr	r2, [r7, #20]
 800397e:	429a      	cmp	r2, r3
 8003980:	d20b      	bcs.n	800399a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	1ad2      	subs	r2, r2, r3
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ff98 	bl	80038c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003994:	2300      	movs	r3, #0
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	e004      	b.n	80039a4 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80039a4:	f000 ff86 	bl	80048b4 <vPortExitCritical>

    return xReturn;
 80039a8:	69fb      	ldr	r3, [r7, #28]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000228 	.word	0x20000228
 80039b8:	2000023c 	.word	0x2000023c

080039bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <vTaskMissedYield+0x14>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	601a      	str	r2, [r3, #0]
}
 80039c6:	bf00      	nop
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr
 80039d0:	20000238 	.word	0x20000238

080039d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b082      	sub	sp, #8
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80039dc:	f000 f852 	bl	8003a84 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80039e0:	4b06      	ldr	r3, [pc, #24]	; (80039fc <prvIdleTask+0x28>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d9f9      	bls.n	80039dc <prvIdleTask+0x8>
            {
                taskYIELD();
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <prvIdleTask+0x2c>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80039f8:	e7f0      	b.n	80039dc <prvIdleTask+0x8>
 80039fa:	bf00      	nop
 80039fc:	2000013c 	.word	0x2000013c
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	607b      	str	r3, [r7, #4]
 8003a0e:	e00c      	b.n	8003a2a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	4613      	mov	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4413      	add	r3, r2
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	4a12      	ldr	r2, [pc, #72]	; (8003a64 <prvInitialiseTaskLists+0x60>)
 8003a1c:	4413      	add	r3, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f7fe fca4 	bl	800236c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	3301      	adds	r3, #1
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b05      	cmp	r3, #5
 8003a2e:	d9ef      	bls.n	8003a10 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003a30:	480d      	ldr	r0, [pc, #52]	; (8003a68 <prvInitialiseTaskLists+0x64>)
 8003a32:	f7fe fc9b 	bl	800236c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003a36:	480d      	ldr	r0, [pc, #52]	; (8003a6c <prvInitialiseTaskLists+0x68>)
 8003a38:	f7fe fc98 	bl	800236c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003a3c:	480c      	ldr	r0, [pc, #48]	; (8003a70 <prvInitialiseTaskLists+0x6c>)
 8003a3e:	f7fe fc95 	bl	800236c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003a42:	480c      	ldr	r0, [pc, #48]	; (8003a74 <prvInitialiseTaskLists+0x70>)
 8003a44:	f7fe fc92 	bl	800236c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003a48:	480b      	ldr	r0, [pc, #44]	; (8003a78 <prvInitialiseTaskLists+0x74>)
 8003a4a:	f7fe fc8f 	bl	800236c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003a4e:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <prvInitialiseTaskLists+0x78>)
 8003a50:	4a05      	ldr	r2, [pc, #20]	; (8003a68 <prvInitialiseTaskLists+0x64>)
 8003a52:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003a54:	4b0a      	ldr	r3, [pc, #40]	; (8003a80 <prvInitialiseTaskLists+0x7c>)
 8003a56:	4a05      	ldr	r2, [pc, #20]	; (8003a6c <prvInitialiseTaskLists+0x68>)
 8003a58:	601a      	str	r2, [r3, #0]
}
 8003a5a:	bf00      	nop
 8003a5c:	3708      	adds	r7, #8
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	2000013c 	.word	0x2000013c
 8003a68:	200001b4 	.word	0x200001b4
 8003a6c:	200001c8 	.word	0x200001c8
 8003a70:	200001e4 	.word	0x200001e4
 8003a74:	200001f8 	.word	0x200001f8
 8003a78:	20000210 	.word	0x20000210
 8003a7c:	200001dc 	.word	0x200001dc
 8003a80:	200001e0 	.word	0x200001e0

08003a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b082      	sub	sp, #8
 8003a88:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a8a:	e019      	b.n	8003ac0 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003a8c:	f000 fee2 	bl	8004854 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a90:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <prvCheckTasksWaitingTermination+0x50>)
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	3304      	adds	r3, #4
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7fe fcef 	bl	8002480 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003aa2:	4b0d      	ldr	r3, [pc, #52]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3b01      	subs	r3, #1
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <prvCheckTasksWaitingTermination+0x54>)
 8003aaa:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003aac:	4b0b      	ldr	r3, [pc, #44]	; (8003adc <prvCheckTasksWaitingTermination+0x58>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	4a0a      	ldr	r2, [pc, #40]	; (8003adc <prvCheckTasksWaitingTermination+0x58>)
 8003ab4:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003ab6:	f000 fefd 	bl	80048b4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 f810 	bl	8003ae0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <prvCheckTasksWaitingTermination+0x58>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1e1      	bne.n	8003a8c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ac8:	bf00      	nop
 8003aca:	bf00      	nop
 8003acc:	3708      	adds	r7, #8
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200001f8 	.word	0x200001f8
 8003ad8:	20000224 	.word	0x20000224
 8003adc:	2000020c 	.word	0x2000020c

08003ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	4618      	mov	r0, r3
 8003aee:	f001 f897 	bl	8004c20 <vPortFree>
            vPortFree( pxTCB );
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	f001 f894 	bl	8004c20 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003b00:	b480      	push	{r7}
 8003b02:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b04:	4b0a      	ldr	r3, [pc, #40]	; (8003b30 <prvResetNextTaskUnblockTime+0x30>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d104      	bne.n	8003b18 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003b0e:	4b09      	ldr	r3, [pc, #36]	; (8003b34 <prvResetNextTaskUnblockTime+0x34>)
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295
 8003b14:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003b16:	e005      	b.n	8003b24 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b18:	4b05      	ldr	r3, [pc, #20]	; (8003b30 <prvResetNextTaskUnblockTime+0x30>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a04      	ldr	r2, [pc, #16]	; (8003b34 <prvResetNextTaskUnblockTime+0x34>)
 8003b22:	6013      	str	r3, [r2, #0]
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	200001dc 	.word	0x200001dc
 8003b34:	20000244 	.word	0x20000244

08003b38 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <xTaskGetSchedulerState+0x34>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d102      	bne.n	8003b4c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003b46:	2301      	movs	r3, #1
 8003b48:	607b      	str	r3, [r7, #4]
 8003b4a:	e008      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <xTaskGetSchedulerState+0x38>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d102      	bne.n	8003b5a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003b54:	2302      	movs	r3, #2
 8003b56:	607b      	str	r3, [r7, #4]
 8003b58:	e001      	b.n	8003b5e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003b5e:	687b      	ldr	r3, [r7, #4]
    }
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	20000230 	.word	0x20000230
 8003b70:	2000024c 	.word	0x2000024c

08003b74 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af02      	add	r7, sp, #8
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
 8003b80:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00a      	beq.n	8003b9e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b8c:	f383 8811 	msr	BASEPRI, r3
 8003b90:	f3bf 8f6f 	isb	sy
 8003b94:	f3bf 8f4f 	dsb	sy
 8003b98:	613b      	str	r3, [r7, #16]
    }
 8003b9a:	bf00      	nop
 8003b9c:	e7fe      	b.n	8003b9c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003b9e:	f000 fe59 	bl	8004854 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003ba2:	4b36      	ldr	r3, [pc, #216]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3354      	adds	r3, #84	; 0x54
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d022      	beq.n	8003bfa <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003bb4:	4b31      	ldr	r3, [pc, #196]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68fa      	ldr	r2, [r7, #12]
 8003bba:	3214      	adds	r2, #20
 8003bbc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003bc0:	68ba      	ldr	r2, [r7, #8]
 8003bc2:	43d2      	mvns	r2, r2
 8003bc4:	4011      	ands	r1, r2
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	3214      	adds	r2, #20
 8003bca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3354      	adds	r3, #84	; 0x54
 8003bd8:	2201      	movs	r2, #1
 8003bda:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003bdc:	6a3b      	ldr	r3, [r7, #32]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00b      	beq.n	8003bfa <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003be2:	2101      	movs	r1, #1
 8003be4:	6a38      	ldr	r0, [r7, #32]
 8003be6:	f000 f981 	bl	8003eec <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003bea:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <xTaskGenericNotifyWait+0x10c>)
 8003bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003bfa:	f000 fe5b 	bl	80048b4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003bfe:	f000 fe29 	bl	8004854 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	6a3b      	ldr	r3, [r7, #32]
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	68b9      	ldr	r1, [r7, #8]
 8003c0e:	2040      	movs	r0, #64	; 0x40
 8003c10:	f002 ff3a 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d007      	beq.n	8003c2a <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003c1a:	4b18      	ldr	r3, [pc, #96]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	3214      	adds	r2, #20
 8003c22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003c2a:	4b14      	ldr	r3, [pc, #80]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	4413      	add	r3, r2
 8003c32:	3354      	adds	r3, #84	; 0x54
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d002      	beq.n	8003c42 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e00e      	b.n	8003c60 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003c42:	4b0e      	ldr	r3, [pc, #56]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68fa      	ldr	r2, [r7, #12]
 8003c48:	3214      	adds	r2, #20
 8003c4a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	43d2      	mvns	r2, r2
 8003c52:	4011      	ands	r1, r2
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	3214      	adds	r2, #20
 8003c58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003c60:	4b06      	ldr	r3, [pc, #24]	; (8003c7c <xTaskGenericNotifyWait+0x108>)
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	3354      	adds	r3, #84	; 0x54
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003c6e:	f000 fe21 	bl	80048b4 <vPortExitCritical>

        return xReturn;
 8003c72:	697b      	ldr	r3, [r7, #20]
    }
 8003c74:	4618      	mov	r0, r3
 8003c76:	3718      	adds	r7, #24
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	20000138 	.word	0x20000138
 8003c80:	e000ed04 	.word	0xe000ed04

08003c84 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b090      	sub	sp, #64	; 0x40
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003c92:	2301      	movs	r3, #1
 8003c94:	637b      	str	r3, [r7, #52]	; 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d00a      	beq.n	8003cb2 <xTaskGenericNotify+0x2e>
        __asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	623b      	str	r3, [r7, #32]
    }
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xTaskGenericNotify+0x4a>
        __asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	61fb      	str	r3, [r7, #28]
    }
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xTaskGenericNotify+0x48>
        pxTCB = xTaskToNotify;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	633b      	str	r3, [r7, #48]	; 0x30

        taskENTER_CRITICAL();
 8003cd2:	f000 fdbf 	bl	8004854 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d006      	beq.n	8003cea <xTaskGenericNotify+0x66>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	3214      	adds	r2, #20
 8003ce2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce8:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003cea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	4413      	add	r3, r2
 8003cf0:	3354      	adds	r3, #84	; 0x54
 8003cf2:	781b      	ldrb	r3, [r3, #0]
 8003cf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	3354      	adds	r3, #84	; 0x54
 8003d00:	2202      	movs	r2, #2
 8003d02:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d83b      	bhi.n	8003d82 <xTaskGenericNotify+0xfe>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <xTaskGenericNotify+0x8c>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003da1 	.word	0x08003da1
 8003d14:	08003d25 	.word	0x08003d25
 8003d18:	08003d41 	.word	0x08003d41
 8003d1c:	08003d59 	.word	0x08003d59
 8003d20:	08003d67 	.word	0x08003d67
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	3214      	adds	r2, #20
 8003d2a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	ea42 0103 	orr.w	r1, r2, r3
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	68ba      	ldr	r2, [r7, #8]
 8003d38:	3214      	adds	r2, #20
 8003d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d3e:	e032      	b.n	8003da6 <xTaskGenericNotify+0x122>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	3214      	adds	r2, #20
 8003d46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d4a:	1c59      	adds	r1, r3, #1
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	3214      	adds	r2, #20
 8003d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d56:	e026      	b.n	8003da6 <xTaskGenericNotify+0x122>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5a:	68ba      	ldr	r2, [r7, #8]
 8003d5c:	3214      	adds	r2, #20
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003d64:	e01f      	b.n	8003da6 <xTaskGenericNotify+0x122>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003d66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d006      	beq.n	8003d7c <xTaskGenericNotify+0xf8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	3214      	adds	r2, #20
 8003d74:	6879      	ldr	r1, [r7, #4]
 8003d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003d7a:	e014      	b.n	8003da6 <xTaskGenericNotify+0x122>
                        xReturn = pdFAIL;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
                    break;
 8003d80:	e011      	b.n	8003da6 <xTaskGenericNotify+0x122>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003d82:	4b55      	ldr	r3, [pc, #340]	; (8003ed8 <xTaskGenericNotify+0x254>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00c      	beq.n	8003da4 <xTaskGenericNotify+0x120>
        __asm volatile
 8003d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d8e:	f383 8811 	msr	BASEPRI, r3
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	f3bf 8f4f 	dsb	sy
 8003d9a:	61bb      	str	r3, [r7, #24]
    }
 8003d9c:	bf00      	nop
 8003d9e:	e7fe      	b.n	8003d9e <xTaskGenericNotify+0x11a>
                    break;
 8003da0:	bf00      	nop
 8003da2:	e000      	b.n	8003da6 <xTaskGenericNotify+0x122>

                    break;
 8003da4:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003da8:	4618      	mov	r0, r3
 8003daa:	f003 fb23 	bl	80073f4 <SEGGER_SYSVIEW_ShrinkId>
 8003dae:	4601      	mov	r1, r0
 8003db0:	78fa      	ldrb	r2, [r7, #3]
 8003db2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	4613      	mov	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	203e      	movs	r0, #62	; 0x3e
 8003dbc:	f002 fe64 	bl	8006a88 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003dc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d17f      	bne.n	8003ec8 <xTaskGenericNotify+0x244>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dd4:	68d2      	ldr	r2, [r2, #12]
 8003dd6:	609a      	str	r2, [r3, #8]
 8003dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003dde:	6892      	ldr	r2, [r2, #8]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de8:	3304      	adds	r3, #4
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d103      	bne.n	8003df6 <xTaskGenericNotify+0x172>
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	68da      	ldr	r2, [r3, #12]
 8003df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003df4:	605a      	str	r2, [r3, #4]
 8003df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
 8003dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	1e5a      	subs	r2, r3, #1
 8003e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e04:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	4618      	mov	r0, r3
 8003e0a:	f003 fab1 	bl	8007370 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	2201      	movs	r2, #1
 8003e14:	409a      	lsls	r2, r3
 8003e16:	4b31      	ldr	r3, [pc, #196]	; (8003edc <xTaskGenericNotify+0x258>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	4a2f      	ldr	r2, [pc, #188]	; (8003edc <xTaskGenericNotify+0x258>)
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e24:	492e      	ldr	r1, [pc, #184]	; (8003ee0 <xTaskGenericNotify+0x25c>)
 8003e26:	4613      	mov	r3, r2
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	4413      	add	r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	3304      	adds	r3, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	627b      	str	r3, [r7, #36]	; 0x24
 8003e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3a:	609a      	str	r2, [r3, #8]
 8003e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e42:	60da      	str	r2, [r3, #12]
 8003e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4a:	3204      	adds	r2, #4
 8003e4c:	605a      	str	r2, [r3, #4]
 8003e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e50:	1d1a      	adds	r2, r3, #4
 8003e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e54:	609a      	str	r2, [r3, #8]
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	4a1f      	ldr	r2, [pc, #124]	; (8003ee0 <xTaskGenericNotify+0x25c>)
 8003e64:	441a      	add	r2, r3
 8003e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e68:	615a      	str	r2, [r3, #20]
 8003e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e6e:	491c      	ldr	r1, [pc, #112]	; (8003ee0 <xTaskGenericNotify+0x25c>)
 8003e70:	4613      	mov	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	1c59      	adds	r1, r3, #1
 8003e7e:	4818      	ldr	r0, [pc, #96]	; (8003ee0 <xTaskGenericNotify+0x25c>)
 8003e80:	4613      	mov	r3, r2
 8003e82:	009b      	lsls	r3, r3, #2
 8003e84:	4413      	add	r3, r2
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4403      	add	r3, r0
 8003e8a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <xTaskGenericNotify+0x226>
        __asm volatile
 8003e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e98:	f383 8811 	msr	BASEPRI, r3
 8003e9c:	f3bf 8f6f 	isb	sy
 8003ea0:	f3bf 8f4f 	dsb	sy
 8003ea4:	617b      	str	r3, [r7, #20]
    }
 8003ea6:	bf00      	nop
 8003ea8:	e7fe      	b.n	8003ea8 <xTaskGenericNotify+0x224>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eae:	4b0d      	ldr	r3, [pc, #52]	; (8003ee4 <xTaskGenericNotify+0x260>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d907      	bls.n	8003ec8 <xTaskGenericNotify+0x244>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003eb8:	4b0b      	ldr	r3, [pc, #44]	; (8003ee8 <xTaskGenericNotify+0x264>)
 8003eba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ebe:	601a      	str	r2, [r3, #0]
 8003ec0:	f3bf 8f4f 	dsb	sy
 8003ec4:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003ec8:	f000 fcf4 	bl	80048b4 <vPortExitCritical>

        return xReturn;
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3738      	adds	r7, #56	; 0x38
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000228 	.word	0x20000228
 8003edc:	2000022c 	.word	0x2000022c
 8003ee0:	2000013c 	.word	0x2000013c
 8003ee4:	20000138 	.word	0x20000138
 8003ee8:	e000ed04 	.word	0xe000ed04

08003eec <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ef6:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003efc:	4b35      	ldr	r3, [pc, #212]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	3304      	adds	r3, #4
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fabc 	bl	8002480 <uxListRemove>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10b      	bne.n	8003f26 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f0e:	4b31      	ldr	r3, [pc, #196]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	2201      	movs	r2, #1
 8003f16:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1a:	43da      	mvns	r2, r3
 8003f1c:	4b2e      	ldr	r3, [pc, #184]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4013      	ands	r3, r2
 8003f22:	4a2d      	ldr	r2, [pc, #180]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003f24:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2c:	d124      	bne.n	8003f78 <prvAddCurrentTaskToDelayedList+0x8c>
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d021      	beq.n	8003f78 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f34:	4b29      	ldr	r3, [pc, #164]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	613b      	str	r3, [r7, #16]
 8003f3a:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	609a      	str	r2, [r3, #8]
 8003f42:	4b24      	ldr	r3, [pc, #144]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	693a      	ldr	r2, [r7, #16]
 8003f48:	6892      	ldr	r2, [r2, #8]
 8003f4a:	60da      	str	r2, [r3, #12]
 8003f4c:	4b21      	ldr	r3, [pc, #132]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	3204      	adds	r2, #4
 8003f56:	605a      	str	r2, [r3, #4]
 8003f58:	4b1e      	ldr	r3, [pc, #120]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	609a      	str	r2, [r3, #8]
 8003f62:	4b1c      	ldr	r3, [pc, #112]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4a1d      	ldr	r2, [pc, #116]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f68:	615a      	str	r2, [r3, #20]
 8003f6a:	4b1c      	ldr	r3, [pc, #112]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	4a1a      	ldr	r2, [pc, #104]	; (8003fdc <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f72:	6013      	str	r3, [r2, #0]
 8003f74:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f76:	e026      	b.n	8003fc6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f78:	697a      	ldr	r2, [r7, #20]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f80:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68fa      	ldr	r2, [r7, #12]
 8003f86:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d209      	bcs.n	8003fa4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f90:	4b13      	ldr	r3, [pc, #76]	; (8003fe0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3304      	adds	r3, #4
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	4610      	mov	r0, r2
 8003f9e:	f7fe fa36 	bl	800240e <vListInsert>
}
 8003fa2:	e010      	b.n	8003fc6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fa4:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	4b0a      	ldr	r3, [pc, #40]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3304      	adds	r3, #4
 8003fae:	4619      	mov	r1, r3
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	f7fe fa2c 	bl	800240e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003fb6:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68fa      	ldr	r2, [r7, #12]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d202      	bcs.n	8003fc6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003fc0:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6013      	str	r3, [r2, #0]
}
 8003fc6:	bf00      	nop
 8003fc8:	3718      	adds	r7, #24
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	bf00      	nop
 8003fd0:	20000228 	.word	0x20000228
 8003fd4:	20000138 	.word	0x20000138
 8003fd8:	2000022c 	.word	0x2000022c
 8003fdc:	20000210 	.word	0x20000210
 8003fe0:	200001e0 	.word	0x200001e0
 8003fe4:	200001dc 	.word	0x200001dc
 8003fe8:	20000244 	.word	0x20000244

08003fec <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003ff6:	f000 fa47 	bl	8004488 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003ffa:	4b11      	ldr	r3, [pc, #68]	; (8004040 <xTimerCreateTimerTask+0x54>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00b      	beq.n	800401a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8004002:	4b10      	ldr	r3, [pc, #64]	; (8004044 <xTimerCreateTimerTask+0x58>)
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	2302      	movs	r3, #2
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	2300      	movs	r3, #0
 800400c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004010:	490d      	ldr	r1, [pc, #52]	; (8004048 <xTimerCreateTimerTask+0x5c>)
 8004012:	480e      	ldr	r0, [pc, #56]	; (800404c <xTimerCreateTimerTask+0x60>)
 8004014:	f7fe fd8e 	bl	8002b34 <xTaskCreate>
 8004018:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10a      	bne.n	8004036 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	603b      	str	r3, [r7, #0]
    }
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8004036:	687b      	ldr	r3, [r7, #4]
    }
 8004038:	4618      	mov	r0, r3
 800403a:	3708      	adds	r7, #8
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}
 8004040:	20000280 	.word	0x20000280
 8004044:	20000284 	.word	0x20000284
 8004048:	08008718 	.word	0x08008718
 800404c:	080040f5 	.word	0x080040f5

08004050 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800405c:	e008      	b.n	8004070 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	4413      	add	r3, r2
 8004066:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	699a      	ldr	r2, [r3, #24]
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	18d1      	adds	r1, r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f8dd 	bl	800423c <prvInsertTimerInActiveList>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d1ea      	bne.n	800405e <prvReloadTimer+0xe>
        }
    }
 8004088:	bf00      	nop
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}
	...

08004094 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004094:	b580      	push	{r7, lr}
 8004096:	b084      	sub	sp, #16
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409e:	4b14      	ldr	r3, [pc, #80]	; (80040f0 <prvProcessExpiredTimer+0x5c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	3304      	adds	r3, #4
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fe f9e7 	bl	8002480 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b8:	f003 0304 	and.w	r3, r3, #4
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d005      	beq.n	80040cc <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	6879      	ldr	r1, [r7, #4]
 80040c4:	68f8      	ldr	r0, [r7, #12]
 80040c6:	f7ff ffc3 	bl	8004050 <prvReloadTimer>
 80040ca:	e008      	b.n	80040de <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	b2da      	uxtb	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6a1b      	ldr	r3, [r3, #32]
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	4798      	blx	r3
    }
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000278 	.word	0x20000278

080040f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040fc:	f107 0308 	add.w	r3, r7, #8
 8004100:	4618      	mov	r0, r3
 8004102:	f000 f857 	bl	80041b4 <prvGetNextExpireTime>
 8004106:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4619      	mov	r1, r3
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f803 	bl	8004118 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004112:	f000 f8d5 	bl	80042c0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004116:	e7f1      	b.n	80040fc <prvTimerTask+0x8>

08004118 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004122:	f7fe ffd7 	bl	80030d4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	4618      	mov	r0, r3
 800412c:	f000 f866 	bl	80041fc <prvSampleTimeNow>
 8004130:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d130      	bne.n	800419a <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10a      	bne.n	8004154 <prvProcessTimerOrBlockTask+0x3c>
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	429a      	cmp	r2, r3
 8004144:	d806      	bhi.n	8004154 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8004146:	f7fe ffd3 	bl	80030f0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f7ff ffa1 	bl	8004094 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004152:	e024      	b.n	800419e <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d008      	beq.n	800416c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800415a:	4b13      	ldr	r3, [pc, #76]	; (80041a8 <prvProcessTimerOrBlockTask+0x90>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <prvProcessTimerOrBlockTask+0x50>
 8004164:	2301      	movs	r3, #1
 8004166:	e000      	b.n	800416a <prvProcessTimerOrBlockTask+0x52>
 8004168:	2300      	movs	r3, #0
 800416a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800416c:	4b0f      	ldr	r3, [pc, #60]	; (80041ac <prvProcessTimerOrBlockTask+0x94>)
 800416e:	6818      	ldr	r0, [r3, #0]
 8004170:	687a      	ldr	r2, [r7, #4]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	683a      	ldr	r2, [r7, #0]
 8004178:	4619      	mov	r1, r3
 800417a:	f7fe fca7 	bl	8002acc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800417e:	f7fe ffb7 	bl	80030f0 <xTaskResumeAll>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004188:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <prvProcessTimerOrBlockTask+0x98>)
 800418a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	f3bf 8f6f 	isb	sy
    }
 8004198:	e001      	b.n	800419e <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800419a:	f7fe ffa9 	bl	80030f0 <xTaskResumeAll>
    }
 800419e:	bf00      	nop
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	2000027c 	.word	0x2000027c
 80041ac:	20000280 	.word	0x20000280
 80041b0:	e000ed04 	.word	0xe000ed04

080041b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80041bc:	4b0e      	ldr	r3, [pc, #56]	; (80041f8 <prvGetNextExpireTime+0x44>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d101      	bne.n	80041ca <prvGetNextExpireTime+0x16>
 80041c6:	2201      	movs	r2, #1
 80041c8:	e000      	b.n	80041cc <prvGetNextExpireTime+0x18>
 80041ca:	2200      	movs	r2, #0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <prvGetNextExpireTime+0x44>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	e001      	b.n	80041e8 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80041e8:	68fb      	ldr	r3, [r7, #12]
    }
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	20000278 	.word	0x20000278

080041fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004204:	f7ff f874 	bl	80032f0 <xTaskGetTickCount>
 8004208:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800420a:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <prvSampleTimeNow+0x3c>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	68fa      	ldr	r2, [r7, #12]
 8004210:	429a      	cmp	r2, r3
 8004212:	d205      	bcs.n	8004220 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004214:	f000 f912 	bl	800443c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	e002      	b.n	8004226 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004226:	4a04      	ldr	r2, [pc, #16]	; (8004238 <prvSampleTimeNow+0x3c>)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800422c:	68fb      	ldr	r3, [r7, #12]
    }
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	20000288 	.word	0x20000288

0800423c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	429a      	cmp	r2, r3
 8004260:	d812      	bhi.n	8004288 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	1ad2      	subs	r2, r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	429a      	cmp	r2, r3
 800426e:	d302      	bcc.n	8004276 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004270:	2301      	movs	r3, #1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	e01b      	b.n	80042ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004276:	4b10      	ldr	r3, [pc, #64]	; (80042b8 <prvInsertTimerInActiveList+0x7c>)
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	3304      	adds	r3, #4
 800427e:	4619      	mov	r1, r3
 8004280:	4610      	mov	r0, r2
 8004282:	f7fe f8c4 	bl	800240e <vListInsert>
 8004286:	e012      	b.n	80042ae <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	429a      	cmp	r2, r3
 800428e:	d206      	bcs.n	800429e <prvInsertTimerInActiveList+0x62>
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	429a      	cmp	r2, r3
 8004296:	d302      	bcc.n	800429e <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004298:	2301      	movs	r3, #1
 800429a:	617b      	str	r3, [r7, #20]
 800429c:	e007      	b.n	80042ae <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800429e:	4b07      	ldr	r3, [pc, #28]	; (80042bc <prvInsertTimerInActiveList+0x80>)
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3304      	adds	r3, #4
 80042a6:	4619      	mov	r1, r3
 80042a8:	4610      	mov	r0, r2
 80042aa:	f7fe f8b0 	bl	800240e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80042ae:	697b      	ldr	r3, [r7, #20]
    }
 80042b0:	4618      	mov	r0, r3
 80042b2:	3718      	adds	r7, #24
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	2000027c 	.word	0x2000027c
 80042bc:	20000278 	.word	0x20000278

080042c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b088      	sub	sp, #32
 80042c4:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042c6:	e0a6      	b.n	8004416 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f2c0 80a3 	blt.w	8004416 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d004      	beq.n	80042e6 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	3304      	adds	r3, #4
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fe f8cd 	bl	8002480 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042e6:	1d3b      	adds	r3, r7, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff ff87 	bl	80041fc <prvSampleTimeNow>
 80042ee:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	f200 808d 	bhi.w	8004414 <prvProcessReceivedCommands+0x154>
 80042fa:	a201      	add	r2, pc, #4	; (adr r2, 8004300 <prvProcessReceivedCommands+0x40>)
 80042fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004300:	08004325 	.word	0x08004325
 8004304:	08004325 	.word	0x08004325
 8004308:	0800438d 	.word	0x0800438d
 800430c:	080043a1 	.word	0x080043a1
 8004310:	080043eb 	.word	0x080043eb
 8004314:	08004325 	.word	0x08004325
 8004318:	08004325 	.word	0x08004325
 800431c:	0800438d 	.word	0x0800438d
 8004320:	080043a1 	.word	0x080043a1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	b2da      	uxtb	r2, r3
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	699b      	ldr	r3, [r3, #24]
 800433c:	18d1      	adds	r1, r2, r3
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	69f8      	ldr	r0, [r7, #28]
 8004344:	f7ff ff7a 	bl	800423c <prvInsertTimerInActiveList>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d063      	beq.n	8004416 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800435c:	68fa      	ldr	r2, [r7, #12]
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	4413      	add	r3, r2
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	4619      	mov	r1, r3
 8004368:	69f8      	ldr	r0, [r7, #28]
 800436a:	f7ff fe71 	bl	8004050 <prvReloadTimer>
 800436e:	e008      	b.n	8004382 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004376:	f023 0301 	bic.w	r3, r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	69f8      	ldr	r0, [r7, #28]
 8004388:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 800438a:	e044      	b.n	8004416 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800439e:	e03a      	b.n	8004416 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a6:	f043 0301 	orr.w	r3, r3, #1
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d10a      	bne.n	80043d6 <prvProcessReceivedCommands+0x116>
        __asm volatile
 80043c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043c4:	f383 8811 	msr	BASEPRI, r3
 80043c8:	f3bf 8f6f 	isb	sy
 80043cc:	f3bf 8f4f 	dsb	sy
 80043d0:	617b      	str	r3, [r7, #20]
    }
 80043d2:	bf00      	nop
 80043d4:	e7fe      	b.n	80043d4 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	699a      	ldr	r2, [r3, #24]
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	18d1      	adds	r1, r2, r3
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	69f8      	ldr	r0, [r7, #28]
 80043e4:	f7ff ff2a 	bl	800423c <prvInsertTimerInActiveList>
                        break;
 80043e8:	e015      	b.n	8004416 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80043f8:	69f8      	ldr	r0, [r7, #28]
 80043fa:	f000 fc11 	bl	8004c20 <vPortFree>
 80043fe:	e00a      	b.n	8004416 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	b2da      	uxtb	r2, r3
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004412:	e000      	b.n	8004416 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004414:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004416:	4b08      	ldr	r3, [pc, #32]	; (8004438 <prvProcessReceivedCommands+0x178>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f107 0108 	add.w	r1, r7, #8
 800441e:	2200      	movs	r2, #0
 8004420:	4618      	mov	r0, r3
 8004422:	f7fe f95f 	bl	80026e4 <xQueueReceive>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	f47f af4d 	bne.w	80042c8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800442e:	bf00      	nop
 8004430:	bf00      	nop
 8004432:	3720      	adds	r7, #32
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000280 	.word	0x20000280

0800443c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004442:	e009      	b.n	8004458 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004444:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <prvSwitchTimerLists+0x44>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800444e:	f04f 31ff 	mov.w	r1, #4294967295
 8004452:	6838      	ldr	r0, [r7, #0]
 8004454:	f7ff fe1e 	bl	8004094 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <prvSwitchTimerLists+0x44>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d1f0      	bne.n	8004444 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004462:	4b07      	ldr	r3, [pc, #28]	; (8004480 <prvSwitchTimerLists+0x44>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <prvSwitchTimerLists+0x48>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a04      	ldr	r2, [pc, #16]	; (8004480 <prvSwitchTimerLists+0x44>)
 800446e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004470:	4a04      	ldr	r2, [pc, #16]	; (8004484 <prvSwitchTimerLists+0x48>)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6013      	str	r3, [r2, #0]
    }
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20000278 	.word	0x20000278
 8004484:	2000027c 	.word	0x2000027c

08004488 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 800448c:	f000 f9e2 	bl	8004854 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d11d      	bne.n	80044d4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004498:	4811      	ldr	r0, [pc, #68]	; (80044e0 <prvCheckForValidListAndQueue+0x58>)
 800449a:	f7fd ff67 	bl	800236c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800449e:	4811      	ldr	r0, [pc, #68]	; (80044e4 <prvCheckForValidListAndQueue+0x5c>)
 80044a0:	f7fd ff64 	bl	800236c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80044a4:	4b10      	ldr	r3, [pc, #64]	; (80044e8 <prvCheckForValidListAndQueue+0x60>)
 80044a6:	4a0e      	ldr	r2, [pc, #56]	; (80044e0 <prvCheckForValidListAndQueue+0x58>)
 80044a8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80044aa:	4b10      	ldr	r3, [pc, #64]	; (80044ec <prvCheckForValidListAndQueue+0x64>)
 80044ac:	4a0d      	ldr	r2, [pc, #52]	; (80044e4 <prvCheckForValidListAndQueue+0x5c>)
 80044ae:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80044b0:	2200      	movs	r2, #0
 80044b2:	210c      	movs	r1, #12
 80044b4:	200a      	movs	r0, #10
 80044b6:	f7fe f89d 	bl	80025f4 <xQueueGenericCreate>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a07      	ldr	r2, [pc, #28]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 80044be:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80044c0:	4b06      	ldr	r3, [pc, #24]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d005      	beq.n	80044d4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <prvCheckForValidListAndQueue+0x54>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4908      	ldr	r1, [pc, #32]	; (80044f0 <prvCheckForValidListAndQueue+0x68>)
 80044ce:	4618      	mov	r0, r3
 80044d0:	f7fe faa6 	bl	8002a20 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80044d4:	f000 f9ee 	bl	80048b4 <vPortExitCritical>
    }
 80044d8:	bf00      	nop
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	20000280 	.word	0x20000280
 80044e0:	20000250 	.word	0x20000250
 80044e4:	20000264 	.word	0x20000264
 80044e8:	20000278 	.word	0x20000278
 80044ec:	2000027c 	.word	0x2000027c
 80044f0:	08008720 	.word	0x08008720

080044f4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044f4:	b480      	push	{r7}
 80044f6:	b085      	sub	sp, #20
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	3b04      	subs	r3, #4
 8004504:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800450c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	3b04      	subs	r3, #4
 8004512:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f023 0201 	bic.w	r2, r3, #1
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	3b04      	subs	r3, #4
 8004522:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004524:	4a0c      	ldr	r2, [pc, #48]	; (8004558 <pxPortInitialiseStack+0x64>)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	3b14      	subs	r3, #20
 800452e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004530:	687a      	ldr	r2, [r7, #4]
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	3b04      	subs	r3, #4
 800453a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f06f 0202 	mvn.w	r2, #2
 8004542:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3b20      	subs	r3, #32
 8004548:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800454a:	68fb      	ldr	r3, [r7, #12]
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	0800455d 	.word	0x0800455d

0800455c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004562:	2300      	movs	r3, #0
 8004564:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004566:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <prvTaskExitError+0x54>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800456e:	d00a      	beq.n	8004586 <prvTaskExitError+0x2a>
        __asm volatile
 8004570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004574:	f383 8811 	msr	BASEPRI, r3
 8004578:	f3bf 8f6f 	isb	sy
 800457c:	f3bf 8f4f 	dsb	sy
 8004580:	60fb      	str	r3, [r7, #12]
    }
 8004582:	bf00      	nop
 8004584:	e7fe      	b.n	8004584 <prvTaskExitError+0x28>
        __asm volatile
 8004586:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458a:	f383 8811 	msr	BASEPRI, r3
 800458e:	f3bf 8f6f 	isb	sy
 8004592:	f3bf 8f4f 	dsb	sy
 8004596:	60bb      	str	r3, [r7, #8]
    }
 8004598:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800459a:	bf00      	nop
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d0fc      	beq.n	800459c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr
 80045b0:	20000010 	.word	0x20000010
	...

080045c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80045c0:	4b07      	ldr	r3, [pc, #28]	; (80045e0 <pxCurrentTCBConst2>)
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	6808      	ldr	r0, [r1, #0]
 80045c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ca:	f380 8809 	msr	PSP, r0
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f04f 0000 	mov.w	r0, #0
 80045d6:	f380 8811 	msr	BASEPRI, r0
 80045da:	4770      	bx	lr
 80045dc:	f3af 8000 	nop.w

080045e0 <pxCurrentTCBConst2>:
 80045e0:	20000138 	.word	0x20000138
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80045e4:	bf00      	nop
 80045e6:	bf00      	nop

080045e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80045e8:	4808      	ldr	r0, [pc, #32]	; (800460c <prvPortStartFirstTask+0x24>)
 80045ea:	6800      	ldr	r0, [r0, #0]
 80045ec:	6800      	ldr	r0, [r0, #0]
 80045ee:	f380 8808 	msr	MSP, r0
 80045f2:	f04f 0000 	mov.w	r0, #0
 80045f6:	f380 8814 	msr	CONTROL, r0
 80045fa:	b662      	cpsie	i
 80045fc:	b661      	cpsie	f
 80045fe:	f3bf 8f4f 	dsb	sy
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	df00      	svc	0
 8004608:	bf00      	nop
 800460a:	0000      	.short	0x0000
 800460c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004610:	bf00      	nop
 8004612:	bf00      	nop

08004614 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800461a:	4b46      	ldr	r3, [pc, #280]	; (8004734 <xPortStartScheduler+0x120>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a46      	ldr	r2, [pc, #280]	; (8004738 <xPortStartScheduler+0x124>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d10a      	bne.n	800463a <xPortStartScheduler+0x26>
        __asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	613b      	str	r3, [r7, #16]
    }
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800463a:	4b3e      	ldr	r3, [pc, #248]	; (8004734 <xPortStartScheduler+0x120>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a3f      	ldr	r2, [pc, #252]	; (800473c <xPortStartScheduler+0x128>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d10a      	bne.n	800465a <xPortStartScheduler+0x46>
        __asm volatile
 8004644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	60fb      	str	r3, [r7, #12]
    }
 8004656:	bf00      	nop
 8004658:	e7fe      	b.n	8004658 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800465a:	4b39      	ldr	r3, [pc, #228]	; (8004740 <xPortStartScheduler+0x12c>)
 800465c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	b2db      	uxtb	r3, r3
 8004664:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	22ff      	movs	r2, #255	; 0xff
 800466a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004674:	78fb      	ldrb	r3, [r7, #3]
 8004676:	b2db      	uxtb	r3, r3
 8004678:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b31      	ldr	r3, [pc, #196]	; (8004744 <xPortStartScheduler+0x130>)
 8004680:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004682:	4b31      	ldr	r3, [pc, #196]	; (8004748 <xPortStartScheduler+0x134>)
 8004684:	2207      	movs	r2, #7
 8004686:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004688:	e009      	b.n	800469e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800468a:	4b2f      	ldr	r3, [pc, #188]	; (8004748 <xPortStartScheduler+0x134>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3b01      	subs	r3, #1
 8004690:	4a2d      	ldr	r2, [pc, #180]	; (8004748 <xPortStartScheduler+0x134>)
 8004692:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004694:	78fb      	ldrb	r3, [r7, #3]
 8004696:	b2db      	uxtb	r3, r3
 8004698:	005b      	lsls	r3, r3, #1
 800469a:	b2db      	uxtb	r3, r3
 800469c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	b2db      	uxtb	r3, r3
 80046a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a6:	2b80      	cmp	r3, #128	; 0x80
 80046a8:	d0ef      	beq.n	800468a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80046aa:	4b27      	ldr	r3, [pc, #156]	; (8004748 <xPortStartScheduler+0x134>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f1c3 0307 	rsb	r3, r3, #7
 80046b2:	2b04      	cmp	r3, #4
 80046b4:	d00a      	beq.n	80046cc <xPortStartScheduler+0xb8>
        __asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60bb      	str	r3, [r7, #8]
    }
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046cc:	4b1e      	ldr	r3, [pc, #120]	; (8004748 <xPortStartScheduler+0x134>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	4a1d      	ldr	r2, [pc, #116]	; (8004748 <xPortStartScheduler+0x134>)
 80046d4:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046d6:	4b1c      	ldr	r3, [pc, #112]	; (8004748 <xPortStartScheduler+0x134>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80046de:	4a1a      	ldr	r2, [pc, #104]	; (8004748 <xPortStartScheduler+0x134>)
 80046e0:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80046ea:	4b18      	ldr	r3, [pc, #96]	; (800474c <xPortStartScheduler+0x138>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a17      	ldr	r2, [pc, #92]	; (800474c <xPortStartScheduler+0x138>)
 80046f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80046f4:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80046f6:	4b15      	ldr	r3, [pc, #84]	; (800474c <xPortStartScheduler+0x138>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a14      	ldr	r2, [pc, #80]	; (800474c <xPortStartScheduler+0x138>)
 80046fc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004700:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004702:	f000 f963 	bl	80049cc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <xPortStartScheduler+0x13c>)
 8004708:	2200      	movs	r2, #0
 800470a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800470c:	f000 f982 	bl	8004a14 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <xPortStartScheduler+0x140>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a0f      	ldr	r2, [pc, #60]	; (8004754 <xPortStartScheduler+0x140>)
 8004716:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800471a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800471c:	f7ff ff64 	bl	80045e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004720:	f7fe ff22 	bl	8003568 <vTaskSwitchContext>
    prvTaskExitError();
 8004724:	f7ff ff1a 	bl	800455c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004728:	2300      	movs	r3, #0
}
 800472a:	4618      	mov	r0, r3
 800472c:	3718      	adds	r7, #24
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	e000ed00 	.word	0xe000ed00
 8004738:	410fc271 	.word	0x410fc271
 800473c:	410fc270 	.word	0x410fc270
 8004740:	e000e400 	.word	0xe000e400
 8004744:	2000028c 	.word	0x2000028c
 8004748:	20000290 	.word	0x20000290
 800474c:	e000ed20 	.word	0xe000ed20
 8004750:	20000010 	.word	0x20000010
 8004754:	e000ef34 	.word	0xe000ef34

08004758 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004758:	b480      	push	{r7}
 800475a:	b087      	sub	sp, #28
 800475c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800475e:	4b37      	ldr	r3, [pc, #220]	; (800483c <vInitPrioGroupValue+0xe4>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a37      	ldr	r2, [pc, #220]	; (8004840 <vInitPrioGroupValue+0xe8>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d10a      	bne.n	800477e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476c:	f383 8811 	msr	BASEPRI, r3
 8004770:	f3bf 8f6f 	isb	sy
 8004774:	f3bf 8f4f 	dsb	sy
 8004778:	613b      	str	r3, [r7, #16]
    }
 800477a:	bf00      	nop
 800477c:	e7fe      	b.n	800477c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800477e:	4b2f      	ldr	r3, [pc, #188]	; (800483c <vInitPrioGroupValue+0xe4>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a30      	ldr	r2, [pc, #192]	; (8004844 <vInitPrioGroupValue+0xec>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d10a      	bne.n	800479e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004788:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478c:	f383 8811 	msr	BASEPRI, r3
 8004790:	f3bf 8f6f 	isb	sy
 8004794:	f3bf 8f4f 	dsb	sy
 8004798:	60fb      	str	r3, [r7, #12]
    }
 800479a:	bf00      	nop
 800479c:	e7fe      	b.n	800479c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800479e:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <vInitPrioGroupValue+0xf0>)
 80047a0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	781b      	ldrb	r3, [r3, #0]
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	22ff      	movs	r2, #255	; 0xff
 80047ae:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047b8:	78fb      	ldrb	r3, [r7, #3]
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	4b22      	ldr	r3, [pc, #136]	; (800484c <vInitPrioGroupValue+0xf4>)
 80047c4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047c6:	4b22      	ldr	r3, [pc, #136]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047c8:	2207      	movs	r2, #7
 80047ca:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047cc:	e009      	b.n	80047e2 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80047ce:	4b20      	ldr	r3, [pc, #128]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	3b01      	subs	r3, #1
 80047d4:	4a1e      	ldr	r2, [pc, #120]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047d6:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80047d8:	78fb      	ldrb	r3, [r7, #3]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	005b      	lsls	r3, r3, #1
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e2:	78fb      	ldrb	r3, [r7, #3]
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ea:	2b80      	cmp	r3, #128	; 0x80
 80047ec:	d0ef      	beq.n	80047ce <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047ee:	4b18      	ldr	r3, [pc, #96]	; (8004850 <vInitPrioGroupValue+0xf8>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f1c3 0307 	rsb	r3, r3, #7
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d00a      	beq.n	8004810 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	60bb      	str	r3, [r7, #8]
    }
 800480c:	bf00      	nop
 800480e:	e7fe      	b.n	800480e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004810:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	021b      	lsls	r3, r3, #8
 8004816:	4a0e      	ldr	r2, [pc, #56]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004818:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <vInitPrioGroupValue+0xf8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004822:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <vInitPrioGroupValue+0xf8>)
 8004824:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	b2da      	uxtb	r2, r3
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	e000ed00 	.word	0xe000ed00
 8004840:	410fc271 	.word	0x410fc271
 8004844:	410fc270 	.word	0x410fc270
 8004848:	e000e400 	.word	0xe000e400
 800484c:	2000028c 	.word	0x2000028c
 8004850:	20000290 	.word	0x20000290

08004854 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
        __asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	607b      	str	r3, [r7, #4]
    }
 800486c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <vPortEnterCritical+0x58>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	3301      	adds	r3, #1
 8004874:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <vPortEnterCritical+0x58>)
 8004876:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004878:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <vPortEnterCritical+0x58>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d10f      	bne.n	80048a0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004880:	4b0b      	ldr	r3, [pc, #44]	; (80048b0 <vPortEnterCritical+0x5c>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00a      	beq.n	80048a0 <vPortEnterCritical+0x4c>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
    }
 800489c:	bf00      	nop
 800489e:	e7fe      	b.n	800489e <vPortEnterCritical+0x4a>
    }
}
 80048a0:	bf00      	nop
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr
 80048ac:	20000010 	.word	0x20000010
 80048b0:	e000ed04 	.word	0xe000ed04

080048b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80048ba:	4b12      	ldr	r3, [pc, #72]	; (8004904 <vPortExitCritical+0x50>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d10a      	bne.n	80048d8 <vPortExitCritical+0x24>
        __asm volatile
 80048c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c6:	f383 8811 	msr	BASEPRI, r3
 80048ca:	f3bf 8f6f 	isb	sy
 80048ce:	f3bf 8f4f 	dsb	sy
 80048d2:	607b      	str	r3, [r7, #4]
    }
 80048d4:	bf00      	nop
 80048d6:	e7fe      	b.n	80048d6 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80048d8:	4b0a      	ldr	r3, [pc, #40]	; (8004904 <vPortExitCritical+0x50>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	3b01      	subs	r3, #1
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <vPortExitCritical+0x50>)
 80048e0:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80048e2:	4b08      	ldr	r3, [pc, #32]	; (8004904 <vPortExitCritical+0x50>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d105      	bne.n	80048f6 <vPortExitCritical+0x42>
 80048ea:	2300      	movs	r3, #0
 80048ec:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80048f4:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	20000010 	.word	0x20000010
	...

08004910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004910:	f3ef 8009 	mrs	r0, PSP
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4b15      	ldr	r3, [pc, #84]	; (8004970 <pxCurrentTCBConst>)
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	f01e 0f10 	tst.w	lr, #16
 8004920:	bf08      	it	eq
 8004922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	6010      	str	r0, [r2, #0]
 800492c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004934:	f380 8811 	msr	BASEPRI, r0
 8004938:	f3bf 8f4f 	dsb	sy
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f7fe fe12 	bl	8003568 <vTaskSwitchContext>
 8004944:	f04f 0000 	mov.w	r0, #0
 8004948:	f380 8811 	msr	BASEPRI, r0
 800494c:	bc09      	pop	{r0, r3}
 800494e:	6819      	ldr	r1, [r3, #0]
 8004950:	6808      	ldr	r0, [r1, #0]
 8004952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004956:	f01e 0f10 	tst.w	lr, #16
 800495a:	bf08      	it	eq
 800495c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004960:	f380 8809 	msr	PSP, r0
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst>:
 8004970:	20000138 	.word	0x20000138
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
        __asm volatile
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	607b      	str	r3, [r7, #4]
    }
 8004990:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004992:	f002 fbd3 	bl	800713c <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004996:	f7fe fccd 	bl	8003334 <xTaskIncrementTick>
 800499a:	4603      	mov	r3, r0
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80049a0:	f002 fc2a 	bl	80071f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049a4:	4b08      	ldr	r3, [pc, #32]	; (80049c8 <SysTick_Handler+0x50>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	e001      	b.n	80049b2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80049ae:	f002 fc07 	bl	80071c0 <SEGGER_SYSVIEW_RecordExitISR>
 80049b2:	2300      	movs	r3, #0
 80049b4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	f383 8811 	msr	BASEPRI, r3
    }
 80049bc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80049be:	bf00      	nop
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80049cc:	b480      	push	{r7}
 80049ce:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049d0:	4b0b      	ldr	r3, [pc, #44]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <vPortSetupTimerInterrupt+0x38>)
 80049d8:	2200      	movs	r2, #0
 80049da:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049dc:	4b0a      	ldr	r3, [pc, #40]	; (8004a08 <vPortSetupTimerInterrupt+0x3c>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <vPortSetupTimerInterrupt+0x40>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	099b      	lsrs	r3, r3, #6
 80049e8:	4a09      	ldr	r2, [pc, #36]	; (8004a10 <vPortSetupTimerInterrupt+0x44>)
 80049ea:	3b01      	subs	r3, #1
 80049ec:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80049ee:	4b04      	ldr	r3, [pc, #16]	; (8004a00 <vPortSetupTimerInterrupt+0x34>)
 80049f0:	2207      	movs	r2, #7
 80049f2:	601a      	str	r2, [r3, #0]
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	e000e010 	.word	0xe000e010
 8004a04:	e000e018 	.word	0xe000e018
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	10624dd3 	.word	0x10624dd3
 8004a10:	e000e014 	.word	0xe000e014

08004a14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004a14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a24 <vPortEnableVFP+0x10>
 8004a18:	6801      	ldr	r1, [r0, #0]
 8004a1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a1e:	6001      	str	r1, [r0, #0]
 8004a20:	4770      	bx	lr
 8004a22:	0000      	.short	0x0000
 8004a24:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004a28:	bf00      	nop
 8004a2a:	bf00      	nop

08004a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004a32:	f3ef 8305 	mrs	r3, IPSR
 8004a36:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	d914      	bls.n	8004a68 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a3e:	4a17      	ldr	r2, [pc, #92]	; (8004a9c <vPortValidateInterruptPriority+0x70>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a48:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <vPortValidateInterruptPriority+0x74>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	7afa      	ldrb	r2, [r7, #11]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d20a      	bcs.n	8004a68 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
    }
 8004a64:	bf00      	nop
 8004a66:	e7fe      	b.n	8004a66 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a68:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <vPortValidateInterruptPriority+0x78>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a70:	4b0d      	ldr	r3, [pc, #52]	; (8004aa8 <vPortValidateInterruptPriority+0x7c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d90a      	bls.n	8004a8e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	f383 8811 	msr	BASEPRI, r3
 8004a80:	f3bf 8f6f 	isb	sy
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	603b      	str	r3, [r7, #0]
    }
 8004a8a:	bf00      	nop
 8004a8c:	e7fe      	b.n	8004a8c <vPortValidateInterruptPriority+0x60>
    }
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	e000e3f0 	.word	0xe000e3f0
 8004aa0:	2000028c 	.word	0x2000028c
 8004aa4:	e000ed0c 	.word	0xe000ed0c
 8004aa8:	20000290 	.word	0x20000290

08004aac <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b08a      	sub	sp, #40	; 0x28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004ab8:	f7fe fb0c 	bl	80030d4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004abc:	4b53      	ldr	r3, [pc, #332]	; (8004c0c <pvPortMalloc+0x160>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d101      	bne.n	8004ac8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004ac4:	f000 f908 	bl	8004cd8 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d012      	beq.n	8004af4 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004ace:	2208      	movs	r2, #8
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	f003 0307 	and.w	r3, r3, #7
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	3308      	adds	r3, #8
 8004ada:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	43db      	mvns	r3, r3
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d804      	bhi.n	8004af0 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	69bb      	ldr	r3, [r7, #24]
 8004aea:	4413      	add	r3, r2
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	e001      	b.n	8004af4 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004af0:	2300      	movs	r3, #0
 8004af2:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	db70      	blt.n	8004bdc <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d06d      	beq.n	8004bdc <pvPortMalloc+0x130>
 8004b00:	4b43      	ldr	r3, [pc, #268]	; (8004c10 <pvPortMalloc+0x164>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d868      	bhi.n	8004bdc <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004b0a:	4b42      	ldr	r3, [pc, #264]	; (8004c14 <pvPortMalloc+0x168>)
 8004b0c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004b0e:	4b41      	ldr	r3, [pc, #260]	; (8004c14 <pvPortMalloc+0x168>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b14:	e004      	b.n	8004b20 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d903      	bls.n	8004b32 <pvPortMalloc+0x86>
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1f1      	bne.n	8004b16 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <pvPortMalloc+0x160>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d04f      	beq.n	8004bdc <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b3c:	6a3b      	ldr	r3, [r7, #32]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2208      	movs	r2, #8
 8004b42:	4413      	add	r3, r2
 8004b44:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b48:	681a      	ldr	r2, [r3, #0]
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b50:	685a      	ldr	r2, [r3, #4]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	1ad2      	subs	r2, r2, r3
 8004b56:	2308      	movs	r3, #8
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d91f      	bls.n	8004b9e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4413      	add	r3, r2
 8004b64:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 0307 	and.w	r3, r3, #7
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <pvPortMalloc+0xda>
        __asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	613b      	str	r3, [r7, #16]
    }
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	1ad2      	subs	r2, r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	687a      	ldr	r2, [r7, #4]
 8004b96:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b98:	6978      	ldr	r0, [r7, #20]
 8004b9a:	f000 f8f9 	bl	8004d90 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b9e:	4b1c      	ldr	r3, [pc, #112]	; (8004c10 <pvPortMalloc+0x164>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	1ad3      	subs	r3, r2, r3
 8004ba8:	4a19      	ldr	r2, [pc, #100]	; (8004c10 <pvPortMalloc+0x164>)
 8004baa:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bac:	4b18      	ldr	r3, [pc, #96]	; (8004c10 <pvPortMalloc+0x164>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <pvPortMalloc+0x16c>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d203      	bcs.n	8004bc0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bb8:	4b15      	ldr	r3, [pc, #84]	; (8004c10 <pvPortMalloc+0x164>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a16      	ldr	r2, [pc, #88]	; (8004c18 <pvPortMalloc+0x16c>)
 8004bbe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bd2:	4b12      	ldr	r3, [pc, #72]	; (8004c1c <pvPortMalloc+0x170>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	3301      	adds	r3, #1
 8004bd8:	4a10      	ldr	r2, [pc, #64]	; (8004c1c <pvPortMalloc+0x170>)
 8004bda:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004bdc:	f7fe fa88 	bl	80030f0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	f003 0307 	and.w	r3, r3, #7
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <pvPortMalloc+0x154>
        __asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60fb      	str	r3, [r7, #12]
    }
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <pvPortMalloc+0x152>
    return pvReturn;
 8004c00:	69fb      	ldr	r3, [r7, #28]
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3728      	adds	r7, #40	; 0x28
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	20012e9c 	.word	0x20012e9c
 8004c10:	20012ea0 	.word	0x20012ea0
 8004c14:	20012e94 	.word	0x20012e94
 8004c18:	20012ea4 	.word	0x20012ea4
 8004c1c:	20012ea8 	.word	0x20012ea8

08004c20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d049      	beq.n	8004cc6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004c32:	2308      	movs	r3, #8
 8004c34:	425b      	negs	r3, r3
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	db0a      	blt.n	8004c5e <vPortFree+0x3e>
        __asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
    }
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d00a      	beq.n	8004c7c <vPortFree+0x5c>
        __asm volatile
 8004c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c6a:	f383 8811 	msr	BASEPRI, r3
 8004c6e:	f3bf 8f6f 	isb	sy
 8004c72:	f3bf 8f4f 	dsb	sy
 8004c76:	60bb      	str	r3, [r7, #8]
    }
 8004c78:	bf00      	nop
 8004c7a:	e7fe      	b.n	8004c7a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	0fdb      	lsrs	r3, r3, #31
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01c      	beq.n	8004cc6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d118      	bne.n	8004cc6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004ca0:	f7fe fa18 	bl	80030d4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	4b09      	ldr	r3, [pc, #36]	; (8004cd0 <vPortFree+0xb0>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4413      	add	r3, r2
 8004cae:	4a08      	ldr	r2, [pc, #32]	; (8004cd0 <vPortFree+0xb0>)
 8004cb0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cb2:	6938      	ldr	r0, [r7, #16]
 8004cb4:	f000 f86c 	bl	8004d90 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004cb8:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <vPortFree+0xb4>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a05      	ldr	r2, [pc, #20]	; (8004cd4 <vPortFree+0xb4>)
 8004cc0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004cc2:	f7fe fa15 	bl	80030f0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004cc6:	bf00      	nop
 8004cc8:	3718      	adds	r7, #24
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20012ea0 	.word	0x20012ea0
 8004cd4:	20012eac 	.word	0x20012eac

08004cd8 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cde:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004ce2:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004ce4:	4b25      	ldr	r3, [pc, #148]	; (8004d7c <prvHeapInit+0xa4>)
 8004ce6:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a1d      	ldr	r2, [pc, #116]	; (8004d7c <prvHeapInit+0xa4>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d10:	4a1b      	ldr	r2, [pc, #108]	; (8004d80 <prvHeapInit+0xa8>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004d16:	4b1a      	ldr	r3, [pc, #104]	; (8004d80 <prvHeapInit+0xa8>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004d24:	2208      	movs	r2, #8
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0307 	bic.w	r3, r3, #7
 8004d32:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a13      	ldr	r2, [pc, #76]	; (8004d84 <prvHeapInit+0xac>)
 8004d38:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004d3a:	4b12      	ldr	r3, [pc, #72]	; (8004d84 <prvHeapInit+0xac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <prvHeapInit+0xac>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d58:	4b0a      	ldr	r3, [pc, #40]	; (8004d84 <prvHeapInit+0xac>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a08      	ldr	r2, [pc, #32]	; (8004d88 <prvHeapInit+0xb0>)
 8004d66:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a07      	ldr	r2, [pc, #28]	; (8004d8c <prvHeapInit+0xb4>)
 8004d6e:	6013      	str	r3, [r2, #0]
}
 8004d70:	bf00      	nop
 8004d72:	3714      	adds	r7, #20
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr
 8004d7c:	20000294 	.word	0x20000294
 8004d80:	20012e94 	.word	0x20012e94
 8004d84:	20012e9c 	.word	0x20012e9c
 8004d88:	20012ea4 	.word	0x20012ea4
 8004d8c:	20012ea0 	.word	0x20012ea0

08004d90 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d98:	4b28      	ldr	r3, [pc, #160]	; (8004e3c <prvInsertBlockIntoFreeList+0xac>)
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e002      	b.n	8004da4 <prvInsertBlockIntoFreeList+0x14>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d8f7      	bhi.n	8004d9e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	4413      	add	r3, r2
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d108      	bne.n	8004dd2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	441a      	add	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	68ba      	ldr	r2, [r7, #8]
 8004ddc:	441a      	add	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d118      	bne.n	8004e18 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	4b15      	ldr	r3, [pc, #84]	; (8004e40 <prvInsertBlockIntoFreeList+0xb0>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d00d      	beq.n	8004e0e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	441a      	add	r2, r3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e008      	b.n	8004e20 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e0e:	4b0c      	ldr	r3, [pc, #48]	; (8004e40 <prvInsertBlockIntoFreeList+0xb0>)
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e003      	b.n	8004e20 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004e20:	68fa      	ldr	r2, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d002      	beq.n	8004e2e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004e2e:	bf00      	nop
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr
 8004e3a:	bf00      	nop
 8004e3c:	20012e94 	.word	0x20012e94
 8004e40:	20012e9c 	.word	0x20012e9c

08004e44 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e46:	b085      	sub	sp, #20
 8004e48:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	607b      	str	r3, [r7, #4]
 8004e4e:	e033      	b.n	8004eb8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004e50:	491e      	ldr	r1, [pc, #120]	; (8004ecc <_cbSendTaskList+0x88>)
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	4613      	mov	r3, r2
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	440b      	add	r3, r1
 8004e5e:	6818      	ldr	r0, [r3, #0]
 8004e60:	491a      	ldr	r1, [pc, #104]	; (8004ecc <_cbSendTaskList+0x88>)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	4613      	mov	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4413      	add	r3, r2
 8004e6a:	009b      	lsls	r3, r3, #2
 8004e6c:	440b      	add	r3, r1
 8004e6e:	3304      	adds	r3, #4
 8004e70:	6819      	ldr	r1, [r3, #0]
 8004e72:	4c16      	ldr	r4, [pc, #88]	; (8004ecc <_cbSendTaskList+0x88>)
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	4613      	mov	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	4413      	add	r3, r2
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	4423      	add	r3, r4
 8004e80:	3308      	adds	r3, #8
 8004e82:	681c      	ldr	r4, [r3, #0]
 8004e84:	4d11      	ldr	r5, [pc, #68]	; (8004ecc <_cbSendTaskList+0x88>)
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	4613      	mov	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	442b      	add	r3, r5
 8004e92:	330c      	adds	r3, #12
 8004e94:	681d      	ldr	r5, [r3, #0]
 8004e96:	4e0d      	ldr	r6, [pc, #52]	; (8004ecc <_cbSendTaskList+0x88>)
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4433      	add	r3, r6
 8004ea4:	3310      	adds	r3, #16
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	462b      	mov	r3, r5
 8004eac:	4622      	mov	r2, r4
 8004eae:	f000 f979 	bl	80051a4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	607b      	str	r3, [r7, #4]
 8004eb8:	4b05      	ldr	r3, [pc, #20]	; (8004ed0 <_cbSendTaskList+0x8c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	687a      	ldr	r2, [r7, #4]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d3c6      	bcc.n	8004e50 <_cbSendTaskList+0xc>
  }
}
 8004ec2:	bf00      	nop
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ecc:	20012eb0 	.word	0x20012eb0
 8004ed0:	20012f50 	.word	0x20012f50

08004ed4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004ed4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ed8:	b082      	sub	sp, #8
 8004eda:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004edc:	f7fe fa18 	bl	8003310 <xTaskGetTickCountFromISR>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	469a      	mov	sl, r3
 8004ee6:	4693      	mov	fp, r2
 8004ee8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004eec:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	f04f 0a00 	mov.w	sl, #0
 8004ef8:	f04f 0b00 	mov.w	fp, #0
 8004efc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004f00:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004f04:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004f08:	4652      	mov	r2, sl
 8004f0a:	465b      	mov	r3, fp
 8004f0c:	1a14      	subs	r4, r2, r0
 8004f0e:	eb63 0501 	sbc.w	r5, r3, r1
 8004f12:	f04f 0200 	mov.w	r2, #0
 8004f16:	f04f 0300 	mov.w	r3, #0
 8004f1a:	00ab      	lsls	r3, r5, #2
 8004f1c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004f20:	00a2      	lsls	r2, r4, #2
 8004f22:	4614      	mov	r4, r2
 8004f24:	461d      	mov	r5, r3
 8004f26:	eb14 0800 	adds.w	r8, r4, r0
 8004f2a:	eb45 0901 	adc.w	r9, r5, r1
 8004f2e:	f04f 0200 	mov.w	r2, #0
 8004f32:	f04f 0300 	mov.w	r3, #0
 8004f36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f42:	4690      	mov	r8, r2
 8004f44:	4699      	mov	r9, r3
 8004f46:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004f4a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004f4e:	4610      	mov	r0, r2
 8004f50:	4619      	mov	r1, r3
 8004f52:	3708      	adds	r7, #8
 8004f54:	46bd      	mov	sp, r7
 8004f56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004f5c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b086      	sub	sp, #24
 8004f60:	af02      	add	r7, sp, #8
 8004f62:	60f8      	str	r0, [r7, #12]
 8004f64:	60b9      	str	r1, [r7, #8]
 8004f66:	607a      	str	r2, [r7, #4]
 8004f68:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f6a:	2205      	movs	r2, #5
 8004f6c:	492b      	ldr	r1, [pc, #172]	; (800501c <SYSVIEW_AddTask+0xc0>)
 8004f6e:	68b8      	ldr	r0, [r7, #8]
 8004f70:	f002 fcf3 	bl	800795a <memcmp>
 8004f74:	4603      	mov	r3, r0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d04b      	beq.n	8005012 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f7a:	4b29      	ldr	r3, [pc, #164]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2b07      	cmp	r3, #7
 8004f80:	d903      	bls.n	8004f8a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f82:	4828      	ldr	r0, [pc, #160]	; (8005024 <SYSVIEW_AddTask+0xc8>)
 8004f84:	f002 fb36 	bl	80075f4 <SEGGER_SYSVIEW_Warn>
    return;
 8004f88:	e044      	b.n	8005014 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f8a:	4b25      	ldr	r3, [pc, #148]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	4926      	ldr	r1, [pc, #152]	; (8005028 <SYSVIEW_AddTask+0xcc>)
 8004f90:	4613      	mov	r3, r2
 8004f92:	009b      	lsls	r3, r3, #2
 8004f94:	4413      	add	r3, r2
 8004f96:	009b      	lsls	r3, r3, #2
 8004f98:	440b      	add	r3, r1
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f9e:	4b20      	ldr	r3, [pc, #128]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	4921      	ldr	r1, [pc, #132]	; (8005028 <SYSVIEW_AddTask+0xcc>)
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	3304      	adds	r3, #4
 8004fb0:	68ba      	ldr	r2, [r7, #8]
 8004fb2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004fb4:	4b1a      	ldr	r3, [pc, #104]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	491b      	ldr	r1, [pc, #108]	; (8005028 <SYSVIEW_AddTask+0xcc>)
 8004fba:	4613      	mov	r3, r2
 8004fbc:	009b      	lsls	r3, r3, #2
 8004fbe:	4413      	add	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	3308      	adds	r3, #8
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004fca:	4b15      	ldr	r3, [pc, #84]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	4916      	ldr	r1, [pc, #88]	; (8005028 <SYSVIEW_AddTask+0xcc>)
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	440b      	add	r3, r1
 8004fda:	330c      	adds	r3, #12
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4910      	ldr	r1, [pc, #64]	; (8005028 <SYSVIEW_AddTask+0xcc>)
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009b      	lsls	r3, r3, #2
 8004fee:	440b      	add	r3, r1
 8004ff0:	3310      	adds	r3, #16
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004ff6:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	4a08      	ldr	r2, [pc, #32]	; (8005020 <SYSVIEW_AddTask+0xc4>)
 8004ffe:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	9300      	str	r3, [sp, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	68b9      	ldr	r1, [r7, #8]
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f000 f8ca 	bl	80051a4 <SYSVIEW_SendTaskInfo>
 8005010:	e000      	b.n	8005014 <SYSVIEW_AddTask+0xb8>
    return;
 8005012:	bf00      	nop

}
 8005014:	3710      	adds	r7, #16
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
 800501a:	bf00      	nop
 800501c:	08008728 	.word	0x08008728
 8005020:	20012f50 	.word	0x20012f50
 8005024:	08008730 	.word	0x08008730
 8005028:	20012eb0 	.word	0x20012eb0

0800502c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8005034:	4b59      	ldr	r3, [pc, #356]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80ab 	beq.w	8005194 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 800503e:	2300      	movs	r3, #0
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e00d      	b.n	8005060 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8005044:	4956      	ldr	r1, [pc, #344]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	440b      	add	r3, r1
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d008      	beq.n	800506c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	3301      	adds	r3, #1
 800505e:	60fb      	str	r3, [r7, #12]
 8005060:	4b4e      	ldr	r3, [pc, #312]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	429a      	cmp	r2, r3
 8005068:	d3ec      	bcc.n	8005044 <SYSVIEW_DeleteTask+0x18>
 800506a:	e000      	b.n	800506e <SYSVIEW_DeleteTask+0x42>
      break;
 800506c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 800506e:	4b4b      	ldr	r3, [pc, #300]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	3b01      	subs	r3, #1
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	429a      	cmp	r2, r3
 8005078:	d111      	bne.n	800509e <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 800507a:	68fa      	ldr	r2, [r7, #12]
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4a46      	ldr	r2, [pc, #280]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 8005086:	4413      	add	r3, r2
 8005088:	2214      	movs	r2, #20
 800508a:	2100      	movs	r1, #0
 800508c:	4618      	mov	r0, r3
 800508e:	f002 fc74 	bl	800797a <memset>
    _NumTasks--;
 8005092:	4b42      	ldr	r3, [pc, #264]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3b01      	subs	r3, #1
 8005098:	4a40      	ldr	r2, [pc, #256]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 800509a:	6013      	str	r3, [r2, #0]
 800509c:	e07b      	b.n	8005196 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 800509e:	4b3f      	ldr	r3, [pc, #252]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	68fa      	ldr	r2, [r7, #12]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d276      	bcs.n	8005196 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 80050a8:	4b3c      	ldr	r3, [pc, #240]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	1e5a      	subs	r2, r3, #1
 80050ae:	493c      	ldr	r1, [pc, #240]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	6819      	ldr	r1, [r3, #0]
 80050bc:	4838      	ldr	r0, [pc, #224]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4403      	add	r3, r0
 80050ca:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 80050cc:	4b33      	ldr	r3, [pc, #204]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	1e5a      	subs	r2, r3, #1
 80050d2:	4933      	ldr	r1, [pc, #204]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	009b      	lsls	r3, r3, #2
 80050dc:	440b      	add	r3, r1
 80050de:	3304      	adds	r3, #4
 80050e0:	6819      	ldr	r1, [r3, #0]
 80050e2:	482f      	ldr	r0, [pc, #188]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	4403      	add	r3, r0
 80050f0:	3304      	adds	r3, #4
 80050f2:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 80050f4:	4b29      	ldr	r3, [pc, #164]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	1e5a      	subs	r2, r3, #1
 80050fa:	4929      	ldr	r1, [pc, #164]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 80050fc:	4613      	mov	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4413      	add	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	3308      	adds	r3, #8
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	4825      	ldr	r0, [pc, #148]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4403      	add	r3, r0
 8005118:	3308      	adds	r3, #8
 800511a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800511c:	4b1f      	ldr	r3, [pc, #124]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	1e5a      	subs	r2, r3, #1
 8005122:	491f      	ldr	r1, [pc, #124]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 8005124:	4613      	mov	r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	4413      	add	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	440b      	add	r3, r1
 800512e:	330c      	adds	r3, #12
 8005130:	6819      	ldr	r1, [r3, #0]
 8005132:	481b      	ldr	r0, [pc, #108]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	4613      	mov	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4413      	add	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4403      	add	r3, r0
 8005140:	330c      	adds	r3, #12
 8005142:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005144:	4b15      	ldr	r3, [pc, #84]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	1e5a      	subs	r2, r3, #1
 800514a:	4915      	ldr	r1, [pc, #84]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 800514c:	4613      	mov	r3, r2
 800514e:	009b      	lsls	r3, r3, #2
 8005150:	4413      	add	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	440b      	add	r3, r1
 8005156:	3310      	adds	r3, #16
 8005158:	6819      	ldr	r1, [r3, #0]
 800515a:	4811      	ldr	r0, [pc, #68]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 800515c:	68fa      	ldr	r2, [r7, #12]
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4403      	add	r3, r0
 8005168:	3310      	adds	r3, #16
 800516a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800516c:	4b0b      	ldr	r3, [pc, #44]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	4613      	mov	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <SYSVIEW_DeleteTask+0x174>)
 800517c:	4413      	add	r3, r2
 800517e:	2214      	movs	r2, #20
 8005180:	2100      	movs	r1, #0
 8005182:	4618      	mov	r0, r3
 8005184:	f002 fbf9 	bl	800797a <memset>
    _NumTasks--;
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	3b01      	subs	r3, #1
 800518e:	4a03      	ldr	r2, [pc, #12]	; (800519c <SYSVIEW_DeleteTask+0x170>)
 8005190:	6013      	str	r3, [r2, #0]
 8005192:	e000      	b.n	8005196 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005194:	bf00      	nop
  }
}
 8005196:	3710      	adds	r7, #16
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}
 800519c:	20012f50 	.word	0x20012f50
 80051a0:	20012eb0 	.word	0x20012eb0

080051a4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b08a      	sub	sp, #40	; 0x28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	60f8      	str	r0, [r7, #12]
 80051ac:	60b9      	str	r1, [r7, #8]
 80051ae:	607a      	str	r2, [r7, #4]
 80051b0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80051b2:	f107 0314 	add.w	r3, r7, #20
 80051b6:	2214      	movs	r2, #20
 80051b8:	2100      	movs	r1, #0
 80051ba:	4618      	mov	r0, r3
 80051bc:	f002 fbdd 	bl	800797a <memset>
  TaskInfo.TaskID     = TaskID;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80051d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d2:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80051d4:	f107 0314 	add.w	r3, r7, #20
 80051d8:	4618      	mov	r0, r3
 80051da:	f001 fe61 	bl	8006ea0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80051de:	bf00      	nop
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
	...

080051e8 <__NVIC_EnableIRQ>:
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	4603      	mov	r3, r0
 80051f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	db0b      	blt.n	8005212 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051fa:	79fb      	ldrb	r3, [r7, #7]
 80051fc:	f003 021f 	and.w	r2, r3, #31
 8005200:	4907      	ldr	r1, [pc, #28]	; (8005220 <__NVIC_EnableIRQ+0x38>)
 8005202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005206:	095b      	lsrs	r3, r3, #5
 8005208:	2001      	movs	r0, #1
 800520a:	fa00 f202 	lsl.w	r2, r0, r2
 800520e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005212:	bf00      	nop
 8005214:	370c      	adds	r7, #12
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	e000e100 	.word	0xe000e100

08005224 <__NVIC_SetPriority>:
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005234:	2b00      	cmp	r3, #0
 8005236:	db0a      	blt.n	800524e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	b2da      	uxtb	r2, r3
 800523c:	490c      	ldr	r1, [pc, #48]	; (8005270 <__NVIC_SetPriority+0x4c>)
 800523e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005242:	0112      	lsls	r2, r2, #4
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	440b      	add	r3, r1
 8005248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800524c:	e00a      	b.n	8005264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	b2da      	uxtb	r2, r3
 8005252:	4908      	ldr	r1, [pc, #32]	; (8005274 <__NVIC_SetPriority+0x50>)
 8005254:	79fb      	ldrb	r3, [r7, #7]
 8005256:	f003 030f 	and.w	r3, r3, #15
 800525a:	3b04      	subs	r3, #4
 800525c:	0112      	lsls	r2, r2, #4
 800525e:	b2d2      	uxtb	r2, r2
 8005260:	440b      	add	r3, r1
 8005262:	761a      	strb	r2, [r3, #24]
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr
 8005270:	e000e100 	.word	0xe000e100
 8005274:	e000ed00 	.word	0xe000ed00

08005278 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8005278:	b580      	push	{r7, lr}
 800527a:	b082      	sub	sp, #8
 800527c:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 800527e:	f002 fa15 	bl	80076ac <SEGGER_SYSVIEW_IsStarted>
 8005282:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 800528a:	f001 fc8f 	bl	8006bac <SEGGER_SYSVIEW_Start>
  }
}
 800528e:	bf00      	nop
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80052a2:	4b0c      	ldr	r3, [pc, #48]	; (80052d4 <_cbOnUARTRx+0x3c>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	d806      	bhi.n	80052b8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80052aa:	4b0a      	ldr	r3, [pc, #40]	; (80052d4 <_cbOnUARTRx+0x3c>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	3301      	adds	r3, #1
 80052b0:	b2da      	uxtb	r2, r3
 80052b2:	4b08      	ldr	r3, [pc, #32]	; (80052d4 <_cbOnUARTRx+0x3c>)
 80052b4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80052b6:	e009      	b.n	80052cc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80052b8:	f7ff ffde 	bl	8005278 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <_cbOnUARTRx+0x3c>)
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	4618      	mov	r0, r3
 80052c2:	1dfb      	adds	r3, r7, #7
 80052c4:	2201      	movs	r2, #1
 80052c6:	4619      	mov	r1, r3
 80052c8:	f000 fb8a 	bl	80059e0 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80052cc:	bf00      	nop
}
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000014 	.word	0x20000014

080052d8 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80052e0:	4b14      	ldr	r3, [pc, #80]	; (8005334 <_cbOnUARTTx+0x5c>)
 80052e2:	785b      	ldrb	r3, [r3, #1]
 80052e4:	2b03      	cmp	r3, #3
 80052e6:	d80f      	bhi.n	8005308 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80052e8:	4b12      	ldr	r3, [pc, #72]	; (8005334 <_cbOnUARTTx+0x5c>)
 80052ea:	785b      	ldrb	r3, [r3, #1]
 80052ec:	461a      	mov	r2, r3
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <_cbOnUARTTx+0x60>)
 80052f0:	5c9a      	ldrb	r2, [r3, r2]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <_cbOnUARTTx+0x5c>)
 80052f8:	785b      	ldrb	r3, [r3, #1]
 80052fa:	3301      	adds	r3, #1
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	4b0d      	ldr	r3, [pc, #52]	; (8005334 <_cbOnUARTTx+0x5c>)
 8005300:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005302:	2301      	movs	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005306:	e00f      	b.n	8005328 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005308:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <_cbOnUARTTx+0x5c>)
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2201      	movs	r2, #1
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fa09 	bl	8005728 <SEGGER_RTT_ReadUpBufferNoLock>
 8005316:	4603      	mov	r3, r0
 8005318:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	da02      	bge.n	8005326 <_cbOnUARTTx+0x4e>
    r = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
 8005324:	e000      	b.n	8005328 <_cbOnUARTTx+0x50>
  }
Done:
 8005326:	bf00      	nop
  return r;
 8005328:	68fb      	ldr	r3, [r7, #12]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000014 	.word	0x20000014
 8005338:	0800880c 	.word	0x0800880c

0800533c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005344:	4a04      	ldr	r2, [pc, #16]	; (8005358 <SEGGER_UART_init+0x1c>)
 8005346:	4905      	ldr	r1, [pc, #20]	; (800535c <SEGGER_UART_init+0x20>)
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 f853 	bl	80053f4 <HIF_UART_Init>
}
 800534e:	bf00      	nop
 8005350:	3708      	adds	r7, #8
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop
 8005358:	08005299 	.word	0x08005299
 800535c:	080052d9 	.word	0x080052d9

08005360 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005366:	4b1e      	ldr	r3, [pc, #120]	; (80053e0 <USART2_IRQHandler+0x80>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f003 0320 	and.w	r3, r3, #32
 8005372:	2b00      	cmp	r3, #0
 8005374:	d011      	beq.n	800539a <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8005376:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <USART2_IRQHandler+0x84>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	b2db      	uxtb	r3, r3
 800537c:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f003 030b 	and.w	r3, r3, #11
 8005384:	2b00      	cmp	r3, #0
 8005386:	d108      	bne.n	800539a <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8005388:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <USART2_IRQHandler+0x88>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d004      	beq.n	800539a <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <USART2_IRQHandler+0x88>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	79fa      	ldrb	r2, [r7, #7]
 8005396:	4610      	mov	r0, r2
 8005398:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01a      	beq.n	80053da <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80053a4:	4b11      	ldr	r3, [pc, #68]	; (80053ec <USART2_IRQHandler+0x8c>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d015      	beq.n	80053d8 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80053ac:	4b0f      	ldr	r3, [pc, #60]	; (80053ec <USART2_IRQHandler+0x8c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	1dfa      	adds	r2, r7, #7
 80053b2:	4610      	mov	r0, r2
 80053b4:	4798      	blx	r3
 80053b6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <USART2_IRQHandler+0x90>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a0b      	ldr	r2, [pc, #44]	; (80053f0 <USART2_IRQHandler+0x90>)
 80053c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053c8:	6013      	str	r3, [r2, #0]
 80053ca:	e006      	b.n	80053da <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80053cc:	4b04      	ldr	r3, [pc, #16]	; (80053e0 <USART2_IRQHandler+0x80>)
 80053ce:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80053d0:	79fa      	ldrb	r2, [r7, #7]
 80053d2:	4b04      	ldr	r3, [pc, #16]	; (80053e4 <USART2_IRQHandler+0x84>)
 80053d4:	601a      	str	r2, [r3, #0]
 80053d6:	e000      	b.n	80053da <USART2_IRQHandler+0x7a>
      return;
 80053d8:	bf00      	nop
    }
  }
}
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40004400 	.word	0x40004400
 80053e4:	40004404 	.word	0x40004404
 80053e8:	20012f54 	.word	0x20012f54
 80053ec:	20012f58 	.word	0x20012f58
 80053f0:	4000440c 	.word	0x4000440c

080053f4 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b086      	sub	sp, #24
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005400:	4b2e      	ldr	r3, [pc, #184]	; (80054bc <HIF_UART_Init+0xc8>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a2d      	ldr	r2, [pc, #180]	; (80054bc <HIF_UART_Init+0xc8>)
 8005406:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800540a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800540c:	4b2c      	ldr	r3, [pc, #176]	; (80054c0 <HIF_UART_Init+0xcc>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a2b      	ldr	r2, [pc, #172]	; (80054c0 <HIF_UART_Init+0xcc>)
 8005412:	f043 0301 	orr.w	r3, r3, #1
 8005416:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005418:	4b2a      	ldr	r3, [pc, #168]	; (80054c4 <HIF_UART_Init+0xd0>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005424:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800542c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800542e:	4a25      	ldr	r2, [pc, #148]	; (80054c4 <HIF_UART_Init+0xd0>)
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005434:	4b24      	ldr	r3, [pc, #144]	; (80054c8 <HIF_UART_Init+0xd4>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005440:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005448:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <HIF_UART_Init+0xd4>)
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HIF_UART_Init+0xd8>)
 8005452:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005456:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005458:	4b1d      	ldr	r3, [pc, #116]	; (80054d0 <HIF_UART_Init+0xdc>)
 800545a:	2200      	movs	r2, #0
 800545c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800545e:	4b1d      	ldr	r3, [pc, #116]	; (80054d4 <HIF_UART_Init+0xe0>)
 8005460:	2280      	movs	r2, #128	; 0x80
 8005462:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	00db      	lsls	r3, r3, #3
 8005468:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800546a:	4a1b      	ldr	r2, [pc, #108]	; (80054d8 <HIF_UART_Init+0xe4>)
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005472:	3301      	adds	r3, #1
 8005474:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	085b      	lsrs	r3, r3, #1
 800547a:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005482:	d302      	bcc.n	800548a <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 8005484:	f640 73ff 	movw	r3, #4095	; 0xfff
 8005488:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d004      	beq.n	800549a <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	4a11      	ldr	r2, [pc, #68]	; (80054dc <HIF_UART_Init+0xe8>)
 8005496:	b29b      	uxth	r3, r3
 8005498:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 800549a:	4a11      	ldr	r2, [pc, #68]	; (80054e0 <HIF_UART_Init+0xec>)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80054a0:	4a10      	ldr	r2, [pc, #64]	; (80054e4 <HIF_UART_Init+0xf0>)
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80054a6:	2106      	movs	r1, #6
 80054a8:	2026      	movs	r0, #38	; 0x26
 80054aa:	f7ff febb 	bl	8005224 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80054ae:	2026      	movs	r0, #38	; 0x26
 80054b0:	f7ff fe9a 	bl	80051e8 <__NVIC_EnableIRQ>
}
 80054b4:	bf00      	nop
 80054b6:	3718      	adds	r7, #24
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023840 	.word	0x40023840
 80054c0:	40023830 	.word	0x40023830
 80054c4:	40020020 	.word	0x40020020
 80054c8:	40020000 	.word	0x40020000
 80054cc:	4000440c 	.word	0x4000440c
 80054d0:	40004410 	.word	0x40004410
 80054d4:	40004414 	.word	0x40004414
 80054d8:	0501bd00 	.word	0x0501bd00
 80054dc:	40004408 	.word	0x40004408
 80054e0:	20012f54 	.word	0x20012f54
 80054e4:	20012f58 	.word	0x20012f58

080054e8 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80054e8:	b480      	push	{r7}
 80054ea:	b083      	sub	sp, #12
 80054ec:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80054ee:	4b24      	ldr	r3, [pc, #144]	; (8005580 <_DoInit+0x98>)
 80054f0:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2203      	movs	r2, #3
 80054f6:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2203      	movs	r2, #3
 80054fc:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a20      	ldr	r2, [pc, #128]	; (8005584 <_DoInit+0x9c>)
 8005502:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a20      	ldr	r2, [pc, #128]	; (8005588 <_DoInit+0xa0>)
 8005508:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005510:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a17      	ldr	r2, [pc, #92]	; (8005584 <_DoInit+0x9c>)
 8005528:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	4a17      	ldr	r2, [pc, #92]	; (800558c <_DoInit+0xa4>)
 800552e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2210      	movs	r2, #16
 8005534:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	3307      	adds	r3, #7
 800554c:	4a10      	ldr	r2, [pc, #64]	; (8005590 <_DoInit+0xa8>)
 800554e:	6810      	ldr	r0, [r2, #0]
 8005550:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005552:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a0e      	ldr	r2, [pc, #56]	; (8005594 <_DoInit+0xac>)
 800555a:	6810      	ldr	r0, [r2, #0]
 800555c:	6018      	str	r0, [r3, #0]
 800555e:	8891      	ldrh	r1, [r2, #4]
 8005560:	7992      	ldrb	r2, [r2, #6]
 8005562:	8099      	strh	r1, [r3, #4]
 8005564:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005566:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2220      	movs	r2, #32
 800556e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005570:	f3bf 8f5f 	dmb	sy
}
 8005574:	bf00      	nop
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	20012f5c 	.word	0x20012f5c
 8005584:	08008780 	.word	0x08008780
 8005588:	20013004 	.word	0x20013004
 800558c:	20013404 	.word	0x20013404
 8005590:	0800878c 	.word	0x0800878c
 8005594:	08008790 	.word	0x08008790

08005598 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80055a4:	2300      	movs	r3, #0
 80055a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d905      	bls.n	80055c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	627b      	str	r3, [r7, #36]	; 0x24
 80055c6:	e007      	b.n	80055d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689a      	ldr	r2, [r3, #8]
 80055cc:	69b9      	ldr	r1, [r7, #24]
 80055ce:	69fb      	ldr	r3, [r7, #28]
 80055d0:	1acb      	subs	r3, r1, r3
 80055d2:	4413      	add	r3, r2
 80055d4:	3b01      	subs	r3, #1
 80055d6:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055e2:	4293      	cmp	r3, r2
 80055e4:	bf28      	it	cs
 80055e6:	4613      	movcs	r3, r2
 80055e8:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80055ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	bf28      	it	cs
 80055f2:	4613      	movcs	r3, r2
 80055f4:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	685a      	ldr	r2, [r3, #4]
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	4413      	add	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	6978      	ldr	r0, [r7, #20]
 8005606:	f002 fa2d 	bl	8007a64 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800560a:	6a3a      	ldr	r2, [r7, #32]
 800560c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560e:	4413      	add	r3, r2
 8005610:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	4413      	add	r3, r2
 8005618:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005622:	69fa      	ldr	r2, [r7, #28]
 8005624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005626:	4413      	add	r3, r2
 8005628:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	429a      	cmp	r2, r3
 8005632:	d101      	bne.n	8005638 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005638:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	69fa      	ldr	r2, [r7, #28]
 8005640:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1b2      	bne.n	80055ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005648:	6a3b      	ldr	r3, [r7, #32]
}
 800564a:	4618      	mov	r0, r3
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005652:	b580      	push	{r7, lr}
 8005654:	b088      	sub	sp, #32
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	60b9      	str	r1, [r7, #8]
 800565c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	689a      	ldr	r2, [r3, #8]
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	1ad3      	subs	r3, r2, r3
 800566c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800566e:	69ba      	ldr	r2, [r7, #24]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	429a      	cmp	r2, r3
 8005674:	d911      	bls.n	800569a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	685a      	ldr	r2, [r3, #4]
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	4413      	add	r3, r2
 800567e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	68b9      	ldr	r1, [r7, #8]
 8005684:	6938      	ldr	r0, [r7, #16]
 8005686:	f002 f9ed 	bl	8007a64 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800568a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	441a      	add	r2, r3
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8005698:	e01f      	b.n	80056da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80056a8:	697a      	ldr	r2, [r7, #20]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	6938      	ldr	r0, [r7, #16]
 80056ae:	f002 f9d9 	bl	8007a64 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80056b2:	687a      	ldr	r2, [r7, #4]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	4413      	add	r3, r2
 80056c6:	697a      	ldr	r2, [r7, #20]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6938      	ldr	r0, [r7, #16]
 80056cc:	f002 f9ca 	bl	8007a64 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80056d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	60da      	str	r2, [r3, #12]
}
 80056da:	bf00      	nop
 80056dc:	3720      	adds	r7, #32
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80056e2:	b480      	push	{r7}
 80056e4:	b087      	sub	sp, #28
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	68db      	ldr	r3, [r3, #12]
 80056f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d808      	bhi.n	8005710 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689a      	ldr	r2, [r3, #8]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	1ad2      	subs	r2, r2, r3
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	3b01      	subs	r3, #1
 800570c:	617b      	str	r3, [r7, #20]
 800570e:	e004      	b.n	800571a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1ad3      	subs	r3, r2, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	617b      	str	r3, [r7, #20]
  }
  return r;
 800571a:	697b      	ldr	r3, [r7, #20]
}
 800571c:	4618      	mov	r0, r3
 800571e:	371c      	adds	r7, #28
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005728:	b580      	push	{r7, lr}
 800572a:	b08c      	sub	sp, #48	; 0x30
 800572c:	af00      	add	r7, sp, #0
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005734:	4b3e      	ldr	r3, [pc, #248]	; (8005830 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	6a3b      	ldr	r3, [r7, #32]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d101      	bne.n	8005746 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005742:	f7ff fed1 	bl	80054e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1c5a      	adds	r2, r3, #1
 800574a:	4613      	mov	r3, r2
 800574c:	005b      	lsls	r3, r3, #1
 800574e:	4413      	add	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4a37      	ldr	r2, [pc, #220]	; (8005830 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005754:	4413      	add	r3, r2
 8005756:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005768:	2300      	movs	r3, #0
 800576a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800576c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	429a      	cmp	r2, r3
 8005772:	d92b      	bls.n	80057cc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005774:	69fb      	ldr	r3, [r7, #28]
 8005776:	689a      	ldr	r2, [r3, #8]
 8005778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800577a:	1ad3      	subs	r3, r2, r3
 800577c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4293      	cmp	r3, r2
 8005784:	bf28      	it	cs
 8005786:	4613      	movcs	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005790:	4413      	add	r3, r2
 8005792:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	6939      	ldr	r1, [r7, #16]
 8005798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579a:	f002 f963 	bl	8007a64 <memcpy>
    NumBytesRead += NumBytesRem;
 800579e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	4413      	add	r3, r2
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4413      	add	r3, r2
 80057ac:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	4413      	add	r3, r2
 80057bc:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057c4:	429a      	cmp	r2, r3
 80057c6:	d101      	bne.n	80057cc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80057c8:	2300      	movs	r3, #0
 80057ca:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057d4:	697a      	ldr	r2, [r7, #20]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4293      	cmp	r3, r2
 80057da:	bf28      	it	cs
 80057dc:	4613      	movcs	r3, r2
 80057de:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d019      	beq.n	800581a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057e6:	69fb      	ldr	r3, [r7, #28]
 80057e8:	685a      	ldr	r2, [r3, #4]
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	4413      	add	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	6939      	ldr	r1, [r7, #16]
 80057f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057f6:	f002 f935 	bl	8007a64 <memcpy>
    NumBytesRead += NumBytesRem;
 80057fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	4413      	add	r3, r2
 8005800:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	4413      	add	r3, r2
 8005808:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	4413      	add	r3, r2
 8005818:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d002      	beq.n	8005826 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005820:	69fb      	ldr	r3, [r7, #28]
 8005822:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005824:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005828:	4618      	mov	r0, r3
 800582a:	3730      	adds	r7, #48	; 0x30
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	20012f5c 	.word	0x20012f5c

08005834 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b08c      	sub	sp, #48	; 0x30
 8005838:	af00      	add	r7, sp, #0
 800583a:	60f8      	str	r0, [r7, #12]
 800583c:	60b9      	str	r1, [r7, #8]
 800583e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005840:	4b3e      	ldr	r3, [pc, #248]	; (800593c <SEGGER_RTT_ReadNoLock+0x108>)
 8005842:	623b      	str	r3, [r7, #32]
 8005844:	6a3b      	ldr	r3, [r7, #32]
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	b2db      	uxtb	r3, r3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <SEGGER_RTT_ReadNoLock+0x1e>
 800584e:	f7ff fe4b 	bl	80054e8 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4613      	mov	r3, r2
 8005856:	005b      	lsls	r3, r3, #1
 8005858:	4413      	add	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	3360      	adds	r3, #96	; 0x60
 800585e:	4a37      	ldr	r2, [pc, #220]	; (800593c <SEGGER_RTT_ReadNoLock+0x108>)
 8005860:	4413      	add	r3, r2
 8005862:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	68db      	ldr	r3, [r3, #12]
 8005872:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005874:	2300      	movs	r3, #0
 8005876:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005878:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	429a      	cmp	r2, r3
 800587e:	d92b      	bls.n	80058d8 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	689a      	ldr	r2, [r3, #8]
 8005884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005886:	1ad3      	subs	r3, r2, r3
 8005888:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800588a:	697a      	ldr	r2, [r7, #20]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4293      	cmp	r3, r2
 8005890:	bf28      	it	cs
 8005892:	4613      	movcs	r3, r2
 8005894:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	685a      	ldr	r2, [r3, #4]
 800589a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589c:	4413      	add	r3, r2
 800589e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	6939      	ldr	r1, [r7, #16]
 80058a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058a6:	f002 f8dd 	bl	8007a64 <memcpy>
    NumBytesRead += NumBytesRem;
 80058aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	4413      	add	r3, r2
 80058b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80058b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	4413      	add	r3, r2
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80058c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	4413      	add	r3, r2
 80058c8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d101      	bne.n	80058d8 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80058d4:	2300      	movs	r3, #0
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80058d8:	69ba      	ldr	r2, [r7, #24]
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4293      	cmp	r3, r2
 80058e6:	bf28      	it	cs
 80058e8:	4613      	movcs	r3, r2
 80058ea:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d019      	beq.n	8005926 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f8:	4413      	add	r3, r2
 80058fa:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005902:	f002 f8af 	bl	8007a64 <memcpy>
    NumBytesRead += NumBytesRem;
 8005906:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	4413      	add	r3, r2
 800590c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800590e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	4413      	add	r3, r2
 8005914:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800591e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	4413      	add	r3, r2
 8005924:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005930:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005934:	4618      	mov	r0, r3
 8005936:	3730      	adds	r7, #48	; 0x30
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	20012f5c 	.word	0x20012f5c

08005940 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005950:	68fa      	ldr	r2, [r7, #12]
 8005952:	4613      	mov	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	4413      	add	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	3360      	adds	r3, #96	; 0x60
 800595c:	4a1f      	ldr	r2, [pc, #124]	; (80059dc <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800595e:	4413      	add	r3, r2
 8005960:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	2b02      	cmp	r3, #2
 8005968:	d029      	beq.n	80059be <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800596a:	2b02      	cmp	r3, #2
 800596c:	d82e      	bhi.n	80059cc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8005972:	2b01      	cmp	r3, #1
 8005974:	d013      	beq.n	800599e <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8005976:	e029      	b.n	80059cc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8005978:	6978      	ldr	r0, [r7, #20]
 800597a:	f7ff feb2 	bl	80056e2 <_GetAvailWriteSpace>
 800597e:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d202      	bcs.n	800598e <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8005988:	2300      	movs	r3, #0
 800598a:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800598c:	e021      	b.n	80059d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	69b9      	ldr	r1, [r7, #24]
 8005996:	6978      	ldr	r0, [r7, #20]
 8005998:	f7ff fe5b 	bl	8005652 <_WriteNoCheck>
    break;
 800599c:	e019      	b.n	80059d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800599e:	6978      	ldr	r0, [r7, #20]
 80059a0:	f7ff fe9f 	bl	80056e2 <_GetAvailWriteSpace>
 80059a4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	4293      	cmp	r3, r2
 80059ac:	bf28      	it	cs
 80059ae:	4613      	movcs	r3, r2
 80059b0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80059b2:	69fa      	ldr	r2, [r7, #28]
 80059b4:	69b9      	ldr	r1, [r7, #24]
 80059b6:	6978      	ldr	r0, [r7, #20]
 80059b8:	f7ff fe4b 	bl	8005652 <_WriteNoCheck>
    break;
 80059bc:	e009      	b.n	80059d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	69b9      	ldr	r1, [r7, #24]
 80059c2:	6978      	ldr	r0, [r7, #20]
 80059c4:	f7ff fde8 	bl	8005598 <_WriteBlocking>
 80059c8:	61f8      	str	r0, [r7, #28]
    break;
 80059ca:	e002      	b.n	80059d2 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80059cc:	2300      	movs	r3, #0
 80059ce:	61fb      	str	r3, [r7, #28]
    break;
 80059d0:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80059d2:	69fb      	ldr	r3, [r7, #28]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3720      	adds	r7, #32
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}
 80059dc:	20012f5c 	.word	0x20012f5c

080059e0 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 80059ec:	4b0e      	ldr	r3, [pc, #56]	; (8005a28 <SEGGER_RTT_WriteDownBuffer+0x48>)
 80059ee:	61fb      	str	r3, [r7, #28]
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <SEGGER_RTT_WriteDownBuffer+0x1e>
 80059fa:	f7ff fd75 	bl	80054e8 <_DoInit>
  SEGGER_RTT_LOCK();
 80059fe:	f3ef 8311 	mrs	r3, BASEPRI
 8005a02:	f04f 0120 	mov.w	r1, #32
 8005a06:	f381 8811 	msr	BASEPRI, r1
 8005a0a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005a0c:	687a      	ldr	r2, [r7, #4]
 8005a0e:	68b9      	ldr	r1, [r7, #8]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff ff95 	bl	8005940 <SEGGER_RTT_WriteDownBufferNoLock>
 8005a16:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005a18:	69bb      	ldr	r3, [r7, #24]
 8005a1a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20012f5c 	.word	0x20012f5c

08005a2c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a3a:	4b3d      	ldr	r3, [pc, #244]	; (8005b30 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a3c:	61bb      	str	r3, [r7, #24]
 8005a3e:	69bb      	ldr	r3, [r7, #24]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005a48:	f7ff fd4e 	bl	80054e8 <_DoInit>
  SEGGER_RTT_LOCK();
 8005a4c:	f3ef 8311 	mrs	r3, BASEPRI
 8005a50:	f04f 0120 	mov.w	r1, #32
 8005a54:	f381 8811 	msr	BASEPRI, r1
 8005a58:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a5a:	4b35      	ldr	r3, [pc, #212]	; (8005b30 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005a5c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005a62:	6939      	ldr	r1, [r7, #16]
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	1c5a      	adds	r2, r3, #1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	4413      	add	r3, r2
 8005a6e:	00db      	lsls	r3, r3, #3
 8005a70:	440b      	add	r3, r1
 8005a72:	3304      	adds	r3, #4
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	3301      	adds	r3, #1
 8005a7e:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	69fa      	ldr	r2, [r7, #28]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	dbeb      	blt.n	8005a62 <SEGGER_RTT_AllocUpBuffer+0x36>
 8005a8a:	e000      	b.n	8005a8e <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005a8c:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	da3f      	bge.n	8005b18 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005a98:	6939      	ldr	r1, [r7, #16]
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	440b      	add	r3, r1
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005aac:	6939      	ldr	r1, [r7, #16]
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	1c5a      	adds	r2, r3, #1
 8005ab2:	4613      	mov	r3, r2
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	4413      	add	r3, r2
 8005ab8:	00db      	lsls	r3, r3, #3
 8005aba:	440b      	add	r3, r1
 8005abc:	3304      	adds	r3, #4
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8005ac2:	6939      	ldr	r1, [r7, #16]
 8005ac4:	69fa      	ldr	r2, [r7, #28]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	4413      	add	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	440b      	add	r3, r1
 8005ad0:	3320      	adds	r3, #32
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005ad6:	6939      	ldr	r1, [r7, #16]
 8005ad8:	69fa      	ldr	r2, [r7, #28]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	440b      	add	r3, r1
 8005ae4:	3328      	adds	r3, #40	; 0x28
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005aea:	6939      	ldr	r1, [r7, #16]
 8005aec:	69fa      	ldr	r2, [r7, #28]
 8005aee:	4613      	mov	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	4413      	add	r3, r2
 8005af4:	00db      	lsls	r3, r3, #3
 8005af6:	440b      	add	r3, r1
 8005af8:	3324      	adds	r3, #36	; 0x24
 8005afa:	2200      	movs	r2, #0
 8005afc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005afe:	6939      	ldr	r1, [r7, #16]
 8005b00:	69fa      	ldr	r2, [r7, #28]
 8005b02:	4613      	mov	r3, r2
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	4413      	add	r3, r2
 8005b08:	00db      	lsls	r3, r3, #3
 8005b0a:	440b      	add	r3, r1
 8005b0c:	332c      	adds	r3, #44	; 0x2c
 8005b0e:	683a      	ldr	r2, [r7, #0]
 8005b10:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b12:	f3bf 8f5f 	dmb	sy
 8005b16:	e002      	b.n	8005b1e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005b18:	f04f 33ff 	mov.w	r3, #4294967295
 8005b1c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005b24:	69fb      	ldr	r3, [r7, #28]
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3720      	adds	r7, #32
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20012f5c 	.word	0x20012f5c

08005b34 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005b42:	4b33      	ldr	r3, [pc, #204]	; (8005c10 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005b44:	61bb      	str	r3, [r7, #24]
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005b50:	f7ff fcca 	bl	80054e8 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005b54:	4b2e      	ldr	r3, [pc, #184]	; (8005c10 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005b56:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	695b      	ldr	r3, [r3, #20]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d24d      	bcs.n	8005c00 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005b64:	f3ef 8311 	mrs	r3, BASEPRI
 8005b68:	f04f 0120 	mov.w	r1, #32
 8005b6c:	f381 8811 	msr	BASEPRI, r1
 8005b70:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d031      	beq.n	8005bdc <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005b78:	6979      	ldr	r1, [r7, #20]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	4413      	add	r3, r2
 8005b82:	00db      	lsls	r3, r3, #3
 8005b84:	440b      	add	r3, r1
 8005b86:	3360      	adds	r3, #96	; 0x60
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005b8c:	6979      	ldr	r1, [r7, #20]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4613      	mov	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	4413      	add	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	440b      	add	r3, r1
 8005b9a:	3364      	adds	r3, #100	; 0x64
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005ba0:	6979      	ldr	r1, [r7, #20]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	4413      	add	r3, r2
 8005baa:	00db      	lsls	r3, r3, #3
 8005bac:	440b      	add	r3, r1
 8005bae:	3368      	adds	r3, #104	; 0x68
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005bb4:	6979      	ldr	r1, [r7, #20]
 8005bb6:	68fa      	ldr	r2, [r7, #12]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	00db      	lsls	r3, r3, #3
 8005bc0:	440b      	add	r3, r1
 8005bc2:	3370      	adds	r3, #112	; 0x70
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005bc8:	6979      	ldr	r1, [r7, #20]
 8005bca:	68fa      	ldr	r2, [r7, #12]
 8005bcc:	4613      	mov	r3, r2
 8005bce:	005b      	lsls	r3, r3, #1
 8005bd0:	4413      	add	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	440b      	add	r3, r1
 8005bd6:	336c      	adds	r3, #108	; 0x6c
 8005bd8:	2200      	movs	r2, #0
 8005bda:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005bdc:	6979      	ldr	r1, [r7, #20]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4613      	mov	r3, r2
 8005be2:	005b      	lsls	r3, r3, #1
 8005be4:	4413      	add	r3, r2
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	440b      	add	r3, r1
 8005bea:	3374      	adds	r3, #116	; 0x74
 8005bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bee:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005bf0:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	61fb      	str	r3, [r7, #28]
 8005bfe:	e002      	b.n	8005c06 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005c00:	f04f 33ff 	mov.w	r3, #4294967295
 8005c04:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005c06:	69fb      	ldr	r3, [r7, #28]
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3720      	adds	r7, #32
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}
 8005c10:	20012f5c 	.word	0x20012f5c

08005c14 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005c20:	2300      	movs	r3, #0
 8005c22:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005c24:	e002      	b.n	8005c2c <_EncodeStr+0x18>
    Len++;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005c2c:	68ba      	ldr	r2, [r7, #8]
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	4413      	add	r3, r2
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1f6      	bne.n	8005c26 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d901      	bls.n	8005c44 <_EncodeStr+0x30>
    Len = Limit;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	2bfe      	cmp	r3, #254	; 0xfe
 8005c48:	d806      	bhi.n	8005c58 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	1c5a      	adds	r2, r3, #1
 8005c4e:	60fa      	str	r2, [r7, #12]
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]
 8005c56:	e011      	b.n	8005c7c <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	60fa      	str	r2, [r7, #12]
 8005c5e:	22ff      	movs	r2, #255	; 0xff
 8005c60:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	60fa      	str	r2, [r7, #12]
 8005c68:	693a      	ldr	r2, [r7, #16]
 8005c6a:	b2d2      	uxtb	r2, r2
 8005c6c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	0a19      	lsrs	r1, r3, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	1c5a      	adds	r2, r3, #1
 8005c76:	60fa      	str	r2, [r7, #12]
 8005c78:	b2ca      	uxtb	r2, r1
 8005c7a:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c80:	e00a      	b.n	8005c98 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	1c53      	adds	r3, r2, #1
 8005c86:	60bb      	str	r3, [r7, #8]
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	60f9      	str	r1, [r7, #12]
 8005c8e:	7812      	ldrb	r2, [r2, #0]
 8005c90:	701a      	strb	r2, [r3, #0]
    n++;
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	3301      	adds	r3, #1
 8005c96:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d3f0      	bcc.n	8005c82 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	371c      	adds	r7, #28
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	3304      	adds	r3, #4
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	370c      	adds	r7, #12
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc4:	4770      	bx	lr
	...

08005cc8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b082      	sub	sp, #8
 8005ccc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cce:	4b35      	ldr	r3, [pc, #212]	; (8005da4 <_HandleIncomingPacket+0xdc>)
 8005cd0:	7e1b      	ldrb	r3, [r3, #24]
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	1cfb      	adds	r3, r7, #3
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4619      	mov	r1, r3
 8005cda:	f7ff fdab 	bl	8005834 <SEGGER_RTT_ReadNoLock>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	dd59      	ble.n	8005d9c <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	2b80      	cmp	r3, #128	; 0x80
 8005cec:	d032      	beq.n	8005d54 <_HandleIncomingPacket+0x8c>
 8005cee:	2b80      	cmp	r3, #128	; 0x80
 8005cf0:	dc42      	bgt.n	8005d78 <_HandleIncomingPacket+0xb0>
 8005cf2:	2b07      	cmp	r3, #7
 8005cf4:	dc16      	bgt.n	8005d24 <_HandleIncomingPacket+0x5c>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	dd3e      	ble.n	8005d78 <_HandleIncomingPacket+0xb0>
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	2b06      	cmp	r3, #6
 8005cfe:	d83b      	bhi.n	8005d78 <_HandleIncomingPacket+0xb0>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <_HandleIncomingPacket+0x40>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d2b 	.word	0x08005d2b
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d37 	.word	0x08005d37
 8005d14:	08005d3d 	.word	0x08005d3d
 8005d18:	08005d43 	.word	0x08005d43
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d4f 	.word	0x08005d4f
 8005d24:	2b7f      	cmp	r3, #127	; 0x7f
 8005d26:	d034      	beq.n	8005d92 <_HandleIncomingPacket+0xca>
 8005d28:	e026      	b.n	8005d78 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005d2a:	f000 ff3f 	bl	8006bac <SEGGER_SYSVIEW_Start>
      break;
 8005d2e:	e035      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005d30:	f000 fff6 	bl	8006d20 <SEGGER_SYSVIEW_Stop>
      break;
 8005d34:	e032      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005d36:	f001 f9cf 	bl	80070d8 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005d3a:	e02f      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005d3c:	f001 f994 	bl	8007068 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005d40:	e02c      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005d42:	f001 f813 	bl	8006d6c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005d46:	e029      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005d48:	f001 fc02 	bl	8007550 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005d4c:	e026      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005d4e:	f001 fbe1 	bl	8007514 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005d52:	e023      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <_HandleIncomingPacket+0xdc>)
 8005d56:	7e1b      	ldrb	r3, [r3, #24]
 8005d58:	4618      	mov	r0, r3
 8005d5a:	1cfb      	adds	r3, r7, #3
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	4619      	mov	r1, r3
 8005d60:	f7ff fd68 	bl	8005834 <SEGGER_RTT_ReadNoLock>
 8005d64:	4603      	mov	r3, r0
 8005d66:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	dd13      	ble.n	8005d96 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f001 fb4f 	bl	8007414 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005d76:	e00e      	b.n	8005d96 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005d78:	78fb      	ldrb	r3, [r7, #3]
 8005d7a:	b25b      	sxtb	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	da0c      	bge.n	8005d9a <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005d80:	4b08      	ldr	r3, [pc, #32]	; (8005da4 <_HandleIncomingPacket+0xdc>)
 8005d82:	7e1b      	ldrb	r3, [r3, #24]
 8005d84:	4618      	mov	r0, r3
 8005d86:	1cfb      	adds	r3, r7, #3
 8005d88:	2201      	movs	r2, #1
 8005d8a:	4619      	mov	r1, r3
 8005d8c:	f7ff fd52 	bl	8005834 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005d90:	e003      	b.n	8005d9a <_HandleIncomingPacket+0xd2>
      break;
 8005d92:	bf00      	nop
 8005d94:	e002      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
      break;
 8005d96:	bf00      	nop
 8005d98:	e000      	b.n	8005d9c <_HandleIncomingPacket+0xd4>
      break;
 8005d9a:	bf00      	nop
    }
  }
}
 8005d9c:	bf00      	nop
 8005d9e:	3708      	adds	r7, #8
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd80      	pop	{r7, pc}
 8005da4:	2001441c 	.word	0x2001441c

08005da8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b08c      	sub	sp, #48	; 0x30
 8005dac:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005dae:	2301      	movs	r3, #1
 8005db0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005db2:	1d3b      	adds	r3, r7, #4
 8005db4:	3301      	adds	r3, #1
 8005db6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dbc:	4b31      	ldr	r3, [pc, #196]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc2:	e00b      	b.n	8005ddc <_TrySendOverflowPacket+0x34>
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dca:	1c59      	adds	r1, r3, #1
 8005dcc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd8:	09db      	lsrs	r3, r3, #7
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b7f      	cmp	r3, #127	; 0x7f
 8005de0:	d8f0      	bhi.n	8005dc4 <_TrySendOverflowPacket+0x1c>
 8005de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005df0:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005df2:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <_TrySendOverflowPacket+0xe0>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005df8:	4b22      	ldr	r3, [pc, #136]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005dfa:	68db      	ldr	r3, [r3, #12]
 8005dfc:	69ba      	ldr	r2, [r7, #24]
 8005dfe:	1ad3      	subs	r3, r2, r3
 8005e00:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005e02:	69fb      	ldr	r3, [r7, #28]
 8005e04:	627b      	str	r3, [r7, #36]	; 0x24
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	623b      	str	r3, [r7, #32]
 8005e0a:	e00b      	b.n	8005e24 <_TrySendOverflowPacket+0x7c>
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	1c59      	adds	r1, r3, #1
 8005e14:	6279      	str	r1, [r7, #36]	; 0x24
 8005e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e1a:	b2d2      	uxtb	r2, r2
 8005e1c:	701a      	strb	r2, [r3, #0]
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	09db      	lsrs	r3, r3, #7
 8005e22:	623b      	str	r3, [r7, #32]
 8005e24:	6a3b      	ldr	r3, [r7, #32]
 8005e26:	2b7f      	cmp	r3, #127	; 0x7f
 8005e28:	d8f0      	bhi.n	8005e0c <_TrySendOverflowPacket+0x64>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	1c5a      	adds	r2, r3, #1
 8005e2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005e30:	6a3a      	ldr	r2, [r7, #32]
 8005e32:	b2d2      	uxtb	r2, r2
 8005e34:	701a      	strb	r2, [r3, #0]
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005e3a:	4b12      	ldr	r3, [pc, #72]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005e3c:	785b      	ldrb	r3, [r3, #1]
 8005e3e:	4618      	mov	r0, r3
 8005e40:	1d3b      	adds	r3, r7, #4
 8005e42:	69fa      	ldr	r2, [r7, #28]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	461a      	mov	r2, r3
 8005e48:	1d3b      	adds	r3, r7, #4
 8005e4a:	4619      	mov	r1, r3
 8005e4c:	f7fa f9c0 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005e50:	4603      	mov	r3, r0
 8005e52:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d009      	beq.n	8005e6e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	3b01      	subs	r3, #1
 8005e66:	b2da      	uxtb	r2, r3
 8005e68:	4b06      	ldr	r3, [pc, #24]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005e6a:	701a      	strb	r2, [r3, #0]
 8005e6c:	e004      	b.n	8005e78 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005e6e:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	3301      	adds	r3, #1
 8005e74:	4a03      	ldr	r2, [pc, #12]	; (8005e84 <_TrySendOverflowPacket+0xdc>)
 8005e76:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005e78:	693b      	ldr	r3, [r7, #16]
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3730      	adds	r7, #48	; 0x30
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	2001441c 	.word	0x2001441c
 8005e88:	e0001004 	.word	0xe0001004

08005e8c <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b08a      	sub	sp, #40	; 0x28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005e98:	4b6c      	ldr	r3, [pc, #432]	; (800604c <_SendPacket+0x1c0>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d010      	beq.n	8005ec2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005ea0:	4b6a      	ldr	r3, [pc, #424]	; (800604c <_SendPacket+0x1c0>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80a3 	beq.w	8005ff0 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005eaa:	4b68      	ldr	r3, [pc, #416]	; (800604c <_SendPacket+0x1c0>)
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b02      	cmp	r3, #2
 8005eb0:	d109      	bne.n	8005ec6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005eb2:	f7ff ff79 	bl	8005da8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005eb6:	4b65      	ldr	r3, [pc, #404]	; (800604c <_SendPacket+0x1c0>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	f040 809a 	bne.w	8005ff4 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005ec0:	e001      	b.n	8005ec6 <_SendPacket+0x3a>
    goto Send;
 8005ec2:	bf00      	nop
 8005ec4:	e000      	b.n	8005ec8 <_SendPacket+0x3c>
Send:
 8005ec6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b1f      	cmp	r3, #31
 8005ecc:	d809      	bhi.n	8005ee2 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005ece:	4b5f      	ldr	r3, [pc, #380]	; (800604c <_SendPacket+0x1c0>)
 8005ed0:	69da      	ldr	r2, [r3, #28]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ed8:	f003 0301 	and.w	r3, r3, #1
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 808b 	bne.w	8005ff8 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b17      	cmp	r3, #23
 8005ee6:	d807      	bhi.n	8005ef8 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	701a      	strb	r2, [r3, #0]
 8005ef6:	e03d      	b.n	8005f74 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	2b7f      	cmp	r3, #127	; 0x7f
 8005f04:	d912      	bls.n	8005f2c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	09da      	lsrs	r2, r3, #7
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	60fb      	str	r3, [r7, #12]
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	3a01      	subs	r2, #1
 8005f1e:	60fa      	str	r2, [r7, #12]
 8005f20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	e006      	b.n	8005f3a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3b01      	subs	r3, #1
 8005f30:	60fb      	str	r3, [r7, #12]
 8005f32:	69fb      	ldr	r3, [r7, #28]
 8005f34:	b2da      	uxtb	r2, r3
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f3e:	d912      	bls.n	8005f66 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	09da      	lsrs	r2, r3, #7
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	3b01      	subs	r3, #1
 8005f48:	60fb      	str	r3, [r7, #12]
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	3a01      	subs	r2, #1
 8005f58:	60fa      	str	r2, [r7, #12]
 8005f5a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	e006      	b.n	8005f74 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	60fb      	str	r3, [r7, #12]
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	b2da      	uxtb	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f74:	4b36      	ldr	r3, [pc, #216]	; (8006050 <_SendPacket+0x1c4>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005f7a:	4b34      	ldr	r3, [pc, #208]	; (800604c <_SendPacket+0x1c0>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	69ba      	ldr	r2, [r7, #24]
 8005f80:	1ad3      	subs	r3, r2, r3
 8005f82:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	627b      	str	r3, [r7, #36]	; 0x24
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	623b      	str	r3, [r7, #32]
 8005f8c:	e00b      	b.n	8005fa6 <_SendPacket+0x11a>
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	b2da      	uxtb	r2, r3
 8005f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f94:	1c59      	adds	r1, r3, #1
 8005f96:	6279      	str	r1, [r7, #36]	; 0x24
 8005f98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f9c:	b2d2      	uxtb	r2, r2
 8005f9e:	701a      	strb	r2, [r3, #0]
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	09db      	lsrs	r3, r3, #7
 8005fa4:	623b      	str	r3, [r7, #32]
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	2b7f      	cmp	r3, #127	; 0x7f
 8005faa:	d8f0      	bhi.n	8005f8e <_SendPacket+0x102>
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	627a      	str	r2, [r7, #36]	; 0x24
 8005fb2:	6a3a      	ldr	r2, [r7, #32]
 8005fb4:	b2d2      	uxtb	r2, r2
 8005fb6:	701a      	strb	r2, [r3, #0]
 8005fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fba:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005fbc:	4b23      	ldr	r3, [pc, #140]	; (800604c <_SendPacket+0x1c0>)
 8005fbe:	785b      	ldrb	r3, [r3, #1]
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	68ba      	ldr	r2, [r7, #8]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	461a      	mov	r2, r3
 8005fca:	68f9      	ldr	r1, [r7, #12]
 8005fcc:	f7fa f900 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005fda:	4a1c      	ldr	r2, [pc, #112]	; (800604c <_SendPacket+0x1c0>)
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	60d3      	str	r3, [r2, #12]
 8005fe0:	e00b      	b.n	8005ffa <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005fe2:	4b1a      	ldr	r3, [pc, #104]	; (800604c <_SendPacket+0x1c0>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	4b18      	ldr	r3, [pc, #96]	; (800604c <_SendPacket+0x1c0>)
 8005fec:	701a      	strb	r2, [r3, #0]
 8005fee:	e004      	b.n	8005ffa <_SendPacket+0x16e>
    goto SendDone;
 8005ff0:	bf00      	nop
 8005ff2:	e002      	b.n	8005ffa <_SendPacket+0x16e>
      goto SendDone;
 8005ff4:	bf00      	nop
 8005ff6:	e000      	b.n	8005ffa <_SendPacket+0x16e>
      goto SendDone;
 8005ff8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005ffa:	4b14      	ldr	r3, [pc, #80]	; (800604c <_SendPacket+0x1c0>)
 8005ffc:	7e1b      	ldrb	r3, [r3, #24]
 8005ffe:	4619      	mov	r1, r3
 8006000:	4a14      	ldr	r2, [pc, #80]	; (8006054 <_SendPacket+0x1c8>)
 8006002:	460b      	mov	r3, r1
 8006004:	005b      	lsls	r3, r3, #1
 8006006:	440b      	add	r3, r1
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	336c      	adds	r3, #108	; 0x6c
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	4b0e      	ldr	r3, [pc, #56]	; (800604c <_SendPacket+0x1c0>)
 8006012:	7e1b      	ldrb	r3, [r3, #24]
 8006014:	4618      	mov	r0, r3
 8006016:	490f      	ldr	r1, [pc, #60]	; (8006054 <_SendPacket+0x1c8>)
 8006018:	4603      	mov	r3, r0
 800601a:	005b      	lsls	r3, r3, #1
 800601c:	4403      	add	r3, r0
 800601e:	00db      	lsls	r3, r3, #3
 8006020:	440b      	add	r3, r1
 8006022:	3370      	adds	r3, #112	; 0x70
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d00b      	beq.n	8006042 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800602a:	4b08      	ldr	r3, [pc, #32]	; (800604c <_SendPacket+0x1c0>)
 800602c:	789b      	ldrb	r3, [r3, #2]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d107      	bne.n	8006042 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006032:	4b06      	ldr	r3, [pc, #24]	; (800604c <_SendPacket+0x1c0>)
 8006034:	2201      	movs	r2, #1
 8006036:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006038:	f7ff fe46 	bl	8005cc8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800603c:	4b03      	ldr	r3, [pc, #12]	; (800604c <_SendPacket+0x1c0>)
 800603e:	2200      	movs	r2, #0
 8006040:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8006042:	bf00      	nop
 8006044:	3728      	adds	r7, #40	; 0x28
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	2001441c 	.word	0x2001441c
 8006050:	e0001004 	.word	0xe0001004
 8006054:	20012f5c 	.word	0x20012f5c

08006058 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8006058:	b580      	push	{r7, lr}
 800605a:	b08a      	sub	sp, #40	; 0x28
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	460b      	mov	r3, r1
 8006062:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	691b      	ldr	r3, [r3, #16]
 8006068:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	3301      	adds	r3, #1
 800606e:	2b80      	cmp	r3, #128	; 0x80
 8006070:	d80a      	bhi.n	8006088 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	1c59      	adds	r1, r3, #1
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	6051      	str	r1, [r2, #4]
 800607c:	78fa      	ldrb	r2, [r7, #3]
 800607e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b80      	cmp	r3, #128	; 0x80
 800608e:	d15a      	bne.n	8006146 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	627b      	str	r3, [r7, #36]	; 0x24
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	623b      	str	r3, [r7, #32]
 80060b0:	e00b      	b.n	80060ca <_StoreChar+0x72>
 80060b2:	6a3b      	ldr	r3, [r7, #32]
 80060b4:	b2da      	uxtb	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	1c59      	adds	r1, r3, #1
 80060ba:	6279      	str	r1, [r7, #36]	; 0x24
 80060bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060c0:	b2d2      	uxtb	r2, r2
 80060c2:	701a      	strb	r2, [r3, #0]
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	09db      	lsrs	r3, r3, #7
 80060c8:	623b      	str	r3, [r7, #32]
 80060ca:	6a3b      	ldr	r3, [r7, #32]
 80060cc:	2b7f      	cmp	r3, #127	; 0x7f
 80060ce:	d8f0      	bhi.n	80060b2 <_StoreChar+0x5a>
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	1c5a      	adds	r2, r3, #1
 80060d4:	627a      	str	r2, [r7, #36]	; 0x24
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	b2d2      	uxtb	r2, r2
 80060da:	701a      	strb	r2, [r3, #0]
 80060dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060de:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	61fb      	str	r3, [r7, #28]
 80060e4:	2300      	movs	r3, #0
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e00b      	b.n	8006102 <_StoreChar+0xaa>
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	1c59      	adds	r1, r3, #1
 80060f2:	61f9      	str	r1, [r7, #28]
 80060f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060f8:	b2d2      	uxtb	r2, r2
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	09db      	lsrs	r3, r3, #7
 8006100:	61bb      	str	r3, [r7, #24]
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	2b7f      	cmp	r3, #127	; 0x7f
 8006106:	d8f0      	bhi.n	80060ea <_StoreChar+0x92>
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	1c5a      	adds	r2, r3, #1
 800610c:	61fa      	str	r2, [r7, #28]
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	b2d2      	uxtb	r2, r2
 8006112:	701a      	strb	r2, [r3, #0]
 8006114:	69fb      	ldr	r3, [r7, #28]
 8006116:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	221a      	movs	r2, #26
 800611e:	6939      	ldr	r1, [r7, #16]
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff feb3 	bl	8005e8c <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fdbf 	bl	8005cae <_PreparePacket>
 8006130:	4602      	mov	r2, r0
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	1c5a      	adds	r2, r3, #1
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	611a      	str	r2, [r3, #16]
  }
}
 8006146:	bf00      	nop
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
	...

08006150 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b08a      	sub	sp, #40	; 0x28
 8006154:	af00      	add	r7, sp, #0
 8006156:	60f8      	str	r0, [r7, #12]
 8006158:	60b9      	str	r1, [r7, #8]
 800615a:	607a      	str	r2, [r7, #4]
 800615c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006162:	2301      	movs	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006166:	2301      	movs	r3, #1
 8006168:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800616a:	e007      	b.n	800617c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	fbb2 f3f3 	udiv	r3, r2, r3
 8006174:	623b      	str	r3, [r7, #32]
    Width++;
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	3301      	adds	r3, #1
 800617a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800617c:	6a3a      	ldr	r2, [r7, #32]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	429a      	cmp	r2, r3
 8006182:	d2f3      	bcs.n	800616c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8006184:	683a      	ldr	r2, [r7, #0]
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	429a      	cmp	r2, r3
 800618a:	d901      	bls.n	8006190 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8006190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d11f      	bne.n	80061da <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 800619a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619c:	2b00      	cmp	r3, #0
 800619e:	d01c      	beq.n	80061da <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80061a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061a2:	f003 0302 	and.w	r3, r3, #2
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d005      	beq.n	80061b6 <_PrintUnsigned+0x66>
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d102      	bne.n	80061b6 <_PrintUnsigned+0x66>
        c = '0';
 80061b0:	2330      	movs	r3, #48	; 0x30
 80061b2:	76fb      	strb	r3, [r7, #27]
 80061b4:	e001      	b.n	80061ba <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80061b6:	2320      	movs	r3, #32
 80061b8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061ba:	e007      	b.n	80061cc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80061bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061be:	3b01      	subs	r3, #1
 80061c0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80061c2:	7efb      	ldrb	r3, [r7, #27]
 80061c4:	4619      	mov	r1, r3
 80061c6:	68f8      	ldr	r0, [r7, #12]
 80061c8:	f7ff ff46 	bl	8006058 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80061cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <_PrintUnsigned+0x8a>
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3f0      	bcc.n	80061bc <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d903      	bls.n	80061e8 <_PrintUnsigned+0x98>
      NumDigits--;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	3b01      	subs	r3, #1
 80061e4:	603b      	str	r3, [r7, #0]
 80061e6:	e009      	b.n	80061fc <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f0:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	429a      	cmp	r2, r3
 80061f8:	d200      	bcs.n	80061fc <_PrintUnsigned+0xac>
        break;
 80061fa:	e005      	b.n	8006208 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	fb02 f303 	mul.w	r3, r2, r3
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006206:	e7e8      	b.n	80061da <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006210:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	fb02 f303 	mul.w	r3, r2, r3
 800621a:	68ba      	ldr	r2, [r7, #8]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006220:	4a15      	ldr	r2, [pc, #84]	; (8006278 <_PrintUnsigned+0x128>)
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	4619      	mov	r1, r3
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	f7ff ff14 	bl	8006058 <_StoreChar>
    Digit /= Base;
 8006230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	fbb2 f3f3 	udiv	r3, r2, r3
 8006238:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1e3      	bne.n	8006208 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006242:	f003 0301 	and.w	r3, r3, #1
 8006246:	2b00      	cmp	r3, #0
 8006248:	d011      	beq.n	800626e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2b00      	cmp	r3, #0
 800624e:	d00e      	beq.n	800626e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006250:	e006      	b.n	8006260 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	3b01      	subs	r3, #1
 8006256:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006258:	2120      	movs	r1, #32
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff fefc 	bl	8006058 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006262:	2b00      	cmp	r3, #0
 8006264:	d003      	beq.n	800626e <_PrintUnsigned+0x11e>
 8006266:	69fa      	ldr	r2, [r7, #28]
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	429a      	cmp	r2, r3
 800626c:	d3f1      	bcc.n	8006252 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800626e:	bf00      	nop
 8006270:	3728      	adds	r7, #40	; 0x28
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	0800881c 	.word	0x0800881c

0800627c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b088      	sub	sp, #32
 8006280:	af02      	add	r7, sp, #8
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	bfb8      	it	lt
 8006290:	425b      	neglt	r3, r3
 8006292:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8006294:	2301      	movs	r3, #1
 8006296:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8006298:	e007      	b.n	80062aa <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	fb92 f3f3 	sdiv	r3, r2, r3
 80062a2:	613b      	str	r3, [r7, #16]
    Width++;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	3301      	adds	r3, #1
 80062a8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	429a      	cmp	r2, r3
 80062b0:	daf3      	bge.n	800629a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d901      	bls.n	80062be <_PrintInt+0x42>
    Width = NumDigits;
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80062be:	6a3b      	ldr	r3, [r7, #32]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d00a      	beq.n	80062da <_PrintInt+0x5e>
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	db04      	blt.n	80062d4 <_PrintInt+0x58>
 80062ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062cc:	f003 0304 	and.w	r3, r3, #4
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d002      	beq.n	80062da <_PrintInt+0x5e>
    FieldWidth--;
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	3b01      	subs	r3, #1
 80062d8:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80062da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062dc:	f003 0302 	and.w	r3, r3, #2
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d002      	beq.n	80062ea <_PrintInt+0x6e>
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d016      	beq.n	8006318 <_PrintInt+0x9c>
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d111      	bne.n	8006318 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80062f4:	6a3b      	ldr	r3, [r7, #32]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d00e      	beq.n	8006318 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062fa:	e006      	b.n	800630a <_PrintInt+0x8e>
        FieldWidth--;
 80062fc:	6a3b      	ldr	r3, [r7, #32]
 80062fe:	3b01      	subs	r3, #1
 8006300:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006302:	2120      	movs	r1, #32
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f7ff fea7 	bl	8006058 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d003      	beq.n	8006318 <_PrintInt+0x9c>
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	429a      	cmp	r2, r3
 8006316:	d3f1      	bcc.n	80062fc <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	da07      	bge.n	800632e <_PrintInt+0xb2>
    v = -v;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	425b      	negs	r3, r3
 8006322:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006324:	212d      	movs	r1, #45	; 0x2d
 8006326:	68f8      	ldr	r0, [r7, #12]
 8006328:	f7ff fe96 	bl	8006058 <_StoreChar>
 800632c:	e008      	b.n	8006340 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800632e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d003      	beq.n	8006340 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006338:	212b      	movs	r1, #43	; 0x2b
 800633a:	68f8      	ldr	r0, [r7, #12]
 800633c:	f7ff fe8c 	bl	8006058 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d019      	beq.n	800637e <_PrintInt+0x102>
 800634a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d114      	bne.n	800637e <_PrintInt+0x102>
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d111      	bne.n	800637e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800635a:	6a3b      	ldr	r3, [r7, #32]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00e      	beq.n	800637e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006360:	e006      	b.n	8006370 <_PrintInt+0xf4>
        FieldWidth--;
 8006362:	6a3b      	ldr	r3, [r7, #32]
 8006364:	3b01      	subs	r3, #1
 8006366:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006368:	2130      	movs	r1, #48	; 0x30
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f7ff fe74 	bl	8006058 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006370:	6a3b      	ldr	r3, [r7, #32]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d003      	beq.n	800637e <_PrintInt+0x102>
 8006376:	697a      	ldr	r2, [r7, #20]
 8006378:	6a3b      	ldr	r3, [r7, #32]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3f1      	bcc.n	8006362 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 800637e:	68b9      	ldr	r1, [r7, #8]
 8006380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006382:	9301      	str	r3, [sp, #4]
 8006384:	6a3b      	ldr	r3, [r7, #32]
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	687a      	ldr	r2, [r7, #4]
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7ff fedf 	bl	8006150 <_PrintUnsigned>
}
 8006392:	bf00      	nop
 8006394:	3718      	adds	r7, #24
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 800639c:	b580      	push	{r7, lr}
 800639e:	b098      	sub	sp, #96	; 0x60
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80063a8:	f3ef 8311 	mrs	r3, BASEPRI
 80063ac:	f04f 0120 	mov.w	r1, #32
 80063b0:	f381 8811 	msr	BASEPRI, r1
 80063b4:	633b      	str	r3, [r7, #48]	; 0x30
 80063b6:	48b7      	ldr	r0, [pc, #732]	; (8006694 <_VPrintTarget+0x2f8>)
 80063b8:	f7ff fc79 	bl	8005cae <_PreparePacket>
 80063bc:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80063be:	4bb5      	ldr	r3, [pc, #724]	; (8006694 <_VPrintTarget+0x2f8>)
 80063c0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80063c2:	2300      	movs	r3, #0
 80063c4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80063c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3301      	adds	r3, #1
 80063ce:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3301      	adds	r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80063e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	f000 8183 	beq.w	80066f2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80063ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063f0:	2b25      	cmp	r3, #37	; 0x25
 80063f2:	f040 8170 	bne.w	80066d6 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80063f6:	2300      	movs	r3, #0
 80063f8:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80063fa:	2301      	movs	r3, #1
 80063fc:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	781b      	ldrb	r3, [r3, #0]
 8006402:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006406:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800640a:	3b23      	subs	r3, #35	; 0x23
 800640c:	2b0d      	cmp	r3, #13
 800640e:	d83f      	bhi.n	8006490 <_VPrintTarget+0xf4>
 8006410:	a201      	add	r2, pc, #4	; (adr r2, 8006418 <_VPrintTarget+0x7c>)
 8006412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006416:	bf00      	nop
 8006418:	08006481 	.word	0x08006481
 800641c:	08006491 	.word	0x08006491
 8006420:	08006491 	.word	0x08006491
 8006424:	08006491 	.word	0x08006491
 8006428:	08006491 	.word	0x08006491
 800642c:	08006491 	.word	0x08006491
 8006430:	08006491 	.word	0x08006491
 8006434:	08006491 	.word	0x08006491
 8006438:	08006471 	.word	0x08006471
 800643c:	08006491 	.word	0x08006491
 8006440:	08006451 	.word	0x08006451
 8006444:	08006491 	.word	0x08006491
 8006448:	08006491 	.word	0x08006491
 800644c:	08006461 	.word	0x08006461
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006452:	f043 0301 	orr.w	r3, r3, #1
 8006456:	64bb      	str	r3, [r7, #72]	; 0x48
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3301      	adds	r3, #1
 800645c:	60fb      	str	r3, [r7, #12]
 800645e:	e01a      	b.n	8006496 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006462:	f043 0302 	orr.w	r3, r3, #2
 8006466:	64bb      	str	r3, [r7, #72]	; 0x48
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	3301      	adds	r3, #1
 800646c:	60fb      	str	r3, [r7, #12]
 800646e:	e012      	b.n	8006496 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006470:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006472:	f043 0304 	orr.w	r3, r3, #4
 8006476:	64bb      	str	r3, [r7, #72]	; 0x48
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	3301      	adds	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
 800647e:	e00a      	b.n	8006496 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8006480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006482:	f043 0308 	orr.w	r3, r3, #8
 8006486:	64bb      	str	r3, [r7, #72]	; 0x48
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3301      	adds	r3, #1
 800648c:	60fb      	str	r3, [r7, #12]
 800648e:	e002      	b.n	8006496 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8006490:	2300      	movs	r3, #0
 8006492:	653b      	str	r3, [r7, #80]	; 0x50
 8006494:	bf00      	nop
        }
      } while (v);
 8006496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006498:	2b00      	cmp	r3, #0
 800649a:	d1b0      	bne.n	80063fe <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 800649c:	2300      	movs	r3, #0
 800649e:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80064a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ac:	2b2f      	cmp	r3, #47	; 0x2f
 80064ae:	d912      	bls.n	80064d6 <_VPrintTarget+0x13a>
 80064b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064b4:	2b39      	cmp	r3, #57	; 0x39
 80064b6:	d80e      	bhi.n	80064d6 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	3301      	adds	r3, #1
 80064bc:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80064be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	005b      	lsls	r3, r3, #1
 80064c8:	461a      	mov	r2, r3
 80064ca:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064ce:	4413      	add	r3, r2
 80064d0:	3b30      	subs	r3, #48	; 0x30
 80064d2:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80064d4:	e7e4      	b.n	80064a0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80064d6:	2300      	movs	r3, #0
 80064d8:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80064e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064e6:	2b2e      	cmp	r3, #46	; 0x2e
 80064e8:	d11d      	bne.n	8006526 <_VPrintTarget+0x18a>
        sFormat++;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	3301      	adds	r3, #1
 80064ee:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80064f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80064fc:	2b2f      	cmp	r3, #47	; 0x2f
 80064fe:	d912      	bls.n	8006526 <_VPrintTarget+0x18a>
 8006500:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006504:	2b39      	cmp	r3, #57	; 0x39
 8006506:	d80e      	bhi.n	8006526 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	3301      	adds	r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800650e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	005b      	lsls	r3, r3, #1
 8006518:	461a      	mov	r2, r3
 800651a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800651e:	4413      	add	r3, r2
 8006520:	3b30      	subs	r3, #48	; 0x30
 8006522:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006524:	e7e4      	b.n	80064f0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	781b      	ldrb	r3, [r3, #0]
 800652a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800652e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006532:	2b6c      	cmp	r3, #108	; 0x6c
 8006534:	d003      	beq.n	800653e <_VPrintTarget+0x1a2>
 8006536:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800653a:	2b68      	cmp	r3, #104	; 0x68
 800653c:	d107      	bne.n	800654e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	781b      	ldrb	r3, [r3, #0]
 8006542:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	3301      	adds	r3, #1
 800654a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800654c:	e7ef      	b.n	800652e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800654e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006552:	2b25      	cmp	r3, #37	; 0x25
 8006554:	f000 80b3 	beq.w	80066be <_VPrintTarget+0x322>
 8006558:	2b25      	cmp	r3, #37	; 0x25
 800655a:	f2c0 80b7 	blt.w	80066cc <_VPrintTarget+0x330>
 800655e:	2b78      	cmp	r3, #120	; 0x78
 8006560:	f300 80b4 	bgt.w	80066cc <_VPrintTarget+0x330>
 8006564:	2b58      	cmp	r3, #88	; 0x58
 8006566:	f2c0 80b1 	blt.w	80066cc <_VPrintTarget+0x330>
 800656a:	3b58      	subs	r3, #88	; 0x58
 800656c:	2b20      	cmp	r3, #32
 800656e:	f200 80ad 	bhi.w	80066cc <_VPrintTarget+0x330>
 8006572:	a201      	add	r2, pc, #4	; (adr r2, 8006578 <_VPrintTarget+0x1dc>)
 8006574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006578:	0800666f 	.word	0x0800666f
 800657c:	080066cd 	.word	0x080066cd
 8006580:	080066cd 	.word	0x080066cd
 8006584:	080066cd 	.word	0x080066cd
 8006588:	080066cd 	.word	0x080066cd
 800658c:	080066cd 	.word	0x080066cd
 8006590:	080066cd 	.word	0x080066cd
 8006594:	080066cd 	.word	0x080066cd
 8006598:	080066cd 	.word	0x080066cd
 800659c:	080066cd 	.word	0x080066cd
 80065a0:	080066cd 	.word	0x080066cd
 80065a4:	080065fd 	.word	0x080065fd
 80065a8:	08006623 	.word	0x08006623
 80065ac:	080066cd 	.word	0x080066cd
 80065b0:	080066cd 	.word	0x080066cd
 80065b4:	080066cd 	.word	0x080066cd
 80065b8:	080066cd 	.word	0x080066cd
 80065bc:	080066cd 	.word	0x080066cd
 80065c0:	080066cd 	.word	0x080066cd
 80065c4:	080066cd 	.word	0x080066cd
 80065c8:	080066cd 	.word	0x080066cd
 80065cc:	080066cd 	.word	0x080066cd
 80065d0:	080066cd 	.word	0x080066cd
 80065d4:	080066cd 	.word	0x080066cd
 80065d8:	08006699 	.word	0x08006699
 80065dc:	080066cd 	.word	0x080066cd
 80065e0:	080066cd 	.word	0x080066cd
 80065e4:	080066cd 	.word	0x080066cd
 80065e8:	080066cd 	.word	0x080066cd
 80065ec:	08006649 	.word	0x08006649
 80065f0:	080066cd 	.word	0x080066cd
 80065f4:	080066cd 	.word	0x080066cd
 80065f8:	0800666f 	.word	0x0800666f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	1d19      	adds	r1, r3, #4
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	6011      	str	r1, [r2, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800660a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800660c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006610:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006614:	f107 0314 	add.w	r3, r7, #20
 8006618:	4611      	mov	r1, r2
 800661a:	4618      	mov	r0, r3
 800661c:	f7ff fd1c 	bl	8006058 <_StoreChar>
        break;
 8006620:	e055      	b.n	80066ce <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	1d19      	adds	r1, r3, #4
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	6011      	str	r1, [r2, #0]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006630:	f107 0014 	add.w	r0, r7, #20
 8006634:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006636:	9301      	str	r3, [sp, #4]
 8006638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800663e:	220a      	movs	r2, #10
 8006640:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006642:	f7ff fe1b 	bl	800627c <_PrintInt>
        break;
 8006646:	e042      	b.n	80066ce <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	1d19      	adds	r1, r3, #4
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	6011      	str	r1, [r2, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006656:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006658:	f107 0014 	add.w	r0, r7, #20
 800665c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800665e:	9301      	str	r3, [sp, #4]
 8006660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006666:	220a      	movs	r2, #10
 8006668:	f7ff fd72 	bl	8006150 <_PrintUnsigned>
        break;
 800666c:	e02f      	b.n	80066ce <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	1d19      	adds	r1, r3, #4
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6011      	str	r1, [r2, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 800667c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800667e:	f107 0014 	add.w	r0, r7, #20
 8006682:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006684:	9301      	str	r3, [sp, #4]
 8006686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800668c:	2210      	movs	r2, #16
 800668e:	f7ff fd5f 	bl	8006150 <_PrintUnsigned>
        break;
 8006692:	e01c      	b.n	80066ce <_VPrintTarget+0x332>
 8006694:	2001444c 	.word	0x2001444c
      case 'p':
        v = va_arg(*pParamList, int);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	1d19      	adds	r1, r3, #4
 800669e:	687a      	ldr	r2, [r7, #4]
 80066a0:	6011      	str	r1, [r2, #0]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80066a6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066a8:	f107 0014 	add.w	r0, r7, #20
 80066ac:	2300      	movs	r3, #0
 80066ae:	9301      	str	r3, [sp, #4]
 80066b0:	2308      	movs	r3, #8
 80066b2:	9300      	str	r3, [sp, #0]
 80066b4:	2308      	movs	r3, #8
 80066b6:	2210      	movs	r2, #16
 80066b8:	f7ff fd4a 	bl	8006150 <_PrintUnsigned>
        break;
 80066bc:	e007      	b.n	80066ce <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80066be:	f107 0314 	add.w	r3, r7, #20
 80066c2:	2125      	movs	r1, #37	; 0x25
 80066c4:	4618      	mov	r0, r3
 80066c6:	f7ff fcc7 	bl	8006058 <_StoreChar>
        break;
 80066ca:	e000      	b.n	80066ce <_VPrintTarget+0x332>
      default:
        break;
 80066cc:	bf00      	nop
      }
      sFormat++;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	3301      	adds	r3, #1
 80066d2:	60fb      	str	r3, [r7, #12]
 80066d4:	e007      	b.n	80066e6 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80066d6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80066da:	f107 0314 	add.w	r3, r7, #20
 80066de:	4611      	mov	r1, r2
 80066e0:	4618      	mov	r0, r3
 80066e2:	f7ff fcb9 	bl	8006058 <_StoreChar>
    }
  } while (*sFormat);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	f47f ae72 	bne.w	80063d4 <_VPrintTarget+0x38>
 80066f0:	e000      	b.n	80066f4 <_VPrintTarget+0x358>
      break;
 80066f2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d041      	beq.n	800677e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 80066fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	643b      	str	r3, [r7, #64]	; 0x40
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670a:	e00b      	b.n	8006724 <_VPrintTarget+0x388>
 800670c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800670e:	b2da      	uxtb	r2, r3
 8006710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006712:	1c59      	adds	r1, r3, #1
 8006714:	6439      	str	r1, [r7, #64]	; 0x40
 8006716:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800671a:	b2d2      	uxtb	r2, r2
 800671c:	701a      	strb	r2, [r3, #0]
 800671e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006720:	09db      	lsrs	r3, r3, #7
 8006722:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006726:	2b7f      	cmp	r3, #127	; 0x7f
 8006728:	d8f0      	bhi.n	800670c <_VPrintTarget+0x370>
 800672a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	643a      	str	r2, [r7, #64]	; 0x40
 8006730:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006732:	b2d2      	uxtb	r2, r2
 8006734:	701a      	strb	r2, [r3, #0]
 8006736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006738:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	63bb      	str	r3, [r7, #56]	; 0x38
 800673e:	2300      	movs	r3, #0
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
 8006742:	e00b      	b.n	800675c <_VPrintTarget+0x3c0>
 8006744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006746:	b2da      	uxtb	r2, r3
 8006748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	63b9      	str	r1, [r7, #56]	; 0x38
 800674e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	637b      	str	r3, [r7, #52]	; 0x34
 800675c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800675e:	2b7f      	cmp	r3, #127	; 0x7f
 8006760:	d8f0      	bhi.n	8006744 <_VPrintTarget+0x3a8>
 8006762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	63ba      	str	r2, [r7, #56]	; 0x38
 8006768:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006770:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006772:	69fb      	ldr	r3, [r7, #28]
 8006774:	69b9      	ldr	r1, [r7, #24]
 8006776:	221a      	movs	r2, #26
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fb87 	bl	8005e8c <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800677e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006780:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006784:	bf00      	nop
 8006786:	3758      	adds	r7, #88	; 0x58
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af02      	add	r7, sp, #8
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	607a      	str	r2, [r7, #4]
 8006798:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800679a:	2300      	movs	r3, #0
 800679c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067a0:	4917      	ldr	r1, [pc, #92]	; (8006800 <SEGGER_SYSVIEW_Init+0x74>)
 80067a2:	4818      	ldr	r0, [pc, #96]	; (8006804 <SEGGER_SYSVIEW_Init+0x78>)
 80067a4:	f7ff f942 	bl	8005a2c <SEGGER_RTT_AllocUpBuffer>
 80067a8:	4603      	mov	r3, r0
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	4b16      	ldr	r3, [pc, #88]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067ae:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80067b0:	4b15      	ldr	r3, [pc, #84]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067b2:	785a      	ldrb	r2, [r3, #1]
 80067b4:	4b14      	ldr	r3, [pc, #80]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067b6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067ba:	7e1b      	ldrb	r3, [r3, #24]
 80067bc:	4618      	mov	r0, r3
 80067be:	2300      	movs	r3, #0
 80067c0:	9300      	str	r3, [sp, #0]
 80067c2:	2308      	movs	r3, #8
 80067c4:	4a11      	ldr	r2, [pc, #68]	; (800680c <SEGGER_SYSVIEW_Init+0x80>)
 80067c6:	490f      	ldr	r1, [pc, #60]	; (8006804 <SEGGER_SYSVIEW_Init+0x78>)
 80067c8:	f7ff f9b4 	bl	8005b34 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067ce:	2200      	movs	r2, #0
 80067d0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80067d2:	4b0f      	ldr	r3, [pc, #60]	; (8006810 <SEGGER_SYSVIEW_Init+0x84>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067d8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80067da:	4a0b      	ldr	r2, [pc, #44]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80067e0:	4a09      	ldr	r2, [pc, #36]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80067ec:	4a06      	ldr	r2, [pc, #24]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80067f2:	4b05      	ldr	r3, [pc, #20]	; (8006808 <SEGGER_SYSVIEW_Init+0x7c>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80067f8:	bf00      	nop
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20013414 	.word	0x20013414
 8006804:	08008798 	.word	0x08008798
 8006808:	2001441c 	.word	0x2001441c
 800680c:	20014414 	.word	0x20014414
 8006810:	e0001004 	.word	0xe0001004

08006814 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800681c:	4a04      	ldr	r2, [pc, #16]	; (8006830 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6113      	str	r3, [r2, #16]
}
 8006822:	bf00      	nop
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	2001441c 	.word	0x2001441c

08006834 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800683c:	f3ef 8311 	mrs	r3, BASEPRI
 8006840:	f04f 0120 	mov.w	r1, #32
 8006844:	f381 8811 	msr	BASEPRI, r1
 8006848:	60fb      	str	r3, [r7, #12]
 800684a:	4808      	ldr	r0, [pc, #32]	; (800686c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800684c:	f7ff fa2f 	bl	8005cae <_PreparePacket>
 8006850:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006852:	687a      	ldr	r2, [r7, #4]
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	68b8      	ldr	r0, [r7, #8]
 8006858:	f7ff fb18 	bl	8005e8c <_SendPacket>
  RECORD_END();
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f383 8811 	msr	BASEPRI, r3
}
 8006862:	bf00      	nop
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	2001444c 	.word	0x2001444c

08006870 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800687a:	f3ef 8311 	mrs	r3, BASEPRI
 800687e:	f04f 0120 	mov.w	r1, #32
 8006882:	f381 8811 	msr	BASEPRI, r1
 8006886:	617b      	str	r3, [r7, #20]
 8006888:	4816      	ldr	r0, [pc, #88]	; (80068e4 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800688a:	f7ff fa10 	bl	8005cae <_PreparePacket>
 800688e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	61bb      	str	r3, [r7, #24]
 800689c:	e00b      	b.n	80068b6 <SEGGER_SYSVIEW_RecordU32+0x46>
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	b2da      	uxtb	r2, r3
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	1c59      	adds	r1, r3, #1
 80068a6:	61f9      	str	r1, [r7, #28]
 80068a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068ac:	b2d2      	uxtb	r2, r2
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	09db      	lsrs	r3, r3, #7
 80068b4:	61bb      	str	r3, [r7, #24]
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	2b7f      	cmp	r3, #127	; 0x7f
 80068ba:	d8f0      	bhi.n	800689e <SEGGER_SYSVIEW_RecordU32+0x2e>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	61fa      	str	r2, [r7, #28]
 80068c2:	69ba      	ldr	r2, [r7, #24]
 80068c4:	b2d2      	uxtb	r2, r2
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	68f9      	ldr	r1, [r7, #12]
 80068d0:	6938      	ldr	r0, [r7, #16]
 80068d2:	f7ff fadb 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f383 8811 	msr	BASEPRI, r3
}
 80068dc:	bf00      	nop
 80068de:	3720      	adds	r7, #32
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	2001444c 	.word	0x2001444c

080068e8 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b08c      	sub	sp, #48	; 0x30
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	60f8      	str	r0, [r7, #12]
 80068f0:	60b9      	str	r1, [r7, #8]
 80068f2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80068f4:	f3ef 8311 	mrs	r3, BASEPRI
 80068f8:	f04f 0120 	mov.w	r1, #32
 80068fc:	f381 8811 	msr	BASEPRI, r1
 8006900:	61fb      	str	r3, [r7, #28]
 8006902:	4825      	ldr	r0, [pc, #148]	; (8006998 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006904:	f7ff f9d3 	bl	8005cae <_PreparePacket>
 8006908:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	62bb      	str	r3, [r7, #40]	; 0x28
 8006916:	e00b      	b.n	8006930 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800691a:	b2da      	uxtb	r2, r3
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006922:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	09db      	lsrs	r3, r3, #7
 800692e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006932:	2b7f      	cmp	r3, #127	; 0x7f
 8006934:	d8f0      	bhi.n	8006918 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800693c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006944:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	627b      	str	r3, [r7, #36]	; 0x24
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	e00b      	b.n	8006968 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006950:	6a3b      	ldr	r3, [r7, #32]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	6279      	str	r1, [r7, #36]	; 0x24
 800695a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	6a3b      	ldr	r3, [r7, #32]
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	623b      	str	r3, [r7, #32]
 8006968:	6a3b      	ldr	r3, [r7, #32]
 800696a:	2b7f      	cmp	r3, #127	; 0x7f
 800696c:	d8f0      	bhi.n	8006950 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	627a      	str	r2, [r7, #36]	; 0x24
 8006974:	6a3a      	ldr	r2, [r7, #32]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	6979      	ldr	r1, [r7, #20]
 8006982:	69b8      	ldr	r0, [r7, #24]
 8006984:	f7ff fa82 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
 8006990:	3730      	adds	r7, #48	; 0x30
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2001444c 	.word	0x2001444c

0800699c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b08e      	sub	sp, #56	; 0x38
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
 80069a8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80069aa:	f3ef 8311 	mrs	r3, BASEPRI
 80069ae:	f04f 0120 	mov.w	r1, #32
 80069b2:	f381 8811 	msr	BASEPRI, r1
 80069b6:	61fb      	str	r3, [r7, #28]
 80069b8:	4832      	ldr	r0, [pc, #200]	; (8006a84 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80069ba:	f7ff f978 	bl	8005cae <_PreparePacket>
 80069be:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	637b      	str	r3, [r7, #52]	; 0x34
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	633b      	str	r3, [r7, #48]	; 0x30
 80069cc:	e00b      	b.n	80069e6 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80069ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d0:	b2da      	uxtb	r2, r3
 80069d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d4:	1c59      	adds	r1, r3, #1
 80069d6:	6379      	str	r1, [r7, #52]	; 0x34
 80069d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069dc:	b2d2      	uxtb	r2, r2
 80069de:	701a      	strb	r2, [r3, #0]
 80069e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e2:	09db      	lsrs	r3, r3, #7
 80069e4:	633b      	str	r3, [r7, #48]	; 0x30
 80069e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069e8:	2b7f      	cmp	r3, #127	; 0x7f
 80069ea:	d8f0      	bhi.n	80069ce <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80069ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	637a      	str	r2, [r7, #52]	; 0x34
 80069f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f4:	b2d2      	uxtb	r2, r2
 80069f6:	701a      	strb	r2, [r3, #0]
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a04:	e00b      	b.n	8006a1e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	b2da      	uxtb	r2, r3
 8006a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a0c:	1c59      	adds	r1, r3, #1
 8006a0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a14:	b2d2      	uxtb	r2, r2
 8006a16:	701a      	strb	r2, [r3, #0]
 8006a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a1a:	09db      	lsrs	r3, r3, #7
 8006a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a20:	2b7f      	cmp	r3, #127	; 0x7f
 8006a22:	d8f0      	bhi.n	8006a06 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a26:	1c5a      	adds	r2, r3, #1
 8006a28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a2c:	b2d2      	uxtb	r2, r2
 8006a2e:	701a      	strb	r2, [r3, #0]
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	623b      	str	r3, [r7, #32]
 8006a3c:	e00b      	b.n	8006a56 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006a3e:	6a3b      	ldr	r3, [r7, #32]
 8006a40:	b2da      	uxtb	r2, r3
 8006a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a44:	1c59      	adds	r1, r3, #1
 8006a46:	6279      	str	r1, [r7, #36]	; 0x24
 8006a48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a4c:	b2d2      	uxtb	r2, r2
 8006a4e:	701a      	strb	r2, [r3, #0]
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	09db      	lsrs	r3, r3, #7
 8006a54:	623b      	str	r3, [r7, #32]
 8006a56:	6a3b      	ldr	r3, [r7, #32]
 8006a58:	2b7f      	cmp	r3, #127	; 0x7f
 8006a5a:	d8f0      	bhi.n	8006a3e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5e:	1c5a      	adds	r2, r3, #1
 8006a60:	627a      	str	r2, [r7, #36]	; 0x24
 8006a62:	6a3a      	ldr	r2, [r7, #32]
 8006a64:	b2d2      	uxtb	r2, r2
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	6979      	ldr	r1, [r7, #20]
 8006a70:	69b8      	ldr	r0, [r7, #24]
 8006a72:	f7ff fa0b 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	f383 8811 	msr	BASEPRI, r3
}
 8006a7c:	bf00      	nop
 8006a7e:	3738      	adds	r7, #56	; 0x38
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}
 8006a84:	2001444c 	.word	0x2001444c

08006a88 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b090      	sub	sp, #64	; 0x40
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a96:	f3ef 8311 	mrs	r3, BASEPRI
 8006a9a:	f04f 0120 	mov.w	r1, #32
 8006a9e:	f381 8811 	msr	BASEPRI, r1
 8006aa2:	61fb      	str	r3, [r7, #28]
 8006aa4:	4840      	ldr	r0, [pc, #256]	; (8006ba8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006aa6:	f7ff f902 	bl	8005cae <_PreparePacket>
 8006aaa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006aac:	69bb      	ldr	r3, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ab8:	e00b      	b.n	8006ad2 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ac0:	1c59      	adds	r1, r3, #1
 8006ac2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006ac4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ace:	09db      	lsrs	r3, r3, #7
 8006ad0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad6:	d8f0      	bhi.n	8006aba <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ada:	1c5a      	adds	r2, r3, #1
 8006adc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ade:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ae0:	b2d2      	uxtb	r2, r2
 8006ae2:	701a      	strb	r2, [r3, #0]
 8006ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ae6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	633b      	str	r3, [r7, #48]	; 0x30
 8006af0:	e00b      	b.n	8006b0a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006af8:	1c59      	adds	r1, r3, #1
 8006afa:	6379      	str	r1, [r7, #52]	; 0x34
 8006afc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b06:	09db      	lsrs	r3, r3, #7
 8006b08:	633b      	str	r3, [r7, #48]	; 0x30
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0e:	d8f0      	bhi.n	8006af2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b12:	1c5a      	adds	r2, r3, #1
 8006b14:	637a      	str	r2, [r7, #52]	; 0x34
 8006b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b18:	b2d2      	uxtb	r2, r2
 8006b1a:	701a      	strb	r2, [r3, #0]
 8006b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b1e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b28:	e00b      	b.n	8006b42 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	1c59      	adds	r1, r3, #1
 8006b32:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006b34:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b38:	b2d2      	uxtb	r2, r2
 8006b3a:	701a      	strb	r2, [r3, #0]
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	09db      	lsrs	r3, r3, #7
 8006b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b44:	2b7f      	cmp	r3, #127	; 0x7f
 8006b46:	d8f0      	bhi.n	8006b2a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b4a:	1c5a      	adds	r2, r3, #1
 8006b4c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b50:	b2d2      	uxtb	r2, r2
 8006b52:	701a      	strb	r2, [r3, #0]
 8006b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b56:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5e:	623b      	str	r3, [r7, #32]
 8006b60:	e00b      	b.n	8006b7a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	1c59      	adds	r1, r3, #1
 8006b6a:	6279      	str	r1, [r7, #36]	; 0x24
 8006b6c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b70:	b2d2      	uxtb	r2, r2
 8006b72:	701a      	strb	r2, [r3, #0]
 8006b74:	6a3b      	ldr	r3, [r7, #32]
 8006b76:	09db      	lsrs	r3, r3, #7
 8006b78:	623b      	str	r3, [r7, #32]
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7e:	d8f0      	bhi.n	8006b62 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	1c5a      	adds	r2, r3, #1
 8006b84:	627a      	str	r2, [r7, #36]	; 0x24
 8006b86:	6a3a      	ldr	r2, [r7, #32]
 8006b88:	b2d2      	uxtb	r2, r2
 8006b8a:	701a      	strb	r2, [r3, #0]
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	6979      	ldr	r1, [r7, #20]
 8006b94:	69b8      	ldr	r0, [r7, #24]
 8006b96:	f7ff f979 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	f383 8811 	msr	BASEPRI, r3
}
 8006ba0:	bf00      	nop
 8006ba2:	3740      	adds	r7, #64	; 0x40
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	2001444c 	.word	0x2001444c

08006bac <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08c      	sub	sp, #48	; 0x30
 8006bb0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006bb2:	4b58      	ldr	r3, [pc, #352]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006bb8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bbc:	f04f 0120 	mov.w	r1, #32
 8006bc0:	f381 8811 	msr	BASEPRI, r1
 8006bc4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006bc6:	4b53      	ldr	r3, [pc, #332]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006bc8:	785b      	ldrb	r3, [r3, #1]
 8006bca:	220a      	movs	r2, #10
 8006bcc:	4952      	ldr	r1, [pc, #328]	; (8006d18 <SEGGER_SYSVIEW_Start+0x16c>)
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f7f9 fafe 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006bda:	200a      	movs	r0, #10
 8006bdc:	f7ff fe2a 	bl	8006834 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006be0:	f3ef 8311 	mrs	r3, BASEPRI
 8006be4:	f04f 0120 	mov.w	r1, #32
 8006be8:	f381 8811 	msr	BASEPRI, r1
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	484b      	ldr	r0, [pc, #300]	; (8006d1c <SEGGER_SYSVIEW_Start+0x170>)
 8006bf0:	f7ff f85d 	bl	8005cae <_PreparePacket>
 8006bf4:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bfe:	4b45      	ldr	r3, [pc, #276]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006c00:	685b      	ldr	r3, [r3, #4]
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c04:	e00b      	b.n	8006c1e <SEGGER_SYSVIEW_Start+0x72>
 8006c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c0c:	1c59      	adds	r1, r3, #1
 8006c0e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1a:	09db      	lsrs	r3, r3, #7
 8006c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c20:	2b7f      	cmp	r3, #127	; 0x7f
 8006c22:	d8f0      	bhi.n	8006c06 <SEGGER_SYSVIEW_Start+0x5a>
 8006c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c26:	1c5a      	adds	r2, r3, #1
 8006c28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c32:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	627b      	str	r3, [r7, #36]	; 0x24
 8006c38:	4b36      	ldr	r3, [pc, #216]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	623b      	str	r3, [r7, #32]
 8006c3e:	e00b      	b.n	8006c58 <SEGGER_SYSVIEW_Start+0xac>
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	b2da      	uxtb	r2, r3
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	1c59      	adds	r1, r3, #1
 8006c48:	6279      	str	r1, [r7, #36]	; 0x24
 8006c4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c4e:	b2d2      	uxtb	r2, r2
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	6a3b      	ldr	r3, [r7, #32]
 8006c54:	09db      	lsrs	r3, r3, #7
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c5c:	d8f0      	bhi.n	8006c40 <SEGGER_SYSVIEW_Start+0x94>
 8006c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c60:	1c5a      	adds	r2, r3, #1
 8006c62:	627a      	str	r2, [r7, #36]	; 0x24
 8006c64:	6a3a      	ldr	r2, [r7, #32]
 8006c66:	b2d2      	uxtb	r2, r2
 8006c68:	701a      	strb	r2, [r3, #0]
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	61fb      	str	r3, [r7, #28]
 8006c72:	4b28      	ldr	r3, [pc, #160]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006c74:	691b      	ldr	r3, [r3, #16]
 8006c76:	61bb      	str	r3, [r7, #24]
 8006c78:	e00b      	b.n	8006c92 <SEGGER_SYSVIEW_Start+0xe6>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	b2da      	uxtb	r2, r3
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	1c59      	adds	r1, r3, #1
 8006c82:	61f9      	str	r1, [r7, #28]
 8006c84:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c88:	b2d2      	uxtb	r2, r2
 8006c8a:	701a      	strb	r2, [r3, #0]
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	09db      	lsrs	r3, r3, #7
 8006c90:	61bb      	str	r3, [r7, #24]
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	2b7f      	cmp	r3, #127	; 0x7f
 8006c96:	d8f0      	bhi.n	8006c7a <SEGGER_SYSVIEW_Start+0xce>
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	1c5a      	adds	r2, r3, #1
 8006c9c:	61fa      	str	r2, [r7, #28]
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	69fb      	ldr	r3, [r7, #28]
 8006ca6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	617b      	str	r3, [r7, #20]
 8006cac:	2300      	movs	r3, #0
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	e00b      	b.n	8006cca <SEGGER_SYSVIEW_Start+0x11e>
 8006cb2:	693b      	ldr	r3, [r7, #16]
 8006cb4:	b2da      	uxtb	r2, r3
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	1c59      	adds	r1, r3, #1
 8006cba:	6179      	str	r1, [r7, #20]
 8006cbc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cc0:	b2d2      	uxtb	r2, r2
 8006cc2:	701a      	strb	r2, [r3, #0]
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	09db      	lsrs	r3, r3, #7
 8006cc8:	613b      	str	r3, [r7, #16]
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b7f      	cmp	r3, #127	; 0x7f
 8006cce:	d8f0      	bhi.n	8006cb2 <SEGGER_SYSVIEW_Start+0x106>
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	1c5a      	adds	r2, r3, #1
 8006cd4:	617a      	str	r2, [r7, #20]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	b2d2      	uxtb	r2, r2
 8006cda:	701a      	strb	r2, [r3, #0]
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006ce0:	2218      	movs	r2, #24
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f7ff f8d1 	bl	8005e8c <_SendPacket>
      RECORD_END();
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006cf0:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d002      	beq.n	8006cfe <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006cf8:	4b06      	ldr	r3, [pc, #24]	; (8006d14 <SEGGER_SYSVIEW_Start+0x168>)
 8006cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfc:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006cfe:	f000 f9eb 	bl	80070d8 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006d02:	f000 f9b1 	bl	8007068 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006d06:	f000 fc23 	bl	8007550 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006d0a:	bf00      	nop
 8006d0c:	3730      	adds	r7, #48	; 0x30
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	2001441c 	.word	0x2001441c
 8006d18:	08008810 	.word	0x08008810
 8006d1c:	2001444c 	.word	0x2001444c

08006d20 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006d26:	f3ef 8311 	mrs	r3, BASEPRI
 8006d2a:	f04f 0120 	mov.w	r1, #32
 8006d2e:	f381 8811 	msr	BASEPRI, r1
 8006d32:	607b      	str	r3, [r7, #4]
 8006d34:	480b      	ldr	r0, [pc, #44]	; (8006d64 <SEGGER_SYSVIEW_Stop+0x44>)
 8006d36:	f7fe ffba 	bl	8005cae <_PreparePacket>
 8006d3a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006d3c:	4b0a      	ldr	r3, [pc, #40]	; (8006d68 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006d44:	220b      	movs	r2, #11
 8006d46:	6839      	ldr	r1, [r7, #0]
 8006d48:	6838      	ldr	r0, [r7, #0]
 8006d4a:	f7ff f89f 	bl	8005e8c <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <SEGGER_SYSVIEW_Stop+0x48>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f383 8811 	msr	BASEPRI, r3
}
 8006d5a:	bf00      	nop
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	2001444c 	.word	0x2001444c
 8006d68:	2001441c 	.word	0x2001441c

08006d6c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b08c      	sub	sp, #48	; 0x30
 8006d70:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006d72:	f3ef 8311 	mrs	r3, BASEPRI
 8006d76:	f04f 0120 	mov.w	r1, #32
 8006d7a:	f381 8811 	msr	BASEPRI, r1
 8006d7e:	60fb      	str	r3, [r7, #12]
 8006d80:	4845      	ldr	r0, [pc, #276]	; (8006e98 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006d82:	f7fe ff94 	bl	8005cae <_PreparePacket>
 8006d86:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d90:	4b42      	ldr	r3, [pc, #264]	; (8006e9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d96:	e00b      	b.n	8006db0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9e:	1c59      	adds	r1, r3, #1
 8006da0:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006da2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da6:	b2d2      	uxtb	r2, r2
 8006da8:	701a      	strb	r2, [r3, #0]
 8006daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dac:	09db      	lsrs	r3, r3, #7
 8006dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8006db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006db2:	2b7f      	cmp	r3, #127	; 0x7f
 8006db4:	d8f0      	bhi.n	8006d98 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006dbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dbe:	b2d2      	uxtb	r2, r2
 8006dc0:	701a      	strb	r2, [r3, #0]
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dca:	4b34      	ldr	r3, [pc, #208]	; (8006e9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006dcc:	689b      	ldr	r3, [r3, #8]
 8006dce:	623b      	str	r3, [r7, #32]
 8006dd0:	e00b      	b.n	8006dea <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	1c59      	adds	r1, r3, #1
 8006dda:	6279      	str	r1, [r7, #36]	; 0x24
 8006ddc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006de0:	b2d2      	uxtb	r2, r2
 8006de2:	701a      	strb	r2, [r3, #0]
 8006de4:	6a3b      	ldr	r3, [r7, #32]
 8006de6:	09db      	lsrs	r3, r3, #7
 8006de8:	623b      	str	r3, [r7, #32]
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	2b7f      	cmp	r3, #127	; 0x7f
 8006dee:	d8f0      	bhi.n	8006dd2 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	1c5a      	adds	r2, r3, #1
 8006df4:	627a      	str	r2, [r7, #36]	; 0x24
 8006df6:	6a3a      	ldr	r2, [r7, #32]
 8006df8:	b2d2      	uxtb	r2, r2
 8006dfa:	701a      	strb	r2, [r3, #0]
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dfe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	61fb      	str	r3, [r7, #28]
 8006e04:	4b25      	ldr	r3, [pc, #148]	; (8006e9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	61bb      	str	r3, [r7, #24]
 8006e0a:	e00b      	b.n	8006e24 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	b2da      	uxtb	r2, r3
 8006e10:	69fb      	ldr	r3, [r7, #28]
 8006e12:	1c59      	adds	r1, r3, #1
 8006e14:	61f9      	str	r1, [r7, #28]
 8006e16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	09db      	lsrs	r3, r3, #7
 8006e22:	61bb      	str	r3, [r7, #24]
 8006e24:	69bb      	ldr	r3, [r7, #24]
 8006e26:	2b7f      	cmp	r3, #127	; 0x7f
 8006e28:	d8f0      	bhi.n	8006e0c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006e2a:	69fb      	ldr	r3, [r7, #28]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	61fa      	str	r2, [r7, #28]
 8006e30:	69ba      	ldr	r2, [r7, #24]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	617b      	str	r3, [r7, #20]
 8006e3e:	2300      	movs	r3, #0
 8006e40:	613b      	str	r3, [r7, #16]
 8006e42:	e00b      	b.n	8006e5c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006e44:	693b      	ldr	r3, [r7, #16]
 8006e46:	b2da      	uxtb	r2, r3
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	1c59      	adds	r1, r3, #1
 8006e4c:	6179      	str	r1, [r7, #20]
 8006e4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e52:	b2d2      	uxtb	r2, r2
 8006e54:	701a      	strb	r2, [r3, #0]
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	09db      	lsrs	r3, r3, #7
 8006e5a:	613b      	str	r3, [r7, #16]
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e60:	d8f0      	bhi.n	8006e44 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	1c5a      	adds	r2, r3, #1
 8006e66:	617a      	str	r2, [r7, #20]
 8006e68:	693a      	ldr	r2, [r7, #16]
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006e72:	2218      	movs	r2, #24
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	68b8      	ldr	r0, [r7, #8]
 8006e78:	f7ff f808 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006e82:	4b06      	ldr	r3, [pc, #24]	; (8006e9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d002      	beq.n	8006e90 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006e8a:	4b04      	ldr	r3, [pc, #16]	; (8006e9c <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8e:	4798      	blx	r3
  }
}
 8006e90:	bf00      	nop
 8006e92:	3730      	adds	r7, #48	; 0x30
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	2001444c 	.word	0x2001444c
 8006e9c:	2001441c 	.word	0x2001441c

08006ea0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b092      	sub	sp, #72	; 0x48
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006ea8:	f3ef 8311 	mrs	r3, BASEPRI
 8006eac:	f04f 0120 	mov.w	r1, #32
 8006eb0:	f381 8811 	msr	BASEPRI, r1
 8006eb4:	617b      	str	r3, [r7, #20]
 8006eb6:	486a      	ldr	r0, [pc, #424]	; (8007060 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006eb8:	f7fe fef9 	bl	8005cae <_PreparePacket>
 8006ebc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681a      	ldr	r2, [r3, #0]
 8006eca:	4b66      	ldr	r3, [pc, #408]	; (8007064 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	1ad3      	subs	r3, r2, r3
 8006ed0:	643b      	str	r3, [r7, #64]	; 0x40
 8006ed2:	e00b      	b.n	8006eec <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ed6:	b2da      	uxtb	r2, r3
 8006ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006eda:	1c59      	adds	r1, r3, #1
 8006edc:	6479      	str	r1, [r7, #68]	; 0x44
 8006ede:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee8:	09db      	lsrs	r3, r3, #7
 8006eea:	643b      	str	r3, [r7, #64]	; 0x40
 8006eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eee:	2b7f      	cmp	r3, #127	; 0x7f
 8006ef0:	d8f0      	bhi.n	8006ed4 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006ef2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ef4:	1c5a      	adds	r2, r3, #1
 8006ef6:	647a      	str	r2, [r7, #68]	; 0x44
 8006ef8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006efa:	b2d2      	uxtb	r2, r2
 8006efc:	701a      	strb	r2, [r3, #0]
 8006efe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f00:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0c:	e00b      	b.n	8006f26 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f14:	1c59      	adds	r1, r3, #1
 8006f16:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006f18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f22:	09db      	lsrs	r3, r3, #7
 8006f24:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f28:	2b7f      	cmp	r3, #127	; 0x7f
 8006f2a:	d8f0      	bhi.n	8006f0e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006f32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
 8006f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f3a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	2220      	movs	r2, #32
 8006f42:	4619      	mov	r1, r3
 8006f44:	68f8      	ldr	r0, [r7, #12]
 8006f46:	f7fe fe65 	bl	8005c14 <_EncodeStr>
 8006f4a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006f4c:	2209      	movs	r2, #9
 8006f4e:	68f9      	ldr	r1, [r7, #12]
 8006f50:	6938      	ldr	r0, [r7, #16]
 8006f52:	f7fe ff9b 	bl	8005e8c <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b40      	ldr	r3, [pc, #256]	; (8007064 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	1ad3      	subs	r3, r2, r3
 8006f68:	633b      	str	r3, [r7, #48]	; 0x30
 8006f6a:	e00b      	b.n	8006f84 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f6e:	b2da      	uxtb	r2, r3
 8006f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f72:	1c59      	adds	r1, r3, #1
 8006f74:	6379      	str	r1, [r7, #52]	; 0x34
 8006f76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f7a:	b2d2      	uxtb	r2, r2
 8006f7c:	701a      	strb	r2, [r3, #0]
 8006f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f80:	09db      	lsrs	r3, r3, #7
 8006f82:	633b      	str	r3, [r7, #48]	; 0x30
 8006f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f86:	2b7f      	cmp	r3, #127	; 0x7f
 8006f88:	d8f0      	bhi.n	8006f6c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8c:	1c5a      	adds	r2, r3, #1
 8006f8e:	637a      	str	r2, [r7, #52]	; 0x34
 8006f90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f92:	b2d2      	uxtb	r2, r2
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f98:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fa4:	e00b      	b.n	8006fbe <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fac:	1c59      	adds	r1, r3, #1
 8006fae:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006fb0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fb4:	b2d2      	uxtb	r2, r2
 8006fb6:	701a      	strb	r2, [r3, #0]
 8006fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fba:	09db      	lsrs	r3, r3, #7
 8006fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc0:	2b7f      	cmp	r3, #127	; 0x7f
 8006fc2:	d8f0      	bhi.n	8006fa6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006fcc:	b2d2      	uxtb	r2, r2
 8006fce:	701a      	strb	r2, [r3, #0]
 8006fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	691b      	ldr	r3, [r3, #16]
 8006fdc:	623b      	str	r3, [r7, #32]
 8006fde:	e00b      	b.n	8006ff8 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	b2da      	uxtb	r2, r3
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	1c59      	adds	r1, r3, #1
 8006fe8:	6279      	str	r1, [r7, #36]	; 0x24
 8006fea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	6a3b      	ldr	r3, [r7, #32]
 8006ff4:	09db      	lsrs	r3, r3, #7
 8006ff6:	623b      	str	r3, [r7, #32]
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2b7f      	cmp	r3, #127	; 0x7f
 8006ffc:	d8f0      	bhi.n	8006fe0 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	627a      	str	r2, [r7, #36]	; 0x24
 8007004:	6a3a      	ldr	r2, [r7, #32]
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	61fb      	str	r3, [r7, #28]
 8007012:	2300      	movs	r3, #0
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	e00b      	b.n	8007030 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	1c59      	adds	r1, r3, #1
 8007020:	61f9      	str	r1, [r7, #28]
 8007022:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007026:	b2d2      	uxtb	r2, r2
 8007028:	701a      	strb	r2, [r3, #0]
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	09db      	lsrs	r3, r3, #7
 800702e:	61bb      	str	r3, [r7, #24]
 8007030:	69bb      	ldr	r3, [r7, #24]
 8007032:	2b7f      	cmp	r3, #127	; 0x7f
 8007034:	d8f0      	bhi.n	8007018 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8007036:	69fb      	ldr	r3, [r7, #28]
 8007038:	1c5a      	adds	r2, r3, #1
 800703a:	61fa      	str	r2, [r7, #28]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	69fb      	ldr	r3, [r7, #28]
 8007044:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8007046:	2215      	movs	r2, #21
 8007048:	68f9      	ldr	r1, [r7, #12]
 800704a:	6938      	ldr	r0, [r7, #16]
 800704c:	f7fe ff1e 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	f383 8811 	msr	BASEPRI, r3
}
 8007056:	bf00      	nop
 8007058:	3748      	adds	r7, #72	; 0x48
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	2001444c 	.word	0x2001444c
 8007064:	2001441c 	.word	0x2001441c

08007068 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8007068:	b580      	push	{r7, lr}
 800706a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800706c:	4b07      	ldr	r3, [pc, #28]	; (800708c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800706e:	6a1b      	ldr	r3, [r3, #32]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d008      	beq.n	8007086 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007074:	4b05      	ldr	r3, [pc, #20]	; (800708c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800707e:	4b03      	ldr	r3, [pc, #12]	; (800708c <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	4798      	blx	r3
  }
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	2001441c 	.word	0x2001441c

08007090 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b086      	sub	sp, #24
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007098:	f3ef 8311 	mrs	r3, BASEPRI
 800709c:	f04f 0120 	mov.w	r1, #32
 80070a0:	f381 8811 	msr	BASEPRI, r1
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	480b      	ldr	r0, [pc, #44]	; (80070d4 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80070a8:	f7fe fe01 	bl	8005cae <_PreparePacket>
 80070ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80070ae:	2280      	movs	r2, #128	; 0x80
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f7fe fdae 	bl	8005c14 <_EncodeStr>
 80070b8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80070ba:	220e      	movs	r2, #14
 80070bc:	68f9      	ldr	r1, [r7, #12]
 80070be:	6938      	ldr	r0, [r7, #16]
 80070c0:	f7fe fee4 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	f383 8811 	msr	BASEPRI, r3
}
 80070ca:	bf00      	nop
 80070cc:	3718      	adds	r7, #24
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	2001444c 	.word	0x2001444c

080070d8 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80070d8:	b590      	push	{r4, r7, lr}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80070de:	4b15      	ldr	r3, [pc, #84]	; (8007134 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d01a      	beq.n	800711c <SEGGER_SYSVIEW_RecordSystime+0x44>
 80070e6:	4b13      	ldr	r3, [pc, #76]	; (8007134 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d015      	beq.n	800711c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80070f0:	4b10      	ldr	r3, [pc, #64]	; (8007134 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80070f2:	6a1b      	ldr	r3, [r3, #32]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4798      	blx	r3
 80070f8:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80070fc:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80070fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007102:	f04f 0200 	mov.w	r2, #0
 8007106:	f04f 0300 	mov.w	r3, #0
 800710a:	000a      	movs	r2, r1
 800710c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800710e:	4613      	mov	r3, r2
 8007110:	461a      	mov	r2, r3
 8007112:	4621      	mov	r1, r4
 8007114:	200d      	movs	r0, #13
 8007116:	f7ff fbe7 	bl	80068e8 <SEGGER_SYSVIEW_RecordU32x2>
 800711a:	e006      	b.n	800712a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800711c:	4b06      	ldr	r3, [pc, #24]	; (8007138 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4619      	mov	r1, r3
 8007122:	200c      	movs	r0, #12
 8007124:	f7ff fba4 	bl	8006870 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8007128:	bf00      	nop
 800712a:	bf00      	nop
 800712c:	370c      	adds	r7, #12
 800712e:	46bd      	mov	sp, r7
 8007130:	bd90      	pop	{r4, r7, pc}
 8007132:	bf00      	nop
 8007134:	2001441c 	.word	0x2001441c
 8007138:	e0001004 	.word	0xe0001004

0800713c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007142:	f3ef 8311 	mrs	r3, BASEPRI
 8007146:	f04f 0120 	mov.w	r1, #32
 800714a:	f381 8811 	msr	BASEPRI, r1
 800714e:	60fb      	str	r3, [r7, #12]
 8007150:	4819      	ldr	r0, [pc, #100]	; (80071b8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8007152:	f7fe fdac 	bl	8005cae <_PreparePacket>
 8007156:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800715c:	4b17      	ldr	r3, [pc, #92]	; (80071bc <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007164:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	617b      	str	r3, [r7, #20]
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	613b      	str	r3, [r7, #16]
 800716e:	e00b      	b.n	8007188 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8007170:	693b      	ldr	r3, [r7, #16]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	1c59      	adds	r1, r3, #1
 8007178:	6179      	str	r1, [r7, #20]
 800717a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800717e:	b2d2      	uxtb	r2, r2
 8007180:	701a      	strb	r2, [r3, #0]
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	09db      	lsrs	r3, r3, #7
 8007186:	613b      	str	r3, [r7, #16]
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d8f0      	bhi.n	8007170 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	617a      	str	r2, [r7, #20]
 8007194:	693a      	ldr	r2, [r7, #16]
 8007196:	b2d2      	uxtb	r2, r2
 8007198:	701a      	strb	r2, [r3, #0]
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800719e:	2202      	movs	r2, #2
 80071a0:	6879      	ldr	r1, [r7, #4]
 80071a2:	68b8      	ldr	r0, [r7, #8]
 80071a4:	f7fe fe72 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f383 8811 	msr	BASEPRI, r3
}
 80071ae:	bf00      	nop
 80071b0:	3718      	adds	r7, #24
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	2001444c 	.word	0x2001444c
 80071bc:	e000ed04 	.word	0xe000ed04

080071c0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071c6:	f3ef 8311 	mrs	r3, BASEPRI
 80071ca:	f04f 0120 	mov.w	r1, #32
 80071ce:	f381 8811 	msr	BASEPRI, r1
 80071d2:	607b      	str	r3, [r7, #4]
 80071d4:	4807      	ldr	r0, [pc, #28]	; (80071f4 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80071d6:	f7fe fd6a 	bl	8005cae <_PreparePacket>
 80071da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80071dc:	2203      	movs	r2, #3
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6838      	ldr	r0, [r7, #0]
 80071e2:	f7fe fe53 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	f383 8811 	msr	BASEPRI, r3
}
 80071ec:	bf00      	nop
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	2001444c 	.word	0x2001444c

080071f8 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80071fe:	f3ef 8311 	mrs	r3, BASEPRI
 8007202:	f04f 0120 	mov.w	r1, #32
 8007206:	f381 8811 	msr	BASEPRI, r1
 800720a:	607b      	str	r3, [r7, #4]
 800720c:	4807      	ldr	r0, [pc, #28]	; (800722c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800720e:	f7fe fd4e 	bl	8005cae <_PreparePacket>
 8007212:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8007214:	2212      	movs	r2, #18
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6838      	ldr	r0, [r7, #0]
 800721a:	f7fe fe37 	bl	8005e8c <_SendPacket>
  RECORD_END();
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f383 8811 	msr	BASEPRI, r3
}
 8007224:	bf00      	nop
 8007226:	3708      	adds	r7, #8
 8007228:	46bd      	mov	sp, r7
 800722a:	bd80      	pop	{r7, pc}
 800722c:	2001444c 	.word	0x2001444c

08007230 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007236:	f3ef 8311 	mrs	r3, BASEPRI
 800723a:	f04f 0120 	mov.w	r1, #32
 800723e:	f381 8811 	msr	BASEPRI, r1
 8007242:	607b      	str	r3, [r7, #4]
 8007244:	4807      	ldr	r0, [pc, #28]	; (8007264 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8007246:	f7fe fd32 	bl	8005cae <_PreparePacket>
 800724a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800724c:	2211      	movs	r2, #17
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6838      	ldr	r0, [r7, #0]
 8007252:	f7fe fe1b 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f383 8811 	msr	BASEPRI, r3
}
 800725c:	bf00      	nop
 800725e:	3708      	adds	r7, #8
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}
 8007264:	2001444c 	.word	0x2001444c

08007268 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007268:	b580      	push	{r7, lr}
 800726a:	b088      	sub	sp, #32
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007270:	f3ef 8311 	mrs	r3, BASEPRI
 8007274:	f04f 0120 	mov.w	r1, #32
 8007278:	f381 8811 	msr	BASEPRI, r1
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	4819      	ldr	r0, [pc, #100]	; (80072e4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8007280:	f7fe fd15 	bl	8005cae <_PreparePacket>
 8007284:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800728a:	4b17      	ldr	r3, [pc, #92]	; (80072e8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	1ad3      	subs	r3, r2, r3
 8007292:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	61fb      	str	r3, [r7, #28]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e00b      	b.n	80072b6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	1c59      	adds	r1, r3, #1
 80072a6:	61f9      	str	r1, [r7, #28]
 80072a8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80072ac:	b2d2      	uxtb	r2, r2
 80072ae:	701a      	strb	r2, [r3, #0]
 80072b0:	69bb      	ldr	r3, [r7, #24]
 80072b2:	09db      	lsrs	r3, r3, #7
 80072b4:	61bb      	str	r3, [r7, #24]
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	2b7f      	cmp	r3, #127	; 0x7f
 80072ba:	d8f0      	bhi.n	800729e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	1c5a      	adds	r2, r3, #1
 80072c0:	61fa      	str	r2, [r7, #28]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	b2d2      	uxtb	r2, r2
 80072c6:	701a      	strb	r2, [r3, #0]
 80072c8:	69fb      	ldr	r3, [r7, #28]
 80072ca:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80072cc:	2208      	movs	r2, #8
 80072ce:	68f9      	ldr	r1, [r7, #12]
 80072d0:	6938      	ldr	r0, [r7, #16]
 80072d2:	f7fe fddb 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	f383 8811 	msr	BASEPRI, r3
}
 80072dc:	bf00      	nop
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	2001444c 	.word	0x2001444c
 80072e8:	2001441c 	.word	0x2001441c

080072ec <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072f4:	f3ef 8311 	mrs	r3, BASEPRI
 80072f8:	f04f 0120 	mov.w	r1, #32
 80072fc:	f381 8811 	msr	BASEPRI, r1
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	4819      	ldr	r0, [pc, #100]	; (8007368 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007304:	f7fe fcd3 	bl	8005cae <_PreparePacket>
 8007308:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800730e:	4b17      	ldr	r3, [pc, #92]	; (800736c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007310:	691b      	ldr	r3, [r3, #16]
 8007312:	687a      	ldr	r2, [r7, #4]
 8007314:	1ad3      	subs	r3, r2, r3
 8007316:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	61fb      	str	r3, [r7, #28]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	61bb      	str	r3, [r7, #24]
 8007320:	e00b      	b.n	800733a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8007322:	69bb      	ldr	r3, [r7, #24]
 8007324:	b2da      	uxtb	r2, r3
 8007326:	69fb      	ldr	r3, [r7, #28]
 8007328:	1c59      	adds	r1, r3, #1
 800732a:	61f9      	str	r1, [r7, #28]
 800732c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007330:	b2d2      	uxtb	r2, r2
 8007332:	701a      	strb	r2, [r3, #0]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	09db      	lsrs	r3, r3, #7
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	2b7f      	cmp	r3, #127	; 0x7f
 800733e:	d8f0      	bhi.n	8007322 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	1c5a      	adds	r2, r3, #1
 8007344:	61fa      	str	r2, [r7, #28]
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	b2d2      	uxtb	r2, r2
 800734a:	701a      	strb	r2, [r3, #0]
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007350:	2204      	movs	r2, #4
 8007352:	68f9      	ldr	r1, [r7, #12]
 8007354:	6938      	ldr	r0, [r7, #16]
 8007356:	f7fe fd99 	bl	8005e8c <_SendPacket>
  RECORD_END();
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f383 8811 	msr	BASEPRI, r3
}
 8007360:	bf00      	nop
 8007362:	3720      	adds	r7, #32
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}
 8007368:	2001444c 	.word	0x2001444c
 800736c:	2001441c 	.word	0x2001441c

08007370 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007378:	f3ef 8311 	mrs	r3, BASEPRI
 800737c:	f04f 0120 	mov.w	r1, #32
 8007380:	f381 8811 	msr	BASEPRI, r1
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	4819      	ldr	r0, [pc, #100]	; (80073ec <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007388:	f7fe fc91 	bl	8005cae <_PreparePacket>
 800738c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007392:	4b17      	ldr	r3, [pc, #92]	; (80073f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	61fb      	str	r3, [r7, #28]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	61bb      	str	r3, [r7, #24]
 80073a4:	e00b      	b.n	80073be <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	69fb      	ldr	r3, [r7, #28]
 80073ac:	1c59      	adds	r1, r3, #1
 80073ae:	61f9      	str	r1, [r7, #28]
 80073b0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073b4:	b2d2      	uxtb	r2, r2
 80073b6:	701a      	strb	r2, [r3, #0]
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	09db      	lsrs	r3, r3, #7
 80073bc:	61bb      	str	r3, [r7, #24]
 80073be:	69bb      	ldr	r3, [r7, #24]
 80073c0:	2b7f      	cmp	r3, #127	; 0x7f
 80073c2:	d8f0      	bhi.n	80073a6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	1c5a      	adds	r2, r3, #1
 80073c8:	61fa      	str	r2, [r7, #28]
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	b2d2      	uxtb	r2, r2
 80073ce:	701a      	strb	r2, [r3, #0]
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80073d4:	2206      	movs	r2, #6
 80073d6:	68f9      	ldr	r1, [r7, #12]
 80073d8:	6938      	ldr	r0, [r7, #16]
 80073da:	f7fe fd57 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f383 8811 	msr	BASEPRI, r3
}
 80073e4:	bf00      	nop
 80073e6:	3720      	adds	r7, #32
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	2001444c 	.word	0x2001444c
 80073f0:	2001441c 	.word	0x2001441c

080073f4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80073fc:	4b04      	ldr	r3, [pc, #16]	; (8007410 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80073fe:	691b      	ldr	r3, [r3, #16]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	1ad3      	subs	r3, r2, r3
}
 8007404:	4618      	mov	r0, r3
 8007406:	370c      	adds	r7, #12
 8007408:	46bd      	mov	sp, r7
 800740a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740e:	4770      	bx	lr
 8007410:	2001441c 	.word	0x2001441c

08007414 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8007414:	b580      	push	{r7, lr}
 8007416:	b08c      	sub	sp, #48	; 0x30
 8007418:	af00      	add	r7, sp, #0
 800741a:	4603      	mov	r3, r0
 800741c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800741e:	4b3b      	ldr	r3, [pc, #236]	; (800750c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d06d      	beq.n	8007502 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8007426:	4b39      	ldr	r3, [pc, #228]	; (800750c <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 800742c:	2300      	movs	r3, #0
 800742e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007430:	e008      	b.n	8007444 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8007432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800743a:	2b00      	cmp	r3, #0
 800743c:	d007      	beq.n	800744e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800743e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007440:	3301      	adds	r3, #1
 8007442:	62bb      	str	r3, [r7, #40]	; 0x28
 8007444:	79fb      	ldrb	r3, [r7, #7]
 8007446:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007448:	429a      	cmp	r2, r3
 800744a:	d3f2      	bcc.n	8007432 <SEGGER_SYSVIEW_SendModule+0x1e>
 800744c:	e000      	b.n	8007450 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800744e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d055      	beq.n	8007502 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007456:	f3ef 8311 	mrs	r3, BASEPRI
 800745a:	f04f 0120 	mov.w	r1, #32
 800745e:	f381 8811 	msr	BASEPRI, r1
 8007462:	617b      	str	r3, [r7, #20]
 8007464:	482a      	ldr	r0, [pc, #168]	; (8007510 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8007466:	f7fe fc22 	bl	8005cae <_PreparePacket>
 800746a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	627b      	str	r3, [r7, #36]	; 0x24
 8007474:	79fb      	ldrb	r3, [r7, #7]
 8007476:	623b      	str	r3, [r7, #32]
 8007478:	e00b      	b.n	8007492 <SEGGER_SYSVIEW_SendModule+0x7e>
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	b2da      	uxtb	r2, r3
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	1c59      	adds	r1, r3, #1
 8007482:	6279      	str	r1, [r7, #36]	; 0x24
 8007484:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	09db      	lsrs	r3, r3, #7
 8007490:	623b      	str	r3, [r7, #32]
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	2b7f      	cmp	r3, #127	; 0x7f
 8007496:	d8f0      	bhi.n	800747a <SEGGER_SYSVIEW_SendModule+0x66>
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	627a      	str	r2, [r7, #36]	; 0x24
 800749e:	6a3a      	ldr	r2, [r7, #32]
 80074a0:	b2d2      	uxtb	r2, r2
 80074a2:	701a      	strb	r2, [r3, #0]
 80074a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a6:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	61fb      	str	r3, [r7, #28]
 80074ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	61bb      	str	r3, [r7, #24]
 80074b2:	e00b      	b.n	80074cc <SEGGER_SYSVIEW_SendModule+0xb8>
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	b2da      	uxtb	r2, r3
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	1c59      	adds	r1, r3, #1
 80074bc:	61f9      	str	r1, [r7, #28]
 80074be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	09db      	lsrs	r3, r3, #7
 80074ca:	61bb      	str	r3, [r7, #24]
 80074cc:	69bb      	ldr	r3, [r7, #24]
 80074ce:	2b7f      	cmp	r3, #127	; 0x7f
 80074d0:	d8f0      	bhi.n	80074b4 <SEGGER_SYSVIEW_SendModule+0xa0>
 80074d2:	69fb      	ldr	r3, [r7, #28]
 80074d4:	1c5a      	adds	r2, r3, #1
 80074d6:	61fa      	str	r2, [r7, #28]
 80074d8:	69ba      	ldr	r2, [r7, #24]
 80074da:	b2d2      	uxtb	r2, r2
 80074dc:	701a      	strb	r2, [r3, #0]
 80074de:	69fb      	ldr	r3, [r7, #28]
 80074e0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	2280      	movs	r2, #128	; 0x80
 80074e8:	4619      	mov	r1, r3
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7fe fb92 	bl	8005c14 <_EncodeStr>
 80074f0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80074f2:	2216      	movs	r2, #22
 80074f4:	68f9      	ldr	r1, [r7, #12]
 80074f6:	6938      	ldr	r0, [r7, #16]
 80074f8:	f7fe fcc8 	bl	8005e8c <_SendPacket>
      RECORD_END();
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8007502:	bf00      	nop
 8007504:	3730      	adds	r7, #48	; 0x30
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20014444 	.word	0x20014444
 8007510:	2001444c 	.word	0x2001444c

08007514 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800751a:	4b0c      	ldr	r3, [pc, #48]	; (800754c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00f      	beq.n	8007542 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8007522:	4b0a      	ldr	r3, [pc, #40]	; (800754c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d002      	beq.n	8007536 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	68db      	ldr	r3, [r3, #12]
 8007534:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	691b      	ldr	r3, [r3, #16]
 800753a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f2      	bne.n	8007528 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8007542:	bf00      	nop
 8007544:	3708      	adds	r7, #8
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20014444 	.word	0x20014444

08007550 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007550:	b580      	push	{r7, lr}
 8007552:	b086      	sub	sp, #24
 8007554:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8007556:	f3ef 8311 	mrs	r3, BASEPRI
 800755a:	f04f 0120 	mov.w	r1, #32
 800755e:	f381 8811 	msr	BASEPRI, r1
 8007562:	60fb      	str	r3, [r7, #12]
 8007564:	4817      	ldr	r0, [pc, #92]	; (80075c4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8007566:	f7fe fba2 	bl	8005cae <_PreparePacket>
 800756a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	4b14      	ldr	r3, [pc, #80]	; (80075c8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007576:	781b      	ldrb	r3, [r3, #0]
 8007578:	613b      	str	r3, [r7, #16]
 800757a:	e00b      	b.n	8007594 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	b2da      	uxtb	r2, r3
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	1c59      	adds	r1, r3, #1
 8007584:	6179      	str	r1, [r7, #20]
 8007586:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800758a:	b2d2      	uxtb	r2, r2
 800758c:	701a      	strb	r2, [r3, #0]
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	09db      	lsrs	r3, r3, #7
 8007592:	613b      	str	r3, [r7, #16]
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	2b7f      	cmp	r3, #127	; 0x7f
 8007598:	d8f0      	bhi.n	800757c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	1c5a      	adds	r2, r3, #1
 800759e:	617a      	str	r2, [r7, #20]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	b2d2      	uxtb	r2, r2
 80075a4:	701a      	strb	r2, [r3, #0]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80075aa:	221b      	movs	r2, #27
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	68b8      	ldr	r0, [r7, #8]
 80075b0:	f7fe fc6c 	bl	8005e8c <_SendPacket>
  RECORD_END();
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f383 8811 	msr	BASEPRI, r3
}
 80075ba:	bf00      	nop
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}
 80075c2:	bf00      	nop
 80075c4:	2001444c 	.word	0x2001444c
 80075c8:	20014448 	.word	0x20014448

080075cc <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80075cc:	b40f      	push	{r0, r1, r2, r3}
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b082      	sub	sp, #8
 80075d2:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80075d4:	f107 0314 	add.w	r3, r7, #20
 80075d8:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80075da:	1d3b      	adds	r3, r7, #4
 80075dc:	461a      	mov	r2, r3
 80075de:	2100      	movs	r1, #0
 80075e0:	6938      	ldr	r0, [r7, #16]
 80075e2:	f7fe fedb 	bl	800639c <_VPrintTarget>
  va_end(ParamList);
}
 80075e6:	bf00      	nop
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075f0:	b004      	add	sp, #16
 80075f2:	4770      	bx	lr

080075f4 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b08a      	sub	sp, #40	; 0x28
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80075fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007600:	f04f 0120 	mov.w	r1, #32
 8007604:	f381 8811 	msr	BASEPRI, r1
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	4827      	ldr	r0, [pc, #156]	; (80076a8 <SEGGER_SYSVIEW_Warn+0xb4>)
 800760c:	f7fe fb4f 	bl	8005cae <_PreparePacket>
 8007610:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007612:	2280      	movs	r2, #128	; 0x80
 8007614:	6879      	ldr	r1, [r7, #4]
 8007616:	6938      	ldr	r0, [r7, #16]
 8007618:	f7fe fafc 	bl	8005c14 <_EncodeStr>
 800761c:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	627b      	str	r3, [r7, #36]	; 0x24
 8007622:	2301      	movs	r3, #1
 8007624:	623b      	str	r3, [r7, #32]
 8007626:	e00b      	b.n	8007640 <SEGGER_SYSVIEW_Warn+0x4c>
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	b2da      	uxtb	r2, r3
 800762c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762e:	1c59      	adds	r1, r3, #1
 8007630:	6279      	str	r1, [r7, #36]	; 0x24
 8007632:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	701a      	strb	r2, [r3, #0]
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	09db      	lsrs	r3, r3, #7
 800763e:	623b      	str	r3, [r7, #32]
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	2b7f      	cmp	r3, #127	; 0x7f
 8007644:	d8f0      	bhi.n	8007628 <SEGGER_SYSVIEW_Warn+0x34>
 8007646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007648:	1c5a      	adds	r2, r3, #1
 800764a:	627a      	str	r2, [r7, #36]	; 0x24
 800764c:	6a3a      	ldr	r2, [r7, #32]
 800764e:	b2d2      	uxtb	r2, r2
 8007650:	701a      	strb	r2, [r3, #0]
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	61fb      	str	r3, [r7, #28]
 800765a:	2300      	movs	r3, #0
 800765c:	61bb      	str	r3, [r7, #24]
 800765e:	e00b      	b.n	8007678 <SEGGER_SYSVIEW_Warn+0x84>
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	b2da      	uxtb	r2, r3
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	1c59      	adds	r1, r3, #1
 8007668:	61f9      	str	r1, [r7, #28]
 800766a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800766e:	b2d2      	uxtb	r2, r2
 8007670:	701a      	strb	r2, [r3, #0]
 8007672:	69bb      	ldr	r3, [r7, #24]
 8007674:	09db      	lsrs	r3, r3, #7
 8007676:	61bb      	str	r3, [r7, #24]
 8007678:	69bb      	ldr	r3, [r7, #24]
 800767a:	2b7f      	cmp	r3, #127	; 0x7f
 800767c:	d8f0      	bhi.n	8007660 <SEGGER_SYSVIEW_Warn+0x6c>
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	61fa      	str	r2, [r7, #28]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	b2d2      	uxtb	r2, r2
 8007688:	701a      	strb	r2, [r3, #0]
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800768e:	221a      	movs	r2, #26
 8007690:	68f9      	ldr	r1, [r7, #12]
 8007692:	6938      	ldr	r0, [r7, #16]
 8007694:	f7fe fbfa 	bl	8005e8c <_SendPacket>
  RECORD_END();
 8007698:	697b      	ldr	r3, [r7, #20]
 800769a:	f383 8811 	msr	BASEPRI, r3
}
 800769e:	bf00      	nop
 80076a0:	3728      	adds	r7, #40	; 0x28
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	2001444c 	.word	0x2001444c

080076ac <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80076b0:	4b13      	ldr	r3, [pc, #76]	; (8007700 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076b2:	7e1b      	ldrb	r3, [r3, #24]
 80076b4:	4619      	mov	r1, r3
 80076b6:	4a13      	ldr	r2, [pc, #76]	; (8007704 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076b8:	460b      	mov	r3, r1
 80076ba:	005b      	lsls	r3, r3, #1
 80076bc:	440b      	add	r3, r1
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	4413      	add	r3, r2
 80076c2:	336c      	adds	r3, #108	; 0x6c
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	4b0e      	ldr	r3, [pc, #56]	; (8007700 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076c8:	7e1b      	ldrb	r3, [r3, #24]
 80076ca:	4618      	mov	r0, r3
 80076cc:	490d      	ldr	r1, [pc, #52]	; (8007704 <SEGGER_SYSVIEW_IsStarted+0x58>)
 80076ce:	4603      	mov	r3, r0
 80076d0:	005b      	lsls	r3, r3, #1
 80076d2:	4403      	add	r3, r0
 80076d4:	00db      	lsls	r3, r3, #3
 80076d6:	440b      	add	r3, r1
 80076d8:	3370      	adds	r3, #112	; 0x70
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d00b      	beq.n	80076f8 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80076e0:	4b07      	ldr	r3, [pc, #28]	; (8007700 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076e2:	789b      	ldrb	r3, [r3, #2]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d107      	bne.n	80076f8 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80076e8:	4b05      	ldr	r3, [pc, #20]	; (8007700 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076ea:	2201      	movs	r2, #1
 80076ec:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80076ee:	f7fe faeb 	bl	8005cc8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80076f2:	4b03      	ldr	r3, [pc, #12]	; (8007700 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80076f8:	4b01      	ldr	r3, [pc, #4]	; (8007700 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80076fa:	781b      	ldrb	r3, [r3, #0]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	2001441c 	.word	0x2001441c
 8007704:	20012f5c 	.word	0x20012f5c

08007708 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007708:	b580      	push	{r7, lr}
 800770a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800770c:	4803      	ldr	r0, [pc, #12]	; (800771c <_cbSendSystemDesc+0x14>)
 800770e:	f7ff fcbf 	bl	8007090 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8007712:	4803      	ldr	r0, [pc, #12]	; (8007720 <_cbSendSystemDesc+0x18>)
 8007714:	f7ff fcbc 	bl	8007090 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007718:	bf00      	nop
 800771a:	bd80      	pop	{r7, pc}
 800771c:	080087a0 	.word	0x080087a0
 8007720:	080087dc 	.word	0x080087dc

08007724 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8007724:	b580      	push	{r7, lr}
 8007726:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007728:	4b06      	ldr	r3, [pc, #24]	; (8007744 <SEGGER_SYSVIEW_Conf+0x20>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	4b05      	ldr	r3, [pc, #20]	; (8007744 <SEGGER_SYSVIEW_Conf+0x20>)
 800772e:	6819      	ldr	r1, [r3, #0]
 8007730:	4b05      	ldr	r3, [pc, #20]	; (8007748 <SEGGER_SYSVIEW_Conf+0x24>)
 8007732:	4a06      	ldr	r2, [pc, #24]	; (800774c <SEGGER_SYSVIEW_Conf+0x28>)
 8007734:	f7ff f82a 	bl	800678c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007738:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800773c:	f7ff f86a 	bl	8006814 <SEGGER_SYSVIEW_SetRAMBase>
}
 8007740:	bf00      	nop
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20000000 	.word	0x20000000
 8007748:	08007709 	.word	0x08007709
 800774c:	08008804 	.word	0x08008804

08007750 <std>:
 8007750:	2300      	movs	r3, #0
 8007752:	b510      	push	{r4, lr}
 8007754:	4604      	mov	r4, r0
 8007756:	e9c0 3300 	strd	r3, r3, [r0]
 800775a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800775e:	6083      	str	r3, [r0, #8]
 8007760:	8181      	strh	r1, [r0, #12]
 8007762:	6643      	str	r3, [r0, #100]	; 0x64
 8007764:	81c2      	strh	r2, [r0, #14]
 8007766:	6183      	str	r3, [r0, #24]
 8007768:	4619      	mov	r1, r3
 800776a:	2208      	movs	r2, #8
 800776c:	305c      	adds	r0, #92	; 0x5c
 800776e:	f000 f904 	bl	800797a <memset>
 8007772:	4b05      	ldr	r3, [pc, #20]	; (8007788 <std+0x38>)
 8007774:	6263      	str	r3, [r4, #36]	; 0x24
 8007776:	4b05      	ldr	r3, [pc, #20]	; (800778c <std+0x3c>)
 8007778:	62a3      	str	r3, [r4, #40]	; 0x28
 800777a:	4b05      	ldr	r3, [pc, #20]	; (8007790 <std+0x40>)
 800777c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800777e:	4b05      	ldr	r3, [pc, #20]	; (8007794 <std+0x44>)
 8007780:	6224      	str	r4, [r4, #32]
 8007782:	6323      	str	r3, [r4, #48]	; 0x30
 8007784:	bd10      	pop	{r4, pc}
 8007786:	bf00      	nop
 8007788:	080078d5 	.word	0x080078d5
 800778c:	080078f7 	.word	0x080078f7
 8007790:	0800792f 	.word	0x0800792f
 8007794:	08007953 	.word	0x08007953

08007798 <stdio_exit_handler>:
 8007798:	4a02      	ldr	r2, [pc, #8]	; (80077a4 <stdio_exit_handler+0xc>)
 800779a:	4903      	ldr	r1, [pc, #12]	; (80077a8 <stdio_exit_handler+0x10>)
 800779c:	4803      	ldr	r0, [pc, #12]	; (80077ac <stdio_exit_handler+0x14>)
 800779e:	f000 b869 	b.w	8007874 <_fwalk_sglue>
 80077a2:	bf00      	nop
 80077a4:	2000001c 	.word	0x2000001c
 80077a8:	08008325 	.word	0x08008325
 80077ac:	20000028 	.word	0x20000028

080077b0 <cleanup_stdio>:
 80077b0:	6841      	ldr	r1, [r0, #4]
 80077b2:	4b0c      	ldr	r3, [pc, #48]	; (80077e4 <cleanup_stdio+0x34>)
 80077b4:	4299      	cmp	r1, r3
 80077b6:	b510      	push	{r4, lr}
 80077b8:	4604      	mov	r4, r0
 80077ba:	d001      	beq.n	80077c0 <cleanup_stdio+0x10>
 80077bc:	f000 fdb2 	bl	8008324 <_fflush_r>
 80077c0:	68a1      	ldr	r1, [r4, #8]
 80077c2:	4b09      	ldr	r3, [pc, #36]	; (80077e8 <cleanup_stdio+0x38>)
 80077c4:	4299      	cmp	r1, r3
 80077c6:	d002      	beq.n	80077ce <cleanup_stdio+0x1e>
 80077c8:	4620      	mov	r0, r4
 80077ca:	f000 fdab 	bl	8008324 <_fflush_r>
 80077ce:	68e1      	ldr	r1, [r4, #12]
 80077d0:	4b06      	ldr	r3, [pc, #24]	; (80077ec <cleanup_stdio+0x3c>)
 80077d2:	4299      	cmp	r1, r3
 80077d4:	d004      	beq.n	80077e0 <cleanup_stdio+0x30>
 80077d6:	4620      	mov	r0, r4
 80077d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077dc:	f000 bda2 	b.w	8008324 <_fflush_r>
 80077e0:	bd10      	pop	{r4, pc}
 80077e2:	bf00      	nop
 80077e4:	20014530 	.word	0x20014530
 80077e8:	20014598 	.word	0x20014598
 80077ec:	20014600 	.word	0x20014600

080077f0 <global_stdio_init.part.0>:
 80077f0:	b510      	push	{r4, lr}
 80077f2:	4b0b      	ldr	r3, [pc, #44]	; (8007820 <global_stdio_init.part.0+0x30>)
 80077f4:	4c0b      	ldr	r4, [pc, #44]	; (8007824 <global_stdio_init.part.0+0x34>)
 80077f6:	4a0c      	ldr	r2, [pc, #48]	; (8007828 <global_stdio_init.part.0+0x38>)
 80077f8:	601a      	str	r2, [r3, #0]
 80077fa:	4620      	mov	r0, r4
 80077fc:	2200      	movs	r2, #0
 80077fe:	2104      	movs	r1, #4
 8007800:	f7ff ffa6 	bl	8007750 <std>
 8007804:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007808:	2201      	movs	r2, #1
 800780a:	2109      	movs	r1, #9
 800780c:	f7ff ffa0 	bl	8007750 <std>
 8007810:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007814:	2202      	movs	r2, #2
 8007816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781a:	2112      	movs	r1, #18
 800781c:	f7ff bf98 	b.w	8007750 <std>
 8007820:	20014668 	.word	0x20014668
 8007824:	20014530 	.word	0x20014530
 8007828:	08007799 	.word	0x08007799

0800782c <__sfp_lock_acquire>:
 800782c:	4801      	ldr	r0, [pc, #4]	; (8007834 <__sfp_lock_acquire+0x8>)
 800782e:	f000 b917 	b.w	8007a60 <__retarget_lock_acquire_recursive>
 8007832:	bf00      	nop
 8007834:	20014671 	.word	0x20014671

08007838 <__sfp_lock_release>:
 8007838:	4801      	ldr	r0, [pc, #4]	; (8007840 <__sfp_lock_release+0x8>)
 800783a:	f000 b912 	b.w	8007a62 <__retarget_lock_release_recursive>
 800783e:	bf00      	nop
 8007840:	20014671 	.word	0x20014671

08007844 <__sinit>:
 8007844:	b510      	push	{r4, lr}
 8007846:	4604      	mov	r4, r0
 8007848:	f7ff fff0 	bl	800782c <__sfp_lock_acquire>
 800784c:	6a23      	ldr	r3, [r4, #32]
 800784e:	b11b      	cbz	r3, 8007858 <__sinit+0x14>
 8007850:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007854:	f7ff bff0 	b.w	8007838 <__sfp_lock_release>
 8007858:	4b04      	ldr	r3, [pc, #16]	; (800786c <__sinit+0x28>)
 800785a:	6223      	str	r3, [r4, #32]
 800785c:	4b04      	ldr	r3, [pc, #16]	; (8007870 <__sinit+0x2c>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d1f5      	bne.n	8007850 <__sinit+0xc>
 8007864:	f7ff ffc4 	bl	80077f0 <global_stdio_init.part.0>
 8007868:	e7f2      	b.n	8007850 <__sinit+0xc>
 800786a:	bf00      	nop
 800786c:	080077b1 	.word	0x080077b1
 8007870:	20014668 	.word	0x20014668

08007874 <_fwalk_sglue>:
 8007874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007878:	4607      	mov	r7, r0
 800787a:	4688      	mov	r8, r1
 800787c:	4614      	mov	r4, r2
 800787e:	2600      	movs	r6, #0
 8007880:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007884:	f1b9 0901 	subs.w	r9, r9, #1
 8007888:	d505      	bpl.n	8007896 <_fwalk_sglue+0x22>
 800788a:	6824      	ldr	r4, [r4, #0]
 800788c:	2c00      	cmp	r4, #0
 800788e:	d1f7      	bne.n	8007880 <_fwalk_sglue+0xc>
 8007890:	4630      	mov	r0, r6
 8007892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007896:	89ab      	ldrh	r3, [r5, #12]
 8007898:	2b01      	cmp	r3, #1
 800789a:	d907      	bls.n	80078ac <_fwalk_sglue+0x38>
 800789c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80078a0:	3301      	adds	r3, #1
 80078a2:	d003      	beq.n	80078ac <_fwalk_sglue+0x38>
 80078a4:	4629      	mov	r1, r5
 80078a6:	4638      	mov	r0, r7
 80078a8:	47c0      	blx	r8
 80078aa:	4306      	orrs	r6, r0
 80078ac:	3568      	adds	r5, #104	; 0x68
 80078ae:	e7e9      	b.n	8007884 <_fwalk_sglue+0x10>

080078b0 <iprintf>:
 80078b0:	b40f      	push	{r0, r1, r2, r3}
 80078b2:	b507      	push	{r0, r1, r2, lr}
 80078b4:	4906      	ldr	r1, [pc, #24]	; (80078d0 <iprintf+0x20>)
 80078b6:	ab04      	add	r3, sp, #16
 80078b8:	6808      	ldr	r0, [r1, #0]
 80078ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80078be:	6881      	ldr	r1, [r0, #8]
 80078c0:	9301      	str	r3, [sp, #4]
 80078c2:	f000 f9ff 	bl	8007cc4 <_vfiprintf_r>
 80078c6:	b003      	add	sp, #12
 80078c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80078cc:	b004      	add	sp, #16
 80078ce:	4770      	bx	lr
 80078d0:	20000074 	.word	0x20000074

080078d4 <__sread>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	460c      	mov	r4, r1
 80078d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078dc:	f000 f878 	bl	80079d0 <_read_r>
 80078e0:	2800      	cmp	r0, #0
 80078e2:	bfab      	itete	ge
 80078e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078e6:	89a3      	ldrhlt	r3, [r4, #12]
 80078e8:	181b      	addge	r3, r3, r0
 80078ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078ee:	bfac      	ite	ge
 80078f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80078f2:	81a3      	strhlt	r3, [r4, #12]
 80078f4:	bd10      	pop	{r4, pc}

080078f6 <__swrite>:
 80078f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078fa:	461f      	mov	r7, r3
 80078fc:	898b      	ldrh	r3, [r1, #12]
 80078fe:	05db      	lsls	r3, r3, #23
 8007900:	4605      	mov	r5, r0
 8007902:	460c      	mov	r4, r1
 8007904:	4616      	mov	r6, r2
 8007906:	d505      	bpl.n	8007914 <__swrite+0x1e>
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	2302      	movs	r3, #2
 800790e:	2200      	movs	r2, #0
 8007910:	f000 f84c 	bl	80079ac <_lseek_r>
 8007914:	89a3      	ldrh	r3, [r4, #12]
 8007916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800791a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800791e:	81a3      	strh	r3, [r4, #12]
 8007920:	4632      	mov	r2, r6
 8007922:	463b      	mov	r3, r7
 8007924:	4628      	mov	r0, r5
 8007926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800792a:	f000 b863 	b.w	80079f4 <_write_r>

0800792e <__sseek>:
 800792e:	b510      	push	{r4, lr}
 8007930:	460c      	mov	r4, r1
 8007932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007936:	f000 f839 	bl	80079ac <_lseek_r>
 800793a:	1c43      	adds	r3, r0, #1
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	bf15      	itete	ne
 8007940:	6560      	strne	r0, [r4, #84]	; 0x54
 8007942:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007946:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800794a:	81a3      	strheq	r3, [r4, #12]
 800794c:	bf18      	it	ne
 800794e:	81a3      	strhne	r3, [r4, #12]
 8007950:	bd10      	pop	{r4, pc}

08007952 <__sclose>:
 8007952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007956:	f000 b819 	b.w	800798c <_close_r>

0800795a <memcmp>:
 800795a:	b510      	push	{r4, lr}
 800795c:	3901      	subs	r1, #1
 800795e:	4402      	add	r2, r0
 8007960:	4290      	cmp	r0, r2
 8007962:	d101      	bne.n	8007968 <memcmp+0xe>
 8007964:	2000      	movs	r0, #0
 8007966:	e005      	b.n	8007974 <memcmp+0x1a>
 8007968:	7803      	ldrb	r3, [r0, #0]
 800796a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800796e:	42a3      	cmp	r3, r4
 8007970:	d001      	beq.n	8007976 <memcmp+0x1c>
 8007972:	1b18      	subs	r0, r3, r4
 8007974:	bd10      	pop	{r4, pc}
 8007976:	3001      	adds	r0, #1
 8007978:	e7f2      	b.n	8007960 <memcmp+0x6>

0800797a <memset>:
 800797a:	4402      	add	r2, r0
 800797c:	4603      	mov	r3, r0
 800797e:	4293      	cmp	r3, r2
 8007980:	d100      	bne.n	8007984 <memset+0xa>
 8007982:	4770      	bx	lr
 8007984:	f803 1b01 	strb.w	r1, [r3], #1
 8007988:	e7f9      	b.n	800797e <memset+0x4>
	...

0800798c <_close_r>:
 800798c:	b538      	push	{r3, r4, r5, lr}
 800798e:	4d06      	ldr	r5, [pc, #24]	; (80079a8 <_close_r+0x1c>)
 8007990:	2300      	movs	r3, #0
 8007992:	4604      	mov	r4, r0
 8007994:	4608      	mov	r0, r1
 8007996:	602b      	str	r3, [r5, #0]
 8007998:	f7f9 fa47 	bl	8000e2a <_close>
 800799c:	1c43      	adds	r3, r0, #1
 800799e:	d102      	bne.n	80079a6 <_close_r+0x1a>
 80079a0:	682b      	ldr	r3, [r5, #0]
 80079a2:	b103      	cbz	r3, 80079a6 <_close_r+0x1a>
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	bd38      	pop	{r3, r4, r5, pc}
 80079a8:	2001466c 	.word	0x2001466c

080079ac <_lseek_r>:
 80079ac:	b538      	push	{r3, r4, r5, lr}
 80079ae:	4d07      	ldr	r5, [pc, #28]	; (80079cc <_lseek_r+0x20>)
 80079b0:	4604      	mov	r4, r0
 80079b2:	4608      	mov	r0, r1
 80079b4:	4611      	mov	r1, r2
 80079b6:	2200      	movs	r2, #0
 80079b8:	602a      	str	r2, [r5, #0]
 80079ba:	461a      	mov	r2, r3
 80079bc:	f7f9 fa5c 	bl	8000e78 <_lseek>
 80079c0:	1c43      	adds	r3, r0, #1
 80079c2:	d102      	bne.n	80079ca <_lseek_r+0x1e>
 80079c4:	682b      	ldr	r3, [r5, #0]
 80079c6:	b103      	cbz	r3, 80079ca <_lseek_r+0x1e>
 80079c8:	6023      	str	r3, [r4, #0]
 80079ca:	bd38      	pop	{r3, r4, r5, pc}
 80079cc:	2001466c 	.word	0x2001466c

080079d0 <_read_r>:
 80079d0:	b538      	push	{r3, r4, r5, lr}
 80079d2:	4d07      	ldr	r5, [pc, #28]	; (80079f0 <_read_r+0x20>)
 80079d4:	4604      	mov	r4, r0
 80079d6:	4608      	mov	r0, r1
 80079d8:	4611      	mov	r1, r2
 80079da:	2200      	movs	r2, #0
 80079dc:	602a      	str	r2, [r5, #0]
 80079de:	461a      	mov	r2, r3
 80079e0:	f7f9 f9ea 	bl	8000db8 <_read>
 80079e4:	1c43      	adds	r3, r0, #1
 80079e6:	d102      	bne.n	80079ee <_read_r+0x1e>
 80079e8:	682b      	ldr	r3, [r5, #0]
 80079ea:	b103      	cbz	r3, 80079ee <_read_r+0x1e>
 80079ec:	6023      	str	r3, [r4, #0]
 80079ee:	bd38      	pop	{r3, r4, r5, pc}
 80079f0:	2001466c 	.word	0x2001466c

080079f4 <_write_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4d07      	ldr	r5, [pc, #28]	; (8007a14 <_write_r+0x20>)
 80079f8:	4604      	mov	r4, r0
 80079fa:	4608      	mov	r0, r1
 80079fc:	4611      	mov	r1, r2
 80079fe:	2200      	movs	r2, #0
 8007a00:	602a      	str	r2, [r5, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	f7f9 f9f5 	bl	8000df2 <_write>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_write_r+0x1e>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_write_r+0x1e>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	2001466c 	.word	0x2001466c

08007a18 <__libc_init_array>:
 8007a18:	b570      	push	{r4, r5, r6, lr}
 8007a1a:	4d0d      	ldr	r5, [pc, #52]	; (8007a50 <__libc_init_array+0x38>)
 8007a1c:	4c0d      	ldr	r4, [pc, #52]	; (8007a54 <__libc_init_array+0x3c>)
 8007a1e:	1b64      	subs	r4, r4, r5
 8007a20:	10a4      	asrs	r4, r4, #2
 8007a22:	2600      	movs	r6, #0
 8007a24:	42a6      	cmp	r6, r4
 8007a26:	d109      	bne.n	8007a3c <__libc_init_array+0x24>
 8007a28:	4d0b      	ldr	r5, [pc, #44]	; (8007a58 <__libc_init_array+0x40>)
 8007a2a:	4c0c      	ldr	r4, [pc, #48]	; (8007a5c <__libc_init_array+0x44>)
 8007a2c:	f000 fdda 	bl	80085e4 <_init>
 8007a30:	1b64      	subs	r4, r4, r5
 8007a32:	10a4      	asrs	r4, r4, #2
 8007a34:	2600      	movs	r6, #0
 8007a36:	42a6      	cmp	r6, r4
 8007a38:	d105      	bne.n	8007a46 <__libc_init_array+0x2e>
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a40:	4798      	blx	r3
 8007a42:	3601      	adds	r6, #1
 8007a44:	e7ee      	b.n	8007a24 <__libc_init_array+0xc>
 8007a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a4a:	4798      	blx	r3
 8007a4c:	3601      	adds	r6, #1
 8007a4e:	e7f2      	b.n	8007a36 <__libc_init_array+0x1e>
 8007a50:	08008868 	.word	0x08008868
 8007a54:	08008868 	.word	0x08008868
 8007a58:	08008868 	.word	0x08008868
 8007a5c:	0800886c 	.word	0x0800886c

08007a60 <__retarget_lock_acquire_recursive>:
 8007a60:	4770      	bx	lr

08007a62 <__retarget_lock_release_recursive>:
 8007a62:	4770      	bx	lr

08007a64 <memcpy>:
 8007a64:	440a      	add	r2, r1
 8007a66:	4291      	cmp	r1, r2
 8007a68:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a6c:	d100      	bne.n	8007a70 <memcpy+0xc>
 8007a6e:	4770      	bx	lr
 8007a70:	b510      	push	{r4, lr}
 8007a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a76:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a7a:	4291      	cmp	r1, r2
 8007a7c:	d1f9      	bne.n	8007a72 <memcpy+0xe>
 8007a7e:	bd10      	pop	{r4, pc}

08007a80 <_free_r>:
 8007a80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a82:	2900      	cmp	r1, #0
 8007a84:	d044      	beq.n	8007b10 <_free_r+0x90>
 8007a86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a8a:	9001      	str	r0, [sp, #4]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f1a1 0404 	sub.w	r4, r1, #4
 8007a92:	bfb8      	it	lt
 8007a94:	18e4      	addlt	r4, r4, r3
 8007a96:	f000 f8df 	bl	8007c58 <__malloc_lock>
 8007a9a:	4a1e      	ldr	r2, [pc, #120]	; (8007b14 <_free_r+0x94>)
 8007a9c:	9801      	ldr	r0, [sp, #4]
 8007a9e:	6813      	ldr	r3, [r2, #0]
 8007aa0:	b933      	cbnz	r3, 8007ab0 <_free_r+0x30>
 8007aa2:	6063      	str	r3, [r4, #4]
 8007aa4:	6014      	str	r4, [r2, #0]
 8007aa6:	b003      	add	sp, #12
 8007aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007aac:	f000 b8da 	b.w	8007c64 <__malloc_unlock>
 8007ab0:	42a3      	cmp	r3, r4
 8007ab2:	d908      	bls.n	8007ac6 <_free_r+0x46>
 8007ab4:	6825      	ldr	r5, [r4, #0]
 8007ab6:	1961      	adds	r1, r4, r5
 8007ab8:	428b      	cmp	r3, r1
 8007aba:	bf01      	itttt	eq
 8007abc:	6819      	ldreq	r1, [r3, #0]
 8007abe:	685b      	ldreq	r3, [r3, #4]
 8007ac0:	1949      	addeq	r1, r1, r5
 8007ac2:	6021      	streq	r1, [r4, #0]
 8007ac4:	e7ed      	b.n	8007aa2 <_free_r+0x22>
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	b10b      	cbz	r3, 8007ad0 <_free_r+0x50>
 8007acc:	42a3      	cmp	r3, r4
 8007ace:	d9fa      	bls.n	8007ac6 <_free_r+0x46>
 8007ad0:	6811      	ldr	r1, [r2, #0]
 8007ad2:	1855      	adds	r5, r2, r1
 8007ad4:	42a5      	cmp	r5, r4
 8007ad6:	d10b      	bne.n	8007af0 <_free_r+0x70>
 8007ad8:	6824      	ldr	r4, [r4, #0]
 8007ada:	4421      	add	r1, r4
 8007adc:	1854      	adds	r4, r2, r1
 8007ade:	42a3      	cmp	r3, r4
 8007ae0:	6011      	str	r1, [r2, #0]
 8007ae2:	d1e0      	bne.n	8007aa6 <_free_r+0x26>
 8007ae4:	681c      	ldr	r4, [r3, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	6053      	str	r3, [r2, #4]
 8007aea:	440c      	add	r4, r1
 8007aec:	6014      	str	r4, [r2, #0]
 8007aee:	e7da      	b.n	8007aa6 <_free_r+0x26>
 8007af0:	d902      	bls.n	8007af8 <_free_r+0x78>
 8007af2:	230c      	movs	r3, #12
 8007af4:	6003      	str	r3, [r0, #0]
 8007af6:	e7d6      	b.n	8007aa6 <_free_r+0x26>
 8007af8:	6825      	ldr	r5, [r4, #0]
 8007afa:	1961      	adds	r1, r4, r5
 8007afc:	428b      	cmp	r3, r1
 8007afe:	bf04      	itt	eq
 8007b00:	6819      	ldreq	r1, [r3, #0]
 8007b02:	685b      	ldreq	r3, [r3, #4]
 8007b04:	6063      	str	r3, [r4, #4]
 8007b06:	bf04      	itt	eq
 8007b08:	1949      	addeq	r1, r1, r5
 8007b0a:	6021      	streq	r1, [r4, #0]
 8007b0c:	6054      	str	r4, [r2, #4]
 8007b0e:	e7ca      	b.n	8007aa6 <_free_r+0x26>
 8007b10:	b003      	add	sp, #12
 8007b12:	bd30      	pop	{r4, r5, pc}
 8007b14:	20014674 	.word	0x20014674

08007b18 <sbrk_aligned>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	4e0e      	ldr	r6, [pc, #56]	; (8007b54 <sbrk_aligned+0x3c>)
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	6831      	ldr	r1, [r6, #0]
 8007b20:	4605      	mov	r5, r0
 8007b22:	b911      	cbnz	r1, 8007b2a <sbrk_aligned+0x12>
 8007b24:	f000 fcbc 	bl	80084a0 <_sbrk_r>
 8007b28:	6030      	str	r0, [r6, #0]
 8007b2a:	4621      	mov	r1, r4
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	f000 fcb7 	bl	80084a0 <_sbrk_r>
 8007b32:	1c43      	adds	r3, r0, #1
 8007b34:	d00a      	beq.n	8007b4c <sbrk_aligned+0x34>
 8007b36:	1cc4      	adds	r4, r0, #3
 8007b38:	f024 0403 	bic.w	r4, r4, #3
 8007b3c:	42a0      	cmp	r0, r4
 8007b3e:	d007      	beq.n	8007b50 <sbrk_aligned+0x38>
 8007b40:	1a21      	subs	r1, r4, r0
 8007b42:	4628      	mov	r0, r5
 8007b44:	f000 fcac 	bl	80084a0 <_sbrk_r>
 8007b48:	3001      	adds	r0, #1
 8007b4a:	d101      	bne.n	8007b50 <sbrk_aligned+0x38>
 8007b4c:	f04f 34ff 	mov.w	r4, #4294967295
 8007b50:	4620      	mov	r0, r4
 8007b52:	bd70      	pop	{r4, r5, r6, pc}
 8007b54:	20014678 	.word	0x20014678

08007b58 <_malloc_r>:
 8007b58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b5c:	1ccd      	adds	r5, r1, #3
 8007b5e:	f025 0503 	bic.w	r5, r5, #3
 8007b62:	3508      	adds	r5, #8
 8007b64:	2d0c      	cmp	r5, #12
 8007b66:	bf38      	it	cc
 8007b68:	250c      	movcc	r5, #12
 8007b6a:	2d00      	cmp	r5, #0
 8007b6c:	4607      	mov	r7, r0
 8007b6e:	db01      	blt.n	8007b74 <_malloc_r+0x1c>
 8007b70:	42a9      	cmp	r1, r5
 8007b72:	d905      	bls.n	8007b80 <_malloc_r+0x28>
 8007b74:	230c      	movs	r3, #12
 8007b76:	603b      	str	r3, [r7, #0]
 8007b78:	2600      	movs	r6, #0
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b80:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007c54 <_malloc_r+0xfc>
 8007b84:	f000 f868 	bl	8007c58 <__malloc_lock>
 8007b88:	f8d8 3000 	ldr.w	r3, [r8]
 8007b8c:	461c      	mov	r4, r3
 8007b8e:	bb5c      	cbnz	r4, 8007be8 <_malloc_r+0x90>
 8007b90:	4629      	mov	r1, r5
 8007b92:	4638      	mov	r0, r7
 8007b94:	f7ff ffc0 	bl	8007b18 <sbrk_aligned>
 8007b98:	1c43      	adds	r3, r0, #1
 8007b9a:	4604      	mov	r4, r0
 8007b9c:	d155      	bne.n	8007c4a <_malloc_r+0xf2>
 8007b9e:	f8d8 4000 	ldr.w	r4, [r8]
 8007ba2:	4626      	mov	r6, r4
 8007ba4:	2e00      	cmp	r6, #0
 8007ba6:	d145      	bne.n	8007c34 <_malloc_r+0xdc>
 8007ba8:	2c00      	cmp	r4, #0
 8007baa:	d048      	beq.n	8007c3e <_malloc_r+0xe6>
 8007bac:	6823      	ldr	r3, [r4, #0]
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4638      	mov	r0, r7
 8007bb2:	eb04 0903 	add.w	r9, r4, r3
 8007bb6:	f000 fc73 	bl	80084a0 <_sbrk_r>
 8007bba:	4581      	cmp	r9, r0
 8007bbc:	d13f      	bne.n	8007c3e <_malloc_r+0xe6>
 8007bbe:	6821      	ldr	r1, [r4, #0]
 8007bc0:	1a6d      	subs	r5, r5, r1
 8007bc2:	4629      	mov	r1, r5
 8007bc4:	4638      	mov	r0, r7
 8007bc6:	f7ff ffa7 	bl	8007b18 <sbrk_aligned>
 8007bca:	3001      	adds	r0, #1
 8007bcc:	d037      	beq.n	8007c3e <_malloc_r+0xe6>
 8007bce:	6823      	ldr	r3, [r4, #0]
 8007bd0:	442b      	add	r3, r5
 8007bd2:	6023      	str	r3, [r4, #0]
 8007bd4:	f8d8 3000 	ldr.w	r3, [r8]
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d038      	beq.n	8007c4e <_malloc_r+0xf6>
 8007bdc:	685a      	ldr	r2, [r3, #4]
 8007bde:	42a2      	cmp	r2, r4
 8007be0:	d12b      	bne.n	8007c3a <_malloc_r+0xe2>
 8007be2:	2200      	movs	r2, #0
 8007be4:	605a      	str	r2, [r3, #4]
 8007be6:	e00f      	b.n	8007c08 <_malloc_r+0xb0>
 8007be8:	6822      	ldr	r2, [r4, #0]
 8007bea:	1b52      	subs	r2, r2, r5
 8007bec:	d41f      	bmi.n	8007c2e <_malloc_r+0xd6>
 8007bee:	2a0b      	cmp	r2, #11
 8007bf0:	d917      	bls.n	8007c22 <_malloc_r+0xca>
 8007bf2:	1961      	adds	r1, r4, r5
 8007bf4:	42a3      	cmp	r3, r4
 8007bf6:	6025      	str	r5, [r4, #0]
 8007bf8:	bf18      	it	ne
 8007bfa:	6059      	strne	r1, [r3, #4]
 8007bfc:	6863      	ldr	r3, [r4, #4]
 8007bfe:	bf08      	it	eq
 8007c00:	f8c8 1000 	streq.w	r1, [r8]
 8007c04:	5162      	str	r2, [r4, r5]
 8007c06:	604b      	str	r3, [r1, #4]
 8007c08:	4638      	mov	r0, r7
 8007c0a:	f104 060b 	add.w	r6, r4, #11
 8007c0e:	f000 f829 	bl	8007c64 <__malloc_unlock>
 8007c12:	f026 0607 	bic.w	r6, r6, #7
 8007c16:	1d23      	adds	r3, r4, #4
 8007c18:	1af2      	subs	r2, r6, r3
 8007c1a:	d0ae      	beq.n	8007b7a <_malloc_r+0x22>
 8007c1c:	1b9b      	subs	r3, r3, r6
 8007c1e:	50a3      	str	r3, [r4, r2]
 8007c20:	e7ab      	b.n	8007b7a <_malloc_r+0x22>
 8007c22:	42a3      	cmp	r3, r4
 8007c24:	6862      	ldr	r2, [r4, #4]
 8007c26:	d1dd      	bne.n	8007be4 <_malloc_r+0x8c>
 8007c28:	f8c8 2000 	str.w	r2, [r8]
 8007c2c:	e7ec      	b.n	8007c08 <_malloc_r+0xb0>
 8007c2e:	4623      	mov	r3, r4
 8007c30:	6864      	ldr	r4, [r4, #4]
 8007c32:	e7ac      	b.n	8007b8e <_malloc_r+0x36>
 8007c34:	4634      	mov	r4, r6
 8007c36:	6876      	ldr	r6, [r6, #4]
 8007c38:	e7b4      	b.n	8007ba4 <_malloc_r+0x4c>
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	e7cc      	b.n	8007bd8 <_malloc_r+0x80>
 8007c3e:	230c      	movs	r3, #12
 8007c40:	603b      	str	r3, [r7, #0]
 8007c42:	4638      	mov	r0, r7
 8007c44:	f000 f80e 	bl	8007c64 <__malloc_unlock>
 8007c48:	e797      	b.n	8007b7a <_malloc_r+0x22>
 8007c4a:	6025      	str	r5, [r4, #0]
 8007c4c:	e7dc      	b.n	8007c08 <_malloc_r+0xb0>
 8007c4e:	605b      	str	r3, [r3, #4]
 8007c50:	deff      	udf	#255	; 0xff
 8007c52:	bf00      	nop
 8007c54:	20014674 	.word	0x20014674

08007c58 <__malloc_lock>:
 8007c58:	4801      	ldr	r0, [pc, #4]	; (8007c60 <__malloc_lock+0x8>)
 8007c5a:	f7ff bf01 	b.w	8007a60 <__retarget_lock_acquire_recursive>
 8007c5e:	bf00      	nop
 8007c60:	20014670 	.word	0x20014670

08007c64 <__malloc_unlock>:
 8007c64:	4801      	ldr	r0, [pc, #4]	; (8007c6c <__malloc_unlock+0x8>)
 8007c66:	f7ff befc 	b.w	8007a62 <__retarget_lock_release_recursive>
 8007c6a:	bf00      	nop
 8007c6c:	20014670 	.word	0x20014670

08007c70 <__sfputc_r>:
 8007c70:	6893      	ldr	r3, [r2, #8]
 8007c72:	3b01      	subs	r3, #1
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	b410      	push	{r4}
 8007c78:	6093      	str	r3, [r2, #8]
 8007c7a:	da08      	bge.n	8007c8e <__sfputc_r+0x1e>
 8007c7c:	6994      	ldr	r4, [r2, #24]
 8007c7e:	42a3      	cmp	r3, r4
 8007c80:	db01      	blt.n	8007c86 <__sfputc_r+0x16>
 8007c82:	290a      	cmp	r1, #10
 8007c84:	d103      	bne.n	8007c8e <__sfputc_r+0x1e>
 8007c86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c8a:	f000 bb73 	b.w	8008374 <__swbuf_r>
 8007c8e:	6813      	ldr	r3, [r2, #0]
 8007c90:	1c58      	adds	r0, r3, #1
 8007c92:	6010      	str	r0, [r2, #0]
 8007c94:	7019      	strb	r1, [r3, #0]
 8007c96:	4608      	mov	r0, r1
 8007c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <__sfputs_r>:
 8007c9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	460f      	mov	r7, r1
 8007ca4:	4614      	mov	r4, r2
 8007ca6:	18d5      	adds	r5, r2, r3
 8007ca8:	42ac      	cmp	r4, r5
 8007caa:	d101      	bne.n	8007cb0 <__sfputs_r+0x12>
 8007cac:	2000      	movs	r0, #0
 8007cae:	e007      	b.n	8007cc0 <__sfputs_r+0x22>
 8007cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb4:	463a      	mov	r2, r7
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	f7ff ffda 	bl	8007c70 <__sfputc_r>
 8007cbc:	1c43      	adds	r3, r0, #1
 8007cbe:	d1f3      	bne.n	8007ca8 <__sfputs_r+0xa>
 8007cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007cc4 <_vfiprintf_r>:
 8007cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cc8:	460d      	mov	r5, r1
 8007cca:	b09d      	sub	sp, #116	; 0x74
 8007ccc:	4614      	mov	r4, r2
 8007cce:	4698      	mov	r8, r3
 8007cd0:	4606      	mov	r6, r0
 8007cd2:	b118      	cbz	r0, 8007cdc <_vfiprintf_r+0x18>
 8007cd4:	6a03      	ldr	r3, [r0, #32]
 8007cd6:	b90b      	cbnz	r3, 8007cdc <_vfiprintf_r+0x18>
 8007cd8:	f7ff fdb4 	bl	8007844 <__sinit>
 8007cdc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007cde:	07d9      	lsls	r1, r3, #31
 8007ce0:	d405      	bmi.n	8007cee <_vfiprintf_r+0x2a>
 8007ce2:	89ab      	ldrh	r3, [r5, #12]
 8007ce4:	059a      	lsls	r2, r3, #22
 8007ce6:	d402      	bmi.n	8007cee <_vfiprintf_r+0x2a>
 8007ce8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007cea:	f7ff feb9 	bl	8007a60 <__retarget_lock_acquire_recursive>
 8007cee:	89ab      	ldrh	r3, [r5, #12]
 8007cf0:	071b      	lsls	r3, r3, #28
 8007cf2:	d501      	bpl.n	8007cf8 <_vfiprintf_r+0x34>
 8007cf4:	692b      	ldr	r3, [r5, #16]
 8007cf6:	b99b      	cbnz	r3, 8007d20 <_vfiprintf_r+0x5c>
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	f000 fb78 	bl	80083f0 <__swsetup_r>
 8007d00:	b170      	cbz	r0, 8007d20 <_vfiprintf_r+0x5c>
 8007d02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d04:	07dc      	lsls	r4, r3, #31
 8007d06:	d504      	bpl.n	8007d12 <_vfiprintf_r+0x4e>
 8007d08:	f04f 30ff 	mov.w	r0, #4294967295
 8007d0c:	b01d      	add	sp, #116	; 0x74
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d12:	89ab      	ldrh	r3, [r5, #12]
 8007d14:	0598      	lsls	r0, r3, #22
 8007d16:	d4f7      	bmi.n	8007d08 <_vfiprintf_r+0x44>
 8007d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d1a:	f7ff fea2 	bl	8007a62 <__retarget_lock_release_recursive>
 8007d1e:	e7f3      	b.n	8007d08 <_vfiprintf_r+0x44>
 8007d20:	2300      	movs	r3, #0
 8007d22:	9309      	str	r3, [sp, #36]	; 0x24
 8007d24:	2320      	movs	r3, #32
 8007d26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d2a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d2e:	2330      	movs	r3, #48	; 0x30
 8007d30:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007ee4 <_vfiprintf_r+0x220>
 8007d34:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d38:	f04f 0901 	mov.w	r9, #1
 8007d3c:	4623      	mov	r3, r4
 8007d3e:	469a      	mov	sl, r3
 8007d40:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d44:	b10a      	cbz	r2, 8007d4a <_vfiprintf_r+0x86>
 8007d46:	2a25      	cmp	r2, #37	; 0x25
 8007d48:	d1f9      	bne.n	8007d3e <_vfiprintf_r+0x7a>
 8007d4a:	ebba 0b04 	subs.w	fp, sl, r4
 8007d4e:	d00b      	beq.n	8007d68 <_vfiprintf_r+0xa4>
 8007d50:	465b      	mov	r3, fp
 8007d52:	4622      	mov	r2, r4
 8007d54:	4629      	mov	r1, r5
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff ffa1 	bl	8007c9e <__sfputs_r>
 8007d5c:	3001      	adds	r0, #1
 8007d5e:	f000 80a9 	beq.w	8007eb4 <_vfiprintf_r+0x1f0>
 8007d62:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d64:	445a      	add	r2, fp
 8007d66:	9209      	str	r2, [sp, #36]	; 0x24
 8007d68:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f000 80a1 	beq.w	8007eb4 <_vfiprintf_r+0x1f0>
 8007d72:	2300      	movs	r3, #0
 8007d74:	f04f 32ff 	mov.w	r2, #4294967295
 8007d78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7c:	f10a 0a01 	add.w	sl, sl, #1
 8007d80:	9304      	str	r3, [sp, #16]
 8007d82:	9307      	str	r3, [sp, #28]
 8007d84:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d88:	931a      	str	r3, [sp, #104]	; 0x68
 8007d8a:	4654      	mov	r4, sl
 8007d8c:	2205      	movs	r2, #5
 8007d8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d92:	4854      	ldr	r0, [pc, #336]	; (8007ee4 <_vfiprintf_r+0x220>)
 8007d94:	f7f8 fa6c 	bl	8000270 <memchr>
 8007d98:	9a04      	ldr	r2, [sp, #16]
 8007d9a:	b9d8      	cbnz	r0, 8007dd4 <_vfiprintf_r+0x110>
 8007d9c:	06d1      	lsls	r1, r2, #27
 8007d9e:	bf44      	itt	mi
 8007da0:	2320      	movmi	r3, #32
 8007da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007da6:	0713      	lsls	r3, r2, #28
 8007da8:	bf44      	itt	mi
 8007daa:	232b      	movmi	r3, #43	; 0x2b
 8007dac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db0:	f89a 3000 	ldrb.w	r3, [sl]
 8007db4:	2b2a      	cmp	r3, #42	; 0x2a
 8007db6:	d015      	beq.n	8007de4 <_vfiprintf_r+0x120>
 8007db8:	9a07      	ldr	r2, [sp, #28]
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	4621      	mov	r1, r4
 8007dc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dc8:	3b30      	subs	r3, #48	; 0x30
 8007dca:	2b09      	cmp	r3, #9
 8007dcc:	d94d      	bls.n	8007e6a <_vfiprintf_r+0x1a6>
 8007dce:	b1b0      	cbz	r0, 8007dfe <_vfiprintf_r+0x13a>
 8007dd0:	9207      	str	r2, [sp, #28]
 8007dd2:	e014      	b.n	8007dfe <_vfiprintf_r+0x13a>
 8007dd4:	eba0 0308 	sub.w	r3, r0, r8
 8007dd8:	fa09 f303 	lsl.w	r3, r9, r3
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	9304      	str	r3, [sp, #16]
 8007de0:	46a2      	mov	sl, r4
 8007de2:	e7d2      	b.n	8007d8a <_vfiprintf_r+0xc6>
 8007de4:	9b03      	ldr	r3, [sp, #12]
 8007de6:	1d19      	adds	r1, r3, #4
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	9103      	str	r1, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	bfbb      	ittet	lt
 8007df0:	425b      	neglt	r3, r3
 8007df2:	f042 0202 	orrlt.w	r2, r2, #2
 8007df6:	9307      	strge	r3, [sp, #28]
 8007df8:	9307      	strlt	r3, [sp, #28]
 8007dfa:	bfb8      	it	lt
 8007dfc:	9204      	strlt	r2, [sp, #16]
 8007dfe:	7823      	ldrb	r3, [r4, #0]
 8007e00:	2b2e      	cmp	r3, #46	; 0x2e
 8007e02:	d10c      	bne.n	8007e1e <_vfiprintf_r+0x15a>
 8007e04:	7863      	ldrb	r3, [r4, #1]
 8007e06:	2b2a      	cmp	r3, #42	; 0x2a
 8007e08:	d134      	bne.n	8007e74 <_vfiprintf_r+0x1b0>
 8007e0a:	9b03      	ldr	r3, [sp, #12]
 8007e0c:	1d1a      	adds	r2, r3, #4
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	9203      	str	r2, [sp, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	bfb8      	it	lt
 8007e16:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e1a:	3402      	adds	r4, #2
 8007e1c:	9305      	str	r3, [sp, #20]
 8007e1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ef4 <_vfiprintf_r+0x230>
 8007e22:	7821      	ldrb	r1, [r4, #0]
 8007e24:	2203      	movs	r2, #3
 8007e26:	4650      	mov	r0, sl
 8007e28:	f7f8 fa22 	bl	8000270 <memchr>
 8007e2c:	b138      	cbz	r0, 8007e3e <_vfiprintf_r+0x17a>
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	eba0 000a 	sub.w	r0, r0, sl
 8007e34:	2240      	movs	r2, #64	; 0x40
 8007e36:	4082      	lsls	r2, r0
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	3401      	adds	r4, #1
 8007e3c:	9304      	str	r3, [sp, #16]
 8007e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e42:	4829      	ldr	r0, [pc, #164]	; (8007ee8 <_vfiprintf_r+0x224>)
 8007e44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e48:	2206      	movs	r2, #6
 8007e4a:	f7f8 fa11 	bl	8000270 <memchr>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d03f      	beq.n	8007ed2 <_vfiprintf_r+0x20e>
 8007e52:	4b26      	ldr	r3, [pc, #152]	; (8007eec <_vfiprintf_r+0x228>)
 8007e54:	bb1b      	cbnz	r3, 8007e9e <_vfiprintf_r+0x1da>
 8007e56:	9b03      	ldr	r3, [sp, #12]
 8007e58:	3307      	adds	r3, #7
 8007e5a:	f023 0307 	bic.w	r3, r3, #7
 8007e5e:	3308      	adds	r3, #8
 8007e60:	9303      	str	r3, [sp, #12]
 8007e62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e64:	443b      	add	r3, r7
 8007e66:	9309      	str	r3, [sp, #36]	; 0x24
 8007e68:	e768      	b.n	8007d3c <_vfiprintf_r+0x78>
 8007e6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e6e:	460c      	mov	r4, r1
 8007e70:	2001      	movs	r0, #1
 8007e72:	e7a6      	b.n	8007dc2 <_vfiprintf_r+0xfe>
 8007e74:	2300      	movs	r3, #0
 8007e76:	3401      	adds	r4, #1
 8007e78:	9305      	str	r3, [sp, #20]
 8007e7a:	4619      	mov	r1, r3
 8007e7c:	f04f 0c0a 	mov.w	ip, #10
 8007e80:	4620      	mov	r0, r4
 8007e82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e86:	3a30      	subs	r2, #48	; 0x30
 8007e88:	2a09      	cmp	r2, #9
 8007e8a:	d903      	bls.n	8007e94 <_vfiprintf_r+0x1d0>
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d0c6      	beq.n	8007e1e <_vfiprintf_r+0x15a>
 8007e90:	9105      	str	r1, [sp, #20]
 8007e92:	e7c4      	b.n	8007e1e <_vfiprintf_r+0x15a>
 8007e94:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e98:	4604      	mov	r4, r0
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e7f0      	b.n	8007e80 <_vfiprintf_r+0x1bc>
 8007e9e:	ab03      	add	r3, sp, #12
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	462a      	mov	r2, r5
 8007ea4:	4b12      	ldr	r3, [pc, #72]	; (8007ef0 <_vfiprintf_r+0x22c>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f3af 8000 	nop.w
 8007eae:	4607      	mov	r7, r0
 8007eb0:	1c78      	adds	r0, r7, #1
 8007eb2:	d1d6      	bne.n	8007e62 <_vfiprintf_r+0x19e>
 8007eb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007eb6:	07d9      	lsls	r1, r3, #31
 8007eb8:	d405      	bmi.n	8007ec6 <_vfiprintf_r+0x202>
 8007eba:	89ab      	ldrh	r3, [r5, #12]
 8007ebc:	059a      	lsls	r2, r3, #22
 8007ebe:	d402      	bmi.n	8007ec6 <_vfiprintf_r+0x202>
 8007ec0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ec2:	f7ff fdce 	bl	8007a62 <__retarget_lock_release_recursive>
 8007ec6:	89ab      	ldrh	r3, [r5, #12]
 8007ec8:	065b      	lsls	r3, r3, #25
 8007eca:	f53f af1d 	bmi.w	8007d08 <_vfiprintf_r+0x44>
 8007ece:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ed0:	e71c      	b.n	8007d0c <_vfiprintf_r+0x48>
 8007ed2:	ab03      	add	r3, sp, #12
 8007ed4:	9300      	str	r3, [sp, #0]
 8007ed6:	462a      	mov	r2, r5
 8007ed8:	4b05      	ldr	r3, [pc, #20]	; (8007ef0 <_vfiprintf_r+0x22c>)
 8007eda:	a904      	add	r1, sp, #16
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f879 	bl	8007fd4 <_printf_i>
 8007ee2:	e7e4      	b.n	8007eae <_vfiprintf_r+0x1ea>
 8007ee4:	0800882c 	.word	0x0800882c
 8007ee8:	08008836 	.word	0x08008836
 8007eec:	00000000 	.word	0x00000000
 8007ef0:	08007c9f 	.word	0x08007c9f
 8007ef4:	08008832 	.word	0x08008832

08007ef8 <_printf_common>:
 8007ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	4616      	mov	r6, r2
 8007efe:	4699      	mov	r9, r3
 8007f00:	688a      	ldr	r2, [r1, #8]
 8007f02:	690b      	ldr	r3, [r1, #16]
 8007f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bfb8      	it	lt
 8007f0c:	4613      	movlt	r3, r2
 8007f0e:	6033      	str	r3, [r6, #0]
 8007f10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f14:	4607      	mov	r7, r0
 8007f16:	460c      	mov	r4, r1
 8007f18:	b10a      	cbz	r2, 8007f1e <_printf_common+0x26>
 8007f1a:	3301      	adds	r3, #1
 8007f1c:	6033      	str	r3, [r6, #0]
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	0699      	lsls	r1, r3, #26
 8007f22:	bf42      	ittt	mi
 8007f24:	6833      	ldrmi	r3, [r6, #0]
 8007f26:	3302      	addmi	r3, #2
 8007f28:	6033      	strmi	r3, [r6, #0]
 8007f2a:	6825      	ldr	r5, [r4, #0]
 8007f2c:	f015 0506 	ands.w	r5, r5, #6
 8007f30:	d106      	bne.n	8007f40 <_printf_common+0x48>
 8007f32:	f104 0a19 	add.w	sl, r4, #25
 8007f36:	68e3      	ldr	r3, [r4, #12]
 8007f38:	6832      	ldr	r2, [r6, #0]
 8007f3a:	1a9b      	subs	r3, r3, r2
 8007f3c:	42ab      	cmp	r3, r5
 8007f3e:	dc26      	bgt.n	8007f8e <_printf_common+0x96>
 8007f40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f44:	1e13      	subs	r3, r2, #0
 8007f46:	6822      	ldr	r2, [r4, #0]
 8007f48:	bf18      	it	ne
 8007f4a:	2301      	movne	r3, #1
 8007f4c:	0692      	lsls	r2, r2, #26
 8007f4e:	d42b      	bmi.n	8007fa8 <_printf_common+0xb0>
 8007f50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f54:	4649      	mov	r1, r9
 8007f56:	4638      	mov	r0, r7
 8007f58:	47c0      	blx	r8
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d01e      	beq.n	8007f9c <_printf_common+0xa4>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	6922      	ldr	r2, [r4, #16]
 8007f62:	f003 0306 	and.w	r3, r3, #6
 8007f66:	2b04      	cmp	r3, #4
 8007f68:	bf02      	ittt	eq
 8007f6a:	68e5      	ldreq	r5, [r4, #12]
 8007f6c:	6833      	ldreq	r3, [r6, #0]
 8007f6e:	1aed      	subeq	r5, r5, r3
 8007f70:	68a3      	ldr	r3, [r4, #8]
 8007f72:	bf0c      	ite	eq
 8007f74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f78:	2500      	movne	r5, #0
 8007f7a:	4293      	cmp	r3, r2
 8007f7c:	bfc4      	itt	gt
 8007f7e:	1a9b      	subgt	r3, r3, r2
 8007f80:	18ed      	addgt	r5, r5, r3
 8007f82:	2600      	movs	r6, #0
 8007f84:	341a      	adds	r4, #26
 8007f86:	42b5      	cmp	r5, r6
 8007f88:	d11a      	bne.n	8007fc0 <_printf_common+0xc8>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e008      	b.n	8007fa0 <_printf_common+0xa8>
 8007f8e:	2301      	movs	r3, #1
 8007f90:	4652      	mov	r2, sl
 8007f92:	4649      	mov	r1, r9
 8007f94:	4638      	mov	r0, r7
 8007f96:	47c0      	blx	r8
 8007f98:	3001      	adds	r0, #1
 8007f9a:	d103      	bne.n	8007fa4 <_printf_common+0xac>
 8007f9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa4:	3501      	adds	r5, #1
 8007fa6:	e7c6      	b.n	8007f36 <_printf_common+0x3e>
 8007fa8:	18e1      	adds	r1, r4, r3
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	2030      	movs	r0, #48	; 0x30
 8007fae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fb2:	4422      	add	r2, r4
 8007fb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fbc:	3302      	adds	r3, #2
 8007fbe:	e7c7      	b.n	8007f50 <_printf_common+0x58>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	4638      	mov	r0, r7
 8007fc8:	47c0      	blx	r8
 8007fca:	3001      	adds	r0, #1
 8007fcc:	d0e6      	beq.n	8007f9c <_printf_common+0xa4>
 8007fce:	3601      	adds	r6, #1
 8007fd0:	e7d9      	b.n	8007f86 <_printf_common+0x8e>
	...

08007fd4 <_printf_i>:
 8007fd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fd8:	7e0f      	ldrb	r7, [r1, #24]
 8007fda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007fdc:	2f78      	cmp	r7, #120	; 0x78
 8007fde:	4691      	mov	r9, r2
 8007fe0:	4680      	mov	r8, r0
 8007fe2:	460c      	mov	r4, r1
 8007fe4:	469a      	mov	sl, r3
 8007fe6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007fea:	d807      	bhi.n	8007ffc <_printf_i+0x28>
 8007fec:	2f62      	cmp	r7, #98	; 0x62
 8007fee:	d80a      	bhi.n	8008006 <_printf_i+0x32>
 8007ff0:	2f00      	cmp	r7, #0
 8007ff2:	f000 80d4 	beq.w	800819e <_printf_i+0x1ca>
 8007ff6:	2f58      	cmp	r7, #88	; 0x58
 8007ff8:	f000 80c0 	beq.w	800817c <_printf_i+0x1a8>
 8007ffc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008004:	e03a      	b.n	800807c <_printf_i+0xa8>
 8008006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800800a:	2b15      	cmp	r3, #21
 800800c:	d8f6      	bhi.n	8007ffc <_printf_i+0x28>
 800800e:	a101      	add	r1, pc, #4	; (adr r1, 8008014 <_printf_i+0x40>)
 8008010:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008014:	0800806d 	.word	0x0800806d
 8008018:	08008081 	.word	0x08008081
 800801c:	08007ffd 	.word	0x08007ffd
 8008020:	08007ffd 	.word	0x08007ffd
 8008024:	08007ffd 	.word	0x08007ffd
 8008028:	08007ffd 	.word	0x08007ffd
 800802c:	08008081 	.word	0x08008081
 8008030:	08007ffd 	.word	0x08007ffd
 8008034:	08007ffd 	.word	0x08007ffd
 8008038:	08007ffd 	.word	0x08007ffd
 800803c:	08007ffd 	.word	0x08007ffd
 8008040:	08008185 	.word	0x08008185
 8008044:	080080ad 	.word	0x080080ad
 8008048:	0800813f 	.word	0x0800813f
 800804c:	08007ffd 	.word	0x08007ffd
 8008050:	08007ffd 	.word	0x08007ffd
 8008054:	080081a7 	.word	0x080081a7
 8008058:	08007ffd 	.word	0x08007ffd
 800805c:	080080ad 	.word	0x080080ad
 8008060:	08007ffd 	.word	0x08007ffd
 8008064:	08007ffd 	.word	0x08007ffd
 8008068:	08008147 	.word	0x08008147
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	1d1a      	adds	r2, r3, #4
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	602a      	str	r2, [r5, #0]
 8008074:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800807c:	2301      	movs	r3, #1
 800807e:	e09f      	b.n	80081c0 <_printf_i+0x1ec>
 8008080:	6820      	ldr	r0, [r4, #0]
 8008082:	682b      	ldr	r3, [r5, #0]
 8008084:	0607      	lsls	r7, r0, #24
 8008086:	f103 0104 	add.w	r1, r3, #4
 800808a:	6029      	str	r1, [r5, #0]
 800808c:	d501      	bpl.n	8008092 <_printf_i+0xbe>
 800808e:	681e      	ldr	r6, [r3, #0]
 8008090:	e003      	b.n	800809a <_printf_i+0xc6>
 8008092:	0646      	lsls	r6, r0, #25
 8008094:	d5fb      	bpl.n	800808e <_printf_i+0xba>
 8008096:	f9b3 6000 	ldrsh.w	r6, [r3]
 800809a:	2e00      	cmp	r6, #0
 800809c:	da03      	bge.n	80080a6 <_printf_i+0xd2>
 800809e:	232d      	movs	r3, #45	; 0x2d
 80080a0:	4276      	negs	r6, r6
 80080a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a6:	485a      	ldr	r0, [pc, #360]	; (8008210 <_printf_i+0x23c>)
 80080a8:	230a      	movs	r3, #10
 80080aa:	e012      	b.n	80080d2 <_printf_i+0xfe>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	6820      	ldr	r0, [r4, #0]
 80080b0:	1d19      	adds	r1, r3, #4
 80080b2:	6029      	str	r1, [r5, #0]
 80080b4:	0605      	lsls	r5, r0, #24
 80080b6:	d501      	bpl.n	80080bc <_printf_i+0xe8>
 80080b8:	681e      	ldr	r6, [r3, #0]
 80080ba:	e002      	b.n	80080c2 <_printf_i+0xee>
 80080bc:	0641      	lsls	r1, r0, #25
 80080be:	d5fb      	bpl.n	80080b8 <_printf_i+0xe4>
 80080c0:	881e      	ldrh	r6, [r3, #0]
 80080c2:	4853      	ldr	r0, [pc, #332]	; (8008210 <_printf_i+0x23c>)
 80080c4:	2f6f      	cmp	r7, #111	; 0x6f
 80080c6:	bf0c      	ite	eq
 80080c8:	2308      	moveq	r3, #8
 80080ca:	230a      	movne	r3, #10
 80080cc:	2100      	movs	r1, #0
 80080ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080d2:	6865      	ldr	r5, [r4, #4]
 80080d4:	60a5      	str	r5, [r4, #8]
 80080d6:	2d00      	cmp	r5, #0
 80080d8:	bfa2      	ittt	ge
 80080da:	6821      	ldrge	r1, [r4, #0]
 80080dc:	f021 0104 	bicge.w	r1, r1, #4
 80080e0:	6021      	strge	r1, [r4, #0]
 80080e2:	b90e      	cbnz	r6, 80080e8 <_printf_i+0x114>
 80080e4:	2d00      	cmp	r5, #0
 80080e6:	d04b      	beq.n	8008180 <_printf_i+0x1ac>
 80080e8:	4615      	mov	r5, r2
 80080ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80080ee:	fb03 6711 	mls	r7, r3, r1, r6
 80080f2:	5dc7      	ldrb	r7, [r0, r7]
 80080f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80080f8:	4637      	mov	r7, r6
 80080fa:	42bb      	cmp	r3, r7
 80080fc:	460e      	mov	r6, r1
 80080fe:	d9f4      	bls.n	80080ea <_printf_i+0x116>
 8008100:	2b08      	cmp	r3, #8
 8008102:	d10b      	bne.n	800811c <_printf_i+0x148>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	07de      	lsls	r6, r3, #31
 8008108:	d508      	bpl.n	800811c <_printf_i+0x148>
 800810a:	6923      	ldr	r3, [r4, #16]
 800810c:	6861      	ldr	r1, [r4, #4]
 800810e:	4299      	cmp	r1, r3
 8008110:	bfde      	ittt	le
 8008112:	2330      	movle	r3, #48	; 0x30
 8008114:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008118:	f105 35ff 	addle.w	r5, r5, #4294967295
 800811c:	1b52      	subs	r2, r2, r5
 800811e:	6122      	str	r2, [r4, #16]
 8008120:	f8cd a000 	str.w	sl, [sp]
 8008124:	464b      	mov	r3, r9
 8008126:	aa03      	add	r2, sp, #12
 8008128:	4621      	mov	r1, r4
 800812a:	4640      	mov	r0, r8
 800812c:	f7ff fee4 	bl	8007ef8 <_printf_common>
 8008130:	3001      	adds	r0, #1
 8008132:	d14a      	bne.n	80081ca <_printf_i+0x1f6>
 8008134:	f04f 30ff 	mov.w	r0, #4294967295
 8008138:	b004      	add	sp, #16
 800813a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800813e:	6823      	ldr	r3, [r4, #0]
 8008140:	f043 0320 	orr.w	r3, r3, #32
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	4833      	ldr	r0, [pc, #204]	; (8008214 <_printf_i+0x240>)
 8008148:	2778      	movs	r7, #120	; 0x78
 800814a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	6829      	ldr	r1, [r5, #0]
 8008152:	061f      	lsls	r7, r3, #24
 8008154:	f851 6b04 	ldr.w	r6, [r1], #4
 8008158:	d402      	bmi.n	8008160 <_printf_i+0x18c>
 800815a:	065f      	lsls	r7, r3, #25
 800815c:	bf48      	it	mi
 800815e:	b2b6      	uxthmi	r6, r6
 8008160:	07df      	lsls	r7, r3, #31
 8008162:	bf48      	it	mi
 8008164:	f043 0320 	orrmi.w	r3, r3, #32
 8008168:	6029      	str	r1, [r5, #0]
 800816a:	bf48      	it	mi
 800816c:	6023      	strmi	r3, [r4, #0]
 800816e:	b91e      	cbnz	r6, 8008178 <_printf_i+0x1a4>
 8008170:	6823      	ldr	r3, [r4, #0]
 8008172:	f023 0320 	bic.w	r3, r3, #32
 8008176:	6023      	str	r3, [r4, #0]
 8008178:	2310      	movs	r3, #16
 800817a:	e7a7      	b.n	80080cc <_printf_i+0xf8>
 800817c:	4824      	ldr	r0, [pc, #144]	; (8008210 <_printf_i+0x23c>)
 800817e:	e7e4      	b.n	800814a <_printf_i+0x176>
 8008180:	4615      	mov	r5, r2
 8008182:	e7bd      	b.n	8008100 <_printf_i+0x12c>
 8008184:	682b      	ldr	r3, [r5, #0]
 8008186:	6826      	ldr	r6, [r4, #0]
 8008188:	6961      	ldr	r1, [r4, #20]
 800818a:	1d18      	adds	r0, r3, #4
 800818c:	6028      	str	r0, [r5, #0]
 800818e:	0635      	lsls	r5, r6, #24
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	d501      	bpl.n	8008198 <_printf_i+0x1c4>
 8008194:	6019      	str	r1, [r3, #0]
 8008196:	e002      	b.n	800819e <_printf_i+0x1ca>
 8008198:	0670      	lsls	r0, r6, #25
 800819a:	d5fb      	bpl.n	8008194 <_printf_i+0x1c0>
 800819c:	8019      	strh	r1, [r3, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	6123      	str	r3, [r4, #16]
 80081a2:	4615      	mov	r5, r2
 80081a4:	e7bc      	b.n	8008120 <_printf_i+0x14c>
 80081a6:	682b      	ldr	r3, [r5, #0]
 80081a8:	1d1a      	adds	r2, r3, #4
 80081aa:	602a      	str	r2, [r5, #0]
 80081ac:	681d      	ldr	r5, [r3, #0]
 80081ae:	6862      	ldr	r2, [r4, #4]
 80081b0:	2100      	movs	r1, #0
 80081b2:	4628      	mov	r0, r5
 80081b4:	f7f8 f85c 	bl	8000270 <memchr>
 80081b8:	b108      	cbz	r0, 80081be <_printf_i+0x1ea>
 80081ba:	1b40      	subs	r0, r0, r5
 80081bc:	6060      	str	r0, [r4, #4]
 80081be:	6863      	ldr	r3, [r4, #4]
 80081c0:	6123      	str	r3, [r4, #16]
 80081c2:	2300      	movs	r3, #0
 80081c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081c8:	e7aa      	b.n	8008120 <_printf_i+0x14c>
 80081ca:	6923      	ldr	r3, [r4, #16]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4649      	mov	r1, r9
 80081d0:	4640      	mov	r0, r8
 80081d2:	47d0      	blx	sl
 80081d4:	3001      	adds	r0, #1
 80081d6:	d0ad      	beq.n	8008134 <_printf_i+0x160>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	079b      	lsls	r3, r3, #30
 80081dc:	d413      	bmi.n	8008206 <_printf_i+0x232>
 80081de:	68e0      	ldr	r0, [r4, #12]
 80081e0:	9b03      	ldr	r3, [sp, #12]
 80081e2:	4298      	cmp	r0, r3
 80081e4:	bfb8      	it	lt
 80081e6:	4618      	movlt	r0, r3
 80081e8:	e7a6      	b.n	8008138 <_printf_i+0x164>
 80081ea:	2301      	movs	r3, #1
 80081ec:	4632      	mov	r2, r6
 80081ee:	4649      	mov	r1, r9
 80081f0:	4640      	mov	r0, r8
 80081f2:	47d0      	blx	sl
 80081f4:	3001      	adds	r0, #1
 80081f6:	d09d      	beq.n	8008134 <_printf_i+0x160>
 80081f8:	3501      	adds	r5, #1
 80081fa:	68e3      	ldr	r3, [r4, #12]
 80081fc:	9903      	ldr	r1, [sp, #12]
 80081fe:	1a5b      	subs	r3, r3, r1
 8008200:	42ab      	cmp	r3, r5
 8008202:	dcf2      	bgt.n	80081ea <_printf_i+0x216>
 8008204:	e7eb      	b.n	80081de <_printf_i+0x20a>
 8008206:	2500      	movs	r5, #0
 8008208:	f104 0619 	add.w	r6, r4, #25
 800820c:	e7f5      	b.n	80081fa <_printf_i+0x226>
 800820e:	bf00      	nop
 8008210:	0800883d 	.word	0x0800883d
 8008214:	0800884e 	.word	0x0800884e

08008218 <__sflush_r>:
 8008218:	898a      	ldrh	r2, [r1, #12]
 800821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821e:	4605      	mov	r5, r0
 8008220:	0710      	lsls	r0, r2, #28
 8008222:	460c      	mov	r4, r1
 8008224:	d458      	bmi.n	80082d8 <__sflush_r+0xc0>
 8008226:	684b      	ldr	r3, [r1, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	dc05      	bgt.n	8008238 <__sflush_r+0x20>
 800822c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800822e:	2b00      	cmp	r3, #0
 8008230:	dc02      	bgt.n	8008238 <__sflush_r+0x20>
 8008232:	2000      	movs	r0, #0
 8008234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008238:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800823a:	2e00      	cmp	r6, #0
 800823c:	d0f9      	beq.n	8008232 <__sflush_r+0x1a>
 800823e:	2300      	movs	r3, #0
 8008240:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008244:	682f      	ldr	r7, [r5, #0]
 8008246:	6a21      	ldr	r1, [r4, #32]
 8008248:	602b      	str	r3, [r5, #0]
 800824a:	d032      	beq.n	80082b2 <__sflush_r+0x9a>
 800824c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	075a      	lsls	r2, r3, #29
 8008252:	d505      	bpl.n	8008260 <__sflush_r+0x48>
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	1ac0      	subs	r0, r0, r3
 8008258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800825a:	b10b      	cbz	r3, 8008260 <__sflush_r+0x48>
 800825c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800825e:	1ac0      	subs	r0, r0, r3
 8008260:	2300      	movs	r3, #0
 8008262:	4602      	mov	r2, r0
 8008264:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008266:	6a21      	ldr	r1, [r4, #32]
 8008268:	4628      	mov	r0, r5
 800826a:	47b0      	blx	r6
 800826c:	1c43      	adds	r3, r0, #1
 800826e:	89a3      	ldrh	r3, [r4, #12]
 8008270:	d106      	bne.n	8008280 <__sflush_r+0x68>
 8008272:	6829      	ldr	r1, [r5, #0]
 8008274:	291d      	cmp	r1, #29
 8008276:	d82b      	bhi.n	80082d0 <__sflush_r+0xb8>
 8008278:	4a29      	ldr	r2, [pc, #164]	; (8008320 <__sflush_r+0x108>)
 800827a:	410a      	asrs	r2, r1
 800827c:	07d6      	lsls	r6, r2, #31
 800827e:	d427      	bmi.n	80082d0 <__sflush_r+0xb8>
 8008280:	2200      	movs	r2, #0
 8008282:	6062      	str	r2, [r4, #4]
 8008284:	04d9      	lsls	r1, r3, #19
 8008286:	6922      	ldr	r2, [r4, #16]
 8008288:	6022      	str	r2, [r4, #0]
 800828a:	d504      	bpl.n	8008296 <__sflush_r+0x7e>
 800828c:	1c42      	adds	r2, r0, #1
 800828e:	d101      	bne.n	8008294 <__sflush_r+0x7c>
 8008290:	682b      	ldr	r3, [r5, #0]
 8008292:	b903      	cbnz	r3, 8008296 <__sflush_r+0x7e>
 8008294:	6560      	str	r0, [r4, #84]	; 0x54
 8008296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008298:	602f      	str	r7, [r5, #0]
 800829a:	2900      	cmp	r1, #0
 800829c:	d0c9      	beq.n	8008232 <__sflush_r+0x1a>
 800829e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a2:	4299      	cmp	r1, r3
 80082a4:	d002      	beq.n	80082ac <__sflush_r+0x94>
 80082a6:	4628      	mov	r0, r5
 80082a8:	f7ff fbea 	bl	8007a80 <_free_r>
 80082ac:	2000      	movs	r0, #0
 80082ae:	6360      	str	r0, [r4, #52]	; 0x34
 80082b0:	e7c0      	b.n	8008234 <__sflush_r+0x1c>
 80082b2:	2301      	movs	r3, #1
 80082b4:	4628      	mov	r0, r5
 80082b6:	47b0      	blx	r6
 80082b8:	1c41      	adds	r1, r0, #1
 80082ba:	d1c8      	bne.n	800824e <__sflush_r+0x36>
 80082bc:	682b      	ldr	r3, [r5, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d0c5      	beq.n	800824e <__sflush_r+0x36>
 80082c2:	2b1d      	cmp	r3, #29
 80082c4:	d001      	beq.n	80082ca <__sflush_r+0xb2>
 80082c6:	2b16      	cmp	r3, #22
 80082c8:	d101      	bne.n	80082ce <__sflush_r+0xb6>
 80082ca:	602f      	str	r7, [r5, #0]
 80082cc:	e7b1      	b.n	8008232 <__sflush_r+0x1a>
 80082ce:	89a3      	ldrh	r3, [r4, #12]
 80082d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082d4:	81a3      	strh	r3, [r4, #12]
 80082d6:	e7ad      	b.n	8008234 <__sflush_r+0x1c>
 80082d8:	690f      	ldr	r7, [r1, #16]
 80082da:	2f00      	cmp	r7, #0
 80082dc:	d0a9      	beq.n	8008232 <__sflush_r+0x1a>
 80082de:	0793      	lsls	r3, r2, #30
 80082e0:	680e      	ldr	r6, [r1, #0]
 80082e2:	bf08      	it	eq
 80082e4:	694b      	ldreq	r3, [r1, #20]
 80082e6:	600f      	str	r7, [r1, #0]
 80082e8:	bf18      	it	ne
 80082ea:	2300      	movne	r3, #0
 80082ec:	eba6 0807 	sub.w	r8, r6, r7
 80082f0:	608b      	str	r3, [r1, #8]
 80082f2:	f1b8 0f00 	cmp.w	r8, #0
 80082f6:	dd9c      	ble.n	8008232 <__sflush_r+0x1a>
 80082f8:	6a21      	ldr	r1, [r4, #32]
 80082fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80082fc:	4643      	mov	r3, r8
 80082fe:	463a      	mov	r2, r7
 8008300:	4628      	mov	r0, r5
 8008302:	47b0      	blx	r6
 8008304:	2800      	cmp	r0, #0
 8008306:	dc06      	bgt.n	8008316 <__sflush_r+0xfe>
 8008308:	89a3      	ldrh	r3, [r4, #12]
 800830a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800830e:	81a3      	strh	r3, [r4, #12]
 8008310:	f04f 30ff 	mov.w	r0, #4294967295
 8008314:	e78e      	b.n	8008234 <__sflush_r+0x1c>
 8008316:	4407      	add	r7, r0
 8008318:	eba8 0800 	sub.w	r8, r8, r0
 800831c:	e7e9      	b.n	80082f2 <__sflush_r+0xda>
 800831e:	bf00      	nop
 8008320:	dfbffffe 	.word	0xdfbffffe

08008324 <_fflush_r>:
 8008324:	b538      	push	{r3, r4, r5, lr}
 8008326:	690b      	ldr	r3, [r1, #16]
 8008328:	4605      	mov	r5, r0
 800832a:	460c      	mov	r4, r1
 800832c:	b913      	cbnz	r3, 8008334 <_fflush_r+0x10>
 800832e:	2500      	movs	r5, #0
 8008330:	4628      	mov	r0, r5
 8008332:	bd38      	pop	{r3, r4, r5, pc}
 8008334:	b118      	cbz	r0, 800833e <_fflush_r+0x1a>
 8008336:	6a03      	ldr	r3, [r0, #32]
 8008338:	b90b      	cbnz	r3, 800833e <_fflush_r+0x1a>
 800833a:	f7ff fa83 	bl	8007844 <__sinit>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0f3      	beq.n	800832e <_fflush_r+0xa>
 8008346:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008348:	07d0      	lsls	r0, r2, #31
 800834a:	d404      	bmi.n	8008356 <_fflush_r+0x32>
 800834c:	0599      	lsls	r1, r3, #22
 800834e:	d402      	bmi.n	8008356 <_fflush_r+0x32>
 8008350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008352:	f7ff fb85 	bl	8007a60 <__retarget_lock_acquire_recursive>
 8008356:	4628      	mov	r0, r5
 8008358:	4621      	mov	r1, r4
 800835a:	f7ff ff5d 	bl	8008218 <__sflush_r>
 800835e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008360:	07da      	lsls	r2, r3, #31
 8008362:	4605      	mov	r5, r0
 8008364:	d4e4      	bmi.n	8008330 <_fflush_r+0xc>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	059b      	lsls	r3, r3, #22
 800836a:	d4e1      	bmi.n	8008330 <_fflush_r+0xc>
 800836c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800836e:	f7ff fb78 	bl	8007a62 <__retarget_lock_release_recursive>
 8008372:	e7dd      	b.n	8008330 <_fflush_r+0xc>

08008374 <__swbuf_r>:
 8008374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008376:	460e      	mov	r6, r1
 8008378:	4614      	mov	r4, r2
 800837a:	4605      	mov	r5, r0
 800837c:	b118      	cbz	r0, 8008386 <__swbuf_r+0x12>
 800837e:	6a03      	ldr	r3, [r0, #32]
 8008380:	b90b      	cbnz	r3, 8008386 <__swbuf_r+0x12>
 8008382:	f7ff fa5f 	bl	8007844 <__sinit>
 8008386:	69a3      	ldr	r3, [r4, #24]
 8008388:	60a3      	str	r3, [r4, #8]
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	071a      	lsls	r2, r3, #28
 800838e:	d525      	bpl.n	80083dc <__swbuf_r+0x68>
 8008390:	6923      	ldr	r3, [r4, #16]
 8008392:	b31b      	cbz	r3, 80083dc <__swbuf_r+0x68>
 8008394:	6823      	ldr	r3, [r4, #0]
 8008396:	6922      	ldr	r2, [r4, #16]
 8008398:	1a98      	subs	r0, r3, r2
 800839a:	6963      	ldr	r3, [r4, #20]
 800839c:	b2f6      	uxtb	r6, r6
 800839e:	4283      	cmp	r3, r0
 80083a0:	4637      	mov	r7, r6
 80083a2:	dc04      	bgt.n	80083ae <__swbuf_r+0x3a>
 80083a4:	4621      	mov	r1, r4
 80083a6:	4628      	mov	r0, r5
 80083a8:	f7ff ffbc 	bl	8008324 <_fflush_r>
 80083ac:	b9e0      	cbnz	r0, 80083e8 <__swbuf_r+0x74>
 80083ae:	68a3      	ldr	r3, [r4, #8]
 80083b0:	3b01      	subs	r3, #1
 80083b2:	60a3      	str	r3, [r4, #8]
 80083b4:	6823      	ldr	r3, [r4, #0]
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	6022      	str	r2, [r4, #0]
 80083ba:	701e      	strb	r6, [r3, #0]
 80083bc:	6962      	ldr	r2, [r4, #20]
 80083be:	1c43      	adds	r3, r0, #1
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d004      	beq.n	80083ce <__swbuf_r+0x5a>
 80083c4:	89a3      	ldrh	r3, [r4, #12]
 80083c6:	07db      	lsls	r3, r3, #31
 80083c8:	d506      	bpl.n	80083d8 <__swbuf_r+0x64>
 80083ca:	2e0a      	cmp	r6, #10
 80083cc:	d104      	bne.n	80083d8 <__swbuf_r+0x64>
 80083ce:	4621      	mov	r1, r4
 80083d0:	4628      	mov	r0, r5
 80083d2:	f7ff ffa7 	bl	8008324 <_fflush_r>
 80083d6:	b938      	cbnz	r0, 80083e8 <__swbuf_r+0x74>
 80083d8:	4638      	mov	r0, r7
 80083da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083dc:	4621      	mov	r1, r4
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f806 	bl	80083f0 <__swsetup_r>
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d0d5      	beq.n	8008394 <__swbuf_r+0x20>
 80083e8:	f04f 37ff 	mov.w	r7, #4294967295
 80083ec:	e7f4      	b.n	80083d8 <__swbuf_r+0x64>
	...

080083f0 <__swsetup_r>:
 80083f0:	b538      	push	{r3, r4, r5, lr}
 80083f2:	4b2a      	ldr	r3, [pc, #168]	; (800849c <__swsetup_r+0xac>)
 80083f4:	4605      	mov	r5, r0
 80083f6:	6818      	ldr	r0, [r3, #0]
 80083f8:	460c      	mov	r4, r1
 80083fa:	b118      	cbz	r0, 8008404 <__swsetup_r+0x14>
 80083fc:	6a03      	ldr	r3, [r0, #32]
 80083fe:	b90b      	cbnz	r3, 8008404 <__swsetup_r+0x14>
 8008400:	f7ff fa20 	bl	8007844 <__sinit>
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800840a:	0718      	lsls	r0, r3, #28
 800840c:	d422      	bmi.n	8008454 <__swsetup_r+0x64>
 800840e:	06d9      	lsls	r1, r3, #27
 8008410:	d407      	bmi.n	8008422 <__swsetup_r+0x32>
 8008412:	2309      	movs	r3, #9
 8008414:	602b      	str	r3, [r5, #0]
 8008416:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800841a:	81a3      	strh	r3, [r4, #12]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e034      	b.n	800848c <__swsetup_r+0x9c>
 8008422:	0758      	lsls	r0, r3, #29
 8008424:	d512      	bpl.n	800844c <__swsetup_r+0x5c>
 8008426:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008428:	b141      	cbz	r1, 800843c <__swsetup_r+0x4c>
 800842a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800842e:	4299      	cmp	r1, r3
 8008430:	d002      	beq.n	8008438 <__swsetup_r+0x48>
 8008432:	4628      	mov	r0, r5
 8008434:	f7ff fb24 	bl	8007a80 <_free_r>
 8008438:	2300      	movs	r3, #0
 800843a:	6363      	str	r3, [r4, #52]	; 0x34
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008442:	81a3      	strh	r3, [r4, #12]
 8008444:	2300      	movs	r3, #0
 8008446:	6063      	str	r3, [r4, #4]
 8008448:	6923      	ldr	r3, [r4, #16]
 800844a:	6023      	str	r3, [r4, #0]
 800844c:	89a3      	ldrh	r3, [r4, #12]
 800844e:	f043 0308 	orr.w	r3, r3, #8
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	6923      	ldr	r3, [r4, #16]
 8008456:	b94b      	cbnz	r3, 800846c <__swsetup_r+0x7c>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800845e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008462:	d003      	beq.n	800846c <__swsetup_r+0x7c>
 8008464:	4621      	mov	r1, r4
 8008466:	4628      	mov	r0, r5
 8008468:	f000 f850 	bl	800850c <__smakebuf_r>
 800846c:	89a0      	ldrh	r0, [r4, #12]
 800846e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008472:	f010 0301 	ands.w	r3, r0, #1
 8008476:	d00a      	beq.n	800848e <__swsetup_r+0x9e>
 8008478:	2300      	movs	r3, #0
 800847a:	60a3      	str	r3, [r4, #8]
 800847c:	6963      	ldr	r3, [r4, #20]
 800847e:	425b      	negs	r3, r3
 8008480:	61a3      	str	r3, [r4, #24]
 8008482:	6923      	ldr	r3, [r4, #16]
 8008484:	b943      	cbnz	r3, 8008498 <__swsetup_r+0xa8>
 8008486:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800848a:	d1c4      	bne.n	8008416 <__swsetup_r+0x26>
 800848c:	bd38      	pop	{r3, r4, r5, pc}
 800848e:	0781      	lsls	r1, r0, #30
 8008490:	bf58      	it	pl
 8008492:	6963      	ldrpl	r3, [r4, #20]
 8008494:	60a3      	str	r3, [r4, #8]
 8008496:	e7f4      	b.n	8008482 <__swsetup_r+0x92>
 8008498:	2000      	movs	r0, #0
 800849a:	e7f7      	b.n	800848c <__swsetup_r+0x9c>
 800849c:	20000074 	.word	0x20000074

080084a0 <_sbrk_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d06      	ldr	r5, [pc, #24]	; (80084bc <_sbrk_r+0x1c>)
 80084a4:	2300      	movs	r3, #0
 80084a6:	4604      	mov	r4, r0
 80084a8:	4608      	mov	r0, r1
 80084aa:	602b      	str	r3, [r5, #0]
 80084ac:	f000 f88c 	bl	80085c8 <_sbrk>
 80084b0:	1c43      	adds	r3, r0, #1
 80084b2:	d102      	bne.n	80084ba <_sbrk_r+0x1a>
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	b103      	cbz	r3, 80084ba <_sbrk_r+0x1a>
 80084b8:	6023      	str	r3, [r4, #0]
 80084ba:	bd38      	pop	{r3, r4, r5, pc}
 80084bc:	2001466c 	.word	0x2001466c

080084c0 <__swhatbuf_r>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	460c      	mov	r4, r1
 80084c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084c8:	2900      	cmp	r1, #0
 80084ca:	b096      	sub	sp, #88	; 0x58
 80084cc:	4615      	mov	r5, r2
 80084ce:	461e      	mov	r6, r3
 80084d0:	da0d      	bge.n	80084ee <__swhatbuf_r+0x2e>
 80084d2:	89a3      	ldrh	r3, [r4, #12]
 80084d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80084d8:	f04f 0100 	mov.w	r1, #0
 80084dc:	bf0c      	ite	eq
 80084de:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80084e2:	2340      	movne	r3, #64	; 0x40
 80084e4:	2000      	movs	r0, #0
 80084e6:	6031      	str	r1, [r6, #0]
 80084e8:	602b      	str	r3, [r5, #0]
 80084ea:	b016      	add	sp, #88	; 0x58
 80084ec:	bd70      	pop	{r4, r5, r6, pc}
 80084ee:	466a      	mov	r2, sp
 80084f0:	f000 f848 	bl	8008584 <_fstat_r>
 80084f4:	2800      	cmp	r0, #0
 80084f6:	dbec      	blt.n	80084d2 <__swhatbuf_r+0x12>
 80084f8:	9901      	ldr	r1, [sp, #4]
 80084fa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80084fe:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008502:	4259      	negs	r1, r3
 8008504:	4159      	adcs	r1, r3
 8008506:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800850a:	e7eb      	b.n	80084e4 <__swhatbuf_r+0x24>

0800850c <__smakebuf_r>:
 800850c:	898b      	ldrh	r3, [r1, #12]
 800850e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008510:	079d      	lsls	r5, r3, #30
 8008512:	4606      	mov	r6, r0
 8008514:	460c      	mov	r4, r1
 8008516:	d507      	bpl.n	8008528 <__smakebuf_r+0x1c>
 8008518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	6123      	str	r3, [r4, #16]
 8008520:	2301      	movs	r3, #1
 8008522:	6163      	str	r3, [r4, #20]
 8008524:	b002      	add	sp, #8
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	ab01      	add	r3, sp, #4
 800852a:	466a      	mov	r2, sp
 800852c:	f7ff ffc8 	bl	80084c0 <__swhatbuf_r>
 8008530:	9900      	ldr	r1, [sp, #0]
 8008532:	4605      	mov	r5, r0
 8008534:	4630      	mov	r0, r6
 8008536:	f7ff fb0f 	bl	8007b58 <_malloc_r>
 800853a:	b948      	cbnz	r0, 8008550 <__smakebuf_r+0x44>
 800853c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008540:	059a      	lsls	r2, r3, #22
 8008542:	d4ef      	bmi.n	8008524 <__smakebuf_r+0x18>
 8008544:	f023 0303 	bic.w	r3, r3, #3
 8008548:	f043 0302 	orr.w	r3, r3, #2
 800854c:	81a3      	strh	r3, [r4, #12]
 800854e:	e7e3      	b.n	8008518 <__smakebuf_r+0xc>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	6020      	str	r0, [r4, #0]
 8008554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	9b00      	ldr	r3, [sp, #0]
 800855c:	6163      	str	r3, [r4, #20]
 800855e:	9b01      	ldr	r3, [sp, #4]
 8008560:	6120      	str	r0, [r4, #16]
 8008562:	b15b      	cbz	r3, 800857c <__smakebuf_r+0x70>
 8008564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008568:	4630      	mov	r0, r6
 800856a:	f000 f81d 	bl	80085a8 <_isatty_r>
 800856e:	b128      	cbz	r0, 800857c <__smakebuf_r+0x70>
 8008570:	89a3      	ldrh	r3, [r4, #12]
 8008572:	f023 0303 	bic.w	r3, r3, #3
 8008576:	f043 0301 	orr.w	r3, r3, #1
 800857a:	81a3      	strh	r3, [r4, #12]
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	431d      	orrs	r5, r3
 8008580:	81a5      	strh	r5, [r4, #12]
 8008582:	e7cf      	b.n	8008524 <__smakebuf_r+0x18>

08008584 <_fstat_r>:
 8008584:	b538      	push	{r3, r4, r5, lr}
 8008586:	4d07      	ldr	r5, [pc, #28]	; (80085a4 <_fstat_r+0x20>)
 8008588:	2300      	movs	r3, #0
 800858a:	4604      	mov	r4, r0
 800858c:	4608      	mov	r0, r1
 800858e:	4611      	mov	r1, r2
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f7f8 fc56 	bl	8000e42 <_fstat>
 8008596:	1c43      	adds	r3, r0, #1
 8008598:	d102      	bne.n	80085a0 <_fstat_r+0x1c>
 800859a:	682b      	ldr	r3, [r5, #0]
 800859c:	b103      	cbz	r3, 80085a0 <_fstat_r+0x1c>
 800859e:	6023      	str	r3, [r4, #0]
 80085a0:	bd38      	pop	{r3, r4, r5, pc}
 80085a2:	bf00      	nop
 80085a4:	2001466c 	.word	0x2001466c

080085a8 <_isatty_r>:
 80085a8:	b538      	push	{r3, r4, r5, lr}
 80085aa:	4d06      	ldr	r5, [pc, #24]	; (80085c4 <_isatty_r+0x1c>)
 80085ac:	2300      	movs	r3, #0
 80085ae:	4604      	mov	r4, r0
 80085b0:	4608      	mov	r0, r1
 80085b2:	602b      	str	r3, [r5, #0]
 80085b4:	f7f8 fc55 	bl	8000e62 <_isatty>
 80085b8:	1c43      	adds	r3, r0, #1
 80085ba:	d102      	bne.n	80085c2 <_isatty_r+0x1a>
 80085bc:	682b      	ldr	r3, [r5, #0]
 80085be:	b103      	cbz	r3, 80085c2 <_isatty_r+0x1a>
 80085c0:	6023      	str	r3, [r4, #0]
 80085c2:	bd38      	pop	{r3, r4, r5, pc}
 80085c4:	2001466c 	.word	0x2001466c

080085c8 <_sbrk>:
 80085c8:	4a04      	ldr	r2, [pc, #16]	; (80085dc <_sbrk+0x14>)
 80085ca:	6811      	ldr	r1, [r2, #0]
 80085cc:	4603      	mov	r3, r0
 80085ce:	b909      	cbnz	r1, 80085d4 <_sbrk+0xc>
 80085d0:	4903      	ldr	r1, [pc, #12]	; (80085e0 <_sbrk+0x18>)
 80085d2:	6011      	str	r1, [r2, #0]
 80085d4:	6810      	ldr	r0, [r2, #0]
 80085d6:	4403      	add	r3, r0
 80085d8:	6013      	str	r3, [r2, #0]
 80085da:	4770      	bx	lr
 80085dc:	2001467c 	.word	0x2001467c
 80085e0:	20014680 	.word	0x20014680

080085e4 <_init>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	bf00      	nop
 80085e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ea:	bc08      	pop	{r3}
 80085ec:	469e      	mov	lr, r3
 80085ee:	4770      	bx	lr

080085f0 <_fini>:
 80085f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085f2:	bf00      	nop
 80085f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085f6:	bc08      	pop	{r3}
 80085f8:	469e      	mov	lr, r3
 80085fa:	4770      	bx	lr
