
FreeRTOS2Task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b34  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e70  08006e70  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e70  08006e70  00016e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e78  08006e78  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e78  08006e78  00016e78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e7c  08006e7c  00016e7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006e80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002001c  2**0
                  CONTENTS
 10 .bss          0001448c  2000001c  2000001c  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200144a8  200144a8  0002001c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013eab  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003123  00000000  00000000  00033f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001368  00000000  00000000  00037060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ee6  00000000  00000000  000383c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00023acd  00000000  00000000  000392ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016579  00000000  00000000  0005cd7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7ec7  00000000  00000000  000732f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000050fc  00000000  00000000  0014b1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000e4  00000000  00000000  001502b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006cac 	.word	0x08006cac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	08006cac 	.word	0x08006cac

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012ed4 	.word	0x20012ed4

08000264 <__aeabi_uldivmod>:
 8000264:	b953      	cbnz	r3, 800027c <__aeabi_uldivmod+0x18>
 8000266:	b94a      	cbnz	r2, 800027c <__aeabi_uldivmod+0x18>
 8000268:	2900      	cmp	r1, #0
 800026a:	bf08      	it	eq
 800026c:	2800      	cmpeq	r0, #0
 800026e:	bf1c      	itt	ne
 8000270:	f04f 31ff 	movne.w	r1, #4294967295
 8000274:	f04f 30ff 	movne.w	r0, #4294967295
 8000278:	f000 b970 	b.w	800055c <__aeabi_idiv0>
 800027c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000280:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000284:	f000 f806 	bl	8000294 <__udivmoddi4>
 8000288:	f8dd e004 	ldr.w	lr, [sp, #4]
 800028c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000290:	b004      	add	sp, #16
 8000292:	4770      	bx	lr

08000294 <__udivmoddi4>:
 8000294:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000298:	9e08      	ldr	r6, [sp, #32]
 800029a:	460d      	mov	r5, r1
 800029c:	4604      	mov	r4, r0
 800029e:	460f      	mov	r7, r1
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d14a      	bne.n	800033a <__udivmoddi4+0xa6>
 80002a4:	428a      	cmp	r2, r1
 80002a6:	4694      	mov	ip, r2
 80002a8:	d965      	bls.n	8000376 <__udivmoddi4+0xe2>
 80002aa:	fab2 f382 	clz	r3, r2
 80002ae:	b143      	cbz	r3, 80002c2 <__udivmoddi4+0x2e>
 80002b0:	fa02 fc03 	lsl.w	ip, r2, r3
 80002b4:	f1c3 0220 	rsb	r2, r3, #32
 80002b8:	409f      	lsls	r7, r3
 80002ba:	fa20 f202 	lsr.w	r2, r0, r2
 80002be:	4317      	orrs	r7, r2
 80002c0:	409c      	lsls	r4, r3
 80002c2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002c6:	fa1f f58c 	uxth.w	r5, ip
 80002ca:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ce:	0c22      	lsrs	r2, r4, #16
 80002d0:	fb0e 7711 	mls	r7, lr, r1, r7
 80002d4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002d8:	fb01 f005 	mul.w	r0, r1, r5
 80002dc:	4290      	cmp	r0, r2
 80002de:	d90a      	bls.n	80002f6 <__udivmoddi4+0x62>
 80002e0:	eb1c 0202 	adds.w	r2, ip, r2
 80002e4:	f101 37ff 	add.w	r7, r1, #4294967295
 80002e8:	f080 811c 	bcs.w	8000524 <__udivmoddi4+0x290>
 80002ec:	4290      	cmp	r0, r2
 80002ee:	f240 8119 	bls.w	8000524 <__udivmoddi4+0x290>
 80002f2:	3902      	subs	r1, #2
 80002f4:	4462      	add	r2, ip
 80002f6:	1a12      	subs	r2, r2, r0
 80002f8:	b2a4      	uxth	r4, r4
 80002fa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002fe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000302:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000306:	fb00 f505 	mul.w	r5, r0, r5
 800030a:	42a5      	cmp	r5, r4
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x90>
 800030e:	eb1c 0404 	adds.w	r4, ip, r4
 8000312:	f100 32ff 	add.w	r2, r0, #4294967295
 8000316:	f080 8107 	bcs.w	8000528 <__udivmoddi4+0x294>
 800031a:	42a5      	cmp	r5, r4
 800031c:	f240 8104 	bls.w	8000528 <__udivmoddi4+0x294>
 8000320:	4464      	add	r4, ip
 8000322:	3802      	subs	r0, #2
 8000324:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	2100      	movs	r1, #0
 800032c:	b11e      	cbz	r6, 8000336 <__udivmoddi4+0xa2>
 800032e:	40dc      	lsrs	r4, r3
 8000330:	2300      	movs	r3, #0
 8000332:	e9c6 4300 	strd	r4, r3, [r6]
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	428b      	cmp	r3, r1
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0xbc>
 800033e:	2e00      	cmp	r6, #0
 8000340:	f000 80ed 	beq.w	800051e <__udivmoddi4+0x28a>
 8000344:	2100      	movs	r1, #0
 8000346:	e9c6 0500 	strd	r0, r5, [r6]
 800034a:	4608      	mov	r0, r1
 800034c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000350:	fab3 f183 	clz	r1, r3
 8000354:	2900      	cmp	r1, #0
 8000356:	d149      	bne.n	80003ec <__udivmoddi4+0x158>
 8000358:	42ab      	cmp	r3, r5
 800035a:	d302      	bcc.n	8000362 <__udivmoddi4+0xce>
 800035c:	4282      	cmp	r2, r0
 800035e:	f200 80f8 	bhi.w	8000552 <__udivmoddi4+0x2be>
 8000362:	1a84      	subs	r4, r0, r2
 8000364:	eb65 0203 	sbc.w	r2, r5, r3
 8000368:	2001      	movs	r0, #1
 800036a:	4617      	mov	r7, r2
 800036c:	2e00      	cmp	r6, #0
 800036e:	d0e2      	beq.n	8000336 <__udivmoddi4+0xa2>
 8000370:	e9c6 4700 	strd	r4, r7, [r6]
 8000374:	e7df      	b.n	8000336 <__udivmoddi4+0xa2>
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xe6>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f382 	clz	r3, r2
 800037e:	2b00      	cmp	r3, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x210>
 8000384:	1a8a      	subs	r2, r1, r2
 8000386:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	2101      	movs	r1, #1
 8000390:	fbb2 f5f7 	udiv	r5, r2, r7
 8000394:	fb07 2015 	mls	r0, r7, r5, r2
 8000398:	0c22      	lsrs	r2, r4, #16
 800039a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800039e:	fb0e f005 	mul.w	r0, lr, r5
 80003a2:	4290      	cmp	r0, r2
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x124>
 80003a6:	eb1c 0202 	adds.w	r2, ip, r2
 80003aa:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x122>
 80003b0:	4290      	cmp	r0, r2
 80003b2:	f200 80cb 	bhi.w	800054c <__udivmoddi4+0x2b8>
 80003b6:	4645      	mov	r5, r8
 80003b8:	1a12      	subs	r2, r2, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb2 f0f7 	udiv	r0, r2, r7
 80003c0:	fb07 2210 	mls	r2, r7, r0, r2
 80003c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003c8:	fb0e fe00 	mul.w	lr, lr, r0
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x14e>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80003d8:	d202      	bcs.n	80003e0 <__udivmoddi4+0x14c>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	f200 80bb 	bhi.w	8000556 <__udivmoddi4+0x2c2>
 80003e0:	4610      	mov	r0, r2
 80003e2:	eba4 040e 	sub.w	r4, r4, lr
 80003e6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003ea:	e79f      	b.n	800032c <__udivmoddi4+0x98>
 80003ec:	f1c1 0720 	rsb	r7, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003f6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003fa:	fa05 f401 	lsl.w	r4, r5, r1
 80003fe:	fa20 f307 	lsr.w	r3, r0, r7
 8000402:	40fd      	lsrs	r5, r7
 8000404:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fbb5 f8f9 	udiv	r8, r5, r9
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	fb09 5518 	mls	r5, r9, r8, r5
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800041c:	fb08 f50e 	mul.w	r5, r8, lr
 8000420:	42a5      	cmp	r5, r4
 8000422:	fa02 f201 	lsl.w	r2, r2, r1
 8000426:	fa00 f001 	lsl.w	r0, r0, r1
 800042a:	d90b      	bls.n	8000444 <__udivmoddi4+0x1b0>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f108 3aff 	add.w	sl, r8, #4294967295
 8000434:	f080 8088 	bcs.w	8000548 <__udivmoddi4+0x2b4>
 8000438:	42a5      	cmp	r5, r4
 800043a:	f240 8085 	bls.w	8000548 <__udivmoddi4+0x2b4>
 800043e:	f1a8 0802 	sub.w	r8, r8, #2
 8000442:	4464      	add	r4, ip
 8000444:	1b64      	subs	r4, r4, r5
 8000446:	b29d      	uxth	r5, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000454:	fb03 fe0e 	mul.w	lr, r3, lr
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1da>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f103 35ff 	add.w	r5, r3, #4294967295
 8000464:	d26c      	bcs.n	8000540 <__udivmoddi4+0x2ac>
 8000466:	45a6      	cmp	lr, r4
 8000468:	d96a      	bls.n	8000540 <__udivmoddi4+0x2ac>
 800046a:	3b02      	subs	r3, #2
 800046c:	4464      	add	r4, ip
 800046e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000472:	fba3 9502 	umull	r9, r5, r3, r2
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	42ac      	cmp	r4, r5
 800047c:	46c8      	mov	r8, r9
 800047e:	46ae      	mov	lr, r5
 8000480:	d356      	bcc.n	8000530 <__udivmoddi4+0x29c>
 8000482:	d053      	beq.n	800052c <__udivmoddi4+0x298>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x208>
 8000486:	ebb0 0208 	subs.w	r2, r0, r8
 800048a:	eb64 040e 	sbc.w	r4, r4, lr
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40ca      	lsrs	r2, r1
 8000494:	40cc      	lsrs	r4, r1
 8000496:	4317      	orrs	r7, r2
 8000498:	e9c6 7400 	strd	r7, r4, [r6]
 800049c:	4618      	mov	r0, r3
 800049e:	2100      	movs	r1, #0
 80004a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a4:	f1c3 0120 	rsb	r1, r3, #32
 80004a8:	fa02 fc03 	lsl.w	ip, r2, r3
 80004ac:	fa20 f201 	lsr.w	r2, r0, r1
 80004b0:	fa25 f101 	lsr.w	r1, r5, r1
 80004b4:	409d      	lsls	r5, r3
 80004b6:	432a      	orrs	r2, r5
 80004b8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004bc:	fa1f fe8c 	uxth.w	lr, ip
 80004c0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004c4:	fb07 1510 	mls	r5, r7, r0, r1
 80004c8:	0c11      	lsrs	r1, r2, #16
 80004ca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ce:	fb00 f50e 	mul.w	r5, r0, lr
 80004d2:	428d      	cmp	r5, r1
 80004d4:	fa04 f403 	lsl.w	r4, r4, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x258>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f100 38ff 	add.w	r8, r0, #4294967295
 80004e2:	d22f      	bcs.n	8000544 <__udivmoddi4+0x2b0>
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d92d      	bls.n	8000544 <__udivmoddi4+0x2b0>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	1b49      	subs	r1, r1, r5
 80004ee:	b292      	uxth	r2, r2
 80004f0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004f4:	fb07 1115 	mls	r1, r7, r5, r1
 80004f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004fc:	fb05 f10e 	mul.w	r1, r5, lr
 8000500:	4291      	cmp	r1, r2
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x282>
 8000504:	eb1c 0202 	adds.w	r2, ip, r2
 8000508:	f105 38ff 	add.w	r8, r5, #4294967295
 800050c:	d216      	bcs.n	800053c <__udivmoddi4+0x2a8>
 800050e:	4291      	cmp	r1, r2
 8000510:	d914      	bls.n	800053c <__udivmoddi4+0x2a8>
 8000512:	3d02      	subs	r5, #2
 8000514:	4462      	add	r2, ip
 8000516:	1a52      	subs	r2, r2, r1
 8000518:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051c:	e738      	b.n	8000390 <__udivmoddi4+0xfc>
 800051e:	4631      	mov	r1, r6
 8000520:	4630      	mov	r0, r6
 8000522:	e708      	b.n	8000336 <__udivmoddi4+0xa2>
 8000524:	4639      	mov	r1, r7
 8000526:	e6e6      	b.n	80002f6 <__udivmoddi4+0x62>
 8000528:	4610      	mov	r0, r2
 800052a:	e6fb      	b.n	8000324 <__udivmoddi4+0x90>
 800052c:	4548      	cmp	r0, r9
 800052e:	d2a9      	bcs.n	8000484 <__udivmoddi4+0x1f0>
 8000530:	ebb9 0802 	subs.w	r8, r9, r2
 8000534:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000538:	3b01      	subs	r3, #1
 800053a:	e7a3      	b.n	8000484 <__udivmoddi4+0x1f0>
 800053c:	4645      	mov	r5, r8
 800053e:	e7ea      	b.n	8000516 <__udivmoddi4+0x282>
 8000540:	462b      	mov	r3, r5
 8000542:	e794      	b.n	800046e <__udivmoddi4+0x1da>
 8000544:	4640      	mov	r0, r8
 8000546:	e7d1      	b.n	80004ec <__udivmoddi4+0x258>
 8000548:	46d0      	mov	r8, sl
 800054a:	e77b      	b.n	8000444 <__udivmoddi4+0x1b0>
 800054c:	3d02      	subs	r5, #2
 800054e:	4462      	add	r2, ip
 8000550:	e732      	b.n	80003b8 <__udivmoddi4+0x124>
 8000552:	4608      	mov	r0, r1
 8000554:	e70a      	b.n	800036c <__udivmoddi4+0xd8>
 8000556:	4464      	add	r4, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e742      	b.n	80003e2 <__udivmoddi4+0x14e>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b08c      	sub	sp, #48	; 0x30
 8000564:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 faab 	bl	8000ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f88b 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f8f3 	bl	8000758 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 8000572:	483a      	ldr	r0, [pc, #232]	; (800065c <main+0xfc>)
 8000574:	f004 f946 	bl	8004804 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000578:	4b39      	ldr	r3, [pc, #228]	; (8000660 <main+0x100>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a38      	ldr	r2, [pc, #224]	; (8000660 <main+0x100>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000584:	f006 fb32 	bl	8006bec <SEGGER_SYSVIEW_Conf>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000588:	f107 0310 	add.w	r3, r7, #16
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	; 0xc8
 8000596:	4933      	ldr	r1, [pc, #204]	; (8000664 <main+0x104>)
 8000598:	4833      	ldr	r0, [pc, #204]	; (8000668 <main+0x108>)
 800059a:	f002 f88d 	bl	80026b8 <xTaskCreate>
 800059e:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 80005a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00a      	beq.n	80005bc <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	623b      	str	r3, [r7, #32]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	e7fe      	b.n	80005ba <main+0x5a>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 80005bc:	f107 030c 	add.w	r3, r7, #12
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	; 0xc8
 80005ca:	4928      	ldr	r1, [pc, #160]	; (800066c <main+0x10c>)
 80005cc:	4828      	ldr	r0, [pc, #160]	; (8000670 <main+0x110>)
 80005ce:	f002 f873 	bl	80026b8 <xTaskCreate>
 80005d2:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 80005d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00a      	beq.n	80005f0 <main+0x90>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	61fb      	str	r3, [r7, #28]
    }
 80005ec:	bf00      	nop
 80005ee:	e7fe      	b.n	80005ee <main+0x8e>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	22c8      	movs	r2, #200	; 0xc8
 80005fe:	491d      	ldr	r1, [pc, #116]	; (8000674 <main+0x114>)
 8000600:	481d      	ldr	r0, [pc, #116]	; (8000678 <main+0x118>)
 8000602:	f002 f859 	bl	80026b8 <xTaskCreate>
 8000606:	6278      	str	r0, [r7, #36]	; 0x24

  configASSERT(status == pdPASS);
 8000608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00a      	beq.n	8000624 <main+0xc4>
        __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	61bb      	str	r3, [r7, #24]
    }
 8000620:	bf00      	nop
 8000622:	e7fe      	b.n	8000622 <main+0xc2>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task4_handle);
 8000624:	1d3b      	adds	r3, r7, #4
 8000626:	9301      	str	r3, [sp, #4]
 8000628:	2302      	movs	r3, #2
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2300      	movs	r3, #0
 800062e:	22c8      	movs	r2, #200	; 0xc8
 8000630:	4912      	ldr	r1, [pc, #72]	; (800067c <main+0x11c>)
 8000632:	4813      	ldr	r0, [pc, #76]	; (8000680 <main+0x120>)
 8000634:	f002 f840 	bl	80026b8 <xTaskCreate>
 8000638:	6278      	str	r0, [r7, #36]	; 0x24

    configASSERT(status == pdPASS);
 800063a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800063c:	2b01      	cmp	r3, #1
 800063e:	d00a      	beq.n	8000656 <main+0xf6>
        __asm volatile
 8000640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000644:	f383 8811 	msr	BASEPRI, r3
 8000648:	f3bf 8f6f 	isb	sy
 800064c:	f3bf 8f4f 	dsb	sy
 8000650:	617b      	str	r3, [r7, #20]
    }
 8000652:	bf00      	nop
 8000654:	e7fe      	b.n	8000654 <main+0xf4>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000656:	f002 f9b7 	bl	80029c8 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065a:	e7fe      	b.n	800065a <main+0xfa>
 800065c:	0007a120 	.word	0x0007a120
 8000660:	e0001000 	.word	0xe0001000
 8000664:	08006cc4 	.word	0x08006cc4
 8000668:	080007e1 	.word	0x080007e1
 800066c:	08006cd4 	.word	0x08006cd4
 8000670:	08000839 	.word	0x08000839
 8000674:	08006ce4 	.word	0x08006ce4
 8000678:	0800080d 	.word	0x0800080d
 800067c:	08006cf4 	.word	0x08006cf4
 8000680:	08000865 	.word	0x08000865

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	2230      	movs	r2, #48	; 0x30
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f006 fad0 	bl	8006c38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 030c 	add.w	r3, r7, #12
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	4b28      	ldr	r3, [pc, #160]	; (8000750 <SystemClock_Config+0xcc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a27      	ldr	r2, [pc, #156]	; (8000750 <SystemClock_Config+0xcc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b25      	ldr	r3, [pc, #148]	; (8000750 <SystemClock_Config+0xcc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b22      	ldr	r3, [pc, #136]	; (8000754 <SystemClock_Config+0xd0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a21      	ldr	r2, [pc, #132]	; (8000754 <SystemClock_Config+0xd0>)
 80006ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b1f      	ldr	r3, [pc, #124]	; (8000754 <SystemClock_Config+0xd0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f8:	23a8      	movs	r3, #168	; 0xa8
 80006fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000700:	2304      	movs	r3, #4
 8000702:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0320 	add.w	r3, r7, #32
 8000708:	4618      	mov	r0, r3
 800070a:	f000 fcf1 	bl	80010f0 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000714:	f000 f8ce 	bl	80008b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2302      	movs	r3, #2
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000724:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000728:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2105      	movs	r1, #5
 8000736:	4618      	mov	r0, r3
 8000738:	f000 ff52 	bl	80015e0 <HAL_RCC_ClockConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000742:	f000 f8b7 	bl	80008b4 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	3750      	adds	r7, #80	; 0x50
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b088      	sub	sp, #32
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a18      	ldr	r2, [pc, #96]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60bb      	str	r3, [r7, #8]
 8000788:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
 800078e:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a11      	ldr	r2, [pc, #68]	; (80007d8 <MX_GPIO_Init+0x80>)
 8000794:	f043 0308 	orr.w	r3, r3, #8
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <MX_GPIO_Init+0x80>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0308 	and.w	r3, r3, #8
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007a6:	2200      	movs	r2, #0
 80007a8:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007ac:	480b      	ldr	r0, [pc, #44]	; (80007dc <MX_GPIO_Init+0x84>)
 80007ae:	f000 fc6b 	bl	8001088 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007b2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0x84>)
 80007cc:	f000 fac0 	bl	8000d50 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020c00 	.word	0x40020c00

080007e0 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80007e8:	4806      	ldr	r0, [pc, #24]	; (8000804 <led_green_handler+0x24>)
 80007ea:	f006 f953 	bl	8006a94 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80007ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007f2:	4805      	ldr	r0, [pc, #20]	; (8000808 <led_green_handler+0x28>)
 80007f4:	f000 fc61 	bl	80010ba <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 80007f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80007fc:	f000 f9a2 	bl	8000b44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000800:	e7f2      	b.n	80007e8 <led_green_handler+0x8>
 8000802:	bf00      	nop
 8000804:	08006d04 	.word	0x08006d04
 8000808:	40020c00 	.word	0x40020c00

0800080c <led_orange_handler>:
	}

}

static void led_orange_handler(void* parameters)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000814:	4806      	ldr	r0, [pc, #24]	; (8000830 <led_orange_handler+0x24>)
 8000816:	f006 f93d 	bl	8006a94 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800081a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800081e:	4805      	ldr	r0, [pc, #20]	; (8000834 <led_orange_handler+0x28>)
 8000820:	f000 fc4b 	bl	80010ba <HAL_GPIO_TogglePin>
		HAL_Delay(1600);
 8000824:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8000828:	f000 f98c 	bl	8000b44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 800082c:	e7f2      	b.n	8000814 <led_orange_handler+0x8>
 800082e:	bf00      	nop
 8000830:	08006d18 	.word	0x08006d18
 8000834:	40020c00 	.word	0x40020c00

08000838 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <led_red_handler+0x24>)
 8000842:	f006 f927 	bl	8006a94 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <led_red_handler+0x28>)
 800084c:	f000 fc35 	bl	80010ba <HAL_GPIO_TogglePin>
		HAL_Delay(1200);
 8000850:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000854:	f000 f976 	bl	8000b44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000858:	e7f2      	b.n	8000840 <led_red_handler+0x8>
 800085a:	bf00      	nop
 800085c:	08006d2c 	.word	0x08006d2c
 8000860:	40020c00 	.word	0x40020c00

08000864 <led_blue_handler>:

}


static void led_blue_handler(void* parameters)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 800086c:	4806      	ldr	r0, [pc, #24]	; (8000888 <led_blue_handler+0x24>)
 800086e:	f006 f911 	bl	8006a94 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000872:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <led_blue_handler+0x28>)
 8000878:	f000 fc1f 	bl	80010ba <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800087c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000880:	f000 f960 	bl	8000b44 <HAL_Delay>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000884:	e7f2      	b.n	800086c <led_blue_handler+0x8>
 8000886:	bf00      	nop
 8000888:	08006d40 	.word	0x08006d40
 800088c:	40020c00 	.word	0x40020c00

08000890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a04      	ldr	r2, [pc, #16]	; (80008b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800089e:	4293      	cmp	r3, r2
 80008a0:	d101      	bne.n	80008a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a2:	f000 f92f 	bl	8000b04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40001000 	.word	0x40001000

080008b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b8:	b672      	cpsid	i
}
 80008ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x8>
	...

080008c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_MspInit+0x4c>)
 80008cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_MspInit+0x4c>)
 80008d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008d4:	6453      	str	r3, [r2, #68]	; 0x44
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_MspInit+0x4c>)
 80008d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	2300      	movs	r3, #0
 80008e4:	603b      	str	r3, [r7, #0]
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x4c>)
 80008e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x4c>)
 80008ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008f0:	6413      	str	r3, [r2, #64]	; 0x40
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x4c>)
 80008f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80008fe:	f003 fa4b 	bl	8003d98 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000902:	bf00      	nop
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08e      	sub	sp, #56	; 0x38
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000918:	2300      	movs	r3, #0
 800091a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800091c:	2300      	movs	r3, #0
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000920:	2300      	movs	r3, #0
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <HAL_InitTick+0xe4>)
 8000926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000928:	4a32      	ldr	r2, [pc, #200]	; (80009f4 <HAL_InitTick+0xe4>)
 800092a:	f043 0310 	orr.w	r3, r3, #16
 800092e:	6413      	str	r3, [r2, #64]	; 0x40
 8000930:	4b30      	ldr	r3, [pc, #192]	; (80009f4 <HAL_InitTick+0xe4>)
 8000932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000934:	f003 0310 	and.w	r3, r3, #16
 8000938:	60fb      	str	r3, [r7, #12]
 800093a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093c:	f107 0210 	add.w	r2, r7, #16
 8000940:	f107 0314 	add.w	r3, r7, #20
 8000944:	4611      	mov	r1, r2
 8000946:	4618      	mov	r0, r3
 8000948:	f001 f816 	bl	8001978 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800094c:	6a3b      	ldr	r3, [r7, #32]
 800094e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000956:	f000 fffb 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 800095a:	6378      	str	r0, [r7, #52]	; 0x34
 800095c:	e004      	b.n	8000968 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800095e:	f000 fff7 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8000962:	4603      	mov	r3, r0
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800096a:	4a23      	ldr	r2, [pc, #140]	; (80009f8 <HAL_InitTick+0xe8>)
 800096c:	fba2 2303 	umull	r2, r3, r2, r3
 8000970:	0c9b      	lsrs	r3, r3, #18
 8000972:	3b01      	subs	r3, #1
 8000974:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000976:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_InitTick+0xec>)
 8000978:	4a21      	ldr	r2, [pc, #132]	; (8000a00 <HAL_InitTick+0xf0>)
 800097a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800097c:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <HAL_InitTick+0xec>)
 800097e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000982:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000984:	4a1d      	ldr	r2, [pc, #116]	; (80009fc <HAL_InitTick+0xec>)
 8000986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000988:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <HAL_InitTick+0xec>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000990:	4b1a      	ldr	r3, [pc, #104]	; (80009fc <HAL_InitTick+0xec>)
 8000992:	2200      	movs	r2, #0
 8000994:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000996:	4b19      	ldr	r3, [pc, #100]	; (80009fc <HAL_InitTick+0xec>)
 8000998:	2200      	movs	r2, #0
 800099a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800099c:	4817      	ldr	r0, [pc, #92]	; (80009fc <HAL_InitTick+0xec>)
 800099e:	f001 f81d 	bl	80019dc <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d11b      	bne.n	80009e8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <HAL_InitTick+0xec>)
 80009b2:	f001 f86d 	bl	8001a90 <HAL_TIM_Base_Start_IT>
 80009b6:	4603      	mov	r3, r0
 80009b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d111      	bne.n	80009e8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c4:	2036      	movs	r0, #54	; 0x36
 80009c6:	f000 f9b5 	bl	8000d34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d808      	bhi.n	80009e2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009d0:	2200      	movs	r2, #0
 80009d2:	6879      	ldr	r1, [r7, #4]
 80009d4:	2036      	movs	r0, #54	; 0x36
 80009d6:	f000 f991 	bl	8000cfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009da:	4a0a      	ldr	r2, [pc, #40]	; (8000a04 <HAL_InitTick+0xf4>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6013      	str	r3, [r2, #0]
 80009e0:	e002      	b.n	80009e8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009e2:	2301      	movs	r3, #1
 80009e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3738      	adds	r7, #56	; 0x38
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	40023800 	.word	0x40023800
 80009f8:	431bde83 	.word	0x431bde83
 80009fc:	20000038 	.word	0x20000038
 8000a00:	40001000 	.word	0x40001000
 8000a04:	20000004 	.word	0x20000004

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <NMI_Handler+0x4>

08000a0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <HardFault_Handler+0x4>

08000a14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <MemManage_Handler+0x4>

08000a1a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <BusFault_Handler+0x4>

08000a20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a24:	e7fe      	b.n	8000a24 <UsageFault_Handler+0x4>

08000a26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a26:	b480      	push	{r7}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a2a:	bf00      	nop
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr

08000a34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a38:	4802      	ldr	r0, [pc, #8]	; (8000a44 <TIM6_DAC_IRQHandler+0x10>)
 8000a3a:	f001 f899 	bl	8001b70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000038 	.word	0x20000038

08000a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <SystemInit+0x20>)
 8000a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a52:	4a05      	ldr	r2, [pc, #20]	; (8000a68 <SystemInit+0x20>)
 8000a54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aa4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a70:	480d      	ldr	r0, [pc, #52]	; (8000aa8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a74:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a78:	e002      	b.n	8000a80 <LoopCopyDataInit>

08000a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a7e:	3304      	adds	r3, #4

08000a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a84:	d3f9      	bcc.n	8000a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a88:	4c0b      	ldr	r4, [pc, #44]	; (8000ab8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a8c:	e001      	b.n	8000a92 <LoopFillZerobss>

08000a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a90:	3204      	adds	r2, #4

08000a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a94:	d3fb      	bcc.n	8000a8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a96:	f7ff ffd7 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a9a:	f006 f8d5 	bl	8006c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a9e:	f7ff fd5f 	bl	8000560 <main>
  bx  lr    
 8000aa2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000aa4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aac:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000ab0:	08006e80 	.word	0x08006e80
  ldr r2, =_sbss
 8000ab4:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000ab8:	200144a8 	.word	0x200144a8

08000abc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000abc:	e7fe      	b.n	8000abc <ADC_IRQHandler>
	...

08000ac0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ac4:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_Init+0x40>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a0d      	ldr	r2, [pc, #52]	; (8000b00 <HAL_Init+0x40>)
 8000aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ace:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ad0:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <HAL_Init+0x40>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a0a      	ldr	r2, [pc, #40]	; (8000b00 <HAL_Init+0x40>)
 8000ad6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ada:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_Init+0x40>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a07      	ldr	r2, [pc, #28]	; (8000b00 <HAL_Init+0x40>)
 8000ae2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ae6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae8:	2003      	movs	r0, #3
 8000aea:	f000 f8fc 	bl	8000ce6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000aee:	200f      	movs	r0, #15
 8000af0:	f7ff ff0e 	bl	8000910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000af4:	f7ff fee4 	bl	80008c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40023c00 	.word	0x40023c00

08000b04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b08:	4b06      	ldr	r3, [pc, #24]	; (8000b24 <HAL_IncTick+0x20>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x24>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4413      	add	r3, r2
 8000b14:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <HAL_IncTick+0x24>)
 8000b16:	6013      	str	r3, [r2, #0]
}
 8000b18:	bf00      	nop
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop
 8000b24:	20000008 	.word	0x20000008
 8000b28:	20000080 	.word	0x20000080

08000b2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b30:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <HAL_GetTick+0x14>)
 8000b32:	681b      	ldr	r3, [r3, #0]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	20000080 	.word	0x20000080

08000b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b4c:	f7ff ffee 	bl	8000b2c <HAL_GetTick>
 8000b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b5c:	d005      	beq.n	8000b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <HAL_Delay+0x44>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6a:	bf00      	nop
 8000b6c:	f7ff ffde 	bl	8000b2c <HAL_GetTick>
 8000b70:	4602      	mov	r2, r0
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	1ad3      	subs	r3, r2, r3
 8000b76:	68fa      	ldr	r2, [r7, #12]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d8f7      	bhi.n	8000b6c <HAL_Delay+0x28>
  {
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	bf00      	nop
 8000b80:	3710      	adds	r7, #16
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	20000008 	.word	0x20000008

08000b8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	f003 0307 	and.w	r3, r3, #7
 8000b9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b9c:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba8:	4013      	ands	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	60d3      	str	r3, [r2, #12]
}
 8000bc4:	bf00      	nop
 8000bc6:	3714      	adds	r7, #20
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd8:	4b04      	ldr	r3, [pc, #16]	; (8000bec <__NVIC_GetPriorityGrouping+0x18>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	0a1b      	lsrs	r3, r3, #8
 8000bde:	f003 0307 	and.w	r3, r3, #7
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000ed00 	.word	0xe000ed00

08000bf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b083      	sub	sp, #12
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	db0b      	blt.n	8000c1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	f003 021f 	and.w	r2, r3, #31
 8000c08:	4907      	ldr	r1, [pc, #28]	; (8000c28 <__NVIC_EnableIRQ+0x38>)
 8000c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0e:	095b      	lsrs	r3, r3, #5
 8000c10:	2001      	movs	r0, #1
 8000c12:	fa00 f202 	lsl.w	r2, r0, r2
 8000c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c1a:	bf00      	nop
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000e100 	.word	0xe000e100

08000c2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	6039      	str	r1, [r7, #0]
 8000c36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	db0a      	blt.n	8000c56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	490c      	ldr	r1, [pc, #48]	; (8000c78 <__NVIC_SetPriority+0x4c>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	0112      	lsls	r2, r2, #4
 8000c4c:	b2d2      	uxtb	r2, r2
 8000c4e:	440b      	add	r3, r1
 8000c50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c54:	e00a      	b.n	8000c6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	b2da      	uxtb	r2, r3
 8000c5a:	4908      	ldr	r1, [pc, #32]	; (8000c7c <__NVIC_SetPriority+0x50>)
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	f003 030f 	and.w	r3, r3, #15
 8000c62:	3b04      	subs	r3, #4
 8000c64:	0112      	lsls	r2, r2, #4
 8000c66:	b2d2      	uxtb	r2, r2
 8000c68:	440b      	add	r3, r1
 8000c6a:	761a      	strb	r2, [r3, #24]
}
 8000c6c:	bf00      	nop
 8000c6e:	370c      	adds	r7, #12
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000e100 	.word	0xe000e100
 8000c7c:	e000ed00 	.word	0xe000ed00

08000c80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b089      	sub	sp, #36	; 0x24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	60f8      	str	r0, [r7, #12]
 8000c88:	60b9      	str	r1, [r7, #8]
 8000c8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f003 0307 	and.w	r3, r3, #7
 8000c92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c94:	69fb      	ldr	r3, [r7, #28]
 8000c96:	f1c3 0307 	rsb	r3, r3, #7
 8000c9a:	2b04      	cmp	r3, #4
 8000c9c:	bf28      	it	cs
 8000c9e:	2304      	movcs	r3, #4
 8000ca0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3304      	adds	r3, #4
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d902      	bls.n	8000cb0 <NVIC_EncodePriority+0x30>
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	3b03      	subs	r3, #3
 8000cae:	e000      	b.n	8000cb2 <NVIC_EncodePriority+0x32>
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb8:	69bb      	ldr	r3, [r7, #24]
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43da      	mvns	r2, r3
 8000cc0:	68bb      	ldr	r3, [r7, #8]
 8000cc2:	401a      	ands	r2, r3
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd2:	43d9      	mvns	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	4313      	orrs	r3, r2
         );
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3724      	adds	r7, #36	; 0x24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr

08000ce6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ff4c 	bl	8000b8c <__NVIC_SetPriorityGrouping>
}
 8000cf4:	bf00      	nop
 8000cf6:	3708      	adds	r7, #8
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}

08000cfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
 8000d08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d0e:	f7ff ff61 	bl	8000bd4 <__NVIC_GetPriorityGrouping>
 8000d12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	6978      	ldr	r0, [r7, #20]
 8000d1a:	f7ff ffb1 	bl	8000c80 <NVIC_EncodePriority>
 8000d1e:	4602      	mov	r2, r0
 8000d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff ff80 	bl	8000c2c <__NVIC_SetPriority>
}
 8000d2c:	bf00      	nop
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f7ff ff54 	bl	8000bf0 <__NVIC_EnableIRQ>
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
 8000d6a:	e16b      	b.n	8001044 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	697a      	ldr	r2, [r7, #20]
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d80:	693a      	ldr	r2, [r7, #16]
 8000d82:	697b      	ldr	r3, [r7, #20]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	f040 815a 	bne.w	800103e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	f003 0303 	and.w	r3, r3, #3
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d005      	beq.n	8000da2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d9e:	2b02      	cmp	r3, #2
 8000da0:	d130      	bne.n	8000e04 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	689b      	ldr	r3, [r3, #8]
 8000da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	2203      	movs	r2, #3
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43db      	mvns	r3, r3
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	4013      	ands	r3, r2
 8000db8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	68da      	ldr	r2, [r3, #12]
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd8:	2201      	movs	r2, #1
 8000dda:	69fb      	ldr	r3, [r7, #28]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	091b      	lsrs	r3, r3, #4
 8000dee:	f003 0201 	and.w	r2, r3, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	f003 0303 	and.w	r3, r3, #3
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	d017      	beq.n	8000e40 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	68db      	ldr	r3, [r3, #12]
 8000e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	43db      	mvns	r3, r3
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4013      	ands	r3, r2
 8000e26:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	689a      	ldr	r2, [r3, #8]
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d123      	bne.n	8000e94 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	08da      	lsrs	r2, r3, #3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3208      	adds	r2, #8
 8000e54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e58:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	f003 0307 	and.w	r3, r3, #7
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	220f      	movs	r2, #15
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	691a      	ldr	r2, [r3, #16]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	08da      	lsrs	r2, r3, #3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	3208      	adds	r2, #8
 8000e8e:	69b9      	ldr	r1, [r7, #24]
 8000e90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0203 	and.w	r2, r3, #3
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80b4 	beq.w	800103e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b60      	ldr	r3, [pc, #384]	; (800105c <HAL_GPIO_Init+0x30c>)
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	4a5f      	ldr	r2, [pc, #380]	; (800105c <HAL_GPIO_Init+0x30c>)
 8000ee0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ee4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ee6:	4b5d      	ldr	r3, [pc, #372]	; (800105c <HAL_GPIO_Init+0x30c>)
 8000ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ef2:	4a5b      	ldr	r2, [pc, #364]	; (8001060 <HAL_GPIO_Init+0x310>)
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	3302      	adds	r3, #2
 8000efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f00:	69fb      	ldr	r3, [r7, #28]
 8000f02:	f003 0303 	and.w	r3, r3, #3
 8000f06:	009b      	lsls	r3, r3, #2
 8000f08:	220f      	movs	r2, #15
 8000f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a52      	ldr	r2, [pc, #328]	; (8001064 <HAL_GPIO_Init+0x314>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d02b      	beq.n	8000f76 <HAL_GPIO_Init+0x226>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a51      	ldr	r2, [pc, #324]	; (8001068 <HAL_GPIO_Init+0x318>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d025      	beq.n	8000f72 <HAL_GPIO_Init+0x222>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a50      	ldr	r2, [pc, #320]	; (800106c <HAL_GPIO_Init+0x31c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01f      	beq.n	8000f6e <HAL_GPIO_Init+0x21e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4f      	ldr	r2, [pc, #316]	; (8001070 <HAL_GPIO_Init+0x320>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x21a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a4e      	ldr	r2, [pc, #312]	; (8001074 <HAL_GPIO_Init+0x324>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x216>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a4d      	ldr	r2, [pc, #308]	; (8001078 <HAL_GPIO_Init+0x328>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x212>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a4c      	ldr	r2, [pc, #304]	; (800107c <HAL_GPIO_Init+0x32c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x20e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a4b      	ldr	r2, [pc, #300]	; (8001080 <HAL_GPIO_Init+0x330>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x20a>
 8000f56:	2307      	movs	r3, #7
 8000f58:	e00e      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f5a:	2308      	movs	r3, #8
 8000f5c:	e00c      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f5e:	2306      	movs	r3, #6
 8000f60:	e00a      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f62:	2305      	movs	r3, #5
 8000f64:	e008      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f66:	2304      	movs	r3, #4
 8000f68:	e006      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	e004      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f6e:	2302      	movs	r3, #2
 8000f70:	e002      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f72:	2301      	movs	r3, #1
 8000f74:	e000      	b.n	8000f78 <HAL_GPIO_Init+0x228>
 8000f76:	2300      	movs	r3, #0
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	f002 0203 	and.w	r2, r2, #3
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	4093      	lsls	r3, r2
 8000f82:	69ba      	ldr	r2, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f88:	4935      	ldr	r1, [pc, #212]	; (8001060 <HAL_GPIO_Init+0x310>)
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	089b      	lsrs	r3, r3, #2
 8000f8e:	3302      	adds	r3, #2
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f96:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9c:	693b      	ldr	r3, [r7, #16]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d003      	beq.n	8000fba <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fba:	4a32      	ldr	r2, [pc, #200]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000fbc:	69bb      	ldr	r3, [r7, #24]
 8000fbe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d003      	beq.n	8000fe4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fe4:	4a27      	ldr	r2, [pc, #156]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000fe6:	69bb      	ldr	r3, [r7, #24]
 8000fe8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fea:	4b26      	ldr	r3, [pc, #152]	; (8001084 <HAL_GPIO_Init+0x334>)
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	43db      	mvns	r3, r3
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d003      	beq.n	800100e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800100e:	4a1d      	ldr	r2, [pc, #116]	; (8001084 <HAL_GPIO_Init+0x334>)
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001014:	4b1b      	ldr	r3, [pc, #108]	; (8001084 <HAL_GPIO_Init+0x334>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	43db      	mvns	r3, r3
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4013      	ands	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102c:	2b00      	cmp	r3, #0
 800102e:	d003      	beq.n	8001038 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <HAL_GPIO_Init+0x334>)
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3301      	adds	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b0f      	cmp	r3, #15
 8001048:	f67f ae90 	bls.w	8000d6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3724      	adds	r7, #36	; 0x24
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40013800 	.word	0x40013800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800
 8001070:	40020c00 	.word	0x40020c00
 8001074:	40021000 	.word	0x40021000
 8001078:	40021400 	.word	0x40021400
 800107c:	40021800 	.word	0x40021800
 8001080:	40021c00 	.word	0x40021c00
 8001084:	40013c00 	.word	0x40013c00

08001088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001098:	787b      	ldrb	r3, [r7, #1]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d003      	beq.n	80010a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109e:	887a      	ldrh	r2, [r7, #2]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010a4:	e003      	b.n	80010ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	041a      	lsls	r2, r3, #16
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	619a      	str	r2, [r3, #24]
}
 80010ae:	bf00      	nop
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr

080010ba <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ba:	b480      	push	{r7}
 80010bc:	b085      	sub	sp, #20
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
 80010c2:	460b      	mov	r3, r1
 80010c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010cc:	887a      	ldrh	r2, [r7, #2]
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4013      	ands	r3, r2
 80010d2:	041a      	lsls	r2, r3, #16
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43d9      	mvns	r1, r3
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	400b      	ands	r3, r1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	619a      	str	r2, [r3, #24]
}
 80010e2:	bf00      	nop
 80010e4:	3714      	adds	r7, #20
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
	...

080010f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b086      	sub	sp, #24
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d101      	bne.n	8001102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	e267      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	2b00      	cmp	r3, #0
 800110c:	d075      	beq.n	80011fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800110e:	4b88      	ldr	r3, [pc, #544]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b04      	cmp	r3, #4
 8001118:	d00c      	beq.n	8001134 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111a:	4b85      	ldr	r3, [pc, #532]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800111c:	689b      	ldr	r3, [r3, #8]
 800111e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001122:	2b08      	cmp	r3, #8
 8001124:	d112      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001126:	4b82      	ldr	r3, [pc, #520]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800112e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001132:	d10b      	bne.n	800114c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001134:	4b7e      	ldr	r3, [pc, #504]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d05b      	beq.n	80011f8 <HAL_RCC_OscConfig+0x108>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d157      	bne.n	80011f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e242      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001154:	d106      	bne.n	8001164 <HAL_RCC_OscConfig+0x74>
 8001156:	4b76      	ldr	r3, [pc, #472]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a75      	ldr	r2, [pc, #468]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800115c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001160:	6013      	str	r3, [r2, #0]
 8001162:	e01d      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800116c:	d10c      	bne.n	8001188 <HAL_RCC_OscConfig+0x98>
 800116e:	4b70      	ldr	r3, [pc, #448]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	4a6f      	ldr	r2, [pc, #444]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001174:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001178:	6013      	str	r3, [r2, #0]
 800117a:	4b6d      	ldr	r3, [pc, #436]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a6c      	ldr	r2, [pc, #432]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001180:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001184:	6013      	str	r3, [r2, #0]
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0xb0>
 8001188:	4b69      	ldr	r3, [pc, #420]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a68      	ldr	r2, [pc, #416]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800118e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	4b66      	ldr	r3, [pc, #408]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a65      	ldr	r2, [pc, #404]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800119a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800119e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d013      	beq.n	80011d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a8:	f7ff fcc0 	bl	8000b2c <HAL_GetTick>
 80011ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	e008      	b.n	80011c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b0:	f7ff fcbc 	bl	8000b2c <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	2b64      	cmp	r3, #100	; 0x64
 80011bc:	d901      	bls.n	80011c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011be:	2303      	movs	r3, #3
 80011c0:	e207      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c2:	4b5b      	ldr	r3, [pc, #364]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f0      	beq.n	80011b0 <HAL_RCC_OscConfig+0xc0>
 80011ce:	e014      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fcac 	bl	8000b2c <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011d8:	f7ff fca8 	bl	8000b2c <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b64      	cmp	r3, #100	; 0x64
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e1f3      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ea:	4b51      	ldr	r3, [pc, #324]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0xe8>
 80011f6:	e000      	b.n	80011fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d063      	beq.n	80012ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001206:	4b4a      	ldr	r3, [pc, #296]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	f003 030c 	and.w	r3, r3, #12
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001212:	4b47      	ldr	r3, [pc, #284]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800121a:	2b08      	cmp	r3, #8
 800121c:	d11c      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800121e:	4b44      	ldr	r3, [pc, #272]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122a:	4b41      	ldr	r3, [pc, #260]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d005      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b01      	cmp	r3, #1
 800123c:	d001      	beq.n	8001242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e1c7      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001242:	4b3b      	ldr	r3, [pc, #236]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	4937      	ldr	r1, [pc, #220]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001256:	e03a      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d020      	beq.n	80012a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 8001262:	2201      	movs	r2, #1
 8001264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001266:	f7ff fc61 	bl	8000b2c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800126c:	e008      	b.n	8001280 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800126e:	f7ff fc5d 	bl	8000b2c <HAL_GetTick>
 8001272:	4602      	mov	r2, r0
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	1ad3      	subs	r3, r2, r3
 8001278:	2b02      	cmp	r3, #2
 800127a:	d901      	bls.n	8001280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e1a8      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001280:	4b2b      	ldr	r3, [pc, #172]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0f0      	beq.n	800126e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800128c:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	691b      	ldr	r3, [r3, #16]
 8001298:	00db      	lsls	r3, r3, #3
 800129a:	4925      	ldr	r1, [pc, #148]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 800129c:	4313      	orrs	r3, r2
 800129e:	600b      	str	r3, [r1, #0]
 80012a0:	e015      	b.n	80012ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a2:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_RCC_OscConfig+0x244>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012a8:	f7ff fc40 	bl	8000b2c <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ae:	e008      	b.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b0:	f7ff fc3c 	bl	8000b2c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d901      	bls.n	80012c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e187      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c2:	4b1b      	ldr	r3, [pc, #108]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1f0      	bne.n	80012b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d036      	beq.n	8001348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d016      	beq.n	8001310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e2:	4b15      	ldr	r3, [pc, #84]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012e8:	f7ff fc20 	bl	8000b2c <HAL_GetTick>
 80012ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ee:	e008      	b.n	8001302 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f0:	f7ff fc1c 	bl	8000b2c <HAL_GetTick>
 80012f4:	4602      	mov	r2, r0
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	1ad3      	subs	r3, r2, r3
 80012fa:	2b02      	cmp	r3, #2
 80012fc:	d901      	bls.n	8001302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80012fe:	2303      	movs	r3, #3
 8001300:	e167      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_RCC_OscConfig+0x240>)
 8001304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	2b00      	cmp	r3, #0
 800130c:	d0f0      	beq.n	80012f0 <HAL_RCC_OscConfig+0x200>
 800130e:	e01b      	b.n	8001348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_RCC_OscConfig+0x248>)
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fc09 	bl	8000b2c <HAL_GetTick>
 800131a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131c:	e00e      	b.n	800133c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800131e:	f7ff fc05 	bl	8000b2c <HAL_GetTick>
 8001322:	4602      	mov	r2, r0
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	1ad3      	subs	r3, r2, r3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d907      	bls.n	800133c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800132c:	2303      	movs	r3, #3
 800132e:	e150      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001330:	40023800 	.word	0x40023800
 8001334:	42470000 	.word	0x42470000
 8001338:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800133c:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800133e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001340:	f003 0302 	and.w	r3, r3, #2
 8001344:	2b00      	cmp	r3, #0
 8001346:	d1ea      	bne.n	800131e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	f000 8097 	beq.w	8001484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001356:	2300      	movs	r3, #0
 8001358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135a:	4b81      	ldr	r3, [pc, #516]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d10f      	bne.n	8001386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60bb      	str	r3, [r7, #8]
 800136a:	4b7d      	ldr	r3, [pc, #500]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a7c      	ldr	r2, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b7a      	ldr	r3, [pc, #488]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	60bb      	str	r3, [r7, #8]
 8001380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001382:	2301      	movs	r3, #1
 8001384:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001386:	4b77      	ldr	r3, [pc, #476]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800138e:	2b00      	cmp	r3, #0
 8001390:	d118      	bne.n	80013c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a73      	ldr	r2, [pc, #460]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 8001398:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800139c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800139e:	f7ff fbc5 	bl	8000b2c <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a6:	f7ff fbc1 	bl	8000b2c <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e10c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_OscConfig+0x474>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d0f0      	beq.n	80013a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d106      	bne.n	80013da <HAL_RCC_OscConfig+0x2ea>
 80013cc:	4b64      	ldr	r3, [pc, #400]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013d0:	4a63      	ldr	r2, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6713      	str	r3, [r2, #112]	; 0x70
 80013d8:	e01c      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b05      	cmp	r3, #5
 80013e0:	d10c      	bne.n	80013fc <HAL_RCC_OscConfig+0x30c>
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	4a5e      	ldr	r2, [pc, #376]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6713      	str	r3, [r2, #112]	; 0x70
 80013ee:	4b5c      	ldr	r3, [pc, #368]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013f2:	4a5b      	ldr	r2, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6713      	str	r3, [r2, #112]	; 0x70
 80013fa:	e00b      	b.n	8001414 <HAL_RCC_OscConfig+0x324>
 80013fc:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80013fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001400:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6713      	str	r3, [r2, #112]	; 0x70
 8001408:	4b55      	ldr	r3, [pc, #340]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800140c:	4a54      	ldr	r2, [pc, #336]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d015      	beq.n	8001448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800141c:	f7ff fb86 	bl	8000b2c <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001422:	e00a      	b.n	800143a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001424:	f7ff fb82 	bl	8000b2c <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001432:	4293      	cmp	r3, r2
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e0cb      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143a:	4b49      	ldr	r3, [pc, #292]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800143c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0ee      	beq.n	8001424 <HAL_RCC_OscConfig+0x334>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001448:	f7ff fb70 	bl	8000b2c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800144e:	e00a      	b.n	8001466 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001450:	f7ff fb6c 	bl	8000b2c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	f241 3288 	movw	r2, #5000	; 0x1388
 800145e:	4293      	cmp	r3, r2
 8001460:	d901      	bls.n	8001466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001462:	2303      	movs	r3, #3
 8001464:	e0b5      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001466:	4b3e      	ldr	r3, [pc, #248]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800146a:	f003 0302 	and.w	r3, r3, #2
 800146e:	2b00      	cmp	r3, #0
 8001470:	d1ee      	bne.n	8001450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d105      	bne.n	8001484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001478:	4b39      	ldr	r3, [pc, #228]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147c:	4a38      	ldr	r2, [pc, #224]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800147e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001482:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	699b      	ldr	r3, [r3, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	f000 80a1 	beq.w	80015d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f003 030c 	and.w	r3, r3, #12
 8001496:	2b08      	cmp	r3, #8
 8001498:	d05c      	beq.n	8001554 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	699b      	ldr	r3, [r3, #24]
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d141      	bne.n	8001526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b31      	ldr	r3, [pc, #196]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb40 	bl	8000b2c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb3c 	bl	8000b2c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e087      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b27      	ldr	r3, [pc, #156]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69da      	ldr	r2, [r3, #28]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a1b      	ldr	r3, [r3, #32]
 80014d6:	431a      	orrs	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014dc:	019b      	lsls	r3, r3, #6
 80014de:	431a      	orrs	r2, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014e4:	085b      	lsrs	r3, r3, #1
 80014e6:	3b01      	subs	r3, #1
 80014e8:	041b      	lsls	r3, r3, #16
 80014ea:	431a      	orrs	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f0:	061b      	lsls	r3, r3, #24
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb15 	bl	8000b2c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fb11 	bl	8000b2c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e05c      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x416>
 8001524:	e054      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x478>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fafe 	bl	8000b2c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fafa 	bl	8000b2c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e045      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x470>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x444>
 8001552:	e03d      	b.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	699b      	ldr	r3, [r3, #24]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e038      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
 8001560:	40023800 	.word	0x40023800
 8001564:	40007000 	.word	0x40007000
 8001568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800156c:	4b1b      	ldr	r3, [pc, #108]	; (80015dc <HAL_RCC_OscConfig+0x4ec>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	699b      	ldr	r3, [r3, #24]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d028      	beq.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001584:	429a      	cmp	r2, r3
 8001586:	d121      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001592:	429a      	cmp	r2, r3
 8001594:	d11a      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800159c:	4013      	ands	r3, r2
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80015a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d111      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b2:	085b      	lsrs	r3, r3, #1
 80015b4:	3b01      	subs	r3, #1
 80015b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d107      	bne.n	80015cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d001      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e000      	b.n	80015d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3718      	adds	r7, #24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40023800 	.word	0x40023800

080015e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d101      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e0cc      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015f4:	4b68      	ldr	r3, [pc, #416]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0307 	and.w	r3, r3, #7
 80015fc:	683a      	ldr	r2, [r7, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d90c      	bls.n	800161c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001602:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001604:	683a      	ldr	r2, [r7, #0]
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800160a:	4b63      	ldr	r3, [pc, #396]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0307 	and.w	r3, r3, #7
 8001612:	683a      	ldr	r2, [r7, #0]
 8001614:	429a      	cmp	r2, r3
 8001616:	d001      	beq.n	800161c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e0b8      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0302 	and.w	r3, r3, #2
 8001624:	2b00      	cmp	r3, #0
 8001626:	d020      	beq.n	800166a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d005      	beq.n	8001640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	4a58      	ldr	r2, [pc, #352]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800163e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0308 	and.w	r3, r3, #8
 8001648:	2b00      	cmp	r3, #0
 800164a:	d005      	beq.n	8001658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800164c:	4b53      	ldr	r3, [pc, #332]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001658:	4b50      	ldr	r3, [pc, #320]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	494d      	ldr	r1, [pc, #308]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001666:	4313      	orrs	r3, r2
 8001668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	d044      	beq.n	8001700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800167e:	4b47      	ldr	r3, [pc, #284]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001686:	2b00      	cmp	r3, #0
 8001688:	d119      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e07f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d003      	beq.n	800169e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169a:	2b03      	cmp	r3, #3
 800169c:	d107      	bne.n	80016ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800169e:	4b3f      	ldr	r3, [pc, #252]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e06f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ae:	4b3b      	ldr	r3, [pc, #236]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e067      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f023 0203 	bic.w	r2, r3, #3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4934      	ldr	r1, [pc, #208]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d0:	f7ff fa2c 	bl	8000b2c <HAL_GetTick>
 80016d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d6:	e00a      	b.n	80016ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d8:	f7ff fa28 	bl	8000b2c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e04f      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ee:	4b2b      	ldr	r3, [pc, #172]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 020c 	and.w	r2, r3, #12
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d1eb      	bne.n	80016d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001700:	4b25      	ldr	r3, [pc, #148]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	683a      	ldr	r2, [r7, #0]
 800170a:	429a      	cmp	r2, r3
 800170c:	d20c      	bcs.n	8001728 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170e:	4b22      	ldr	r3, [pc, #136]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001710:	683a      	ldr	r2, [r7, #0]
 8001712:	b2d2      	uxtb	r2, r2
 8001714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <HAL_RCC_ClockConfig+0x1b8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	683a      	ldr	r2, [r7, #0]
 8001720:	429a      	cmp	r2, r3
 8001722:	d001      	beq.n	8001728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e032      	b.n	800178e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0304 	and.w	r3, r3, #4
 8001730:	2b00      	cmp	r3, #0
 8001732:	d008      	beq.n	8001746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001734:	4b19      	ldr	r3, [pc, #100]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001736:	689b      	ldr	r3, [r3, #8]
 8001738:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	4916      	ldr	r1, [pc, #88]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	4313      	orrs	r3, r2
 8001744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	2b00      	cmp	r3, #0
 8001750:	d009      	beq.n	8001766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001752:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	691b      	ldr	r3, [r3, #16]
 800175e:	00db      	lsls	r3, r3, #3
 8001760:	490e      	ldr	r1, [pc, #56]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	4313      	orrs	r3, r2
 8001764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001766:	f000 f821 	bl	80017ac <HAL_RCC_GetSysClockFreq>
 800176a:	4602      	mov	r2, r0
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	091b      	lsrs	r3, r3, #4
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	490a      	ldr	r1, [pc, #40]	; (80017a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001778:	5ccb      	ldrb	r3, [r1, r3]
 800177a:	fa22 f303 	lsr.w	r3, r2, r3
 800177e:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4618      	mov	r0, r3
 8001788:	f7ff f8c2 	bl	8000910 <HAL_InitTick>

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40023c00 	.word	0x40023c00
 800179c:	40023800 	.word	0x40023800
 80017a0:	08006e30 	.word	0x08006e30
 80017a4:	20000000 	.word	0x20000000
 80017a8:	20000004 	.word	0x20000004

080017ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b0:	b090      	sub	sp, #64	; 0x40
 80017b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	637b      	str	r3, [r7, #52]	; 0x34
 80017b8:	2300      	movs	r3, #0
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017bc:	2300      	movs	r3, #0
 80017be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c4:	4b59      	ldr	r3, [pc, #356]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	f003 030c 	and.w	r3, r3, #12
 80017cc:	2b08      	cmp	r3, #8
 80017ce:	d00d      	beq.n	80017ec <HAL_RCC_GetSysClockFreq+0x40>
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	f200 80a1 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d002      	beq.n	80017e0 <HAL_RCC_GetSysClockFreq+0x34>
 80017da:	2b04      	cmp	r3, #4
 80017dc:	d003      	beq.n	80017e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80017de:	e09b      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e0:	4b53      	ldr	r3, [pc, #332]	; (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 80017e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80017e4:	e09b      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017e6:	4b53      	ldr	r3, [pc, #332]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80017ea:	e098      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017ec:	4b4f      	ldr	r3, [pc, #316]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80017f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017f6:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d028      	beq.n	8001854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001802:	4b4a      	ldr	r3, [pc, #296]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	099b      	lsrs	r3, r3, #6
 8001808:	2200      	movs	r2, #0
 800180a:	623b      	str	r3, [r7, #32]
 800180c:	627a      	str	r2, [r7, #36]	; 0x24
 800180e:	6a3b      	ldr	r3, [r7, #32]
 8001810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001814:	2100      	movs	r1, #0
 8001816:	4b47      	ldr	r3, [pc, #284]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001818:	fb03 f201 	mul.w	r2, r3, r1
 800181c:	2300      	movs	r3, #0
 800181e:	fb00 f303 	mul.w	r3, r0, r3
 8001822:	4413      	add	r3, r2
 8001824:	4a43      	ldr	r2, [pc, #268]	; (8001934 <HAL_RCC_GetSysClockFreq+0x188>)
 8001826:	fba0 1202 	umull	r1, r2, r0, r2
 800182a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800182c:	460a      	mov	r2, r1
 800182e:	62ba      	str	r2, [r7, #40]	; 0x28
 8001830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001832:	4413      	add	r3, r2
 8001834:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001838:	2200      	movs	r2, #0
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	61fa      	str	r2, [r7, #28]
 800183e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001846:	f7fe fd0d 	bl	8000264 <__aeabi_uldivmod>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4613      	mov	r3, r2
 8001850:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001852:	e053      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001854:	4b35      	ldr	r3, [pc, #212]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	099b      	lsrs	r3, r3, #6
 800185a:	2200      	movs	r2, #0
 800185c:	613b      	str	r3, [r7, #16]
 800185e:	617a      	str	r2, [r7, #20]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001866:	f04f 0b00 	mov.w	fp, #0
 800186a:	4652      	mov	r2, sl
 800186c:	465b      	mov	r3, fp
 800186e:	f04f 0000 	mov.w	r0, #0
 8001872:	f04f 0100 	mov.w	r1, #0
 8001876:	0159      	lsls	r1, r3, #5
 8001878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800187c:	0150      	lsls	r0, r2, #5
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	ebb2 080a 	subs.w	r8, r2, sl
 8001886:	eb63 090b 	sbc.w	r9, r3, fp
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800189a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800189e:	ebb2 0408 	subs.w	r4, r2, r8
 80018a2:	eb63 0509 	sbc.w	r5, r3, r9
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	f04f 0300 	mov.w	r3, #0
 80018ae:	00eb      	lsls	r3, r5, #3
 80018b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b4:	00e2      	lsls	r2, r4, #3
 80018b6:	4614      	mov	r4, r2
 80018b8:	461d      	mov	r5, r3
 80018ba:	eb14 030a 	adds.w	r3, r4, sl
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	eb45 030b 	adc.w	r3, r5, fp
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4629      	mov	r1, r5
 80018d4:	028b      	lsls	r3, r1, #10
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018dc:	4621      	mov	r1, r4
 80018de:	028a      	lsls	r2, r1, #10
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018e6:	2200      	movs	r2, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	60fa      	str	r2, [r7, #12]
 80018ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018f0:	f7fe fcb8 	bl	8000264 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0x180>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800190c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800190e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetSysClockFreq+0x184>)
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001920:	4618      	mov	r0, r3
 8001922:	3740      	adds	r7, #64	; 0x40
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	017d7840 	.word	0x017d7840

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCC_GetHCLKFreq+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff0 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	08006e40 	.word	0x08006e40

08001978 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	220f      	movs	r2, #15
 8001986:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001988:	4b12      	ldr	r3, [pc, #72]	; (80019d4 <HAL_RCC_GetClockConfig+0x5c>)
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	f003 0203 	and.w	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_RCC_GetClockConfig+0x5c>)
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_GetClockConfig+0x5c>)
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	08db      	lsrs	r3, r3, #3
 80019b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019ba:	4b07      	ldr	r3, [pc, #28]	; (80019d8 <HAL_RCC_GetClockConfig+0x60>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f003 0207 	and.w	r2, r3, #7
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e041      	b.n	8001a72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d106      	bne.n	8001a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f839 	bl	8001a7a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3304      	adds	r3, #4
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	f000 f9d8 	bl	8001dd0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2201      	movs	r2, #1
 8001a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	3708      	adds	r7, #8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}

08001a7a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	b083      	sub	sp, #12
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001a82:	bf00      	nop
 8001a84:	370c      	adds	r7, #12
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d001      	beq.n	8001aa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e04e      	b.n	8001b46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2202      	movs	r2, #2
 8001aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	68da      	ldr	r2, [r3, #12]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0201 	orr.w	r2, r2, #1
 8001abe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a23      	ldr	r2, [pc, #140]	; (8001b54 <HAL_TIM_Base_Start_IT+0xc4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d022      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ad2:	d01d      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a1f      	ldr	r2, [pc, #124]	; (8001b58 <HAL_TIM_Base_Start_IT+0xc8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d018      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_TIM_Base_Start_IT+0xcc>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d013      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a1c      	ldr	r2, [pc, #112]	; (8001b60 <HAL_TIM_Base_Start_IT+0xd0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00e      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_TIM_Base_Start_IT+0xd4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d009      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <HAL_TIM_Base_Start_IT+0xd8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d004      	beq.n	8001b10 <HAL_TIM_Base_Start_IT+0x80>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_TIM_Base_Start_IT+0xdc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d111      	bne.n	8001b34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b06      	cmp	r3, #6
 8001b20:	d010      	beq.n	8001b44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b32:	e007      	b.n	8001b44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	681a      	ldr	r2, [r3, #0]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f042 0201 	orr.w	r2, r2, #1
 8001b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3714      	adds	r7, #20
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40010000 	.word	0x40010000
 8001b58:	40000400 	.word	0x40000400
 8001b5c:	40000800 	.word	0x40000800
 8001b60:	40000c00 	.word	0x40000c00
 8001b64:	40010400 	.word	0x40010400
 8001b68:	40014000 	.word	0x40014000
 8001b6c:	40001800 	.word	0x40001800

08001b70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d122      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f003 0302 	and.w	r3, r3, #2
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d11b      	bne.n	8001bcc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f06f 0202 	mvn.w	r2, #2
 8001b9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d003      	beq.n	8001bba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f000 f8ee 	bl	8001d94 <HAL_TIM_IC_CaptureCallback>
 8001bb8:	e005      	b.n	8001bc6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f8e0 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f000 f8f1 	bl	8001da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691b      	ldr	r3, [r3, #16]
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d122      	bne.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	f003 0304 	and.w	r3, r3, #4
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d11b      	bne.n	8001c20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f06f 0204 	mvn.w	r2, #4
 8001bf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f000 f8c4 	bl	8001d94 <HAL_TIM_IC_CaptureCallback>
 8001c0c:	e005      	b.n	8001c1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f8b6 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f8c7 	bl	8001da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b08      	cmp	r3, #8
 8001c2c:	d122      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0308 	and.w	r3, r3, #8
 8001c38:	2b08      	cmp	r3, #8
 8001c3a:	d11b      	bne.n	8001c74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0208 	mvn.w	r2, #8
 8001c44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2204      	movs	r2, #4
 8001c4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	69db      	ldr	r3, [r3, #28]
 8001c52:	f003 0303 	and.w	r3, r3, #3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d003      	beq.n	8001c62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f89a 	bl	8001d94 <HAL_TIM_IC_CaptureCallback>
 8001c60:	e005      	b.n	8001c6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f000 f88c 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f000 f89d 	bl	8001da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b10      	cmp	r3, #16
 8001c80:	d122      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 0310 	and.w	r3, r3, #16
 8001c8c:	2b10      	cmp	r3, #16
 8001c8e:	d11b      	bne.n	8001cc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f06f 0210 	mvn.w	r2, #16
 8001c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	2208      	movs	r2, #8
 8001c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	69db      	ldr	r3, [r3, #28]
 8001ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f000 f870 	bl	8001d94 <HAL_TIM_IC_CaptureCallback>
 8001cb4:	e005      	b.n	8001cc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f862 	bl	8001d80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	f000 f873 	bl	8001da8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	2b01      	cmp	r3, #1
 8001cd4:	d10e      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d107      	bne.n	8001cf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f06f 0201 	mvn.w	r2, #1
 8001cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7fe fdce 	bl	8000890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cfe:	2b80      	cmp	r3, #128	; 0x80
 8001d00:	d10e      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0c:	2b80      	cmp	r3, #128	; 0x80
 8001d0e:	d107      	bne.n	8001d20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d1a:	6878      	ldr	r0, [r7, #4]
 8001d1c:	f000 f902 	bl	8001f24 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	691b      	ldr	r3, [r3, #16]
 8001d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d2a:	2b40      	cmp	r3, #64	; 0x40
 8001d2c:	d10e      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d38:	2b40      	cmp	r3, #64	; 0x40
 8001d3a:	d107      	bne.n	8001d4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 f838 	bl	8001dbc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0320 	and.w	r3, r3, #32
 8001d56:	2b20      	cmp	r3, #32
 8001d58:	d10e      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d107      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0220 	mvn.w	r2, #32
 8001d70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d72:	6878      	ldr	r0, [r7, #4]
 8001d74:	f000 f8cc 	bl	8001f10 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001dc4:	bf00      	nop
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b085      	sub	sp, #20
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	4a40      	ldr	r2, [pc, #256]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d013      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dee:	d00f      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a3d      	ldr	r2, [pc, #244]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00b      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d007      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d003      	beq.n	8001e10 <TIM_Base_SetConfig+0x40>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d108      	bne.n	8001e22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	68fa      	ldr	r2, [r7, #12]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2f      	ldr	r2, [pc, #188]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d02b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d027      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2c      	ldr	r2, [pc, #176]	; (8001ee8 <TIM_Base_SetConfig+0x118>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d023      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a2b      	ldr	r2, [pc, #172]	; (8001eec <TIM_Base_SetConfig+0x11c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d01f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a2a      	ldr	r2, [pc, #168]	; (8001ef0 <TIM_Base_SetConfig+0x120>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d01b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a29      	ldr	r2, [pc, #164]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d017      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a28      	ldr	r2, [pc, #160]	; (8001ef8 <TIM_Base_SetConfig+0x128>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d013      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a27      	ldr	r2, [pc, #156]	; (8001efc <TIM_Base_SetConfig+0x12c>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d00f      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a26      	ldr	r2, [pc, #152]	; (8001f00 <TIM_Base_SetConfig+0x130>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d00b      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a25      	ldr	r2, [pc, #148]	; (8001f04 <TIM_Base_SetConfig+0x134>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d007      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a24      	ldr	r2, [pc, #144]	; (8001f08 <TIM_Base_SetConfig+0x138>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d003      	beq.n	8001e82 <TIM_Base_SetConfig+0xb2>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a23      	ldr	r2, [pc, #140]	; (8001f0c <TIM_Base_SetConfig+0x13c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d108      	bne.n	8001e94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695b      	ldr	r3, [r3, #20]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a0a      	ldr	r2, [pc, #40]	; (8001ee4 <TIM_Base_SetConfig+0x114>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d003      	beq.n	8001ec8 <TIM_Base_SetConfig+0xf8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	; (8001ef4 <TIM_Base_SetConfig+0x124>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d103      	bne.n	8001ed0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	691a      	ldr	r2, [r3, #16]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	615a      	str	r2, [r3, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40010000 	.word	0x40010000
 8001ee8:	40000400 	.word	0x40000400
 8001eec:	40000800 	.word	0x40000800
 8001ef0:	40000c00 	.word	0x40000c00
 8001ef4:	40010400 	.word	0x40010400
 8001ef8:	40014000 	.word	0x40014000
 8001efc:	40014400 	.word	0x40014400
 8001f00:	40014800 	.word	0x40014800
 8001f04:	40001800 	.word	0x40001800
 8001f08:	40001c00 	.word	0x40001c00
 8001f0c:	40002000 	.word	0x40002000

08001f10 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f103 0208 	add.w	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f103 0208 	add.w	r2, r3, #8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f103 0208 	add.w	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fa8:	d103      	bne.n	8001fb2 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	e00c      	b.n	8001fcc <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	3308      	adds	r3, #8
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	e002      	b.n	8001fc0 <vListInsert+0x2e>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68ba      	ldr	r2, [r7, #8]
 8001fc8:	429a      	cmp	r2, r3
 8001fca:	d2f6      	bcs.n	8001fba <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	68fa      	ldr	r2, [r7, #12]
 8001fe0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	683a      	ldr	r2, [r7, #0]
 8001fe6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	601a      	str	r2, [r3, #0]
}
 8001ff8:	bf00      	nop
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6892      	ldr	r2, [r2, #8]
 800201a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	6852      	ldr	r2, [r2, #4]
 8002024:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	429a      	cmp	r2, r3
 800202e:	d103      	bne.n	8002038 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689a      	ldr	r2, [r3, #8]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	1e5a      	subs	r2, r3, #1
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002062:	2301      	movs	r3, #1
 8002064:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d10a      	bne.n	8002086 <xQueueGenericReset+0x2e>
        __asm volatile
 8002070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002074:	f383 8811 	msr	BASEPRI, r3
 8002078:	f3bf 8f6f 	isb	sy
 800207c:	f3bf 8f4f 	dsb	sy
 8002080:	60fb      	str	r3, [r7, #12]
    }
 8002082:	bf00      	nop
 8002084:	e7fe      	b.n	8002084 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05d      	beq.n	8002148 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002090:	2b00      	cmp	r3, #0
 8002092:	d059      	beq.n	8002148 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209c:	2100      	movs	r1, #0
 800209e:	fba3 2302 	umull	r2, r3, r3, r2
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d000      	beq.n	80020a8 <xQueueGenericReset+0x50>
 80020a6:	2101      	movs	r1, #1
 80020a8:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d14c      	bne.n	8002148 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80020ae:	f001 fef1 	bl	8003e94 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020ba:	6939      	ldr	r1, [r7, #16]
 80020bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020be:	fb01 f303 	mul.w	r3, r1, r3
 80020c2:	441a      	add	r2, r3
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	2200      	movs	r2, #0
 80020cc:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	3b01      	subs	r3, #1
 80020e0:	6939      	ldr	r1, [r7, #16]
 80020e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020e4:	fb01 f303 	mul.w	r3, r1, r3
 80020e8:	441a      	add	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	22ff      	movs	r2, #255	; 0xff
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	22ff      	movs	r2, #255	; 0xff
 80020fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d114      	bne.n	800212e <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d01a      	beq.n	8002142 <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	3310      	adds	r3, #16
 8002110:	4618      	mov	r0, r3
 8002112:	f000 ffdb 	bl	80030cc <xTaskRemoveFromEventList>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d012      	beq.n	8002142 <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800211c:	4b15      	ldr	r3, [pc, #84]	; (8002174 <xQueueGenericReset+0x11c>)
 800211e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	e009      	b.n	8002142 <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	3310      	adds	r3, #16
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff ff00 	bl	8001f38 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	3324      	adds	r3, #36	; 0x24
 800213c:	4618      	mov	r0, r3
 800213e:	f7ff fefb 	bl	8001f38 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002142:	f001 fed7 	bl	8003ef4 <vPortExitCritical>
 8002146:	e001      	b.n	800214c <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002148:	2300      	movs	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10a      	bne.n	8002168 <xQueueGenericReset+0x110>
        __asm volatile
 8002152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002156:	f383 8811 	msr	BASEPRI, r3
 800215a:	f3bf 8f6f 	isb	sy
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	60bb      	str	r3, [r7, #8]
    }
 8002164:	bf00      	nop
 8002166:	e7fe      	b.n	8002166 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002168:	697b      	ldr	r3, [r7, #20]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	e000ed04 	.word	0xe000ed04

08002178 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002178:	b580      	push	{r7, lr}
 800217a:	b08a      	sub	sp, #40	; 0x28
 800217c:	af02      	add	r7, sp, #8
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	4613      	mov	r3, r2
 8002184:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d02e      	beq.n	80021ee <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002190:	2100      	movs	r1, #0
 8002192:	68ba      	ldr	r2, [r7, #8]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	fba3 2302 	umull	r2, r3, r3, r2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d000      	beq.n	80021a0 <xQueueGenericCreate+0x28>
 800219e:	2101      	movs	r1, #1
 80021a0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d123      	bne.n	80021ee <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	68ba      	ldr	r2, [r7, #8]
 80021aa:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80021ae:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80021b2:	d81c      	bhi.n	80021ee <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	fb02 f303 	mul.w	r3, r2, r3
 80021bc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80021be:	69bb      	ldr	r3, [r7, #24]
 80021c0:	3350      	adds	r3, #80	; 0x50
 80021c2:	4618      	mov	r0, r3
 80021c4:	f001 ff92 	bl	80040ec <pvPortMalloc>
 80021c8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d01c      	beq.n	800220a <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	3350      	adds	r3, #80	; 0x50
 80021d8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80021da:	79fa      	ldrb	r2, [r7, #7]
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	68b9      	ldr	r1, [r7, #8]
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 f814 	bl	8002214 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80021ec:	e00d      	b.n	800220a <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d10a      	bne.n	800220a <xQueueGenericCreate+0x92>
        __asm volatile
 80021f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021f8:	f383 8811 	msr	BASEPRI, r3
 80021fc:	f3bf 8f6f 	isb	sy
 8002200:	f3bf 8f4f 	dsb	sy
 8002204:	613b      	str	r3, [r7, #16]
    }
 8002206:	bf00      	nop
 8002208:	e7fe      	b.n	8002208 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800220a:	69fb      	ldr	r3, [r7, #28]
    }
 800220c:	4618      	mov	r0, r3
 800220e:	3720      	adds	r7, #32
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}

08002214 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d103      	bne.n	8002230 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	e002      	b.n	8002236 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	687a      	ldr	r2, [r7, #4]
 8002234:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002242:	2101      	movs	r1, #1
 8002244:	69b8      	ldr	r0, [r7, #24]
 8002246:	f7ff ff07 	bl	8002058 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002252:	78fb      	ldrb	r3, [r7, #3]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	68f9      	ldr	r1, [r7, #12]
 8002258:	2073      	movs	r0, #115	; 0x73
 800225a:	f003 fe03 	bl	8005e64 <SEGGER_SYSVIEW_RecordU32x3>
}
 800225e:	bf00      	nop
 8002260:	3710      	adds	r7, #16
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002268:	b590      	push	{r4, r7, lr}
 800226a:	b08f      	sub	sp, #60	; 0x3c
 800226c:	af02      	add	r7, sp, #8
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800227c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227e:	2b00      	cmp	r3, #0
 8002280:	d10a      	bne.n	8002298 <xQueueReceive+0x30>
        __asm volatile
 8002282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
 8002292:	623b      	str	r3, [r7, #32]
    }
 8002294:	bf00      	nop
 8002296:	e7fe      	b.n	8002296 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <xQueueReceive+0x3e>
 800229e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <xQueueReceive+0x42>
 80022a6:	2301      	movs	r3, #1
 80022a8:	e000      	b.n	80022ac <xQueueReceive+0x44>
 80022aa:	2300      	movs	r3, #0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <xQueueReceive+0x5e>
        __asm volatile
 80022b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b4:	f383 8811 	msr	BASEPRI, r3
 80022b8:	f3bf 8f6f 	isb	sy
 80022bc:	f3bf 8f4f 	dsb	sy
 80022c0:	61fb      	str	r3, [r7, #28]
    }
 80022c2:	bf00      	nop
 80022c4:	e7fe      	b.n	80022c4 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022c6:	f001 f913 	bl	80034f0 <xTaskGetSchedulerState>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d102      	bne.n	80022d6 <xQueueReceive+0x6e>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <xQueueReceive+0x72>
 80022d6:	2301      	movs	r3, #1
 80022d8:	e000      	b.n	80022dc <xQueueReceive+0x74>
 80022da:	2300      	movs	r3, #0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10a      	bne.n	80022f6 <xQueueReceive+0x8e>
        __asm volatile
 80022e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e4:	f383 8811 	msr	BASEPRI, r3
 80022e8:	f3bf 8f6f 	isb	sy
 80022ec:	f3bf 8f4f 	dsb	sy
 80022f0:	61bb      	str	r3, [r7, #24]
    }
 80022f2:	bf00      	nop
 80022f4:	e7fe      	b.n	80022f4 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80022f6:	f001 fdcd 	bl	8003e94 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02f      	beq.n	8002366 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002306:	68b9      	ldr	r1, [r7, #8]
 8002308:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800230a:	f000 f8bd 	bl	8002488 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	4618      	mov	r0, r3
 8002312:	f004 fad3 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 8002316:	4604      	mov	r4, r0
 8002318:	2000      	movs	r0, #0
 800231a:	f004 facf 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 800231e:	4602      	mov	r2, r0
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2101      	movs	r1, #1
 8002324:	9100      	str	r1, [sp, #0]
 8002326:	4621      	mov	r1, r4
 8002328:	205c      	movs	r0, #92	; 0x5c
 800232a:	f003 fe11 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	1e5a      	subs	r2, r3, #1
 8002332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002334:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d00f      	beq.n	800235e <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800233e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002340:	3310      	adds	r3, #16
 8002342:	4618      	mov	r0, r3
 8002344:	f000 fec2 	bl	80030cc <xTaskRemoveFromEventList>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d007      	beq.n	800235e <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800234e:	4b4d      	ldr	r3, [pc, #308]	; (8002484 <xQueueReceive+0x21c>)
 8002350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002354:	601a      	str	r2, [r3, #0]
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800235e:	f001 fdc9 	bl	8003ef4 <vPortExitCritical>
                return pdPASS;
 8002362:	2301      	movs	r3, #1
 8002364:	e08a      	b.n	800247c <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d113      	bne.n	8002394 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800236c:	f001 fdc2 	bl	8003ef4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002372:	4618      	mov	r0, r3
 8002374:	f004 faa2 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 8002378:	4604      	mov	r4, r0
 800237a:	2000      	movs	r0, #0
 800237c:	f004 fa9e 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 8002380:	4602      	mov	r2, r0
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2101      	movs	r1, #1
 8002386:	9100      	str	r1, [sp, #0]
 8002388:	4621      	mov	r1, r4
 800238a:	205c      	movs	r0, #92	; 0x5c
 800238c:	f003 fde0 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002390:	2300      	movs	r3, #0
 8002392:	e073      	b.n	800247c <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002396:	2b00      	cmp	r3, #0
 8002398:	d106      	bne.n	80023a8 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800239a:	f107 0310 	add.w	r3, r7, #16
 800239e:	4618      	mov	r0, r3
 80023a0:	f000 ff6c 	bl	800327c <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80023a4:	2301      	movs	r3, #1
 80023a6:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80023a8:	f001 fda4 	bl	8003ef4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80023ac:	f000 fb6e 	bl	8002a8c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80023b0:	f001 fd70 	bl	8003e94 <vPortEnterCritical>
 80023b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80023ba:	b25b      	sxtb	r3, r3
 80023bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023c0:	d103      	bne.n	80023ca <xQueueReceive+0x162>
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	2200      	movs	r2, #0
 80023c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023d0:	b25b      	sxtb	r3, r3
 80023d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d6:	d103      	bne.n	80023e0 <xQueueReceive+0x178>
 80023d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023da:	2200      	movs	r2, #0
 80023dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023e0:	f001 fd88 	bl	8003ef4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023e4:	1d3a      	adds	r2, r7, #4
 80023e6:	f107 0310 	add.w	r3, r7, #16
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f000 ff5b 	bl	80032a8 <xTaskCheckForTimeOut>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d124      	bne.n	8002442 <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023fa:	f000 f8bd 	bl	8002578 <prvIsQueueEmpty>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d018      	beq.n	8002436 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	3324      	adds	r3, #36	; 0x24
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fdf1 	bl	8002ff4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002414:	f000 f85e 	bl	80024d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002418:	f000 fb46 	bl	8002aa8 <xTaskResumeAll>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f47f af69 	bne.w	80022f6 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002424:	4b17      	ldr	r3, [pc, #92]	; (8002484 <xQueueReceive+0x21c>)
 8002426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	f3bf 8f4f 	dsb	sy
 8002430:	f3bf 8f6f 	isb	sy
 8002434:	e75f      	b.n	80022f6 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002438:	f000 f84c 	bl	80024d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800243c:	f000 fb34 	bl	8002aa8 <xTaskResumeAll>
 8002440:	e759      	b.n	80022f6 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002442:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002444:	f000 f846 	bl	80024d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002448:	f000 fb2e 	bl	8002aa8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800244c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800244e:	f000 f893 	bl	8002578 <prvIsQueueEmpty>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	f43f af4e 	beq.w	80022f6 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 800245a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245c:	4618      	mov	r0, r3
 800245e:	f004 fa2d 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 8002462:	4604      	mov	r4, r0
 8002464:	2000      	movs	r0, #0
 8002466:	f004 fa29 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 800246a:	4602      	mov	r2, r0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2101      	movs	r1, #1
 8002470:	9100      	str	r1, [sp, #0]
 8002472:	4621      	mov	r1, r4
 8002474:	205c      	movs	r0, #92	; 0x5c
 8002476:	f003 fd6b 	bl	8005f50 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 800247a:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800247c:	4618      	mov	r0, r3
 800247e:	3734      	adds	r7, #52	; 0x34
 8002480:	46bd      	mov	sp, r7
 8002482:	bd90      	pop	{r4, r7, pc}
 8002484:	e000ed04 	.word	0xe000ed04

08002488 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002496:	2b00      	cmp	r3, #0
 8002498:	d018      	beq.n	80024cc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68da      	ldr	r2, [r3, #12]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a2:	441a      	add	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68da      	ldr	r2, [r3, #12]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d303      	bcc.n	80024bc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	68d9      	ldr	r1, [r3, #12]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	461a      	mov	r2, r3
 80024c6:	6838      	ldr	r0, [r7, #0]
 80024c8:	f004 fbe2 	bl	8006c90 <memcpy>
    }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80024dc:	f001 fcda 	bl	8003e94 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80024e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80024e8:	e011      	b.n	800250e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3324      	adds	r3, #36	; 0x24
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fde8 	bl	80030cc <xTaskRemoveFromEventList>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d001      	beq.n	8002506 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002502:	f000 ff37 	bl	8003374 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
 8002508:	3b01      	subs	r3, #1
 800250a:	b2db      	uxtb	r3, r3
 800250c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800250e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002512:	2b00      	cmp	r3, #0
 8002514:	dce9      	bgt.n	80024ea <prvUnlockQueue+0x16>
 8002516:	e000      	b.n	800251a <prvUnlockQueue+0x46>
                    break;
 8002518:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	22ff      	movs	r2, #255	; 0xff
 800251e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002522:	f001 fce7 	bl	8003ef4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002526:	f001 fcb5 	bl	8003e94 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002530:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002532:	e011      	b.n	8002558 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d012      	beq.n	8002562 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	3310      	adds	r3, #16
 8002540:	4618      	mov	r0, r3
 8002542:	f000 fdc3 	bl	80030cc <xTaskRemoveFromEventList>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800254c:	f000 ff12 	bl	8003374 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002550:	7bbb      	ldrb	r3, [r7, #14]
 8002552:	3b01      	subs	r3, #1
 8002554:	b2db      	uxtb	r3, r3
 8002556:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002558:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800255c:	2b00      	cmp	r3, #0
 800255e:	dce9      	bgt.n	8002534 <prvUnlockQueue+0x60>
 8002560:	e000      	b.n	8002564 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002562:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	22ff      	movs	r2, #255	; 0xff
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800256c:	f001 fcc2 	bl	8003ef4 <vPortExitCritical>
}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002580:	f001 fc88 	bl	8003e94 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d102      	bne.n	8002592 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800258c:	2301      	movs	r3, #1
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	e001      	b.n	8002596 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002592:	2300      	movs	r3, #0
 8002594:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002596:	f001 fcad 	bl	8003ef4 <vPortExitCritical>

    return xReturn;
 800259a:	68fb      	ldr	r3, [r7, #12]
}
 800259c:	4618      	mov	r0, r3
 800259e:	3710      	adds	r7, #16
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80025ae:	2300      	movs	r3, #0
 80025b0:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d10a      	bne.n	80025ce <vQueueAddToRegistry+0x2a>
        __asm volatile
 80025b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025bc:	f383 8811 	msr	BASEPRI, r3
 80025c0:	f3bf 8f6f 	isb	sy
 80025c4:	f3bf 8f4f 	dsb	sy
 80025c8:	60fb      	str	r3, [r7, #12]
    }
 80025ca:	bf00      	nop
 80025cc:	e7fe      	b.n	80025cc <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d024      	beq.n	800261e <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e01e      	b.n	8002618 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80025da:	4a1c      	ldr	r2, [pc, #112]	; (800264c <vQueueAddToRegistry+0xa8>)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	429a      	cmp	r2, r3
 80025e8:	d105      	bne.n	80025f6 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	4a17      	ldr	r2, [pc, #92]	; (800264c <vQueueAddToRegistry+0xa8>)
 80025f0:	4413      	add	r3, r2
 80025f2:	613b      	str	r3, [r7, #16]
                    break;
 80025f4:	e013      	b.n	800261e <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <vQueueAddToRegistry+0x6e>
 80025fc:	4a13      	ldr	r2, [pc, #76]	; (800264c <vQueueAddToRegistry+0xa8>)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d104      	bne.n	8002612 <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4a0f      	ldr	r2, [pc, #60]	; (800264c <vQueueAddToRegistry+0xa8>)
 800260e:	4413      	add	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	3301      	adds	r3, #1
 8002616:	617b      	str	r3, [r7, #20]
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	2b07      	cmp	r3, #7
 800261c:	d9dd      	bls.n	80025da <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00f      	beq.n	8002644 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	683a      	ldr	r2, [r7, #0]
 8002628:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	f004 f942 	bl	80068bc <SEGGER_SYSVIEW_ShrinkId>
 8002638:	4601      	mov	r1, r0
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	2071      	movs	r0, #113	; 0x71
 8002640:	f003 fbb6 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002644:	bf00      	nop
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	20000084 	.word	0x20000084

08002650 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002660:	f001 fc18 	bl	8003e94 <vPortEnterCritical>
 8002664:	697b      	ldr	r3, [r7, #20]
 8002666:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800266a:	b25b      	sxtb	r3, r3
 800266c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002670:	d103      	bne.n	800267a <vQueueWaitForMessageRestricted+0x2a>
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002680:	b25b      	sxtb	r3, r3
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d103      	bne.n	8002690 <vQueueWaitForMessageRestricted+0x40>
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002690:	f001 fc30 	bl	8003ef4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002698:	2b00      	cmp	r3, #0
 800269a:	d106      	bne.n	80026aa <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	3324      	adds	r3, #36	; 0x24
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	68b9      	ldr	r1, [r7, #8]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f000 fcc9 	bl	800303c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80026aa:	6978      	ldr	r0, [r7, #20]
 80026ac:	f7ff ff12 	bl	80024d4 <prvUnlockQueue>
    }
 80026b0:	bf00      	nop
 80026b2:	3718      	adds	r7, #24
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}

080026b8 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08c      	sub	sp, #48	; 0x30
 80026bc:	af04      	add	r7, sp, #16
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	603b      	str	r3, [r7, #0]
 80026c4:	4613      	mov	r3, r2
 80026c6:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80026c8:	88fb      	ldrh	r3, [r7, #6]
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f001 fd0d 	bl	80040ec <pvPortMalloc>
 80026d2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d013      	beq.n	8002702 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80026da:	2058      	movs	r0, #88	; 0x58
 80026dc:	f001 fd06 	bl	80040ec <pvPortMalloc>
 80026e0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d008      	beq.n	80026fa <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80026e8:	2258      	movs	r2, #88	; 0x58
 80026ea:	2100      	movs	r1, #0
 80026ec:	69f8      	ldr	r0, [r7, #28]
 80026ee:	f004 faa3 	bl	8006c38 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80026f2:	69fb      	ldr	r3, [r7, #28]
 80026f4:	697a      	ldr	r2, [r7, #20]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
 80026f8:	e005      	b.n	8002706 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80026fa:	6978      	ldr	r0, [r7, #20]
 80026fc:	f001 fdb0 	bl	8004260 <vPortFree>
 8002700:	e001      	b.n	8002706 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002702:	2300      	movs	r3, #0
 8002704:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d013      	beq.n	8002734 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800270c:	88fa      	ldrh	r2, [r7, #6]
 800270e:	2300      	movs	r3, #0
 8002710:	9303      	str	r3, [sp, #12]
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	9302      	str	r3, [sp, #8]
 8002716:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271c:	9300      	str	r3, [sp, #0]
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f80e 	bl	8002744 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002728:	69f8      	ldr	r0, [r7, #28]
 800272a:	f000 f899 	bl	8002860 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800272e:	2301      	movs	r3, #1
 8002730:	61bb      	str	r3, [r7, #24]
 8002732:	e002      	b.n	800273a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800273a:	69bb      	ldr	r3, [r7, #24]
    }
 800273c:	4618      	mov	r0, r3
 800273e:	3720      	adds	r7, #32
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b088      	sub	sp, #32
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
 8002750:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002754:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	461a      	mov	r2, r3
 800275c:	21a5      	movs	r1, #165	; 0xa5
 800275e:	f004 fa6b 	bl	8006c38 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002762:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002764:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800276c:	3b01      	subs	r3, #1
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	4413      	add	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	f023 0307 	bic.w	r3, r3, #7
 800277a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	f003 0307 	and.w	r3, r3, #7
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <prvInitialiseNewTask+0x58>
        __asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	617b      	str	r3, [r7, #20]
    }
 8002798:	bf00      	nop
 800279a:	e7fe      	b.n	800279a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d01e      	beq.n	80027e0 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027a2:	2300      	movs	r3, #0
 80027a4:	61fb      	str	r3, [r7, #28]
 80027a6:	e012      	b.n	80027ce <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80027a8:	68ba      	ldr	r2, [r7, #8]
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	4413      	add	r3, r2
 80027ae:	7819      	ldrb	r1, [r3, #0]
 80027b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	4413      	add	r3, r2
 80027b6:	3334      	adds	r3, #52	; 0x34
 80027b8:	460a      	mov	r2, r1
 80027ba:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d006      	beq.n	80027d6 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3301      	adds	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	2b09      	cmp	r3, #9
 80027d2:	d9e9      	bls.n	80027a8 <prvInitialiseNewTask+0x64>
 80027d4:	e000      	b.n	80027d8 <prvInitialiseNewTask+0x94>
            {
                break;
 80027d6:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d90a      	bls.n	80027fc <prvInitialiseNewTask+0xb8>
        __asm volatile
 80027e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ea:	f383 8811 	msr	BASEPRI, r3
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	f3bf 8f4f 	dsb	sy
 80027f6:	613b      	str	r3, [r7, #16]
    }
 80027f8:	bf00      	nop
 80027fa:	e7fe      	b.n	80027fa <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d901      	bls.n	8002806 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002802:	2304      	movs	r3, #4
 8002804:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800280a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002810:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002814:	3304      	adds	r3, #4
 8002816:	4618      	mov	r0, r3
 8002818:	f7ff fbae 	bl	8001f78 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800281c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800281e:	3318      	adds	r3, #24
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fba9 	bl	8001f78 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800282a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800282c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282e:	f1c3 0205 	rsb	r2, r3, #5
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800283a:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	68f9      	ldr	r1, [r7, #12]
 8002840:	69b8      	ldr	r0, [r7, #24]
 8002842:	f001 f977 	bl	8003b34 <pxPortInitialiseStack>
 8002846:	4602      	mov	r2, r0
 8002848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800284c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284e:	2b00      	cmp	r3, #0
 8002850:	d002      	beq.n	8002858 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002856:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002858:	bf00      	nop
 800285a:	3720      	adds	r7, #32
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af02      	add	r7, sp, #8
 8002866:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002868:	f001 fb14 	bl	8003e94 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800286c:	4b4f      	ldr	r3, [pc, #316]	; (80029ac <prvAddNewTaskToReadyList+0x14c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	4a4e      	ldr	r2, [pc, #312]	; (80029ac <prvAddNewTaskToReadyList+0x14c>)
 8002874:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002876:	4b4e      	ldr	r3, [pc, #312]	; (80029b0 <prvAddNewTaskToReadyList+0x150>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d109      	bne.n	8002892 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800287e:	4a4c      	ldr	r2, [pc, #304]	; (80029b0 <prvAddNewTaskToReadyList+0x150>)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002884:	4b49      	ldr	r3, [pc, #292]	; (80029ac <prvAddNewTaskToReadyList+0x14c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d110      	bne.n	80028ae <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800288c:	f000 fd96 	bl	80033bc <prvInitialiseTaskLists>
 8002890:	e00d      	b.n	80028ae <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002892:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <prvAddNewTaskToReadyList+0x154>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d109      	bne.n	80028ae <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800289a:	4b45      	ldr	r3, [pc, #276]	; (80029b0 <prvAddNewTaskToReadyList+0x150>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d802      	bhi.n	80028ae <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80028a8:	4a41      	ldr	r2, [pc, #260]	; (80029b0 <prvAddNewTaskToReadyList+0x150>)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80028ae:	4b42      	ldr	r3, [pc, #264]	; (80029b8 <prvAddNewTaskToReadyList+0x158>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a40      	ldr	r2, [pc, #256]	; (80029b8 <prvAddNewTaskToReadyList+0x158>)
 80028b6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80028b8:	4b3f      	ldr	r3, [pc, #252]	; (80029b8 <prvAddNewTaskToReadyList+0x158>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d016      	beq.n	80028f4 <prvAddNewTaskToReadyList+0x94>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 ff31 	bl	8006730 <SEGGER_SYSVIEW_OnTaskCreate>
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	461d      	mov	r5, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	461c      	mov	r4, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	1ae3      	subs	r3, r4, r3
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	462b      	mov	r3, r5
 80028f0:	f001 fe54 	bl	800459c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4618      	mov	r0, r3
 80028f8:	f003 ff9e 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002900:	2201      	movs	r2, #1
 8002902:	409a      	lsls	r2, r3
 8002904:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <prvAddNewTaskToReadyList+0x15c>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4313      	orrs	r3, r2
 800290a:	4a2c      	ldr	r2, [pc, #176]	; (80029bc <prvAddNewTaskToReadyList+0x15c>)
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002912:	492b      	ldr	r1, [pc, #172]	; (80029c0 <prvAddNewTaskToReadyList+0x160>)
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	440b      	add	r3, r1
 800291e:	3304      	adds	r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	609a      	str	r2, [r3, #8]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	3204      	adds	r2, #4
 800293a:	605a      	str	r2, [r3, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	1d1a      	adds	r2, r3, #4
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002948:	4613      	mov	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4413      	add	r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	4a1b      	ldr	r2, [pc, #108]	; (80029c0 <prvAddNewTaskToReadyList+0x160>)
 8002952:	441a      	add	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	615a      	str	r2, [r3, #20]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800295c:	4918      	ldr	r1, [pc, #96]	; (80029c0 <prvAddNewTaskToReadyList+0x160>)
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	4814      	ldr	r0, [pc, #80]	; (80029c0 <prvAddNewTaskToReadyList+0x160>)
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4403      	add	r3, r0
 8002978:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800297a:	f001 fabb 	bl	8003ef4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <prvAddNewTaskToReadyList+0x154>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d00e      	beq.n	80029a4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002986:	4b0a      	ldr	r3, [pc, #40]	; (80029b0 <prvAddNewTaskToReadyList+0x150>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002990:	429a      	cmp	r2, r3
 8002992:	d207      	bcs.n	80029a4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002994:	4b0b      	ldr	r3, [pc, #44]	; (80029c4 <prvAddNewTaskToReadyList+0x164>)
 8002996:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800299a:	601a      	str	r2, [r3, #0]
 800299c:	f3bf 8f4f 	dsb	sy
 80029a0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bdb0      	pop	{r4, r5, r7, pc}
 80029ac:	2000019c 	.word	0x2000019c
 80029b0:	200000c4 	.word	0x200000c4
 80029b4:	200001a8 	.word	0x200001a8
 80029b8:	200001b8 	.word	0x200001b8
 80029bc:	200001a4 	.word	0x200001a4
 80029c0:	200000c8 	.word	0x200000c8
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <vTaskStartScheduler+0xa4>)
 80029d0:	9301      	str	r3, [sp, #4]
 80029d2:	2300      	movs	r3, #0
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	2300      	movs	r3, #0
 80029d8:	2282      	movs	r2, #130	; 0x82
 80029da:	4925      	ldr	r1, [pc, #148]	; (8002a70 <vTaskStartScheduler+0xa8>)
 80029dc:	4825      	ldr	r0, [pc, #148]	; (8002a74 <vTaskStartScheduler+0xac>)
 80029de:	f7ff fe6b 	bl	80026b8 <xTaskCreate>
 80029e2:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d102      	bne.n	80029f0 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 80029ea:	f000 fe1f 	bl	800362c <xTimerCreateTimerTask>
 80029ee:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d124      	bne.n	8002a40 <vTaskStartScheduler+0x78>
        __asm volatile
 80029f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029fa:	f383 8811 	msr	BASEPRI, r3
 80029fe:	f3bf 8f6f 	isb	sy
 8002a02:	f3bf 8f4f 	dsb	sy
 8002a06:	60bb      	str	r3, [r7, #8]
    }
 8002a08:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002a0a:	4b1b      	ldr	r3, [pc, #108]	; (8002a78 <vTaskStartScheduler+0xb0>)
 8002a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a10:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002a12:	4b1a      	ldr	r3, [pc, #104]	; (8002a7c <vTaskStartScheduler+0xb4>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <vTaskStartScheduler+0xb8>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002a1e:	4b19      	ldr	r3, [pc, #100]	; (8002a84 <vTaskStartScheduler+0xbc>)
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	4b12      	ldr	r3, [pc, #72]	; (8002a6c <vTaskStartScheduler+0xa4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d102      	bne.n	8002a30 <vTaskStartScheduler+0x68>
 8002a2a:	f003 fe65 	bl	80066f8 <SEGGER_SYSVIEW_OnIdle>
 8002a2e:	e004      	b.n	8002a3a <vTaskStartScheduler+0x72>
 8002a30:	4b14      	ldr	r3, [pc, #80]	; (8002a84 <vTaskStartScheduler+0xbc>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f003 febd 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002a3a:	f001 f90b 	bl	8003c54 <xPortStartScheduler>
 8002a3e:	e00e      	b.n	8002a5e <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a46:	d10a      	bne.n	8002a5e <vTaskStartScheduler+0x96>
        __asm volatile
 8002a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a4c:	f383 8811 	msr	BASEPRI, r3
 8002a50:	f3bf 8f6f 	isb	sy
 8002a54:	f3bf 8f4f 	dsb	sy
 8002a58:	607b      	str	r3, [r7, #4]
    }
 8002a5a:	bf00      	nop
 8002a5c:	e7fe      	b.n	8002a5c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002a5e:	4b0a      	ldr	r3, [pc, #40]	; (8002a88 <vTaskStartScheduler+0xc0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	200001c0 	.word	0x200001c0
 8002a70:	08006d54 	.word	0x08006d54
 8002a74:	0800338d 	.word	0x0800338d
 8002a78:	200001bc 	.word	0x200001bc
 8002a7c:	200001a8 	.word	0x200001a8
 8002a80:	200001a0 	.word	0x200001a0
 8002a84:	200000c4 	.word	0x200000c4
 8002a88:	2000000c 	.word	0x2000000c

08002a8c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002a90:	4b04      	ldr	r3, [pc, #16]	; (8002aa4 <vTaskSuspendAll+0x18>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	3301      	adds	r3, #1
 8002a96:	4a03      	ldr	r2, [pc, #12]	; (8002aa4 <vTaskSuspendAll+0x18>)
 8002a98:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002a9a:	bf00      	nop
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr
 8002aa4:	200001c4 	.word	0x200001c4

08002aa8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ab6:	4b73      	ldr	r3, [pc, #460]	; (8002c84 <xTaskResumeAll+0x1dc>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d10a      	bne.n	8002ad4 <xTaskResumeAll+0x2c>
        __asm volatile
 8002abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	607b      	str	r3, [r7, #4]
    }
 8002ad0:	bf00      	nop
 8002ad2:	e7fe      	b.n	8002ad2 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002ad4:	f001 f9de 	bl	8003e94 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ad8:	4b6a      	ldr	r3, [pc, #424]	; (8002c84 <xTaskResumeAll+0x1dc>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	4a69      	ldr	r2, [pc, #420]	; (8002c84 <xTaskResumeAll+0x1dc>)
 8002ae0:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ae2:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <xTaskResumeAll+0x1dc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f040 80c4 	bne.w	8002c74 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002aec:	4b66      	ldr	r3, [pc, #408]	; (8002c88 <xTaskResumeAll+0x1e0>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 80bf 	beq.w	8002c74 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002af6:	e08e      	b.n	8002c16 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002af8:	4b64      	ldr	r3, [pc, #400]	; (8002c8c <xTaskResumeAll+0x1e4>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	613b      	str	r3, [r7, #16]
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	69db      	ldr	r3, [r3, #28]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	6a12      	ldr	r2, [r2, #32]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	6a1b      	ldr	r3, [r3, #32]
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	69d2      	ldr	r2, [r2, #28]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	685a      	ldr	r2, [r3, #4]
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3318      	adds	r3, #24
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d103      	bne.n	8002b2e <xTaskResumeAll+0x86>
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	6a1a      	ldr	r2, [r3, #32]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	605a      	str	r2, [r3, #4]
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1e5a      	subs	r2, r3, #1
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	60fb      	str	r3, [r7, #12]
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	69fa      	ldr	r2, [r7, #28]
 8002b4a:	68d2      	ldr	r2, [r2, #12]
 8002b4c:	609a      	str	r2, [r3, #8]
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	68db      	ldr	r3, [r3, #12]
 8002b52:	69fa      	ldr	r2, [r7, #28]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	605a      	str	r2, [r3, #4]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	3304      	adds	r3, #4
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d103      	bne.n	8002b6c <xTaskResumeAll+0xc4>
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	605a      	str	r2, [r3, #4]
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	615a      	str	r2, [r3, #20]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	1e5a      	subs	r2, r3, #1
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f003 fe5a 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b88:	2201      	movs	r2, #1
 8002b8a:	409a      	lsls	r2, r3
 8002b8c:	4b40      	ldr	r3, [pc, #256]	; (8002c90 <xTaskResumeAll+0x1e8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	4a3f      	ldr	r2, [pc, #252]	; (8002c90 <xTaskResumeAll+0x1e8>)
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b9a:	493e      	ldr	r1, [pc, #248]	; (8002c94 <xTaskResumeAll+0x1ec>)
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3304      	adds	r3, #4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	60bb      	str	r3, [r7, #8]
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	68ba      	ldr	r2, [r7, #8]
 8002bb0:	609a      	str	r2, [r3, #8]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	689b      	ldr	r3, [r3, #8]
 8002bbe:	69fa      	ldr	r2, [r7, #28]
 8002bc0:	3204      	adds	r2, #4
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	1d1a      	adds	r2, r3, #4
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	609a      	str	r2, [r3, #8]
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4a2e      	ldr	r2, [pc, #184]	; (8002c94 <xTaskResumeAll+0x1ec>)
 8002bda:	441a      	add	r2, r3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	615a      	str	r2, [r3, #20]
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be4:	492b      	ldr	r1, [pc, #172]	; (8002c94 <xTaskResumeAll+0x1ec>)
 8002be6:	4613      	mov	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1c59      	adds	r1, r3, #1
 8002bf4:	4827      	ldr	r0, [pc, #156]	; (8002c94 <xTaskResumeAll+0x1ec>)
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4403      	add	r3, r0
 8002c00:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c06:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <xTaskResumeAll+0x1f0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d302      	bcc.n	8002c16 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8002c10:	4b22      	ldr	r3, [pc, #136]	; (8002c9c <xTaskResumeAll+0x1f4>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c16:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <xTaskResumeAll+0x1e4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	f47f af6c 	bne.w	8002af8 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002c26:	f000 fc47 	bl	80034b8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <xTaskResumeAll+0x1f8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d010      	beq.n	8002c58 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002c36:	f000 f859 	bl	8002cec <xTaskIncrementTick>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d002      	beq.n	8002c46 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <xTaskResumeAll+0x1f4>)
 8002c42:	2201      	movs	r2, #1
 8002c44:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1f1      	bne.n	8002c36 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <xTaskResumeAll+0x1f8>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002c58:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <xTaskResumeAll+0x1f4>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002c60:	2301      	movs	r3, #1
 8002c62:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002c64:	4b0f      	ldr	r3, [pc, #60]	; (8002ca4 <xTaskResumeAll+0x1fc>)
 8002c66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c6a:	601a      	str	r2, [r3, #0]
 8002c6c:	f3bf 8f4f 	dsb	sy
 8002c70:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002c74:	f001 f93e 	bl	8003ef4 <vPortExitCritical>

    return xAlreadyYielded;
 8002c78:	69bb      	ldr	r3, [r7, #24]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3720      	adds	r7, #32
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200001c4 	.word	0x200001c4
 8002c88:	2000019c 	.word	0x2000019c
 8002c8c:	2000015c 	.word	0x2000015c
 8002c90:	200001a4 	.word	0x200001a4
 8002c94:	200000c8 	.word	0x200000c8
 8002c98:	200000c4 	.word	0x200000c4
 8002c9c:	200001b0 	.word	0x200001b0
 8002ca0:	200001ac 	.word	0x200001ac
 8002ca4:	e000ed04 	.word	0xe000ed04

08002ca8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <xTaskGetTickCount+0x1c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002cb4:	687b      	ldr	r3, [r7, #4]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	200001a0 	.word	0x200001a0

08002cc8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b082      	sub	sp, #8
 8002ccc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cce:	f001 f9cd 	bl	800406c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <xTaskGetTickCountFromISR+0x20>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002cdc:	683b      	ldr	r3, [r7, #0]
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	200001a0 	.word	0x200001a0

08002cec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <xTaskIncrementTick+0x208>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f040 80f0 	bne.w	8002ee0 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d00:	4b7d      	ldr	r3, [pc, #500]	; (8002ef8 <xTaskIncrementTick+0x20c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002d08:	4a7b      	ldr	r2, [pc, #492]	; (8002ef8 <xTaskIncrementTick+0x20c>)
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d120      	bne.n	8002d56 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002d14:	4b79      	ldr	r3, [pc, #484]	; (8002efc <xTaskIncrementTick+0x210>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d00a      	beq.n	8002d34 <xTaskIncrementTick+0x48>
        __asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	f383 8811 	msr	BASEPRI, r3
 8002d26:	f3bf 8f6f 	isb	sy
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	607b      	str	r3, [r7, #4]
    }
 8002d30:	bf00      	nop
 8002d32:	e7fe      	b.n	8002d32 <xTaskIncrementTick+0x46>
 8002d34:	4b71      	ldr	r3, [pc, #452]	; (8002efc <xTaskIncrementTick+0x210>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	4b71      	ldr	r3, [pc, #452]	; (8002f00 <xTaskIncrementTick+0x214>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a6f      	ldr	r2, [pc, #444]	; (8002efc <xTaskIncrementTick+0x210>)
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <xTaskIncrementTick+0x214>)
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b6e      	ldr	r3, [pc, #440]	; (8002f04 <xTaskIncrementTick+0x218>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a6d      	ldr	r2, [pc, #436]	; (8002f04 <xTaskIncrementTick+0x218>)
 8002d50:	6013      	str	r3, [r2, #0]
 8002d52:	f000 fbb1 	bl	80034b8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002d56:	4b6c      	ldr	r3, [pc, #432]	; (8002f08 <xTaskIncrementTick+0x21c>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	f0c0 80aa 	bcc.w	8002eb6 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d62:	4b66      	ldr	r3, [pc, #408]	; (8002efc <xTaskIncrementTick+0x210>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d6c:	4b66      	ldr	r3, [pc, #408]	; (8002f08 <xTaskIncrementTick+0x21c>)
 8002d6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002d72:	601a      	str	r2, [r3, #0]
                    break;
 8002d74:	e09f      	b.n	8002eb6 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d76:	4b61      	ldr	r3, [pc, #388]	; (8002efc <xTaskIncrementTick+0x210>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002d86:	6a3a      	ldr	r2, [r7, #32]
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d203      	bcs.n	8002d96 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002d8e:	4a5e      	ldr	r2, [pc, #376]	; (8002f08 <xTaskIncrementTick+0x21c>)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002d94:	e08f      	b.n	8002eb6 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	613b      	str	r3, [r7, #16]
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	68d2      	ldr	r2, [r2, #12]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	69ba      	ldr	r2, [r7, #24]
 8002dac:	6892      	ldr	r2, [r2, #8]
 8002dae:	605a      	str	r2, [r3, #4]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	3304      	adds	r3, #4
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d103      	bne.n	8002dc4 <xTaskIncrementTick+0xd8>
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	68da      	ldr	r2, [r3, #12]
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	605a      	str	r2, [r3, #4]
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	615a      	str	r2, [r3, #20]
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	1e5a      	subs	r2, r3, #1
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d01e      	beq.n	8002e1a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	60fb      	str	r3, [r7, #12]
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	69db      	ldr	r3, [r3, #28]
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	6a12      	ldr	r2, [r2, #32]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	6a1b      	ldr	r3, [r3, #32]
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	69d2      	ldr	r2, [r2, #28]
 8002df4:	605a      	str	r2, [r3, #4]
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	685a      	ldr	r2, [r3, #4]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d103      	bne.n	8002e0a <xTaskIncrementTick+0x11e>
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	6a1a      	ldr	r2, [r3, #32]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	1e5a      	subs	r2, r3, #1
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f003 fd0b 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e26:	2201      	movs	r2, #1
 8002e28:	409a      	lsls	r2, r3
 8002e2a:	4b38      	ldr	r3, [pc, #224]	; (8002f0c <xTaskIncrementTick+0x220>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	4a36      	ldr	r2, [pc, #216]	; (8002f0c <xTaskIncrementTick+0x220>)
 8002e32:	6013      	str	r3, [r2, #0]
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e38:	4935      	ldr	r1, [pc, #212]	; (8002f10 <xTaskIncrementTick+0x224>)
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	3304      	adds	r3, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	68ba      	ldr	r2, [r7, #8]
 8002e4e:	609a      	str	r2, [r3, #8]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	60da      	str	r2, [r3, #12]
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	3204      	adds	r2, #4
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	1d1a      	adds	r2, r3, #4
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	609a      	str	r2, [r3, #8]
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e6e:	4613      	mov	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	4a26      	ldr	r2, [pc, #152]	; (8002f10 <xTaskIncrementTick+0x224>)
 8002e78:	441a      	add	r2, r3
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	615a      	str	r2, [r3, #20]
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e82:	4923      	ldr	r1, [pc, #140]	; (8002f10 <xTaskIncrementTick+0x224>)
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	1c59      	adds	r1, r3, #1
 8002e92:	481f      	ldr	r0, [pc, #124]	; (8002f10 <xTaskIncrementTick+0x224>)
 8002e94:	4613      	mov	r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	4413      	add	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4403      	add	r3, r0
 8002e9e:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <xTaskIncrementTick+0x228>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f67f af59 	bls.w	8002d62 <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002eb4:	e755      	b.n	8002d62 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002eb6:	4b17      	ldr	r3, [pc, #92]	; (8002f14 <xTaskIncrementTick+0x228>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ebc:	4914      	ldr	r1, [pc, #80]	; (8002f10 <xTaskIncrementTick+0x224>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	009b      	lsls	r3, r3, #2
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d901      	bls.n	8002ed2 <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <xTaskIncrementTick+0x22c>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
 8002ede:	e004      	b.n	8002eea <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002ee0:	4b0e      	ldr	r3, [pc, #56]	; (8002f1c <xTaskIncrementTick+0x230>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	4a0d      	ldr	r2, [pc, #52]	; (8002f1c <xTaskIncrementTick+0x230>)
 8002ee8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3728      	adds	r7, #40	; 0x28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	200001c4 	.word	0x200001c4
 8002ef8:	200001a0 	.word	0x200001a0
 8002efc:	20000154 	.word	0x20000154
 8002f00:	20000158 	.word	0x20000158
 8002f04:	200001b4 	.word	0x200001b4
 8002f08:	200001bc 	.word	0x200001bc
 8002f0c:	200001a4 	.word	0x200001a4
 8002f10:	200000c8 	.word	0x200000c8
 8002f14:	200000c4 	.word	0x200000c4
 8002f18:	200001b0 	.word	0x200001b0
 8002f1c:	200001ac 	.word	0x200001ac

08002f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002f26:	4b2d      	ldr	r3, [pc, #180]	; (8002fdc <vTaskSwitchContext+0xbc>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002f2e:	4b2c      	ldr	r3, [pc, #176]	; (8002fe0 <vTaskSwitchContext+0xc0>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8002f34:	e04d      	b.n	8002fd2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002f36:	4b2a      	ldr	r3, [pc, #168]	; (8002fe0 <vTaskSwitchContext+0xc0>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f3c:	4b29      	ldr	r3, [pc, #164]	; (8002fe4 <vTaskSwitchContext+0xc4>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	fab3 f383 	clz	r3, r3
 8002f48:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002f4a:	7afb      	ldrb	r3, [r7, #11]
 8002f4c:	f1c3 031f 	rsb	r3, r3, #31
 8002f50:	617b      	str	r3, [r7, #20]
 8002f52:	4925      	ldr	r1, [pc, #148]	; (8002fe8 <vTaskSwitchContext+0xc8>)
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	4613      	mov	r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10a      	bne.n	8002f7c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	607b      	str	r3, [r7, #4]
    }
 8002f78:	bf00      	nop
 8002f7a:	e7fe      	b.n	8002f7a <vTaskSwitchContext+0x5a>
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4413      	add	r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4a18      	ldr	r2, [pc, #96]	; (8002fe8 <vTaskSwitchContext+0xc8>)
 8002f88:	4413      	add	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	3308      	adds	r3, #8
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d104      	bne.n	8002fac <vTaskSwitchContext+0x8c>
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	605a      	str	r2, [r3, #4]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	4a0e      	ldr	r2, [pc, #56]	; (8002fec <vTaskSwitchContext+0xcc>)
 8002fb4:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002fb6:	4b0d      	ldr	r3, [pc, #52]	; (8002fec <vTaskSwitchContext+0xcc>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <vTaskSwitchContext+0xd0>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d102      	bne.n	8002fc8 <vTaskSwitchContext+0xa8>
 8002fc2:	f003 fb99 	bl	80066f8 <SEGGER_SYSVIEW_OnIdle>
}
 8002fc6:	e004      	b.n	8002fd2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002fc8:	4b08      	ldr	r3, [pc, #32]	; (8002fec <vTaskSwitchContext+0xcc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f003 fbf1 	bl	80067b4 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002fd2:	bf00      	nop
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	200001c4 	.word	0x200001c4
 8002fe0:	200001b0 	.word	0x200001b0
 8002fe4:	200001a4 	.word	0x200001a4
 8002fe8:	200000c8 	.word	0x200000c8
 8002fec:	200000c4 	.word	0x200000c4
 8002ff0:	200001c0 	.word	0x200001c0

08002ff4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10a      	bne.n	800301a <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003008:	f383 8811 	msr	BASEPRI, r3
 800300c:	f3bf 8f6f 	isb	sy
 8003010:	f3bf 8f4f 	dsb	sy
 8003014:	60fb      	str	r3, [r7, #12]
    }
 8003016:	bf00      	nop
 8003018:	e7fe      	b.n	8003018 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800301a:	4b07      	ldr	r3, [pc, #28]	; (8003038 <vTaskPlaceOnEventList+0x44>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	3318      	adds	r3, #24
 8003020:	4619      	mov	r1, r3
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f7fe ffb5 	bl	8001f92 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003028:	2101      	movs	r1, #1
 800302a:	6838      	ldr	r0, [r7, #0]
 800302c:	f000 fa7e 	bl	800352c <prvAddCurrentTaskToDelayedList>
}
 8003030:	bf00      	nop
 8003032:	3710      	adds	r7, #16
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}
 8003038:	200000c4 	.word	0x200000c4

0800303c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10a      	bne.n	8003064 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 800304e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003052:	f383 8811 	msr	BASEPRI, r3
 8003056:	f3bf 8f6f 	isb	sy
 800305a:	f3bf 8f4f 	dsb	sy
 800305e:	613b      	str	r3, [r7, #16]
    }
 8003060:	bf00      	nop
 8003062:	e7fe      	b.n	8003062 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	4b17      	ldr	r3, [pc, #92]	; (80030c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	697a      	ldr	r2, [r7, #20]
 8003070:	61da      	str	r2, [r3, #28]
 8003072:	4b15      	ldr	r3, [pc, #84]	; (80030c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	6892      	ldr	r2, [r2, #8]
 800307a:	621a      	str	r2, [r3, #32]
 800307c:	4b12      	ldr	r3, [pc, #72]	; (80030c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	3218      	adds	r2, #24
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	4b0f      	ldr	r3, [pc, #60]	; (80030c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f103 0218 	add.w	r2, r3, #24
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	609a      	str	r2, [r3, #8]
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68fa      	ldr	r2, [r7, #12]
 800309a:	629a      	str	r2, [r3, #40]	; 0x28
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d002      	beq.n	80030b2 <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80030ac:	f04f 33ff 	mov.w	r3, #4294967295
 80030b0:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80030b2:	2024      	movs	r0, #36	; 0x24
 80030b4:	f002 fe22 	bl	8005cfc <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	68b8      	ldr	r0, [r7, #8]
 80030bc:	f000 fa36 	bl	800352c <prvAddCurrentTaskToDelayedList>
    }
 80030c0:	bf00      	nop
 80030c2:	3718      	adds	r7, #24
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	200000c4 	.word	0x200000c4

080030cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80030dc:	6a3b      	ldr	r3, [r7, #32]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	60fb      	str	r3, [r7, #12]
    }
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80030f8:	6a3b      	ldr	r3, [r7, #32]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	61fb      	str	r3, [r7, #28]
 80030fe:	6a3b      	ldr	r3, [r7, #32]
 8003100:	69db      	ldr	r3, [r3, #28]
 8003102:	6a3a      	ldr	r2, [r7, #32]
 8003104:	6a12      	ldr	r2, [r2, #32]
 8003106:	609a      	str	r2, [r3, #8]
 8003108:	6a3b      	ldr	r3, [r7, #32]
 800310a:	6a1b      	ldr	r3, [r3, #32]
 800310c:	6a3a      	ldr	r2, [r7, #32]
 800310e:	69d2      	ldr	r2, [r2, #28]
 8003110:	605a      	str	r2, [r3, #4]
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	6a3b      	ldr	r3, [r7, #32]
 8003118:	3318      	adds	r3, #24
 800311a:	429a      	cmp	r2, r3
 800311c:	d103      	bne.n	8003126 <xTaskRemoveFromEventList+0x5a>
 800311e:	6a3b      	ldr	r3, [r7, #32]
 8003120:	6a1a      	ldr	r2, [r3, #32]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	6a3b      	ldr	r3, [r7, #32]
 8003128:	2200      	movs	r2, #0
 800312a:	629a      	str	r2, [r3, #40]	; 0x28
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	1e5a      	subs	r2, r3, #1
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003136:	4b4b      	ldr	r3, [pc, #300]	; (8003264 <xTaskRemoveFromEventList+0x198>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d162      	bne.n	8003204 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	68d2      	ldr	r2, [r2, #12]
 800314c:	609a      	str	r2, [r3, #8]
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	6892      	ldr	r2, [r2, #8]
 8003156:	605a      	str	r2, [r3, #4]
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	6a3b      	ldr	r3, [r7, #32]
 800315e:	3304      	adds	r3, #4
 8003160:	429a      	cmp	r2, r3
 8003162:	d103      	bne.n	800316c <xTaskRemoveFromEventList+0xa0>
 8003164:	6a3b      	ldr	r3, [r7, #32]
 8003166:	68da      	ldr	r2, [r3, #12]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2200      	movs	r2, #0
 8003170:	615a      	str	r2, [r3, #20]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	1e5a      	subs	r2, r3, #1
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	4618      	mov	r0, r3
 8003180:	f003 fb5a 	bl	8006838 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2201      	movs	r2, #1
 800318a:	409a      	lsls	r2, r3
 800318c:	4b36      	ldr	r3, [pc, #216]	; (8003268 <xTaskRemoveFromEventList+0x19c>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4313      	orrs	r3, r2
 8003192:	4a35      	ldr	r2, [pc, #212]	; (8003268 <xTaskRemoveFromEventList+0x19c>)
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800319a:	4934      	ldr	r1, [pc, #208]	; (800326c <xTaskRemoveFromEventList+0x1a0>)
 800319c:	4613      	mov	r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	3304      	adds	r3, #4
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	609a      	str	r2, [r3, #8]
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	689a      	ldr	r2, [r3, #8]
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	60da      	str	r2, [r3, #12]
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	6a3a      	ldr	r2, [r7, #32]
 80031c0:	3204      	adds	r2, #4
 80031c2:	605a      	str	r2, [r3, #4]
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	1d1a      	adds	r2, r3, #4
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	609a      	str	r2, [r3, #8]
 80031cc:	6a3b      	ldr	r3, [r7, #32]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4a24      	ldr	r2, [pc, #144]	; (800326c <xTaskRemoveFromEventList+0x1a0>)
 80031da:	441a      	add	r2, r3
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	615a      	str	r2, [r3, #20]
 80031e0:	6a3b      	ldr	r3, [r7, #32]
 80031e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e4:	4921      	ldr	r1, [pc, #132]	; (800326c <xTaskRemoveFromEventList+0x1a0>)
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	1c59      	adds	r1, r3, #1
 80031f4:	481d      	ldr	r0, [pc, #116]	; (800326c <xTaskRemoveFromEventList+0x1a0>)
 80031f6:	4613      	mov	r3, r2
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	4413      	add	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4403      	add	r3, r0
 8003200:	6019      	str	r1, [r3, #0]
 8003202:	e01b      	b.n	800323c <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <xTaskRemoveFromEventList+0x1a4>)
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	61bb      	str	r3, [r7, #24]
 800320a:	6a3b      	ldr	r3, [r7, #32]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	61da      	str	r2, [r3, #28]
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	621a      	str	r2, [r3, #32]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	6a3a      	ldr	r2, [r7, #32]
 800321e:	3218      	adds	r2, #24
 8003220:	605a      	str	r2, [r3, #4]
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f103 0218 	add.w	r2, r3, #24
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	609a      	str	r2, [r3, #8]
 800322c:	6a3b      	ldr	r3, [r7, #32]
 800322e:	4a10      	ldr	r2, [pc, #64]	; (8003270 <xTaskRemoveFromEventList+0x1a4>)
 8003230:	629a      	str	r2, [r3, #40]	; 0x28
 8003232:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <xTaskRemoveFromEventList+0x1a4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	3301      	adds	r3, #1
 8003238:	4a0d      	ldr	r2, [pc, #52]	; (8003270 <xTaskRemoveFromEventList+0x1a4>)
 800323a:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003240:	4b0c      	ldr	r3, [pc, #48]	; (8003274 <xTaskRemoveFromEventList+0x1a8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003246:	429a      	cmp	r2, r3
 8003248:	d905      	bls.n	8003256 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800324a:	2301      	movs	r3, #1
 800324c:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <xTaskRemoveFromEventList+0x1ac>)
 8003250:	2201      	movs	r2, #1
 8003252:	601a      	str	r2, [r3, #0]
 8003254:	e001      	b.n	800325a <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800325c:	4618      	mov	r0, r3
 800325e:	3728      	adds	r7, #40	; 0x28
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	200001c4 	.word	0x200001c4
 8003268:	200001a4 	.word	0x200001a4
 800326c:	200000c8 	.word	0x200000c8
 8003270:	2000015c 	.word	0x2000015c
 8003274:	200000c4 	.word	0x200000c4
 8003278:	200001b0 	.word	0x200001b0

0800327c <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <vTaskInternalSetTimeOutState+0x24>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800328c:	4b05      	ldr	r3, [pc, #20]	; (80032a4 <vTaskInternalSetTimeOutState+0x28>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	605a      	str	r2, [r3, #4]
}
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	200001b4 	.word	0x200001b4
 80032a4:	200001a0 	.word	0x200001a0

080032a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10a      	bne.n	80032ce <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80032b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032bc:	f383 8811 	msr	BASEPRI, r3
 80032c0:	f3bf 8f6f 	isb	sy
 80032c4:	f3bf 8f4f 	dsb	sy
 80032c8:	613b      	str	r3, [r7, #16]
    }
 80032ca:	bf00      	nop
 80032cc:	e7fe      	b.n	80032cc <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10a      	bne.n	80032ea <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	60fb      	str	r3, [r7, #12]
    }
 80032e6:	bf00      	nop
 80032e8:	e7fe      	b.n	80032e8 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80032ea:	f000 fdd3 	bl	8003e94 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80032ee:	4b1f      	ldr	r3, [pc, #124]	; (800336c <xTaskCheckForTimeOut+0xc4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003306:	d102      	bne.n	800330e <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003308:	2300      	movs	r3, #0
 800330a:	61fb      	str	r3, [r7, #28]
 800330c:	e026      	b.n	800335c <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	4b17      	ldr	r3, [pc, #92]	; (8003370 <xTaskCheckForTimeOut+0xc8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d00a      	beq.n	8003330 <xTaskCheckForTimeOut+0x88>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	429a      	cmp	r2, r3
 8003322:	d305      	bcc.n	8003330 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003324:	2301      	movs	r3, #1
 8003326:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
 800332e:	e015      	b.n	800335c <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	429a      	cmp	r2, r3
 8003338:	d20b      	bcs.n	8003352 <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	1ad2      	subs	r2, r2, r3
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ff98 	bl	800327c <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
 8003350:	e004      	b.n	800335c <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	2200      	movs	r2, #0
 8003356:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003358:	2301      	movs	r3, #1
 800335a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800335c:	f000 fdca 	bl	8003ef4 <vPortExitCritical>

    return xReturn;
 8003360:	69fb      	ldr	r3, [r7, #28]
}
 8003362:	4618      	mov	r0, r3
 8003364:	3720      	adds	r7, #32
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}
 800336a:	bf00      	nop
 800336c:	200001a0 	.word	0x200001a0
 8003370:	200001b4 	.word	0x200001b4

08003374 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003374:	b480      	push	{r7}
 8003376:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003378:	4b03      	ldr	r3, [pc, #12]	; (8003388 <vTaskMissedYield+0x14>)
 800337a:	2201      	movs	r2, #1
 800337c:	601a      	str	r2, [r3, #0]
}
 800337e:	bf00      	nop
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	200001b0 	.word	0x200001b0

0800338c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003394:	f000 f852 	bl	800343c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003398:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <prvIdleTask+0x28>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d9f9      	bls.n	8003394 <prvIdleTask+0x8>
            {
                taskYIELD();
 80033a0:	4b05      	ldr	r3, [pc, #20]	; (80033b8 <prvIdleTask+0x2c>)
 80033a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033a6:	601a      	str	r2, [r3, #0]
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80033b0:	e7f0      	b.n	8003394 <prvIdleTask+0x8>
 80033b2:	bf00      	nop
 80033b4:	200000c8 	.word	0x200000c8
 80033b8:	e000ed04 	.word	0xe000ed04

080033bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
 80033c6:	e00c      	b.n	80033e2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4a12      	ldr	r2, [pc, #72]	; (800341c <prvInitialiseTaskLists+0x60>)
 80033d4:	4413      	add	r3, r2
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fdae 	bl	8001f38 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3301      	adds	r3, #1
 80033e0:	607b      	str	r3, [r7, #4]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2b04      	cmp	r3, #4
 80033e6:	d9ef      	bls.n	80033c8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80033e8:	480d      	ldr	r0, [pc, #52]	; (8003420 <prvInitialiseTaskLists+0x64>)
 80033ea:	f7fe fda5 	bl	8001f38 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80033ee:	480d      	ldr	r0, [pc, #52]	; (8003424 <prvInitialiseTaskLists+0x68>)
 80033f0:	f7fe fda2 	bl	8001f38 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <prvInitialiseTaskLists+0x6c>)
 80033f6:	f7fe fd9f 	bl	8001f38 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80033fa:	480c      	ldr	r0, [pc, #48]	; (800342c <prvInitialiseTaskLists+0x70>)
 80033fc:	f7fe fd9c 	bl	8001f38 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003400:	480b      	ldr	r0, [pc, #44]	; (8003430 <prvInitialiseTaskLists+0x74>)
 8003402:	f7fe fd99 	bl	8001f38 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003406:	4b0b      	ldr	r3, [pc, #44]	; (8003434 <prvInitialiseTaskLists+0x78>)
 8003408:	4a05      	ldr	r2, [pc, #20]	; (8003420 <prvInitialiseTaskLists+0x64>)
 800340a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800340c:	4b0a      	ldr	r3, [pc, #40]	; (8003438 <prvInitialiseTaskLists+0x7c>)
 800340e:	4a05      	ldr	r2, [pc, #20]	; (8003424 <prvInitialiseTaskLists+0x68>)
 8003410:	601a      	str	r2, [r3, #0]
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	200000c8 	.word	0x200000c8
 8003420:	2000012c 	.word	0x2000012c
 8003424:	20000140 	.word	0x20000140
 8003428:	2000015c 	.word	0x2000015c
 800342c:	20000170 	.word	0x20000170
 8003430:	20000188 	.word	0x20000188
 8003434:	20000154 	.word	0x20000154
 8003438:	20000158 	.word	0x20000158

0800343c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003442:	e019      	b.n	8003478 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003444:	f000 fd26 	bl	8003e94 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003448:	4b10      	ldr	r3, [pc, #64]	; (800348c <prvCheckTasksWaitingTermination+0x50>)
 800344a:	68db      	ldr	r3, [r3, #12]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	4618      	mov	r0, r3
 8003456:	f7fe fdd5 	bl	8002004 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	3b01      	subs	r3, #1
 8003460:	4a0b      	ldr	r2, [pc, #44]	; (8003490 <prvCheckTasksWaitingTermination+0x54>)
 8003462:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003464:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <prvCheckTasksWaitingTermination+0x58>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	3b01      	subs	r3, #1
 800346a:	4a0a      	ldr	r2, [pc, #40]	; (8003494 <prvCheckTasksWaitingTermination+0x58>)
 800346c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800346e:	f000 fd41 	bl	8003ef4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f810 	bl	8003498 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <prvCheckTasksWaitingTermination+0x58>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e1      	bne.n	8003444 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003480:	bf00      	nop
 8003482:	bf00      	nop
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000170 	.word	0x20000170
 8003490:	2000019c 	.word	0x2000019c
 8003494:	20000184 	.word	0x20000184

08003498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 fedb 	bl	8004260 <vPortFree>
            vPortFree( pxTCB );
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fed8 	bl	8004260 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80034b0:	bf00      	nop
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80034bc:	4b0a      	ldr	r3, [pc, #40]	; (80034e8 <prvResetNextTaskUnblockTime+0x30>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d104      	bne.n	80034d0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80034c6:	4b09      	ldr	r3, [pc, #36]	; (80034ec <prvResetNextTaskUnblockTime+0x34>)
 80034c8:	f04f 32ff 	mov.w	r2, #4294967295
 80034cc:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80034ce:	e005      	b.n	80034dc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80034d0:	4b05      	ldr	r3, [pc, #20]	; (80034e8 <prvResetNextTaskUnblockTime+0x30>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <prvResetNextTaskUnblockTime+0x34>)
 80034da:	6013      	str	r3, [r2, #0]
}
 80034dc:	bf00      	nop
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr
 80034e6:	bf00      	nop
 80034e8:	20000154 	.word	0x20000154
 80034ec:	200001bc 	.word	0x200001bc

080034f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80034f6:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <xTaskGetSchedulerState+0x34>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d102      	bne.n	8003504 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80034fe:	2301      	movs	r3, #1
 8003500:	607b      	str	r3, [r7, #4]
 8003502:	e008      	b.n	8003516 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003504:	4b08      	ldr	r3, [pc, #32]	; (8003528 <xTaskGetSchedulerState+0x38>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d102      	bne.n	8003512 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800350c:	2302      	movs	r3, #2
 800350e:	607b      	str	r3, [r7, #4]
 8003510:	e001      	b.n	8003516 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003512:	2300      	movs	r3, #0
 8003514:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003516:	687b      	ldr	r3, [r7, #4]
    }
 8003518:	4618      	mov	r0, r3
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr
 8003524:	200001a8 	.word	0x200001a8
 8003528:	200001c4 	.word	0x200001c4

0800352c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003536:	4b36      	ldr	r3, [pc, #216]	; (8003610 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800353c:	4b35      	ldr	r3, [pc, #212]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	3304      	adds	r3, #4
 8003542:	4618      	mov	r0, r3
 8003544:	f7fe fd5e 	bl	8002004 <uxListRemove>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10b      	bne.n	8003566 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800354e:	4b31      	ldr	r3, [pc, #196]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003554:	2201      	movs	r2, #1
 8003556:	fa02 f303 	lsl.w	r3, r2, r3
 800355a:	43da      	mvns	r2, r3
 800355c:	4b2e      	ldr	r3, [pc, #184]	; (8003618 <prvAddCurrentTaskToDelayedList+0xec>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4013      	ands	r3, r2
 8003562:	4a2d      	ldr	r2, [pc, #180]	; (8003618 <prvAddCurrentTaskToDelayedList+0xec>)
 8003564:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f1b3 3fff 	cmp.w	r3, #4294967295
 800356c:	d124      	bne.n	80035b8 <prvAddCurrentTaskToDelayedList+0x8c>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d021      	beq.n	80035b8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003574:	4b29      	ldr	r3, [pc, #164]	; (800361c <prvAddCurrentTaskToDelayedList+0xf0>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	613b      	str	r3, [r7, #16]
 800357a:	4b26      	ldr	r3, [pc, #152]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	693a      	ldr	r2, [r7, #16]
 8003580:	609a      	str	r2, [r3, #8]
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	6892      	ldr	r2, [r2, #8]
 800358a:	60da      	str	r2, [r3, #12]
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	3204      	adds	r2, #4
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	1d1a      	adds	r2, r3, #4
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	609a      	str	r2, [r3, #8]
 80035a2:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1d      	ldr	r2, [pc, #116]	; (800361c <prvAddCurrentTaskToDelayedList+0xf0>)
 80035a8:	615a      	str	r2, [r3, #20]
 80035aa:	4b1c      	ldr	r3, [pc, #112]	; (800361c <prvAddCurrentTaskToDelayedList+0xf0>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3301      	adds	r3, #1
 80035b0:	4a1a      	ldr	r2, [pc, #104]	; (800361c <prvAddCurrentTaskToDelayedList+0xf0>)
 80035b2:	6013      	str	r3, [r2, #0]
 80035b4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80035b6:	e026      	b.n	8003606 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4413      	add	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035c0:	4b14      	ldr	r3, [pc, #80]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	68fa      	ldr	r2, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 80035c8:	68fa      	ldr	r2, [r7, #12]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d209      	bcs.n	80035e4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035d0:	4b13      	ldr	r3, [pc, #76]	; (8003620 <prvAddCurrentTaskToDelayedList+0xf4>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	4b0f      	ldr	r3, [pc, #60]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3304      	adds	r3, #4
 80035da:	4619      	mov	r1, r3
 80035dc:	4610      	mov	r0, r2
 80035de:	f7fe fcd8 	bl	8001f92 <vListInsert>
}
 80035e2:	e010      	b.n	8003606 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e4:	4b0f      	ldr	r3, [pc, #60]	; (8003624 <prvAddCurrentTaskToDelayedList+0xf8>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b0a      	ldr	r3, [pc, #40]	; (8003614 <prvAddCurrentTaskToDelayedList+0xe8>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3304      	adds	r3, #4
 80035ee:	4619      	mov	r1, r3
 80035f0:	4610      	mov	r0, r2
 80035f2:	f7fe fcce 	bl	8001f92 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80035f6:	4b0c      	ldr	r3, [pc, #48]	; (8003628 <prvAddCurrentTaskToDelayedList+0xfc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d202      	bcs.n	8003606 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003600:	4a09      	ldr	r2, [pc, #36]	; (8003628 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6013      	str	r3, [r2, #0]
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	200001a0 	.word	0x200001a0
 8003614:	200000c4 	.word	0x200000c4
 8003618:	200001a4 	.word	0x200001a4
 800361c:	20000188 	.word	0x20000188
 8003620:	20000158 	.word	0x20000158
 8003624:	20000154 	.word	0x20000154
 8003628:	200001bc 	.word	0x200001bc

0800362c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003632:	2300      	movs	r3, #0
 8003634:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003636:	f000 fa47 	bl	8003ac8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800363a:	4b11      	ldr	r3, [pc, #68]	; (8003680 <xTimerCreateTimerTask+0x54>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d00b      	beq.n	800365a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003642:	4b10      	ldr	r3, [pc, #64]	; (8003684 <xTimerCreateTimerTask+0x58>)
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003650:	490d      	ldr	r1, [pc, #52]	; (8003688 <xTimerCreateTimerTask+0x5c>)
 8003652:	480e      	ldr	r0, [pc, #56]	; (800368c <xTimerCreateTimerTask+0x60>)
 8003654:	f7ff f830 	bl	80026b8 <xTaskCreate>
 8003658:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10a      	bne.n	8003676 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003664:	f383 8811 	msr	BASEPRI, r3
 8003668:	f3bf 8f6f 	isb	sy
 800366c:	f3bf 8f4f 	dsb	sy
 8003670:	603b      	str	r3, [r7, #0]
    }
 8003672:	bf00      	nop
 8003674:	e7fe      	b.n	8003674 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003676:	687b      	ldr	r3, [r7, #4]
    }
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	200001f8 	.word	0x200001f8
 8003684:	200001fc 	.word	0x200001fc
 8003688:	08006d5c 	.word	0x08006d5c
 800368c:	08003735 	.word	0x08003735

08003690 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800369c:	e008      	b.n	80036b0 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	68ba      	ldr	r2, [r7, #8]
 80036a4:	4413      	add	r3, r2
 80036a6:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6a1b      	ldr	r3, [r3, #32]
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	699a      	ldr	r2, [r3, #24]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	18d1      	adds	r1, r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f8dd 	bl	800387c <prvInsertTimerInActiveList>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1ea      	bne.n	800369e <prvReloadTimer+0xe>
        }
    }
 80036c8:	bf00      	nop
 80036ca:	bf00      	nop
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
	...

080036d4 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
 80036dc:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <prvProcessExpiredTimer+0x5c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	3304      	adds	r3, #4
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7fe fc89 	bl	8002004 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f7ff ffc3 	bl	8003690 <prvReloadTimer>
 800370a:	e008      	b.n	800371e <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	4798      	blx	r3
    }
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	200001f0 	.word	0x200001f0

08003734 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800373c:	f107 0308 	add.w	r3, r7, #8
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f857 	bl	80037f4 <prvGetNextExpireTime>
 8003746:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	4619      	mov	r1, r3
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 f803 	bl	8003758 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003752:	f000 f8d5 	bl	8003900 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003756:	e7f1      	b.n	800373c <prvTimerTask+0x8>

08003758 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003762:	f7ff f993 	bl	8002a8c <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003766:	f107 0308 	add.w	r3, r7, #8
 800376a:	4618      	mov	r0, r3
 800376c:	f000 f866 	bl	800383c <prvSampleTimeNow>
 8003770:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d130      	bne.n	80037da <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <prvProcessTimerOrBlockTask+0x3c>
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	429a      	cmp	r2, r3
 8003784:	d806      	bhi.n	8003794 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003786:	f7ff f98f 	bl	8002aa8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800378a:	68f9      	ldr	r1, [r7, #12]
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ffa1 	bl	80036d4 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003792:	e024      	b.n	80037de <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d008      	beq.n	80037ac <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800379a:	4b13      	ldr	r3, [pc, #76]	; (80037e8 <prvProcessTimerOrBlockTask+0x90>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <prvProcessTimerOrBlockTask+0x50>
 80037a4:	2301      	movs	r3, #1
 80037a6:	e000      	b.n	80037aa <prvProcessTimerOrBlockTask+0x52>
 80037a8:	2300      	movs	r3, #0
 80037aa:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80037ac:	4b0f      	ldr	r3, [pc, #60]	; (80037ec <prvProcessTimerOrBlockTask+0x94>)
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fe ff49 	bl	8002650 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80037be:	f7ff f973 	bl	8002aa8 <xTaskResumeAll>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d10a      	bne.n	80037de <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80037c8:	4b09      	ldr	r3, [pc, #36]	; (80037f0 <prvProcessTimerOrBlockTask+0x98>)
 80037ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	f3bf 8f4f 	dsb	sy
 80037d4:	f3bf 8f6f 	isb	sy
    }
 80037d8:	e001      	b.n	80037de <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80037da:	f7ff f965 	bl	8002aa8 <xTaskResumeAll>
    }
 80037de:	bf00      	nop
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200001f4 	.word	0x200001f4
 80037ec:	200001f8 	.word	0x200001f8
 80037f0:	e000ed04 	.word	0xe000ed04

080037f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80037f4:	b480      	push	{r7}
 80037f6:	b085      	sub	sp, #20
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <prvGetNextExpireTime+0x44>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d101      	bne.n	800380a <prvGetNextExpireTime+0x16>
 8003806:	2201      	movs	r2, #1
 8003808:	e000      	b.n	800380c <prvGetNextExpireTime+0x18>
 800380a:	2200      	movs	r2, #0
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003818:	4b07      	ldr	r3, [pc, #28]	; (8003838 <prvGetNextExpireTime+0x44>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e001      	b.n	8003828 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003824:	2300      	movs	r3, #0
 8003826:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003828:	68fb      	ldr	r3, [r7, #12]
    }
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	200001f0 	.word	0x200001f0

0800383c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8003844:	f7ff fa30 	bl	8002ca8 <xTaskGetTickCount>
 8003848:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800384a:	4b0b      	ldr	r3, [pc, #44]	; (8003878 <prvSampleTimeNow+0x3c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68fa      	ldr	r2, [r7, #12]
 8003850:	429a      	cmp	r2, r3
 8003852:	d205      	bcs.n	8003860 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8003854:	f000 f912 	bl	8003a7c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	601a      	str	r2, [r3, #0]
 800385e:	e002      	b.n	8003866 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8003866:	4a04      	ldr	r2, [pc, #16]	; (8003878 <prvSampleTimeNow+0x3c>)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 800386c:	68fb      	ldr	r3, [r7, #12]
    }
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	20000200 	.word	0x20000200

0800387c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	607a      	str	r2, [r7, #4]
 8003888:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800388a:	2300      	movs	r3, #0
 800388c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68ba      	ldr	r2, [r7, #8]
 8003892:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	68fa      	ldr	r2, [r7, #12]
 8003898:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d812      	bhi.n	80038c8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	1ad2      	subs	r2, r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d302      	bcc.n	80038b6 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80038b0:	2301      	movs	r3, #1
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e01b      	b.n	80038ee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038b6:	4b10      	ldr	r3, [pc, #64]	; (80038f8 <prvInsertTimerInActiveList+0x7c>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3304      	adds	r3, #4
 80038be:	4619      	mov	r1, r3
 80038c0:	4610      	mov	r0, r2
 80038c2:	f7fe fb66 	bl	8001f92 <vListInsert>
 80038c6:	e012      	b.n	80038ee <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	429a      	cmp	r2, r3
 80038ce:	d206      	bcs.n	80038de <prvInsertTimerInActiveList+0x62>
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d302      	bcc.n	80038de <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	617b      	str	r3, [r7, #20]
 80038dc:	e007      	b.n	80038ee <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <prvInsertTimerInActiveList+0x80>)
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	3304      	adds	r3, #4
 80038e6:	4619      	mov	r1, r3
 80038e8:	4610      	mov	r0, r2
 80038ea:	f7fe fb52 	bl	8001f92 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80038ee:	697b      	ldr	r3, [r7, #20]
    }
 80038f0:	4618      	mov	r0, r3
 80038f2:	3718      	adds	r7, #24
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	200001f4 	.word	0x200001f4
 80038fc:	200001f0 	.word	0x200001f0

08003900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003906:	e0a6      	b.n	8003a56 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2b00      	cmp	r3, #0
 800390c:	f2c0 80a3 	blt.w	8003a56 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	695b      	ldr	r3, [r3, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d004      	beq.n	8003926 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	3304      	adds	r3, #4
 8003920:	4618      	mov	r0, r3
 8003922:	f7fe fb6f 	bl	8002004 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003926:	1d3b      	adds	r3, r7, #4
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff87 	bl	800383c <prvSampleTimeNow>
 800392e:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	3b01      	subs	r3, #1
 8003934:	2b08      	cmp	r3, #8
 8003936:	f200 808d 	bhi.w	8003a54 <prvProcessReceivedCommands+0x154>
 800393a:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <prvProcessReceivedCommands+0x40>)
 800393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003940:	08003965 	.word	0x08003965
 8003944:	08003965 	.word	0x08003965
 8003948:	080039cd 	.word	0x080039cd
 800394c:	080039e1 	.word	0x080039e1
 8003950:	08003a2b 	.word	0x08003a2b
 8003954:	08003965 	.word	0x08003965
 8003958:	08003965 	.word	0x08003965
 800395c:	080039cd 	.word	0x080039cd
 8003960:	080039e1 	.word	0x080039e1
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	b2da      	uxtb	r2, r3
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	18d1      	adds	r1, r2, r3
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	69f8      	ldr	r0, [r7, #28]
 8003984:	f7ff ff7a 	bl	800387c <prvInsertTimerInActiveList>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d063      	beq.n	8003a56 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003994:	f003 0304 	and.w	r3, r3, #4
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 800399c:	68fa      	ldr	r2, [r7, #12]
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4619      	mov	r1, r3
 80039a8:	69f8      	ldr	r0, [r7, #28]
 80039aa:	f7ff fe71 	bl	8003690 <prvReloadTimer>
 80039ae:	e008      	b.n	80039c2 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	69f8      	ldr	r0, [r7, #28]
 80039c8:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80039ca:	e044      	b.n	8003a56 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80039cc:	69fb      	ldr	r3, [r7, #28]
 80039ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039d2:	f023 0301 	bic.w	r3, r3, #1
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80039de:	e03a      	b.n	8003a56 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039e6:	f043 0301 	orr.w	r3, r3, #1
 80039ea:	b2da      	uxtb	r2, r3
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	699b      	ldr	r3, [r3, #24]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <prvProcessReceivedCommands+0x116>
        __asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	617b      	str	r3, [r7, #20]
    }
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	18d1      	adds	r1, r2, r3
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	69f8      	ldr	r0, [r7, #28]
 8003a24:	f7ff ff2a 	bl	800387c <prvInsertTimerInActiveList>
                        break;
 8003a28:	e015      	b.n	8003a56 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a30:	f003 0302 	and.w	r3, r3, #2
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d103      	bne.n	8003a40 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 8003a38:	69f8      	ldr	r0, [r7, #28]
 8003a3a:	f000 fc11 	bl	8004260 <vPortFree>
 8003a3e:	e00a      	b.n	8003a56 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a46:	f023 0301 	bic.w	r3, r3, #1
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003a52:	e000      	b.n	8003a56 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003a54:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <prvProcessReceivedCommands+0x178>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f107 0108 	add.w	r1, r7, #8
 8003a5e:	2200      	movs	r2, #0
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7fe fc01 	bl	8002268 <xQueueReceive>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f47f af4d 	bne.w	8003908 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003a6e:	bf00      	nop
 8003a70:	bf00      	nop
 8003a72:	3720      	adds	r7, #32
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	200001f8 	.word	0x200001f8

08003a7c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a82:	e009      	b.n	8003a98 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003a84:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <prvSwitchTimerLists+0x44>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003a8e:	f04f 31ff 	mov.w	r1, #4294967295
 8003a92:	6838      	ldr	r0, [r7, #0]
 8003a94:	f7ff fe1e 	bl	80036d4 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003a98:	4b09      	ldr	r3, [pc, #36]	; (8003ac0 <prvSwitchTimerLists+0x44>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003aa2:	4b07      	ldr	r3, [pc, #28]	; (8003ac0 <prvSwitchTimerLists+0x44>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <prvSwitchTimerLists+0x48>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a04      	ldr	r2, [pc, #16]	; (8003ac0 <prvSwitchTimerLists+0x44>)
 8003aae:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003ab0:	4a04      	ldr	r2, [pc, #16]	; (8003ac4 <prvSwitchTimerLists+0x48>)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6013      	str	r3, [r2, #0]
    }
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	200001f0 	.word	0x200001f0
 8003ac4:	200001f4 	.word	0x200001f4

08003ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003acc:	f000 f9e2 	bl	8003e94 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003ad0:	4b12      	ldr	r3, [pc, #72]	; (8003b1c <prvCheckForValidListAndQueue+0x54>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d11d      	bne.n	8003b14 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003ad8:	4811      	ldr	r0, [pc, #68]	; (8003b20 <prvCheckForValidListAndQueue+0x58>)
 8003ada:	f7fe fa2d 	bl	8001f38 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003ade:	4811      	ldr	r0, [pc, #68]	; (8003b24 <prvCheckForValidListAndQueue+0x5c>)
 8003ae0:	f7fe fa2a 	bl	8001f38 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003ae4:	4b10      	ldr	r3, [pc, #64]	; (8003b28 <prvCheckForValidListAndQueue+0x60>)
 8003ae6:	4a0e      	ldr	r2, [pc, #56]	; (8003b20 <prvCheckForValidListAndQueue+0x58>)
 8003ae8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <prvCheckForValidListAndQueue+0x64>)
 8003aec:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <prvCheckForValidListAndQueue+0x5c>)
 8003aee:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003af0:	2200      	movs	r2, #0
 8003af2:	210c      	movs	r1, #12
 8003af4:	200a      	movs	r0, #10
 8003af6:	f7fe fb3f 	bl	8002178 <xQueueGenericCreate>
 8003afa:	4603      	mov	r3, r0
 8003afc:	4a07      	ldr	r2, [pc, #28]	; (8003b1c <prvCheckForValidListAndQueue+0x54>)
 8003afe:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003b00:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <prvCheckForValidListAndQueue+0x54>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d005      	beq.n	8003b14 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <prvCheckForValidListAndQueue+0x54>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4908      	ldr	r1, [pc, #32]	; (8003b30 <prvCheckForValidListAndQueue+0x68>)
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fd48 	bl	80025a4 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b14:	f000 f9ee 	bl	8003ef4 <vPortExitCritical>
    }
 8003b18:	bf00      	nop
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	200001f8 	.word	0x200001f8
 8003b20:	200001c8 	.word	0x200001c8
 8003b24:	200001dc 	.word	0x200001dc
 8003b28:	200001f0 	.word	0x200001f0
 8003b2c:	200001f4 	.word	0x200001f4
 8003b30:	08006d64 	.word	0x08006d64

08003b34 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3b04      	subs	r3, #4
 8003b44:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b4c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b04      	subs	r3, #4
 8003b52:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f023 0201 	bic.w	r2, r3, #1
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3b04      	subs	r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003b64:	4a0c      	ldr	r2, [pc, #48]	; (8003b98 <pxPortInitialiseStack+0x64>)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	3b14      	subs	r3, #20
 8003b6e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3b04      	subs	r3, #4
 8003b7a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f06f 0202 	mvn.w	r2, #2
 8003b82:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3b20      	subs	r3, #32
 8003b88:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	08003b9d 	.word	0x08003b9d

08003b9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003ba6:	4b12      	ldr	r3, [pc, #72]	; (8003bf0 <prvTaskExitError+0x54>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d00a      	beq.n	8003bc6 <prvTaskExitError+0x2a>
        __asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
    }
 8003bc2:	bf00      	nop
 8003bc4:	e7fe      	b.n	8003bc4 <prvTaskExitError+0x28>
        __asm volatile
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	60bb      	str	r3, [r7, #8]
    }
 8003bd8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003bda:	bf00      	nop
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d0fc      	beq.n	8003bdc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003be2:	bf00      	nop
 8003be4:	bf00      	nop
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	20000010 	.word	0x20000010
	...

08003c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003c00:	4b07      	ldr	r3, [pc, #28]	; (8003c20 <pxCurrentTCBConst2>)
 8003c02:	6819      	ldr	r1, [r3, #0]
 8003c04:	6808      	ldr	r0, [r1, #0]
 8003c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c0a:	f380 8809 	msr	PSP, r0
 8003c0e:	f3bf 8f6f 	isb	sy
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f380 8811 	msr	BASEPRI, r0
 8003c1a:	4770      	bx	lr
 8003c1c:	f3af 8000 	nop.w

08003c20 <pxCurrentTCBConst2>:
 8003c20:	200000c4 	.word	0x200000c4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003c24:	bf00      	nop
 8003c26:	bf00      	nop

08003c28 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003c28:	4808      	ldr	r0, [pc, #32]	; (8003c4c <prvPortStartFirstTask+0x24>)
 8003c2a:	6800      	ldr	r0, [r0, #0]
 8003c2c:	6800      	ldr	r0, [r0, #0]
 8003c2e:	f380 8808 	msr	MSP, r0
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f380 8814 	msr	CONTROL, r0
 8003c3a:	b662      	cpsie	i
 8003c3c:	b661      	cpsie	f
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	f3bf 8f6f 	isb	sy
 8003c46:	df00      	svc	0
 8003c48:	bf00      	nop
 8003c4a:	0000      	.short	0x0000
 8003c4c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop

08003c54 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b086      	sub	sp, #24
 8003c58:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003c5a:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <xPortStartScheduler+0x120>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a46      	ldr	r2, [pc, #280]	; (8003d78 <xPortStartScheduler+0x124>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d10a      	bne.n	8003c7a <xPortStartScheduler+0x26>
        __asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	613b      	str	r3, [r7, #16]
    }
 8003c76:	bf00      	nop
 8003c78:	e7fe      	b.n	8003c78 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003c7a:	4b3e      	ldr	r3, [pc, #248]	; (8003d74 <xPortStartScheduler+0x120>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <xPortStartScheduler+0x128>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d10a      	bne.n	8003c9a <xPortStartScheduler+0x46>
        __asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	60fb      	str	r3, [r7, #12]
    }
 8003c96:	bf00      	nop
 8003c98:	e7fe      	b.n	8003c98 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <xPortStartScheduler+0x12c>)
 8003c9c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	22ff      	movs	r2, #255	; 0xff
 8003caa:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	b2db      	uxtb	r3, r3
 8003cb8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <xPortStartScheduler+0x130>)
 8003cc0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003cc2:	4b31      	ldr	r3, [pc, #196]	; (8003d88 <xPortStartScheduler+0x134>)
 8003cc4:	2207      	movs	r2, #7
 8003cc6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cc8:	e009      	b.n	8003cde <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 8003cca:	4b2f      	ldr	r3, [pc, #188]	; (8003d88 <xPortStartScheduler+0x134>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	4a2d      	ldr	r2, [pc, #180]	; (8003d88 <xPortStartScheduler+0x134>)
 8003cd2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	005b      	lsls	r3, r3, #1
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003cde:	78fb      	ldrb	r3, [r7, #3]
 8003ce0:	b2db      	uxtb	r3, r3
 8003ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce6:	2b80      	cmp	r3, #128	; 0x80
 8003ce8:	d0ef      	beq.n	8003cca <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003cea:	4b27      	ldr	r3, [pc, #156]	; (8003d88 <xPortStartScheduler+0x134>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1c3 0307 	rsb	r3, r3, #7
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d00a      	beq.n	8003d0c <xPortStartScheduler+0xb8>
        __asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	60bb      	str	r3, [r7, #8]
    }
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003d0c:	4b1e      	ldr	r3, [pc, #120]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	021b      	lsls	r3, r3, #8
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d14:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003d16:	4b1c      	ldr	r3, [pc, #112]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d1e:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <xPortStartScheduler+0x134>)
 8003d20:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003d2a:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d34:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a14      	ldr	r2, [pc, #80]	; (8003d8c <xPortStartScheduler+0x138>)
 8003d3c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003d40:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003d42:	f000 f963 	bl	800400c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003d46:	4b12      	ldr	r3, [pc, #72]	; (8003d90 <xPortStartScheduler+0x13c>)
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003d4c:	f000 f982 	bl	8004054 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <xPortStartScheduler+0x140>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <xPortStartScheduler+0x140>)
 8003d56:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003d5a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003d5c:	f7ff ff64 	bl	8003c28 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003d60:	f7ff f8de 	bl	8002f20 <vTaskSwitchContext>
    prvTaskExitError();
 8003d64:	f7ff ff1a 	bl	8003b9c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3718      	adds	r7, #24
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000ed00 	.word	0xe000ed00
 8003d78:	410fc271 	.word	0x410fc271
 8003d7c:	410fc270 	.word	0x410fc270
 8003d80:	e000e400 	.word	0xe000e400
 8003d84:	20000204 	.word	0x20000204
 8003d88:	20000208 	.word	0x20000208
 8003d8c:	e000ed20 	.word	0xe000ed20
 8003d90:	20000010 	.word	0x20000010
 8003d94:	e000ef34 	.word	0xe000ef34

08003d98 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d9e:	4b37      	ldr	r3, [pc, #220]	; (8003e7c <vInitPrioGroupValue+0xe4>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a37      	ldr	r2, [pc, #220]	; (8003e80 <vInitPrioGroupValue+0xe8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d10a      	bne.n	8003dbe <vInitPrioGroupValue+0x26>
        __asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
    }
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dbe:	4b2f      	ldr	r3, [pc, #188]	; (8003e7c <vInitPrioGroupValue+0xe4>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a30      	ldr	r2, [pc, #192]	; (8003e84 <vInitPrioGroupValue+0xec>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d10a      	bne.n	8003dde <vInitPrioGroupValue+0x46>
        __asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	60fb      	str	r3, [r7, #12]
    }
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dde:	4b2a      	ldr	r3, [pc, #168]	; (8003e88 <vInitPrioGroupValue+0xf0>)
 8003de0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	22ff      	movs	r2, #255	; 0xff
 8003dee:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003df8:	78fb      	ldrb	r3, [r7, #3]
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	4b22      	ldr	r3, [pc, #136]	; (8003e8c <vInitPrioGroupValue+0xf4>)
 8003e04:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e06:	4b22      	ldr	r3, [pc, #136]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e08:	2207      	movs	r2, #7
 8003e0a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e0c:	e009      	b.n	8003e22 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8003e0e:	4b20      	ldr	r3, [pc, #128]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	3b01      	subs	r3, #1
 8003e14:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e16:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e22:	78fb      	ldrb	r3, [r7, #3]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	2b80      	cmp	r3, #128	; 0x80
 8003e2c:	d0ef      	beq.n	8003e0e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f1c3 0307 	rsb	r3, r3, #7
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d00a      	beq.n	8003e50 <vInitPrioGroupValue+0xb8>
        __asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60bb      	str	r3, [r7, #8]
    }
 8003e4c:	bf00      	nop
 8003e4e:	e7fe      	b.n	8003e4e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e50:	4b0f      	ldr	r3, [pc, #60]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	021b      	lsls	r3, r3, #8
 8003e56:	4a0e      	ldr	r2, [pc, #56]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e58:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e5a:	4b0d      	ldr	r3, [pc, #52]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e62:	4a0b      	ldr	r2, [pc, #44]	; (8003e90 <vInitPrioGroupValue+0xf8>)
 8003e64:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003e6e:	bf00      	nop
 8003e70:	371c      	adds	r7, #28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000ed00 	.word	0xe000ed00
 8003e80:	410fc271 	.word	0x410fc271
 8003e84:	410fc270 	.word	0x410fc270
 8003e88:	e000e400 	.word	0xe000e400
 8003e8c:	20000204 	.word	0x20000204
 8003e90:	20000208 	.word	0x20000208

08003e94 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
        __asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	607b      	str	r3, [r7, #4]
    }
 8003eac:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8003eae:	4b0f      	ldr	r3, [pc, #60]	; (8003eec <vPortEnterCritical+0x58>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	; (8003eec <vPortEnterCritical+0x58>)
 8003eb6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8003eb8:	4b0c      	ldr	r3, [pc, #48]	; (8003eec <vPortEnterCritical+0x58>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d10f      	bne.n	8003ee0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <vPortEnterCritical+0x5c>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <vPortEnterCritical+0x4c>
        __asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	603b      	str	r3, [r7, #0]
    }
 8003edc:	bf00      	nop
 8003ede:	e7fe      	b.n	8003ede <vPortEnterCritical+0x4a>
    }
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr
 8003eec:	20000010 	.word	0x20000010
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8003efa:	4b12      	ldr	r3, [pc, #72]	; (8003f44 <vPortExitCritical+0x50>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d10a      	bne.n	8003f18 <vPortExitCritical+0x24>
        __asm volatile
 8003f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f06:	f383 8811 	msr	BASEPRI, r3
 8003f0a:	f3bf 8f6f 	isb	sy
 8003f0e:	f3bf 8f4f 	dsb	sy
 8003f12:	607b      	str	r3, [r7, #4]
    }
 8003f14:	bf00      	nop
 8003f16:	e7fe      	b.n	8003f16 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8003f18:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <vPortExitCritical+0x50>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	4a09      	ldr	r2, [pc, #36]	; (8003f44 <vPortExitCritical+0x50>)
 8003f20:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <vPortExitCritical+0x50>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d105      	bne.n	8003f36 <vPortExitCritical+0x42>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003f34:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8003f36:	bf00      	nop
 8003f38:	370c      	adds	r7, #12
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000010 	.word	0x20000010
	...

08003f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003f50:	f3ef 8009 	mrs	r0, PSP
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	4b15      	ldr	r3, [pc, #84]	; (8003fb0 <pxCurrentTCBConst>)
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	f01e 0f10 	tst.w	lr, #16
 8003f60:	bf08      	it	eq
 8003f62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f6a:	6010      	str	r0, [r2, #0]
 8003f6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f70:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f74:	f380 8811 	msr	BASEPRI, r0
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	f3bf 8f6f 	isb	sy
 8003f80:	f7fe ffce 	bl	8002f20 <vTaskSwitchContext>
 8003f84:	f04f 0000 	mov.w	r0, #0
 8003f88:	f380 8811 	msr	BASEPRI, r0
 8003f8c:	bc09      	pop	{r0, r3}
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	6808      	ldr	r0, [r1, #0]
 8003f92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f96:	f01e 0f10 	tst.w	lr, #16
 8003f9a:	bf08      	it	eq
 8003f9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003fa0:	f380 8809 	msr	PSP, r0
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	f3af 8000 	nop.w

08003fb0 <pxCurrentTCBConst>:
 8003fb0:	200000c4 	.word	0x200000c4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop

08003fb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
        __asm volatile
 8003fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	607b      	str	r3, [r7, #4]
    }
 8003fd0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8003fd2:	f002 fb17 	bl	8006604 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8003fd6:	f7fe fe89 	bl	8002cec <xTaskIncrementTick>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8003fe0:	f002 fb6e 	bl	80066c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fe4:	4b08      	ldr	r3, [pc, #32]	; (8004008 <SysTick_Handler+0x50>)
 8003fe6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fea:	601a      	str	r2, [r3, #0]
 8003fec:	e001      	b.n	8003ff2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 8003fee:	f002 fb4b 	bl	8006688 <SEGGER_SYSVIEW_RecordExitISR>
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f383 8811 	msr	BASEPRI, r3
    }
 8003ffc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 8003ffe:	bf00      	nop
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800400c:	b480      	push	{r7}
 800400e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004010:	4b0b      	ldr	r3, [pc, #44]	; (8004040 <vPortSetupTimerInterrupt+0x34>)
 8004012:	2200      	movs	r2, #0
 8004014:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004016:	4b0b      	ldr	r3, [pc, #44]	; (8004044 <vPortSetupTimerInterrupt+0x38>)
 8004018:	2200      	movs	r2, #0
 800401a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800401c:	4b0a      	ldr	r3, [pc, #40]	; (8004048 <vPortSetupTimerInterrupt+0x3c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0a      	ldr	r2, [pc, #40]	; (800404c <vPortSetupTimerInterrupt+0x40>)
 8004022:	fba2 2303 	umull	r2, r3, r2, r3
 8004026:	099b      	lsrs	r3, r3, #6
 8004028:	4a09      	ldr	r2, [pc, #36]	; (8004050 <vPortSetupTimerInterrupt+0x44>)
 800402a:	3b01      	subs	r3, #1
 800402c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800402e:	4b04      	ldr	r3, [pc, #16]	; (8004040 <vPortSetupTimerInterrupt+0x34>)
 8004030:	2207      	movs	r2, #7
 8004032:	601a      	str	r2, [r3, #0]
}
 8004034:	bf00      	nop
 8004036:	46bd      	mov	sp, r7
 8004038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	e000e010 	.word	0xe000e010
 8004044:	e000e018 	.word	0xe000e018
 8004048:	20000000 	.word	0x20000000
 800404c:	10624dd3 	.word	0x10624dd3
 8004050:	e000e014 	.word	0xe000e014

08004054 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004054:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004064 <vPortEnableVFP+0x10>
 8004058:	6801      	ldr	r1, [r0, #0]
 800405a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800405e:	6001      	str	r1, [r0, #0]
 8004060:	4770      	bx	lr
 8004062:	0000      	.short	0x0000
 8004064:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004068:	bf00      	nop
 800406a:	bf00      	nop

0800406c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004072:	f3ef 8305 	mrs	r3, IPSR
 8004076:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2b0f      	cmp	r3, #15
 800407c:	d914      	bls.n	80040a8 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800407e:	4a17      	ldr	r2, [pc, #92]	; (80040dc <vPortValidateInterruptPriority+0x70>)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4413      	add	r3, r2
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004088:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <vPortValidateInterruptPriority+0x74>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	7afa      	ldrb	r2, [r7, #11]
 800408e:	429a      	cmp	r2, r3
 8004090:	d20a      	bcs.n	80040a8 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	607b      	str	r3, [r7, #4]
    }
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80040a8:	4b0e      	ldr	r3, [pc, #56]	; (80040e4 <vPortValidateInterruptPriority+0x78>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80040b0:	4b0d      	ldr	r3, [pc, #52]	; (80040e8 <vPortValidateInterruptPriority+0x7c>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d90a      	bls.n	80040ce <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80040b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040bc:	f383 8811 	msr	BASEPRI, r3
 80040c0:	f3bf 8f6f 	isb	sy
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	603b      	str	r3, [r7, #0]
    }
 80040ca:	bf00      	nop
 80040cc:	e7fe      	b.n	80040cc <vPortValidateInterruptPriority+0x60>
    }
 80040ce:	bf00      	nop
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	e000e3f0 	.word	0xe000e3f0
 80040e0:	20000204 	.word	0x20000204
 80040e4:	e000ed0c 	.word	0xe000ed0c
 80040e8:	20000208 	.word	0x20000208

080040ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08a      	sub	sp, #40	; 0x28
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80040f4:	2300      	movs	r3, #0
 80040f6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80040f8:	f7fe fcc8 	bl	8002a8c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80040fc:	4b53      	ldr	r3, [pc, #332]	; (800424c <pvPortMalloc+0x160>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004104:	f000 f908 	bl	8004318 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d012      	beq.n	8004134 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800410e:	2208      	movs	r2, #8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f003 0307 	and.w	r3, r3, #7
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	3308      	adds	r3, #8
 800411a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	43db      	mvns	r3, r3
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	429a      	cmp	r2, r3
 8004124:	d804      	bhi.n	8004130 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	4413      	add	r3, r2
 800412c:	607b      	str	r3, [r7, #4]
 800412e:	e001      	b.n	8004134 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	db70      	blt.n	800421c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d06d      	beq.n	800421c <pvPortMalloc+0x130>
 8004140:	4b43      	ldr	r3, [pc, #268]	; (8004250 <pvPortMalloc+0x164>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	429a      	cmp	r2, r3
 8004148:	d868      	bhi.n	800421c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800414a:	4b42      	ldr	r3, [pc, #264]	; (8004254 <pvPortMalloc+0x168>)
 800414c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <pvPortMalloc+0x168>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004154:	e004      	b.n	8004160 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004158:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	429a      	cmp	r2, r3
 8004168:	d903      	bls.n	8004172 <pvPortMalloc+0x86>
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f1      	bne.n	8004156 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004172:	4b36      	ldr	r3, [pc, #216]	; (800424c <pvPortMalloc+0x160>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004178:	429a      	cmp	r2, r3
 800417a:	d04f      	beq.n	800421c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2208      	movs	r2, #8
 8004182:	4413      	add	r3, r2
 8004184:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	1ad2      	subs	r2, r2, r3
 8004196:	2308      	movs	r3, #8
 8004198:	005b      	lsls	r3, r3, #1
 800419a:	429a      	cmp	r2, r3
 800419c:	d91f      	bls.n	80041de <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00a      	beq.n	80041c6 <pvPortMalloc+0xda>
        __asm volatile
 80041b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b4:	f383 8811 	msr	BASEPRI, r3
 80041b8:	f3bf 8f6f 	isb	sy
 80041bc:	f3bf 8f4f 	dsb	sy
 80041c0:	613b      	str	r3, [r7, #16]
    }
 80041c2:	bf00      	nop
 80041c4:	e7fe      	b.n	80041c4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	1ad2      	subs	r2, r2, r3
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80041d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041d8:	6978      	ldr	r0, [r7, #20]
 80041da:	f000 f8f9 	bl	80043d0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041de:	4b1c      	ldr	r3, [pc, #112]	; (8004250 <pvPortMalloc+0x164>)
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	1ad3      	subs	r3, r2, r3
 80041e8:	4a19      	ldr	r2, [pc, #100]	; (8004250 <pvPortMalloc+0x164>)
 80041ea:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041ec:	4b18      	ldr	r3, [pc, #96]	; (8004250 <pvPortMalloc+0x164>)
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	4b19      	ldr	r3, [pc, #100]	; (8004258 <pvPortMalloc+0x16c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d203      	bcs.n	8004200 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <pvPortMalloc+0x164>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a16      	ldr	r2, [pc, #88]	; (8004258 <pvPortMalloc+0x16c>)
 80041fe:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	2200      	movs	r2, #0
 8004210:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004212:	4b12      	ldr	r3, [pc, #72]	; (800425c <pvPortMalloc+0x170>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	4a10      	ldr	r2, [pc, #64]	; (800425c <pvPortMalloc+0x170>)
 800421a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800421c:	f7fe fc44 	bl	8002aa8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	f003 0307 	and.w	r3, r3, #7
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00a      	beq.n	8004240 <pvPortMalloc+0x154>
        __asm volatile
 800422a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422e:	f383 8811 	msr	BASEPRI, r3
 8004232:	f3bf 8f6f 	isb	sy
 8004236:	f3bf 8f4f 	dsb	sy
 800423a:	60fb      	str	r3, [r7, #12]
    }
 800423c:	bf00      	nop
 800423e:	e7fe      	b.n	800423e <pvPortMalloc+0x152>
    return pvReturn;
 8004240:	69fb      	ldr	r3, [r7, #28]
}
 8004242:	4618      	mov	r0, r3
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	20012e14 	.word	0x20012e14
 8004250:	20012e18 	.word	0x20012e18
 8004254:	20012e0c 	.word	0x20012e0c
 8004258:	20012e1c 	.word	0x20012e1c
 800425c:	20012e20 	.word	0x20012e20

08004260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d049      	beq.n	8004306 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004272:	2308      	movs	r3, #8
 8004274:	425b      	negs	r3, r3
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	db0a      	blt.n	800429e <vPortFree+0x3e>
        __asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	60fb      	str	r3, [r7, #12]
    }
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <vPortFree+0x5c>
        __asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
 80042b6:	60bb      	str	r3, [r7, #8]
    }
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	0fdb      	lsrs	r3, r3, #31
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d01c      	beq.n	8004306 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d118      	bne.n	8004306 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80042e0:	f7fe fbd4 	bl	8002a8c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	685a      	ldr	r2, [r3, #4]
 80042e8:	4b09      	ldr	r3, [pc, #36]	; (8004310 <vPortFree+0xb0>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4413      	add	r3, r2
 80042ee:	4a08      	ldr	r2, [pc, #32]	; (8004310 <vPortFree+0xb0>)
 80042f0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042f2:	6938      	ldr	r0, [r7, #16]
 80042f4:	f000 f86c 	bl	80043d0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <vPortFree+0xb4>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3301      	adds	r3, #1
 80042fe:	4a05      	ldr	r2, [pc, #20]	; (8004314 <vPortFree+0xb4>)
 8004300:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004302:	f7fe fbd1 	bl	8002aa8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}
 800430e:	bf00      	nop
 8004310:	20012e18 	.word	0x20012e18
 8004314:	20012e24 	.word	0x20012e24

08004318 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004318:	b480      	push	{r7}
 800431a:	b085      	sub	sp, #20
 800431c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800431e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004322:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004324:	4b25      	ldr	r3, [pc, #148]	; (80043bc <prvHeapInit+0xa4>)
 8004326:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00c      	beq.n	800434c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	3307      	adds	r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0307 	bic.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <prvHeapInit+0xa4>)
 8004348:	4413      	add	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004350:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <prvHeapInit+0xa8>)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <prvHeapInit+0xa8>)
 8004358:	2200      	movs	r2, #0
 800435a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68ba      	ldr	r2, [r7, #8]
 8004360:	4413      	add	r3, r2
 8004362:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004364:	2208      	movs	r2, #8
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1a9b      	subs	r3, r3, r2
 800436a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f023 0307 	bic.w	r3, r3, #7
 8004372:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a13      	ldr	r2, [pc, #76]	; (80043c4 <prvHeapInit+0xac>)
 8004378:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800437a:	4b12      	ldr	r3, [pc, #72]	; (80043c4 <prvHeapInit+0xac>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2200      	movs	r2, #0
 8004380:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <prvHeapInit+0xac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	1ad2      	subs	r2, r2, r3
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <prvHeapInit+0xac>)
 800439a:	681a      	ldr	r2, [r3, #0]
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	4a08      	ldr	r2, [pc, #32]	; (80043c8 <prvHeapInit+0xb0>)
 80043a6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	4a07      	ldr	r2, [pc, #28]	; (80043cc <prvHeapInit+0xb4>)
 80043ae:	6013      	str	r3, [r2, #0]
}
 80043b0:	bf00      	nop
 80043b2:	3714      	adds	r7, #20
 80043b4:	46bd      	mov	sp, r7
 80043b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ba:	4770      	bx	lr
 80043bc:	2000020c 	.word	0x2000020c
 80043c0:	20012e0c 	.word	0x20012e0c
 80043c4:	20012e14 	.word	0x20012e14
 80043c8:	20012e1c 	.word	0x20012e1c
 80043cc:	20012e18 	.word	0x20012e18

080043d0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043d8:	4b28      	ldr	r3, [pc, #160]	; (800447c <prvInsertBlockIntoFreeList+0xac>)
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	e002      	b.n	80043e4 <prvInsertBlockIntoFreeList+0x14>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	687a      	ldr	r2, [r7, #4]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d8f7      	bhi.n	80043de <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	4413      	add	r3, r2
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d108      	bne.n	8004412 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685a      	ldr	r2, [r3, #4]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	441a      	add	r2, r3
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	68ba      	ldr	r2, [r7, #8]
 800441c:	441a      	add	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d118      	bne.n	8004458 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	4b15      	ldr	r3, [pc, #84]	; (8004480 <prvInsertBlockIntoFreeList+0xb0>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d00d      	beq.n	800444e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685a      	ldr	r2, [r3, #4]
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	441a      	add	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e008      	b.n	8004460 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800444e:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <prvInsertBlockIntoFreeList+0xb0>)
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
 8004456:	e003      	b.n	8004460 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004460:	68fa      	ldr	r2, [r7, #12]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	429a      	cmp	r2, r3
 8004466:	d002      	beq.n	800446e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800446e:	bf00      	nop
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20012e0c 	.word	0x20012e0c
 8004480:	20012e14 	.word	0x20012e14

08004484 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004486:	b085      	sub	sp, #20
 8004488:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800448a:	2300      	movs	r3, #0
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e033      	b.n	80044f8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004490:	491e      	ldr	r1, [pc, #120]	; (800450c <_cbSendTaskList+0x88>)
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	440b      	add	r3, r1
 800449e:	6818      	ldr	r0, [r3, #0]
 80044a0:	491a      	ldr	r1, [pc, #104]	; (800450c <_cbSendTaskList+0x88>)
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	4613      	mov	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	009b      	lsls	r3, r3, #2
 80044ac:	440b      	add	r3, r1
 80044ae:	3304      	adds	r3, #4
 80044b0:	6819      	ldr	r1, [r3, #0]
 80044b2:	4c16      	ldr	r4, [pc, #88]	; (800450c <_cbSendTaskList+0x88>)
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	4613      	mov	r3, r2
 80044b8:	009b      	lsls	r3, r3, #2
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	4423      	add	r3, r4
 80044c0:	3308      	adds	r3, #8
 80044c2:	681c      	ldr	r4, [r3, #0]
 80044c4:	4d11      	ldr	r5, [pc, #68]	; (800450c <_cbSendTaskList+0x88>)
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	4613      	mov	r3, r2
 80044ca:	009b      	lsls	r3, r3, #2
 80044cc:	4413      	add	r3, r2
 80044ce:	009b      	lsls	r3, r3, #2
 80044d0:	442b      	add	r3, r5
 80044d2:	330c      	adds	r3, #12
 80044d4:	681d      	ldr	r5, [r3, #0]
 80044d6:	4e0d      	ldr	r6, [pc, #52]	; (800450c <_cbSendTaskList+0x88>)
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4433      	add	r3, r6
 80044e4:	3310      	adds	r3, #16
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	9300      	str	r3, [sp, #0]
 80044ea:	462b      	mov	r3, r5
 80044ec:	4622      	mov	r2, r4
 80044ee:	f000 f8bd 	bl	800466c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3301      	adds	r3, #1
 80044f6:	607b      	str	r3, [r7, #4]
 80044f8:	4b05      	ldr	r3, [pc, #20]	; (8004510 <_cbSendTaskList+0x8c>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d3c6      	bcc.n	8004490 <_cbSendTaskList+0xc>
  }
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	370c      	adds	r7, #12
 8004508:	46bd      	mov	sp, r7
 800450a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800450c:	20012e28 	.word	0x20012e28
 8004510:	20012ec8 	.word	0x20012ec8

08004514 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004518:	b082      	sub	sp, #8
 800451a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800451c:	f7fe fbd4 	bl	8002cc8 <xTaskGetTickCountFromISR>
 8004520:	4603      	mov	r3, r0
 8004522:	2200      	movs	r2, #0
 8004524:	469a      	mov	sl, r3
 8004526:	4693      	mov	fp, r2
 8004528:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800452c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004530:	4602      	mov	r2, r0
 8004532:	460b      	mov	r3, r1
 8004534:	f04f 0a00 	mov.w	sl, #0
 8004538:	f04f 0b00 	mov.w	fp, #0
 800453c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004540:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004544:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004548:	4652      	mov	r2, sl
 800454a:	465b      	mov	r3, fp
 800454c:	1a14      	subs	r4, r2, r0
 800454e:	eb63 0501 	sbc.w	r5, r3, r1
 8004552:	f04f 0200 	mov.w	r2, #0
 8004556:	f04f 0300 	mov.w	r3, #0
 800455a:	00ab      	lsls	r3, r5, #2
 800455c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004560:	00a2      	lsls	r2, r4, #2
 8004562:	4614      	mov	r4, r2
 8004564:	461d      	mov	r5, r3
 8004566:	eb14 0800 	adds.w	r8, r4, r0
 800456a:	eb45 0901 	adc.w	r9, r5, r1
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800457a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800457e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004582:	4690      	mov	r8, r2
 8004584:	4699      	mov	r9, r3
 8004586:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800458a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800458e:	4610      	mov	r0, r2
 8004590:	4619      	mov	r1, r3
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800459c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800459c:	b580      	push	{r7, lr}
 800459e:	b086      	sub	sp, #24
 80045a0:	af02      	add	r7, sp, #8
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80045aa:	2205      	movs	r2, #5
 80045ac:	492b      	ldr	r1, [pc, #172]	; (800465c <SYSVIEW_AddTask+0xc0>)
 80045ae:	68b8      	ldr	r0, [r7, #8]
 80045b0:	f002 fb32 	bl	8006c18 <memcmp>
 80045b4:	4603      	mov	r3, r0
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d04b      	beq.n	8004652 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80045ba:	4b29      	ldr	r3, [pc, #164]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2b07      	cmp	r3, #7
 80045c0:	d903      	bls.n	80045ca <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80045c2:	4828      	ldr	r0, [pc, #160]	; (8004664 <SYSVIEW_AddTask+0xc8>)
 80045c4:	f002 fa7a 	bl	8006abc <SEGGER_SYSVIEW_Warn>
    return;
 80045c8:	e044      	b.n	8004654 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80045ca:	4b25      	ldr	r3, [pc, #148]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	4926      	ldr	r1, [pc, #152]	; (8004668 <SYSVIEW_AddTask+0xcc>)
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009b      	lsls	r3, r3, #2
 80045d8:	440b      	add	r3, r1
 80045da:	68fa      	ldr	r2, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045de:	4b20      	ldr	r3, [pc, #128]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	4921      	ldr	r1, [pc, #132]	; (8004668 <SYSVIEW_AddTask+0xcc>)
 80045e4:	4613      	mov	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	4413      	add	r3, r2
 80045ea:	009b      	lsls	r3, r3, #2
 80045ec:	440b      	add	r3, r1
 80045ee:	3304      	adds	r3, #4
 80045f0:	68ba      	ldr	r2, [r7, #8]
 80045f2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045f4:	4b1a      	ldr	r3, [pc, #104]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	491b      	ldr	r1, [pc, #108]	; (8004668 <SYSVIEW_AddTask+0xcc>)
 80045fa:	4613      	mov	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	4413      	add	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3308      	adds	r3, #8
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	4916      	ldr	r1, [pc, #88]	; (8004668 <SYSVIEW_AddTask+0xcc>)
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	330c      	adds	r3, #12
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4910      	ldr	r1, [pc, #64]	; (8004668 <SYSVIEW_AddTask+0xcc>)
 8004626:	4613      	mov	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3310      	adds	r3, #16
 8004632:	69ba      	ldr	r2, [r7, #24]
 8004634:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004636:	4b0a      	ldr	r3, [pc, #40]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	4a08      	ldr	r2, [pc, #32]	; (8004660 <SYSVIEW_AddTask+0xc4>)
 800463e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f80e 	bl	800466c <SYSVIEW_SendTaskInfo>
 8004650:	e000      	b.n	8004654 <SYSVIEW_AddTask+0xb8>
    return;
 8004652:	bf00      	nop

}
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	08006d6c 	.word	0x08006d6c
 8004660:	20012ec8 	.word	0x20012ec8
 8004664:	08006d74 	.word	0x08006d74
 8004668:	20012e28 	.word	0x20012e28

0800466c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b08a      	sub	sp, #40	; 0x28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800467a:	f107 0314 	add.w	r3, r7, #20
 800467e:	2214      	movs	r2, #20
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f002 fad8 	bl	8006c38 <memset>
  TaskInfo.TaskID     = TaskID;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800469c:	f107 0314 	add.w	r3, r7, #20
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 fe61 	bl	8006368 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80046a6:	bf00      	nop
 80046a8:	3728      	adds	r7, #40	; 0x28
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
	...

080046b0 <__NVIC_EnableIRQ>:
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	4603      	mov	r3, r0
 80046b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	db0b      	blt.n	80046da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80046c2:	79fb      	ldrb	r3, [r7, #7]
 80046c4:	f003 021f 	and.w	r2, r3, #31
 80046c8:	4907      	ldr	r1, [pc, #28]	; (80046e8 <__NVIC_EnableIRQ+0x38>)
 80046ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2001      	movs	r0, #1
 80046d2:	fa00 f202 	lsl.w	r2, r0, r2
 80046d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80046da:	bf00      	nop
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	e000e100 	.word	0xe000e100

080046ec <__NVIC_SetPriority>:
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	4603      	mov	r3, r0
 80046f4:	6039      	str	r1, [r7, #0]
 80046f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80046f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	db0a      	blt.n	8004716 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	b2da      	uxtb	r2, r3
 8004704:	490c      	ldr	r1, [pc, #48]	; (8004738 <__NVIC_SetPriority+0x4c>)
 8004706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	b2d2      	uxtb	r2, r2
 800470e:	440b      	add	r3, r1
 8004710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004714:	e00a      	b.n	800472c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2da      	uxtb	r2, r3
 800471a:	4908      	ldr	r1, [pc, #32]	; (800473c <__NVIC_SetPriority+0x50>)
 800471c:	79fb      	ldrb	r3, [r7, #7]
 800471e:	f003 030f 	and.w	r3, r3, #15
 8004722:	3b04      	subs	r3, #4
 8004724:	0112      	lsls	r2, r2, #4
 8004726:	b2d2      	uxtb	r2, r2
 8004728:	440b      	add	r3, r1
 800472a:	761a      	strb	r2, [r3, #24]
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr
 8004738:	e000e100 	.word	0xe000e100
 800473c:	e000ed00 	.word	0xe000ed00

08004740 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 8004746:	f002 fa15 	bl	8006b74 <SEGGER_SYSVIEW_IsStarted>
 800474a:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 8004752:	f001 fc8f 	bl	8006074 <SEGGER_SYSVIEW_Start>
  }
}
 8004756:	bf00      	nop
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
	...

08004760 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	4603      	mov	r3, r0
 8004768:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <_cbOnUARTRx+0x3c>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	2b03      	cmp	r3, #3
 8004770:	d806      	bhi.n	8004780 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 8004772:	4b0a      	ldr	r3, [pc, #40]	; (800479c <_cbOnUARTRx+0x3c>)
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	3301      	adds	r3, #1
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b08      	ldr	r3, [pc, #32]	; (800479c <_cbOnUARTRx+0x3c>)
 800477c:	701a      	strb	r2, [r3, #0]
    goto Done;
 800477e:	e009      	b.n	8004794 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 8004780:	f7ff ffde 	bl	8004740 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 8004784:	4b05      	ldr	r3, [pc, #20]	; (800479c <_cbOnUARTRx+0x3c>)
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4618      	mov	r0, r3
 800478a:	1dfb      	adds	r3, r7, #7
 800478c:	2201      	movs	r2, #1
 800478e:	4619      	mov	r1, r3
 8004790:	f000 fb8a 	bl	8004ea8 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 8004794:	bf00      	nop
}
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}
 800479c:	20000014 	.word	0x20000014

080047a0 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 80047a8:	4b14      	ldr	r3, [pc, #80]	; (80047fc <_cbOnUARTTx+0x5c>)
 80047aa:	785b      	ldrb	r3, [r3, #1]
 80047ac:	2b03      	cmp	r3, #3
 80047ae:	d80f      	bhi.n	80047d0 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 80047b0:	4b12      	ldr	r3, [pc, #72]	; (80047fc <_cbOnUARTTx+0x5c>)
 80047b2:	785b      	ldrb	r3, [r3, #1]
 80047b4:	461a      	mov	r2, r3
 80047b6:	4b12      	ldr	r3, [pc, #72]	; (8004800 <_cbOnUARTTx+0x60>)
 80047b8:	5c9a      	ldrb	r2, [r3, r2]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <_cbOnUARTTx+0x5c>)
 80047c0:	785b      	ldrb	r3, [r3, #1]
 80047c2:	3301      	adds	r3, #1
 80047c4:	b2da      	uxtb	r2, r3
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <_cbOnUARTTx+0x5c>)
 80047c8:	705a      	strb	r2, [r3, #1]
    r = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	60fb      	str	r3, [r7, #12]
    goto Done;
 80047ce:	e00f      	b.n	80047f0 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 80047d0:	4b0a      	ldr	r3, [pc, #40]	; (80047fc <_cbOnUARTTx+0x5c>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4618      	mov	r0, r3
 80047da:	f000 fa09 	bl	8004bf0 <SEGGER_RTT_ReadUpBufferNoLock>
 80047de:	4603      	mov	r3, r0
 80047e0:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	da02      	bge.n	80047ee <_cbOnUARTTx+0x4e>
    r = 0;
 80047e8:	2300      	movs	r3, #0
 80047ea:	60fb      	str	r3, [r7, #12]
 80047ec:	e000      	b.n	80047f0 <_cbOnUARTTx+0x50>
  }
Done:
 80047ee:	bf00      	nop
  return r;
 80047f0:	68fb      	ldr	r3, [r7, #12]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	20000014 	.word	0x20000014
 8004800:	08006e50 	.word	0x08006e50

08004804 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b082      	sub	sp, #8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800480c:	4a04      	ldr	r2, [pc, #16]	; (8004820 <SEGGER_UART_init+0x1c>)
 800480e:	4905      	ldr	r1, [pc, #20]	; (8004824 <SEGGER_UART_init+0x20>)
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 f853 	bl	80048bc <HIF_UART_Init>
}
 8004816:	bf00      	nop
 8004818:	3708      	adds	r7, #8
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	08004761 	.word	0x08004761
 8004824:	080047a1 	.word	0x080047a1

08004828 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800482e:	4b1e      	ldr	r3, [pc, #120]	; (80048a8 <USART2_IRQHandler+0x80>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f003 0320 	and.w	r3, r3, #32
 800483a:	2b00      	cmp	r3, #0
 800483c:	d011      	beq.n	8004862 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800483e:	4b1b      	ldr	r3, [pc, #108]	; (80048ac <USART2_IRQHandler+0x84>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	b2db      	uxtb	r3, r3
 8004844:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f003 030b 	and.w	r3, r3, #11
 800484c:	2b00      	cmp	r3, #0
 800484e:	d108      	bne.n	8004862 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004850:	4b17      	ldr	r3, [pc, #92]	; (80048b0 <USART2_IRQHandler+0x88>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d004      	beq.n	8004862 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004858:	4b15      	ldr	r3, [pc, #84]	; (80048b0 <USART2_IRQHandler+0x88>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	79fa      	ldrb	r2, [r7, #7]
 800485e:	4610      	mov	r0, r2
 8004860:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004868:	2b00      	cmp	r3, #0
 800486a:	d01a      	beq.n	80048a2 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 800486c:	4b11      	ldr	r3, [pc, #68]	; (80048b4 <USART2_IRQHandler+0x8c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d015      	beq.n	80048a0 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <USART2_IRQHandler+0x8c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	1dfa      	adds	r2, r7, #7
 800487a:	4610      	mov	r0, r2
 800487c:	4798      	blx	r3
 800487e:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d106      	bne.n	8004894 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004886:	4b0c      	ldr	r3, [pc, #48]	; (80048b8 <USART2_IRQHandler+0x90>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a0b      	ldr	r2, [pc, #44]	; (80048b8 <USART2_IRQHandler+0x90>)
 800488c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e006      	b.n	80048a2 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004894:	4b04      	ldr	r3, [pc, #16]	; (80048a8 <USART2_IRQHandler+0x80>)
 8004896:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004898:	79fa      	ldrb	r2, [r7, #7]
 800489a:	4b04      	ldr	r3, [pc, #16]	; (80048ac <USART2_IRQHandler+0x84>)
 800489c:	601a      	str	r2, [r3, #0]
 800489e:	e000      	b.n	80048a2 <USART2_IRQHandler+0x7a>
      return;
 80048a0:	bf00      	nop
    }
  }
}
 80048a2:	3710      	adds	r7, #16
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40004400 	.word	0x40004400
 80048ac:	40004404 	.word	0x40004404
 80048b0:	20012ecc 	.word	0x20012ecc
 80048b4:	20012ed0 	.word	0x20012ed0
 80048b8:	4000440c 	.word	0x4000440c

080048bc <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b086      	sub	sp, #24
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 80048c8:	4b2e      	ldr	r3, [pc, #184]	; (8004984 <HIF_UART_Init+0xc8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a2d      	ldr	r2, [pc, #180]	; (8004984 <HIF_UART_Init+0xc8>)
 80048ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048d2:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 80048d4:	4b2c      	ldr	r3, [pc, #176]	; (8004988 <HIF_UART_Init+0xcc>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2b      	ldr	r2, [pc, #172]	; (8004988 <HIF_UART_Init+0xcc>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 80048e0:	4b2a      	ldr	r3, [pc, #168]	; (800498c <HIF_UART_Init+0xd0>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048ec:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 80048f4:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 80048f6:	4a25      	ldr	r2, [pc, #148]	; (800498c <HIF_UART_Init+0xd0>)
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HIF_UART_Init+0xd4>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004908:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8004910:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8004912:	4a1f      	ldr	r2, [pc, #124]	; (8004990 <HIF_UART_Init+0xd4>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8004918:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HIF_UART_Init+0xd8>)
 800491a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800491e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8004920:	4b1d      	ldr	r3, [pc, #116]	; (8004998 <HIF_UART_Init+0xdc>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8004926:	4b1d      	ldr	r3, [pc, #116]	; (800499c <HIF_UART_Init+0xe0>)
 8004928:	2280      	movs	r2, #128	; 0x80
 800492a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	00db      	lsls	r3, r3, #3
 8004930:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8004932:	4a1b      	ldr	r2, [pc, #108]	; (80049a0 <HIF_UART_Init+0xe4>)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	fbb2 f3f3 	udiv	r3, r2, r3
 800493a:	3301      	adds	r3, #1
 800493c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494a:	d302      	bcc.n	8004952 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 800494c:	f640 73ff 	movw	r3, #4095	; 0xfff
 8004950:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d004      	beq.n	8004962 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	011b      	lsls	r3, r3, #4
 800495c:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <HIF_UART_Init+0xe8>)
 800495e:	b29b      	uxth	r3, r3
 8004960:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 8004962:	4a11      	ldr	r2, [pc, #68]	; (80049a8 <HIF_UART_Init+0xec>)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 8004968:	4a10      	ldr	r2, [pc, #64]	; (80049ac <HIF_UART_Init+0xf0>)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 800496e:	2106      	movs	r1, #6
 8004970:	2026      	movs	r0, #38	; 0x26
 8004972:	f7ff febb 	bl	80046ec <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 8004976:	2026      	movs	r0, #38	; 0x26
 8004978:	f7ff fe9a 	bl	80046b0 <__NVIC_EnableIRQ>
}
 800497c:	bf00      	nop
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40023840 	.word	0x40023840
 8004988:	40023830 	.word	0x40023830
 800498c:	40020020 	.word	0x40020020
 8004990:	40020000 	.word	0x40020000
 8004994:	4000440c 	.word	0x4000440c
 8004998:	40004410 	.word	0x40004410
 800499c:	40004414 	.word	0x40004414
 80049a0:	0501bd00 	.word	0x0501bd00
 80049a4:	40004408 	.word	0x40004408
 80049a8:	20012ecc 	.word	0x20012ecc
 80049ac:	20012ed0 	.word	0x20012ed0

080049b0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80049b6:	4b24      	ldr	r3, [pc, #144]	; (8004a48 <_DoInit+0x98>)
 80049b8:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2203      	movs	r2, #3
 80049be:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2203      	movs	r2, #3
 80049c4:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a20      	ldr	r2, [pc, #128]	; (8004a4c <_DoInit+0x9c>)
 80049ca:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a20      	ldr	r2, [pc, #128]	; (8004a50 <_DoInit+0xa0>)
 80049d0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049d8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2200      	movs	r2, #0
 80049ea:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <_DoInit+0x9c>)
 80049f0:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a17      	ldr	r2, [pc, #92]	; (8004a54 <_DoInit+0xa4>)
 80049f6:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2210      	movs	r2, #16
 80049fc:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	3307      	adds	r3, #7
 8004a14:	4a10      	ldr	r2, [pc, #64]	; (8004a58 <_DoInit+0xa8>)
 8004a16:	6810      	ldr	r0, [r2, #0]
 8004a18:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a1a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a0e      	ldr	r2, [pc, #56]	; (8004a5c <_DoInit+0xac>)
 8004a22:	6810      	ldr	r0, [r2, #0]
 8004a24:	6018      	str	r0, [r3, #0]
 8004a26:	8891      	ldrh	r1, [r2, #4]
 8004a28:	7992      	ldrb	r2, [r2, #6]
 8004a2a:	8099      	strh	r1, [r3, #4]
 8004a2c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a2e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2220      	movs	r2, #32
 8004a36:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004a38:	f3bf 8f5f 	dmb	sy
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	20012ed4 	.word	0x20012ed4
 8004a4c:	08006dc4 	.word	0x08006dc4
 8004a50:	20012f7c 	.word	0x20012f7c
 8004a54:	2001337c 	.word	0x2001337c
 8004a58:	08006dd0 	.word	0x08006dd0
 8004a5c:	08006dd4 	.word	0x08006dd4

08004a60 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08a      	sub	sp, #40	; 0x28
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	60f8      	str	r0, [r7, #12]
 8004a68:	60b9      	str	r1, [r7, #8]
 8004a6a:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	69fb      	ldr	r3, [r7, #28]
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d905      	bls.n	8004a90 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 8004a84:	69ba      	ldr	r2, [r7, #24]
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
 8004a8e:	e007      	b.n	8004aa0 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	69b9      	ldr	r1, [r7, #24]
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	1acb      	subs	r3, r1, r3
 8004a9a:	4413      	add	r3, r2
 8004a9c:	3b01      	subs	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689a      	ldr	r2, [r3, #8]
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	1ad3      	subs	r3, r2, r3
 8004aa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	bf28      	it	cs
 8004aae:	4613      	movcs	r3, r2
 8004ab0:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8004ab2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	bf28      	it	cs
 8004aba:	4613      	movcs	r3, r2
 8004abc:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	4413      	add	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8004ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	6978      	ldr	r0, [r7, #20]
 8004ace:	f002 f8df 	bl	8006c90 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8004ad2:	6a3a      	ldr	r2, [r7, #32]
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	4413      	add	r3, r2
 8004ad8:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8004ada:	68ba      	ldr	r2, [r7, #8]
 8004adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ade:	4413      	add	r3, r2
 8004ae0:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8004aea:	69fa      	ldr	r2, [r7, #28]
 8004aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aee:	4413      	add	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	69fa      	ldr	r2, [r7, #28]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d101      	bne.n	8004b00 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8004afc:	2300      	movs	r3, #0
 8004afe:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b00:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1b2      	bne.n	8004a76 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8004b10:	6a3b      	ldr	r3, [r7, #32]
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3728      	adds	r7, #40	; 0x28
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b088      	sub	sp, #32
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	60f8      	str	r0, [r7, #12]
 8004b22:	60b9      	str	r1, [r7, #8]
 8004b24:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68db      	ldr	r3, [r3, #12]
 8004b2a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8004b36:	69ba      	ldr	r2, [r7, #24]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d911      	bls.n	8004b62 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	4413      	add	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	6938      	ldr	r0, [r7, #16]
 8004b4e:	f002 f89f 	bl	8006c90 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b52:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 8004b56:	69fa      	ldr	r2, [r7, #28]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	441a      	add	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8004b60:	e01f      	b.n	8004ba2 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	6938      	ldr	r0, [r7, #16]
 8004b76:	f002 f88b 	bl	8006c90 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 8004b7a:	687a      	ldr	r2, [r7, #4]
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	697a      	ldr	r2, [r7, #20]
 8004b90:	4619      	mov	r1, r3
 8004b92:	6938      	ldr	r0, [r7, #16]
 8004b94:	f002 f87c 	bl	8006c90 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b98:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	60da      	str	r2, [r3, #12]
}
 8004ba2:	bf00      	nop
 8004ba4:	3720      	adds	r7, #32
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8004baa:	b480      	push	{r7}
 8004bac:	b087      	sub	sp, #28
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	691b      	ldr	r3, [r3, #16]
 8004bb6:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d808      	bhi.n	8004bd8 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689a      	ldr	r2, [r3, #8]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad2      	subs	r2, r2, r3
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	617b      	str	r3, [r7, #20]
 8004bd6:	e004      	b.n	8004be2 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	3b01      	subs	r3, #1
 8004be0:	617b      	str	r3, [r7, #20]
  }
  return r;
 8004be2:	697b      	ldr	r3, [r7, #20]
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	371c      	adds	r7, #28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08c      	sub	sp, #48	; 0x30
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8004bfc:	4b3e      	ldr	r3, [pc, #248]	; (8004cf8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004bfe:	623b      	str	r3, [r7, #32]
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d101      	bne.n	8004c0e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8004c0a:	f7ff fed1 	bl	80049b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	1c5a      	adds	r2, r3, #1
 8004c12:	4613      	mov	r3, r2
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	4413      	add	r3, r2
 8004c18:	00db      	lsls	r3, r3, #3
 8004c1a:	4a37      	ldr	r2, [pc, #220]	; (8004cf8 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8004c1c:	4413      	add	r3, r2
 8004c1e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004c30:	2300      	movs	r3, #0
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004c34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c36:	69bb      	ldr	r3, [r7, #24]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d92b      	bls.n	8004c94 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	bf28      	it	cs
 8004c4e:	4613      	movcs	r3, r2
 8004c50:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	685a      	ldr	r2, [r3, #4]
 8004c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c58:	4413      	add	r3, r2
 8004c5a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	6939      	ldr	r1, [r7, #16]
 8004c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c62:	f002 f815 	bl	8006c90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004c6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	4413      	add	r3, r2
 8004c74:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004c76:	687a      	ldr	r2, [r7, #4]
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004c7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	4413      	add	r3, r2
 8004c84:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004c86:	69fb      	ldr	r3, [r7, #28]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c8c:	429a      	cmp	r2, r3
 8004c8e:	d101      	bne.n	8004c94 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 8004c90:	2300      	movs	r3, #0
 8004c92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	bf28      	it	cs
 8004ca4:	4613      	movcs	r3, r2
 8004ca6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d019      	beq.n	8004ce2 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	685a      	ldr	r2, [r3, #4]
 8004cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb4:	4413      	add	r3, r2
 8004cb6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004cb8:	697a      	ldr	r2, [r7, #20]
 8004cba:	6939      	ldr	r1, [r7, #16]
 8004cbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004cbe:	f001 ffe7 	bl	8006c90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004cca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	4413      	add	r3, r2
 8004cd0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004cda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8004ce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d002      	beq.n	8004cee <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3730      	adds	r7, #48	; 0x30
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20012ed4 	.word	0x20012ed4

08004cfc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b08c      	sub	sp, #48	; 0x30
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004d08:	4b3e      	ldr	r3, [pc, #248]	; (8004e04 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d0a:	623b      	str	r3, [r7, #32]
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	781b      	ldrb	r3, [r3, #0]
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d101      	bne.n	8004d1a <SEGGER_RTT_ReadNoLock+0x1e>
 8004d16:	f7ff fe4b 	bl	80049b0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	005b      	lsls	r3, r3, #1
 8004d20:	4413      	add	r3, r2
 8004d22:	00db      	lsls	r3, r3, #3
 8004d24:	3360      	adds	r3, #96	; 0x60
 8004d26:	4a37      	ldr	r2, [pc, #220]	; (8004e04 <SEGGER_RTT_ReadNoLock+0x108>)
 8004d28:	4413      	add	r3, r2
 8004d2a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004d40:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d92b      	bls.n	8004da0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bf28      	it	cs
 8004d5a:	4613      	movcs	r3, r2
 8004d5c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d64:	4413      	add	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	6939      	ldr	r1, [r7, #16]
 8004d6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d6e:	f001 ff8f 	bl	8006c90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	4413      	add	r3, r2
 8004d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	4413      	add	r3, r2
 8004d80:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d101      	bne.n	8004da0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004da0:	69ba      	ldr	r2, [r7, #24]
 8004da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4293      	cmp	r3, r2
 8004dae:	bf28      	it	cs
 8004db0:	4613      	movcs	r3, r2
 8004db2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d019      	beq.n	8004dee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	685a      	ldr	r2, [r3, #4]
 8004dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc0:	4413      	add	r3, r2
 8004dc2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	6939      	ldr	r1, [r7, #16]
 8004dc8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004dca:	f001 ff61 	bl	8006c90 <memcpy>
    NumBytesRead += NumBytesRem;
 8004dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8004dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	4413      	add	r3, r2
 8004ddc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	4413      	add	r3, r2
 8004dec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004df4:	69fb      	ldr	r3, [r7, #28]
 8004df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004df8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3730      	adds	r7, #48	; 0x30
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	20012ed4 	.word	0x20012ed4

08004e08 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	4613      	mov	r3, r2
 8004e1c:	005b      	lsls	r3, r3, #1
 8004e1e:	4413      	add	r3, r2
 8004e20:	00db      	lsls	r3, r3, #3
 8004e22:	3360      	adds	r3, #96	; 0x60
 8004e24:	4a1f      	ldr	r2, [pc, #124]	; (8004ea4 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8004e26:	4413      	add	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d029      	beq.n	8004e86 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d82e      	bhi.n	8004e94 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d013      	beq.n	8004e66 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 8004e3e:	e029      	b.n	8004e94 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e40:	6978      	ldr	r0, [r7, #20]
 8004e42:	f7ff feb2 	bl	8004baa <_GetAvailWriteSpace>
 8004e46:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d202      	bcs.n	8004e56 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 8004e50:	2300      	movs	r3, #0
 8004e52:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8004e54:	e021      	b.n	8004e9a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	69b9      	ldr	r1, [r7, #24]
 8004e5e:	6978      	ldr	r0, [r7, #20]
 8004e60:	f7ff fe5b 	bl	8004b1a <_WriteNoCheck>
    break;
 8004e64:	e019      	b.n	8004e9a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f7ff fe9f 	bl	8004baa <_GetAvailWriteSpace>
 8004e6c:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	4293      	cmp	r3, r2
 8004e74:	bf28      	it	cs
 8004e76:	4613      	movcs	r3, r2
 8004e78:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	6978      	ldr	r0, [r7, #20]
 8004e80:	f7ff fe4b 	bl	8004b1a <_WriteNoCheck>
    break;
 8004e84:	e009      	b.n	8004e9a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	69b9      	ldr	r1, [r7, #24]
 8004e8a:	6978      	ldr	r0, [r7, #20]
 8004e8c:	f7ff fde8 	bl	8004a60 <_WriteBlocking>
 8004e90:	61f8      	str	r0, [r7, #28]
    break;
 8004e92:	e002      	b.n	8004e9a <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 8004e94:	2300      	movs	r3, #0
 8004e96:	61fb      	str	r3, [r7, #28]
    break;
 8004e98:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8004e9a:	69fb      	ldr	r3, [r7, #28]
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20012ed4 	.word	0x20012ed4

08004ea8 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8004eb4:	4b0e      	ldr	r3, [pc, #56]	; (8004ef0 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8004eb6:	61fb      	str	r3, [r7, #28]
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d101      	bne.n	8004ec6 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8004ec2:	f7ff fd75 	bl	80049b0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004ec6:	f3ef 8311 	mrs	r3, BASEPRI
 8004eca:	f04f 0120 	mov.w	r1, #32
 8004ece:	f381 8811 	msr	BASEPRI, r1
 8004ed2:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68b9      	ldr	r1, [r7, #8]
 8004ed8:	68f8      	ldr	r0, [r7, #12]
 8004eda:	f7ff ff95 	bl	8004e08 <SEGGER_RTT_WriteDownBufferNoLock>
 8004ede:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8004ee6:	697b      	ldr	r3, [r7, #20]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3720      	adds	r7, #32
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	20012ed4 	.word	0x20012ed4

08004ef4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004f02:	4b3d      	ldr	r3, [pc, #244]	; (8004ff8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d101      	bne.n	8004f14 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004f10:	f7ff fd4e 	bl	80049b0 <_DoInit>
  SEGGER_RTT_LOCK();
 8004f14:	f3ef 8311 	mrs	r3, BASEPRI
 8004f18:	f04f 0120 	mov.w	r1, #32
 8004f1c:	f381 8811 	msr	BASEPRI, r1
 8004f20:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004f22:	4b35      	ldr	r3, [pc, #212]	; (8004ff8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004f24:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004f26:	2300      	movs	r3, #0
 8004f28:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004f2a:	6939      	ldr	r1, [r7, #16]
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	4613      	mov	r3, r2
 8004f32:	005b      	lsls	r3, r3, #1
 8004f34:	4413      	add	r3, r2
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	440b      	add	r3, r1
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d008      	beq.n	8004f54 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	3301      	adds	r3, #1
 8004f46:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	69fa      	ldr	r2, [r7, #28]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	dbeb      	blt.n	8004f2a <SEGGER_RTT_AllocUpBuffer+0x36>
 8004f52:	e000      	b.n	8004f56 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004f54:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	691b      	ldr	r3, [r3, #16]
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	da3f      	bge.n	8004fe0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004f60:	6939      	ldr	r1, [r7, #16]
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	1c5a      	adds	r2, r3, #1
 8004f66:	4613      	mov	r3, r2
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	4413      	add	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	440b      	add	r3, r1
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004f74:	6939      	ldr	r1, [r7, #16]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	1c5a      	adds	r2, r3, #1
 8004f7a:	4613      	mov	r3, r2
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	4413      	add	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	440b      	add	r3, r1
 8004f84:	3304      	adds	r3, #4
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004f8a:	6939      	ldr	r1, [r7, #16]
 8004f8c:	69fa      	ldr	r2, [r7, #28]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	005b      	lsls	r3, r3, #1
 8004f92:	4413      	add	r3, r2
 8004f94:	00db      	lsls	r3, r3, #3
 8004f96:	440b      	add	r3, r1
 8004f98:	3320      	adds	r3, #32
 8004f9a:	687a      	ldr	r2, [r7, #4]
 8004f9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004f9e:	6939      	ldr	r1, [r7, #16]
 8004fa0:	69fa      	ldr	r2, [r7, #28]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	005b      	lsls	r3, r3, #1
 8004fa6:	4413      	add	r3, r2
 8004fa8:	00db      	lsls	r3, r3, #3
 8004faa:	440b      	add	r3, r1
 8004fac:	3328      	adds	r3, #40	; 0x28
 8004fae:	2200      	movs	r2, #0
 8004fb0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004fb2:	6939      	ldr	r1, [r7, #16]
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	4613      	mov	r3, r2
 8004fb8:	005b      	lsls	r3, r3, #1
 8004fba:	4413      	add	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	440b      	add	r3, r1
 8004fc0:	3324      	adds	r3, #36	; 0x24
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004fc6:	6939      	ldr	r1, [r7, #16]
 8004fc8:	69fa      	ldr	r2, [r7, #28]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	005b      	lsls	r3, r3, #1
 8004fce:	4413      	add	r3, r2
 8004fd0:	00db      	lsls	r3, r3, #3
 8004fd2:	440b      	add	r3, r1
 8004fd4:	332c      	adds	r3, #44	; 0x2c
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004fda:	f3bf 8f5f 	dmb	sy
 8004fde:	e002      	b.n	8004fe6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004fe0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004fec:	69fb      	ldr	r3, [r7, #28]
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20012ed4 	.word	0x20012ed4

08004ffc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800500a:	4b33      	ldr	r3, [pc, #204]	; (80050d8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	781b      	ldrb	r3, [r3, #0]
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d101      	bne.n	800501c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005018:	f7ff fcca 	bl	80049b0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800501c:	4b2e      	ldr	r3, [pc, #184]	; (80050d8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800501e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	461a      	mov	r2, r3
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4293      	cmp	r3, r2
 800502a:	d24d      	bcs.n	80050c8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800502c:	f3ef 8311 	mrs	r3, BASEPRI
 8005030:	f04f 0120 	mov.w	r1, #32
 8005034:	f381 8811 	msr	BASEPRI, r1
 8005038:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d031      	beq.n	80050a4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005040:	6979      	ldr	r1, [r7, #20]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	4413      	add	r3, r2
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	440b      	add	r3, r1
 800504e:	3360      	adds	r3, #96	; 0x60
 8005050:	68ba      	ldr	r2, [r7, #8]
 8005052:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005054:	6979      	ldr	r1, [r7, #20]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4613      	mov	r3, r2
 800505a:	005b      	lsls	r3, r3, #1
 800505c:	4413      	add	r3, r2
 800505e:	00db      	lsls	r3, r3, #3
 8005060:	440b      	add	r3, r1
 8005062:	3364      	adds	r3, #100	; 0x64
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005068:	6979      	ldr	r1, [r7, #20]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	4613      	mov	r3, r2
 800506e:	005b      	lsls	r3, r3, #1
 8005070:	4413      	add	r3, r2
 8005072:	00db      	lsls	r3, r3, #3
 8005074:	440b      	add	r3, r1
 8005076:	3368      	adds	r3, #104	; 0x68
 8005078:	683a      	ldr	r2, [r7, #0]
 800507a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800507c:	6979      	ldr	r1, [r7, #20]
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4613      	mov	r3, r2
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	4413      	add	r3, r2
 8005086:	00db      	lsls	r3, r3, #3
 8005088:	440b      	add	r3, r1
 800508a:	3370      	adds	r3, #112	; 0x70
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005090:	6979      	ldr	r1, [r7, #20]
 8005092:	68fa      	ldr	r2, [r7, #12]
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	440b      	add	r3, r1
 800509e:	336c      	adds	r3, #108	; 0x6c
 80050a0:	2200      	movs	r2, #0
 80050a2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80050a4:	6979      	ldr	r1, [r7, #20]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4613      	mov	r3, r2
 80050aa:	005b      	lsls	r3, r3, #1
 80050ac:	4413      	add	r3, r2
 80050ae:	00db      	lsls	r3, r3, #3
 80050b0:	440b      	add	r3, r1
 80050b2:	3374      	adds	r3, #116	; 0x74
 80050b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050b6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80050b8:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80050c2:	2300      	movs	r3, #0
 80050c4:	61fb      	str	r3, [r7, #28]
 80050c6:	e002      	b.n	80050ce <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80050c8:	f04f 33ff 	mov.w	r3, #4294967295
 80050cc:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80050ce:	69fb      	ldr	r3, [r7, #28]
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3720      	adds	r7, #32
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	20012ed4 	.word	0x20012ed4

080050dc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80050dc:	b480      	push	{r7}
 80050de:	b087      	sub	sp, #28
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80050ec:	e002      	b.n	80050f4 <_EncodeStr+0x18>
    Len++;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	3301      	adds	r3, #1
 80050f2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	4413      	add	r3, r2
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1f6      	bne.n	80050ee <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005100:	693a      	ldr	r2, [r7, #16]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	429a      	cmp	r2, r3
 8005106:	d901      	bls.n	800510c <_EncodeStr+0x30>
    Len = Limit;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	2bfe      	cmp	r3, #254	; 0xfe
 8005110:	d806      	bhi.n	8005120 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	60fa      	str	r2, [r7, #12]
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	b2d2      	uxtb	r2, r2
 800511c:	701a      	strb	r2, [r3, #0]
 800511e:	e011      	b.n	8005144 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	60fa      	str	r2, [r7, #12]
 8005126:	22ff      	movs	r2, #255	; 0xff
 8005128:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	60fa      	str	r2, [r7, #12]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	b2d2      	uxtb	r2, r2
 8005134:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	0a19      	lsrs	r1, r3, #8
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1c5a      	adds	r2, r3, #1
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	b2ca      	uxtb	r2, r1
 8005142:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005148:	e00a      	b.n	8005160 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	1c53      	adds	r3, r2, #1
 800514e:	60bb      	str	r3, [r7, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1c59      	adds	r1, r3, #1
 8005154:	60f9      	str	r1, [r7, #12]
 8005156:	7812      	ldrb	r2, [r2, #0]
 8005158:	701a      	strb	r2, [r3, #0]
    n++;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	3301      	adds	r3, #1
 800515e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005160:	697a      	ldr	r2, [r7, #20]
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	429a      	cmp	r2, r3
 8005166:	d3f0      	bcc.n	800514a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005168:	68fb      	ldr	r3, [r7, #12]
}
 800516a:	4618      	mov	r0, r3
 800516c:	371c      	adds	r7, #28
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr

08005176 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005176:	b480      	push	{r7}
 8005178:	b083      	sub	sp, #12
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	3304      	adds	r3, #4
}
 8005182:	4618      	mov	r0, r3
 8005184:	370c      	adds	r7, #12
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
	...

08005190 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b082      	sub	sp, #8
 8005194:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005196:	4b35      	ldr	r3, [pc, #212]	; (800526c <_HandleIncomingPacket+0xdc>)
 8005198:	7e1b      	ldrb	r3, [r3, #24]
 800519a:	4618      	mov	r0, r3
 800519c:	1cfb      	adds	r3, r7, #3
 800519e:	2201      	movs	r2, #1
 80051a0:	4619      	mov	r1, r3
 80051a2:	f7ff fdab 	bl	8004cfc <SEGGER_RTT_ReadNoLock>
 80051a6:	4603      	mov	r3, r0
 80051a8:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	dd59      	ble.n	8005264 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80051b0:	78fb      	ldrb	r3, [r7, #3]
 80051b2:	2b80      	cmp	r3, #128	; 0x80
 80051b4:	d032      	beq.n	800521c <_HandleIncomingPacket+0x8c>
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	dc42      	bgt.n	8005240 <_HandleIncomingPacket+0xb0>
 80051ba:	2b07      	cmp	r3, #7
 80051bc:	dc16      	bgt.n	80051ec <_HandleIncomingPacket+0x5c>
 80051be:	2b00      	cmp	r3, #0
 80051c0:	dd3e      	ble.n	8005240 <_HandleIncomingPacket+0xb0>
 80051c2:	3b01      	subs	r3, #1
 80051c4:	2b06      	cmp	r3, #6
 80051c6:	d83b      	bhi.n	8005240 <_HandleIncomingPacket+0xb0>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <_HandleIncomingPacket+0x40>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	080051f3 	.word	0x080051f3
 80051d4:	080051f9 	.word	0x080051f9
 80051d8:	080051ff 	.word	0x080051ff
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520b 	.word	0x0800520b
 80051e4:	08005211 	.word	0x08005211
 80051e8:	08005217 	.word	0x08005217
 80051ec:	2b7f      	cmp	r3, #127	; 0x7f
 80051ee:	d034      	beq.n	800525a <_HandleIncomingPacket+0xca>
 80051f0:	e026      	b.n	8005240 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80051f2:	f000 ff3f 	bl	8006074 <SEGGER_SYSVIEW_Start>
      break;
 80051f6:	e035      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80051f8:	f000 fff6 	bl	80061e8 <SEGGER_SYSVIEW_Stop>
      break;
 80051fc:	e032      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80051fe:	f001 f9cf 	bl	80065a0 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005202:	e02f      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005204:	f001 f994 	bl	8006530 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005208:	e02c      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800520a:	f001 f813 	bl	8006234 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800520e:	e029      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005210:	f001 fc02 	bl	8006a18 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005214:	e026      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005216:	f001 fbe1 	bl	80069dc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800521a:	e023      	b.n	8005264 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <_HandleIncomingPacket+0xdc>)
 800521e:	7e1b      	ldrb	r3, [r3, #24]
 8005220:	4618      	mov	r0, r3
 8005222:	1cfb      	adds	r3, r7, #3
 8005224:	2201      	movs	r2, #1
 8005226:	4619      	mov	r1, r3
 8005228:	f7ff fd68 	bl	8004cfc <SEGGER_RTT_ReadNoLock>
 800522c:	4603      	mov	r3, r0
 800522e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2b00      	cmp	r3, #0
 8005234:	dd13      	ble.n	800525e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	4618      	mov	r0, r3
 800523a:	f001 fb4f 	bl	80068dc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800523e:	e00e      	b.n	800525e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005240:	78fb      	ldrb	r3, [r7, #3]
 8005242:	b25b      	sxtb	r3, r3
 8005244:	2b00      	cmp	r3, #0
 8005246:	da0c      	bge.n	8005262 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <_HandleIncomingPacket+0xdc>)
 800524a:	7e1b      	ldrb	r3, [r3, #24]
 800524c:	4618      	mov	r0, r3
 800524e:	1cfb      	adds	r3, r7, #3
 8005250:	2201      	movs	r2, #1
 8005252:	4619      	mov	r1, r3
 8005254:	f7ff fd52 	bl	8004cfc <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005258:	e003      	b.n	8005262 <_HandleIncomingPacket+0xd2>
      break;
 800525a:	bf00      	nop
 800525c:	e002      	b.n	8005264 <_HandleIncomingPacket+0xd4>
      break;
 800525e:	bf00      	nop
 8005260:	e000      	b.n	8005264 <_HandleIncomingPacket+0xd4>
      break;
 8005262:	bf00      	nop
    }
  }
}
 8005264:	bf00      	nop
 8005266:	3708      	adds	r7, #8
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20014394 	.word	0x20014394

08005270 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005270:	b580      	push	{r7, lr}
 8005272:	b08c      	sub	sp, #48	; 0x30
 8005274:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005276:	2301      	movs	r3, #1
 8005278:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800527a:	1d3b      	adds	r3, r7, #4
 800527c:	3301      	adds	r3, #1
 800527e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005280:	69fb      	ldr	r3, [r7, #28]
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005284:	4b31      	ldr	r3, [pc, #196]	; (800534c <_TrySendOverflowPacket+0xdc>)
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	62bb      	str	r3, [r7, #40]	; 0x28
 800528a:	e00b      	b.n	80052a4 <_TrySendOverflowPacket+0x34>
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	b2da      	uxtb	r2, r3
 8005290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005292:	1c59      	adds	r1, r3, #1
 8005294:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800529a:	b2d2      	uxtb	r2, r2
 800529c:	701a      	strb	r2, [r3, #0]
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	09db      	lsrs	r3, r3, #7
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	2b7f      	cmp	r3, #127	; 0x7f
 80052a8:	d8f0      	bhi.n	800528c <_TrySendOverflowPacket+0x1c>
 80052aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ac:	1c5a      	adds	r2, r3, #1
 80052ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80052ba:	4b25      	ldr	r3, [pc, #148]	; (8005350 <_TrySendOverflowPacket+0xe0>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80052c0:	4b22      	ldr	r3, [pc, #136]	; (800534c <_TrySendOverflowPacket+0xdc>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	627b      	str	r3, [r7, #36]	; 0x24
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	623b      	str	r3, [r7, #32]
 80052d2:	e00b      	b.n	80052ec <_TrySendOverflowPacket+0x7c>
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	1c59      	adds	r1, r3, #1
 80052dc:	6279      	str	r1, [r7, #36]	; 0x24
 80052de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80052e2:	b2d2      	uxtb	r2, r2
 80052e4:	701a      	strb	r2, [r3, #0]
 80052e6:	6a3b      	ldr	r3, [r7, #32]
 80052e8:	09db      	lsrs	r3, r3, #7
 80052ea:	623b      	str	r3, [r7, #32]
 80052ec:	6a3b      	ldr	r3, [r7, #32]
 80052ee:	2b7f      	cmp	r3, #127	; 0x7f
 80052f0:	d8f0      	bhi.n	80052d4 <_TrySendOverflowPacket+0x64>
 80052f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	627a      	str	r2, [r7, #36]	; 0x24
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005302:	4b12      	ldr	r3, [pc, #72]	; (800534c <_TrySendOverflowPacket+0xdc>)
 8005304:	785b      	ldrb	r3, [r3, #1]
 8005306:	4618      	mov	r0, r3
 8005308:	1d3b      	adds	r3, r7, #4
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	461a      	mov	r2, r3
 8005310:	1d3b      	adds	r3, r7, #4
 8005312:	4619      	mov	r1, r3
 8005314:	f7fa ff5c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005318:	4603      	mov	r3, r0
 800531a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d009      	beq.n	8005336 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005322:	4a0a      	ldr	r2, [pc, #40]	; (800534c <_TrySendOverflowPacket+0xdc>)
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005328:	4b08      	ldr	r3, [pc, #32]	; (800534c <_TrySendOverflowPacket+0xdc>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	3b01      	subs	r3, #1
 800532e:	b2da      	uxtb	r2, r3
 8005330:	4b06      	ldr	r3, [pc, #24]	; (800534c <_TrySendOverflowPacket+0xdc>)
 8005332:	701a      	strb	r2, [r3, #0]
 8005334:	e004      	b.n	8005340 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005336:	4b05      	ldr	r3, [pc, #20]	; (800534c <_TrySendOverflowPacket+0xdc>)
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	3301      	adds	r3, #1
 800533c:	4a03      	ldr	r2, [pc, #12]	; (800534c <_TrySendOverflowPacket+0xdc>)
 800533e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005340:	693b      	ldr	r3, [r7, #16]
}
 8005342:	4618      	mov	r0, r3
 8005344:	3730      	adds	r7, #48	; 0x30
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20014394 	.word	0x20014394
 8005350:	e0001004 	.word	0xe0001004

08005354 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005354:	b580      	push	{r7, lr}
 8005356:	b08a      	sub	sp, #40	; 0x28
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005360:	4b6c      	ldr	r3, [pc, #432]	; (8005514 <_SendPacket+0x1c0>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	2b01      	cmp	r3, #1
 8005366:	d010      	beq.n	800538a <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005368:	4b6a      	ldr	r3, [pc, #424]	; (8005514 <_SendPacket+0x1c0>)
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	f000 80a3 	beq.w	80054b8 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005372:	4b68      	ldr	r3, [pc, #416]	; (8005514 <_SendPacket+0x1c0>)
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	2b02      	cmp	r3, #2
 8005378:	d109      	bne.n	800538e <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800537a:	f7ff ff79 	bl	8005270 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800537e:	4b65      	ldr	r3, [pc, #404]	; (8005514 <_SendPacket+0x1c0>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	f040 809a 	bne.w	80054bc <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005388:	e001      	b.n	800538e <_SendPacket+0x3a>
    goto Send;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <_SendPacket+0x3c>
Send:
 800538e:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b1f      	cmp	r3, #31
 8005394:	d809      	bhi.n	80053aa <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005396:	4b5f      	ldr	r3, [pc, #380]	; (8005514 <_SendPacket+0x1c0>)
 8005398:	69da      	ldr	r2, [r3, #28]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	fa22 f303 	lsr.w	r3, r2, r3
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f040 808b 	bne.w	80054c0 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b17      	cmp	r3, #23
 80053ae:	d807      	bhi.n	80053c0 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	60fb      	str	r3, [r7, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	b2da      	uxtb	r2, r3
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	e03d      	b.n	800543c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80053c0:	68ba      	ldr	r2, [r7, #8]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	1ad3      	subs	r3, r2, r3
 80053c6:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80053c8:	69fb      	ldr	r3, [r7, #28]
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d912      	bls.n	80053f4 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	09da      	lsrs	r2, r3, #7
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	60fb      	str	r3, [r7, #12]
 80053d8:	b2d2      	uxtb	r2, r2
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	3a01      	subs	r2, #1
 80053e6:	60fa      	str	r2, [r7, #12]
 80053e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e006      	b.n	8005402 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	3b01      	subs	r3, #1
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	69fb      	ldr	r3, [r7, #28]
 80053fc:	b2da      	uxtb	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b7f      	cmp	r3, #127	; 0x7f
 8005406:	d912      	bls.n	800542e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	09da      	lsrs	r2, r3, #7
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	3b01      	subs	r3, #1
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	b2db      	uxtb	r3, r3
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	3a01      	subs	r2, #1
 8005420:	60fa      	str	r2, [r7, #12]
 8005422:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005426:	b2da      	uxtb	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	701a      	strb	r2, [r3, #0]
 800542c:	e006      	b.n	800543c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	3b01      	subs	r3, #1
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	b2da      	uxtb	r2, r3
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800543c:	4b36      	ldr	r3, [pc, #216]	; (8005518 <_SendPacket+0x1c4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005442:	4b34      	ldr	r3, [pc, #208]	; (8005514 <_SendPacket+0x1c0>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	69ba      	ldr	r2, [r7, #24]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	623b      	str	r3, [r7, #32]
 8005454:	e00b      	b.n	800546e <_SendPacket+0x11a>
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	b2da      	uxtb	r2, r3
 800545a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545c:	1c59      	adds	r1, r3, #1
 800545e:	6279      	str	r1, [r7, #36]	; 0x24
 8005460:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005464:	b2d2      	uxtb	r2, r2
 8005466:	701a      	strb	r2, [r3, #0]
 8005468:	6a3b      	ldr	r3, [r7, #32]
 800546a:	09db      	lsrs	r3, r3, #7
 800546c:	623b      	str	r3, [r7, #32]
 800546e:	6a3b      	ldr	r3, [r7, #32]
 8005470:	2b7f      	cmp	r3, #127	; 0x7f
 8005472:	d8f0      	bhi.n	8005456 <_SendPacket+0x102>
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	627a      	str	r2, [r7, #36]	; 0x24
 800547a:	6a3a      	ldr	r2, [r7, #32]
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005484:	4b23      	ldr	r3, [pc, #140]	; (8005514 <_SendPacket+0x1c0>)
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	4618      	mov	r0, r3
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	461a      	mov	r2, r3
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	f7fa fe9c 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005498:	4603      	mov	r3, r0
 800549a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d003      	beq.n	80054aa <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <_SendPacket+0x1c0>)
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	60d3      	str	r3, [r2, #12]
 80054a8:	e00b      	b.n	80054c2 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80054aa:	4b1a      	ldr	r3, [pc, #104]	; (8005514 <_SendPacket+0x1c0>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	3301      	adds	r3, #1
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	4b18      	ldr	r3, [pc, #96]	; (8005514 <_SendPacket+0x1c0>)
 80054b4:	701a      	strb	r2, [r3, #0]
 80054b6:	e004      	b.n	80054c2 <_SendPacket+0x16e>
    goto SendDone;
 80054b8:	bf00      	nop
 80054ba:	e002      	b.n	80054c2 <_SendPacket+0x16e>
      goto SendDone;
 80054bc:	bf00      	nop
 80054be:	e000      	b.n	80054c2 <_SendPacket+0x16e>
      goto SendDone;
 80054c0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80054c2:	4b14      	ldr	r3, [pc, #80]	; (8005514 <_SendPacket+0x1c0>)
 80054c4:	7e1b      	ldrb	r3, [r3, #24]
 80054c6:	4619      	mov	r1, r3
 80054c8:	4a14      	ldr	r2, [pc, #80]	; (800551c <_SendPacket+0x1c8>)
 80054ca:	460b      	mov	r3, r1
 80054cc:	005b      	lsls	r3, r3, #1
 80054ce:	440b      	add	r3, r1
 80054d0:	00db      	lsls	r3, r3, #3
 80054d2:	4413      	add	r3, r2
 80054d4:	336c      	adds	r3, #108	; 0x6c
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	4b0e      	ldr	r3, [pc, #56]	; (8005514 <_SendPacket+0x1c0>)
 80054da:	7e1b      	ldrb	r3, [r3, #24]
 80054dc:	4618      	mov	r0, r3
 80054de:	490f      	ldr	r1, [pc, #60]	; (800551c <_SendPacket+0x1c8>)
 80054e0:	4603      	mov	r3, r0
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4403      	add	r3, r0
 80054e6:	00db      	lsls	r3, r3, #3
 80054e8:	440b      	add	r3, r1
 80054ea:	3370      	adds	r3, #112	; 0x70
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	429a      	cmp	r2, r3
 80054f0:	d00b      	beq.n	800550a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <_SendPacket+0x1c0>)
 80054f4:	789b      	ldrb	r3, [r3, #2]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d107      	bne.n	800550a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80054fa:	4b06      	ldr	r3, [pc, #24]	; (8005514 <_SendPacket+0x1c0>)
 80054fc:	2201      	movs	r2, #1
 80054fe:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005500:	f7ff fe46 	bl	8005190 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005504:	4b03      	ldr	r3, [pc, #12]	; (8005514 <_SendPacket+0x1c0>)
 8005506:	2200      	movs	r2, #0
 8005508:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800550a:	bf00      	nop
 800550c:	3728      	adds	r7, #40	; 0x28
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	20014394 	.word	0x20014394
 8005518:	e0001004 	.word	0xe0001004
 800551c:	20012ed4 	.word	0x20012ed4

08005520 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	3301      	adds	r3, #1
 8005536:	2b80      	cmp	r3, #128	; 0x80
 8005538:	d80a      	bhi.n	8005550 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	1c59      	adds	r1, r3, #1
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	6051      	str	r1, [r2, #4]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	1c5a      	adds	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b80      	cmp	r3, #128	; 0x80
 8005556:	d15a      	bne.n	800560e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	691a      	ldr	r2, [r3, #16]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	627b      	str	r3, [r7, #36]	; 0x24
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	623b      	str	r3, [r7, #32]
 8005578:	e00b      	b.n	8005592 <_StoreChar+0x72>
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	b2da      	uxtb	r2, r3
 800557e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005580:	1c59      	adds	r1, r3, #1
 8005582:	6279      	str	r1, [r7, #36]	; 0x24
 8005584:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005588:	b2d2      	uxtb	r2, r2
 800558a:	701a      	strb	r2, [r3, #0]
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	09db      	lsrs	r3, r3, #7
 8005590:	623b      	str	r3, [r7, #32]
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	2b7f      	cmp	r3, #127	; 0x7f
 8005596:	d8f0      	bhi.n	800557a <_StoreChar+0x5a>
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	1c5a      	adds	r2, r3, #1
 800559c:	627a      	str	r2, [r7, #36]	; 0x24
 800559e:	6a3a      	ldr	r2, [r7, #32]
 80055a0:	b2d2      	uxtb	r2, r2
 80055a2:	701a      	strb	r2, [r3, #0]
 80055a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a6:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	61fb      	str	r3, [r7, #28]
 80055ac:	2300      	movs	r3, #0
 80055ae:	61bb      	str	r3, [r7, #24]
 80055b0:	e00b      	b.n	80055ca <_StoreChar+0xaa>
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	1c59      	adds	r1, r3, #1
 80055ba:	61f9      	str	r1, [r7, #28]
 80055bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80055c0:	b2d2      	uxtb	r2, r2
 80055c2:	701a      	strb	r2, [r3, #0]
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	09db      	lsrs	r3, r3, #7
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	2b7f      	cmp	r3, #127	; 0x7f
 80055ce:	d8f0      	bhi.n	80055b2 <_StoreChar+0x92>
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	1c5a      	adds	r2, r3, #1
 80055d4:	61fa      	str	r2, [r7, #28]
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	b2d2      	uxtb	r2, r2
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	221a      	movs	r2, #26
 80055e6:	6939      	ldr	r1, [r7, #16]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f7ff feb3 	bl	8005354 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4618      	mov	r0, r3
 80055f4:	f7ff fdbf 	bl	8005176 <_PreparePacket>
 80055f8:	4602      	mov	r2, r0
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	611a      	str	r2, [r3, #16]
  }
}
 800560e:	bf00      	nop
 8005610:	3728      	adds	r7, #40	; 0x28
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
	...

08005618 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005618:	b580      	push	{r7, lr}
 800561a:	b08a      	sub	sp, #40	; 0x28
 800561c:	af00      	add	r7, sp, #0
 800561e:	60f8      	str	r0, [r7, #12]
 8005620:	60b9      	str	r1, [r7, #8]
 8005622:	607a      	str	r2, [r7, #4]
 8005624:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800562a:	2301      	movs	r3, #1
 800562c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 800562e:	2301      	movs	r3, #1
 8005630:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005632:	e007      	b.n	8005644 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005634:	6a3a      	ldr	r2, [r7, #32]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	623b      	str	r3, [r7, #32]
    Width++;
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3301      	adds	r3, #1
 8005642:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005644:	6a3a      	ldr	r2, [r7, #32]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	429a      	cmp	r2, r3
 800564a:	d2f3      	bcs.n	8005634 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	429a      	cmp	r2, r3
 8005652:	d901      	bls.n	8005658 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800565a:	f003 0301 	and.w	r3, r3, #1
 800565e:	2b00      	cmp	r3, #0
 8005660:	d11f      	bne.n	80056a2 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005664:	2b00      	cmp	r3, #0
 8005666:	d01c      	beq.n	80056a2 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d005      	beq.n	800567e <_PrintUnsigned+0x66>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d102      	bne.n	800567e <_PrintUnsigned+0x66>
        c = '0';
 8005678:	2330      	movs	r3, #48	; 0x30
 800567a:	76fb      	strb	r3, [r7, #27]
 800567c:	e001      	b.n	8005682 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 800567e:	2320      	movs	r3, #32
 8005680:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005682:	e007      	b.n	8005694 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005686:	3b01      	subs	r3, #1
 8005688:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 800568a:	7efb      	ldrb	r3, [r7, #27]
 800568c:	4619      	mov	r1, r3
 800568e:	68f8      	ldr	r0, [r7, #12]
 8005690:	f7ff ff46 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	2b00      	cmp	r3, #0
 8005698:	d003      	beq.n	80056a2 <_PrintUnsigned+0x8a>
 800569a:	69fa      	ldr	r2, [r7, #28]
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	429a      	cmp	r2, r3
 80056a0:	d3f0      	bcc.n	8005684 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d903      	bls.n	80056b0 <_PrintUnsigned+0x98>
      NumDigits--;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	3b01      	subs	r3, #1
 80056ac:	603b      	str	r3, [r7, #0]
 80056ae:	e009      	b.n	80056c4 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 80056b0:	68ba      	ldr	r2, [r7, #8]
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d200      	bcs.n	80056c4 <_PrintUnsigned+0xac>
        break;
 80056c2:	e005      	b.n	80056d0 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	fb02 f303 	mul.w	r3, r2, r3
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80056ce:	e7e8      	b.n	80056a2 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d8:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80056e8:	4a15      	ldr	r2, [pc, #84]	; (8005740 <_PrintUnsigned+0x128>)
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	4619      	mov	r1, r3
 80056f2:	68f8      	ldr	r0, [r7, #12]
 80056f4:	f7ff ff14 	bl	8005520 <_StoreChar>
    Digit /= Base;
 80056f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005700:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8005702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1e3      	bne.n	80056d0 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b00      	cmp	r3, #0
 8005710:	d011      	beq.n	8005736 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8005712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005714:	2b00      	cmp	r3, #0
 8005716:	d00e      	beq.n	8005736 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005718:	e006      	b.n	8005728 <_PrintUnsigned+0x110>
        FieldWidth--;
 800571a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571c:	3b01      	subs	r3, #1
 800571e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8005720:	2120      	movs	r1, #32
 8005722:	68f8      	ldr	r0, [r7, #12]
 8005724:	f7ff fefc 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572a:	2b00      	cmp	r3, #0
 800572c:	d003      	beq.n	8005736 <_PrintUnsigned+0x11e>
 800572e:	69fa      	ldr	r2, [r7, #28]
 8005730:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005732:	429a      	cmp	r2, r3
 8005734:	d3f1      	bcc.n	800571a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8005736:	bf00      	nop
 8005738:	3728      	adds	r7, #40	; 0x28
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}
 800573e:	bf00      	nop
 8005740:	08006e60 	.word	0x08006e60

08005744 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005744:	b580      	push	{r7, lr}
 8005746:	b088      	sub	sp, #32
 8005748:	af02      	add	r7, sp, #8
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	bfb8      	it	lt
 8005758:	425b      	neglt	r3, r3
 800575a:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005760:	e007      	b.n	8005772 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	693a      	ldr	r2, [r7, #16]
 8005766:	fb92 f3f3 	sdiv	r3, r2, r3
 800576a:	613b      	str	r3, [r7, #16]
    Width++;
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	693a      	ldr	r2, [r7, #16]
 8005776:	429a      	cmp	r2, r3
 8005778:	daf3      	bge.n	8005762 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	429a      	cmp	r2, r3
 8005780:	d901      	bls.n	8005786 <_PrintInt+0x42>
    Width = NumDigits;
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <_PrintInt+0x5e>
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	2b00      	cmp	r3, #0
 8005790:	db04      	blt.n	800579c <_PrintInt+0x58>
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	f003 0304 	and.w	r3, r3, #4
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <_PrintInt+0x5e>
    FieldWidth--;
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	3b01      	subs	r3, #1
 80057a0:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 80057a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a4:	f003 0302 	and.w	r3, r3, #2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <_PrintInt+0x6e>
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d016      	beq.n	80057e0 <_PrintInt+0x9c>
 80057b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b4:	f003 0301 	and.w	r3, r3, #1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d111      	bne.n	80057e0 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 80057bc:	6a3b      	ldr	r3, [r7, #32]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00e      	beq.n	80057e0 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057c2:	e006      	b.n	80057d2 <_PrintInt+0x8e>
        FieldWidth--;
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 80057ca:	2120      	movs	r1, #32
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f7ff fea7 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d003      	beq.n	80057e0 <_PrintInt+0x9c>
 80057d8:	697a      	ldr	r2, [r7, #20]
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d3f1      	bcc.n	80057c4 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	da07      	bge.n	80057f6 <_PrintInt+0xb2>
    v = -v;
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	425b      	negs	r3, r3
 80057ea:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 80057ec:	212d      	movs	r1, #45	; 0x2d
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff fe96 	bl	8005520 <_StoreChar>
 80057f4:	e008      	b.n	8005808 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005800:	212b      	movs	r1, #43	; 0x2b
 8005802:	68f8      	ldr	r0, [r7, #12]
 8005804:	f7ff fe8c 	bl	8005520 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580a:	f003 0302 	and.w	r3, r3, #2
 800580e:	2b00      	cmp	r3, #0
 8005810:	d019      	beq.n	8005846 <_PrintInt+0x102>
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	f003 0301 	and.w	r3, r3, #1
 8005818:	2b00      	cmp	r3, #0
 800581a:	d114      	bne.n	8005846 <_PrintInt+0x102>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d111      	bne.n	8005846 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005828:	e006      	b.n	8005838 <_PrintInt+0xf4>
        FieldWidth--;
 800582a:	6a3b      	ldr	r3, [r7, #32]
 800582c:	3b01      	subs	r3, #1
 800582e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005830:	2130      	movs	r1, #48	; 0x30
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff fe74 	bl	8005520 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d003      	beq.n	8005846 <_PrintInt+0x102>
 800583e:	697a      	ldr	r2, [r7, #20]
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	429a      	cmp	r2, r3
 8005844:	d3f1      	bcc.n	800582a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005846:	68b9      	ldr	r1, [r7, #8]
 8005848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584a:	9301      	str	r3, [sp, #4]
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	9300      	str	r3, [sp, #0]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f7ff fedf 	bl	8005618 <_PrintUnsigned>
}
 800585a:	bf00      	nop
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
	...

08005864 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005864:	b580      	push	{r7, lr}
 8005866:	b098      	sub	sp, #96	; 0x60
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005870:	f3ef 8311 	mrs	r3, BASEPRI
 8005874:	f04f 0120 	mov.w	r1, #32
 8005878:	f381 8811 	msr	BASEPRI, r1
 800587c:	633b      	str	r3, [r7, #48]	; 0x30
 800587e:	48b7      	ldr	r0, [pc, #732]	; (8005b5c <_VPrintTarget+0x2f8>)
 8005880:	f7ff fc79 	bl	8005176 <_PreparePacket>
 8005884:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005886:	4bb5      	ldr	r3, [pc, #724]	; (8005b5c <_VPrintTarget+0x2f8>)
 8005888:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 800588a:	2300      	movs	r3, #0
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800588e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005890:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	3301      	adds	r3, #1
 8005896:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	3301      	adds	r3, #1
 80058a8:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 80058aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	f000 8183 	beq.w	8005bba <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 80058b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058b8:	2b25      	cmp	r3, #37	; 0x25
 80058ba:	f040 8170 	bne.w	8005b9e <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 80058be:	2300      	movs	r3, #0
 80058c0:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 80058c2:	2301      	movs	r3, #1
 80058c4:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 80058ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80058d2:	3b23      	subs	r3, #35	; 0x23
 80058d4:	2b0d      	cmp	r3, #13
 80058d6:	d83f      	bhi.n	8005958 <_VPrintTarget+0xf4>
 80058d8:	a201      	add	r2, pc, #4	; (adr r2, 80058e0 <_VPrintTarget+0x7c>)
 80058da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058de:	bf00      	nop
 80058e0:	08005949 	.word	0x08005949
 80058e4:	08005959 	.word	0x08005959
 80058e8:	08005959 	.word	0x08005959
 80058ec:	08005959 	.word	0x08005959
 80058f0:	08005959 	.word	0x08005959
 80058f4:	08005959 	.word	0x08005959
 80058f8:	08005959 	.word	0x08005959
 80058fc:	08005959 	.word	0x08005959
 8005900:	08005939 	.word	0x08005939
 8005904:	08005959 	.word	0x08005959
 8005908:	08005919 	.word	0x08005919
 800590c:	08005959 	.word	0x08005959
 8005910:	08005959 	.word	0x08005959
 8005914:	08005929 	.word	0x08005929
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800591a:	f043 0301 	orr.w	r3, r3, #1
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3301      	adds	r3, #1
 8005924:	60fb      	str	r3, [r7, #12]
 8005926:	e01a      	b.n	800595e <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800592a:	f043 0302 	orr.w	r3, r3, #2
 800592e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	3301      	adds	r3, #1
 8005934:	60fb      	str	r3, [r7, #12]
 8005936:	e012      	b.n	800595e <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800593a:	f043 0304 	orr.w	r3, r3, #4
 800593e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	3301      	adds	r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e00a      	b.n	800595e <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594a:	f043 0308 	orr.w	r3, r3, #8
 800594e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	3301      	adds	r3, #1
 8005954:	60fb      	str	r3, [r7, #12]
 8005956:	e002      	b.n	800595e <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005958:	2300      	movs	r3, #0
 800595a:	653b      	str	r3, [r7, #80]	; 0x50
 800595c:	bf00      	nop
        }
      } while (v);
 800595e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1b0      	bne.n	80058c6 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005964:	2300      	movs	r3, #0
 8005966:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	781b      	ldrb	r3, [r3, #0]
 800596c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 8005970:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005974:	2b2f      	cmp	r3, #47	; 0x2f
 8005976:	d912      	bls.n	800599e <_VPrintTarget+0x13a>
 8005978:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800597c:	2b39      	cmp	r3, #57	; 0x39
 800597e:	d80e      	bhi.n	800599e <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005986:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	005b      	lsls	r3, r3, #1
 8005990:	461a      	mov	r2, r3
 8005992:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005996:	4413      	add	r3, r2
 8005998:	3b30      	subs	r3, #48	; 0x30
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 800599c:	e7e4      	b.n	8005968 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800599e:	2300      	movs	r3, #0
 80059a0:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 80059aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059ae:	2b2e      	cmp	r3, #46	; 0x2e
 80059b0:	d11d      	bne.n	80059ee <_VPrintTarget+0x18a>
        sFormat++;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	3301      	adds	r3, #1
 80059b6:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 80059c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c4:	2b2f      	cmp	r3, #47	; 0x2f
 80059c6:	d912      	bls.n	80059ee <_VPrintTarget+0x18a>
 80059c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059cc:	2b39      	cmp	r3, #57	; 0x39
 80059ce:	d80e      	bhi.n	80059ee <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	3301      	adds	r3, #1
 80059d4:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 80059d6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80059d8:	4613      	mov	r3, r2
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	4413      	add	r3, r2
 80059de:	005b      	lsls	r3, r3, #1
 80059e0:	461a      	mov	r2, r3
 80059e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059e6:	4413      	add	r3, r2
 80059e8:	3b30      	subs	r3, #48	; 0x30
 80059ea:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 80059ec:	e7e4      	b.n	80059b8 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 80059f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059fa:	2b6c      	cmp	r3, #108	; 0x6c
 80059fc:	d003      	beq.n	8005a06 <_VPrintTarget+0x1a2>
 80059fe:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a02:	2b68      	cmp	r3, #104	; 0x68
 8005a04:	d107      	bne.n	8005a16 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	3301      	adds	r3, #1
 8005a12:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005a14:	e7ef      	b.n	80059f6 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005a16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005a1a:	2b25      	cmp	r3, #37	; 0x25
 8005a1c:	f000 80b3 	beq.w	8005b86 <_VPrintTarget+0x322>
 8005a20:	2b25      	cmp	r3, #37	; 0x25
 8005a22:	f2c0 80b7 	blt.w	8005b94 <_VPrintTarget+0x330>
 8005a26:	2b78      	cmp	r3, #120	; 0x78
 8005a28:	f300 80b4 	bgt.w	8005b94 <_VPrintTarget+0x330>
 8005a2c:	2b58      	cmp	r3, #88	; 0x58
 8005a2e:	f2c0 80b1 	blt.w	8005b94 <_VPrintTarget+0x330>
 8005a32:	3b58      	subs	r3, #88	; 0x58
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	f200 80ad 	bhi.w	8005b94 <_VPrintTarget+0x330>
 8005a3a:	a201      	add	r2, pc, #4	; (adr r2, 8005a40 <_VPrintTarget+0x1dc>)
 8005a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a40:	08005b37 	.word	0x08005b37
 8005a44:	08005b95 	.word	0x08005b95
 8005a48:	08005b95 	.word	0x08005b95
 8005a4c:	08005b95 	.word	0x08005b95
 8005a50:	08005b95 	.word	0x08005b95
 8005a54:	08005b95 	.word	0x08005b95
 8005a58:	08005b95 	.word	0x08005b95
 8005a5c:	08005b95 	.word	0x08005b95
 8005a60:	08005b95 	.word	0x08005b95
 8005a64:	08005b95 	.word	0x08005b95
 8005a68:	08005b95 	.word	0x08005b95
 8005a6c:	08005ac5 	.word	0x08005ac5
 8005a70:	08005aeb 	.word	0x08005aeb
 8005a74:	08005b95 	.word	0x08005b95
 8005a78:	08005b95 	.word	0x08005b95
 8005a7c:	08005b95 	.word	0x08005b95
 8005a80:	08005b95 	.word	0x08005b95
 8005a84:	08005b95 	.word	0x08005b95
 8005a88:	08005b95 	.word	0x08005b95
 8005a8c:	08005b95 	.word	0x08005b95
 8005a90:	08005b95 	.word	0x08005b95
 8005a94:	08005b95 	.word	0x08005b95
 8005a98:	08005b95 	.word	0x08005b95
 8005a9c:	08005b95 	.word	0x08005b95
 8005aa0:	08005b61 	.word	0x08005b61
 8005aa4:	08005b95 	.word	0x08005b95
 8005aa8:	08005b95 	.word	0x08005b95
 8005aac:	08005b95 	.word	0x08005b95
 8005ab0:	08005b95 	.word	0x08005b95
 8005ab4:	08005b11 	.word	0x08005b11
 8005ab8:	08005b95 	.word	0x08005b95
 8005abc:	08005b95 	.word	0x08005b95
 8005ac0:	08005b37 	.word	0x08005b37
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	1d19      	adds	r1, r3, #4
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6011      	str	r1, [r2, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8005ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8005ad8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005adc:	f107 0314 	add.w	r3, r7, #20
 8005ae0:	4611      	mov	r1, r2
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f7ff fd1c 	bl	8005520 <_StoreChar>
        break;
 8005ae8:	e055      	b.n	8005b96 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	1d19      	adds	r1, r3, #4
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6011      	str	r1, [r2, #0]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005af8:	f107 0014 	add.w	r0, r7, #20
 8005afc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afe:	9301      	str	r3, [sp, #4]
 8005b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b02:	9300      	str	r3, [sp, #0]
 8005b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b06:	220a      	movs	r2, #10
 8005b08:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b0a:	f7ff fe1b 	bl	8005744 <_PrintInt>
        break;
 8005b0e:	e042      	b.n	8005b96 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	1d19      	adds	r1, r3, #4
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	6011      	str	r1, [r2, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005b1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b20:	f107 0014 	add.w	r0, r7, #20
 8005b24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b26:	9301      	str	r3, [sp, #4]
 8005b28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b2e:	220a      	movs	r2, #10
 8005b30:	f7ff fd72 	bl	8005618 <_PrintUnsigned>
        break;
 8005b34:	e02f      	b.n	8005b96 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	1d19      	adds	r1, r3, #4
 8005b3c:	687a      	ldr	r2, [r7, #4]
 8005b3e:	6011      	str	r1, [r2, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005b44:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b46:	f107 0014 	add.w	r0, r7, #20
 8005b4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b4c:	9301      	str	r3, [sp, #4]
 8005b4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b54:	2210      	movs	r2, #16
 8005b56:	f7ff fd5f 	bl	8005618 <_PrintUnsigned>
        break;
 8005b5a:	e01c      	b.n	8005b96 <_VPrintTarget+0x332>
 8005b5c:	200143c4 	.word	0x200143c4
      case 'p':
        v = va_arg(*pParamList, int);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	1d19      	adds	r1, r3, #4
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6011      	str	r1, [r2, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005b6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005b70:	f107 0014 	add.w	r0, r7, #20
 8005b74:	2300      	movs	r3, #0
 8005b76:	9301      	str	r3, [sp, #4]
 8005b78:	2308      	movs	r3, #8
 8005b7a:	9300      	str	r3, [sp, #0]
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	2210      	movs	r2, #16
 8005b80:	f7ff fd4a 	bl	8005618 <_PrintUnsigned>
        break;
 8005b84:	e007      	b.n	8005b96 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005b86:	f107 0314 	add.w	r3, r7, #20
 8005b8a:	2125      	movs	r1, #37	; 0x25
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff fcc7 	bl	8005520 <_StoreChar>
        break;
 8005b92:	e000      	b.n	8005b96 <_VPrintTarget+0x332>
      default:
        break;
 8005b94:	bf00      	nop
      }
      sFormat++;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e007      	b.n	8005bae <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005b9e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005ba2:	f107 0314 	add.w	r3, r7, #20
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fcb9 	bl	8005520 <_StoreChar>
    }
  } while (*sFormat);
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f47f ae72 	bne.w	800589c <_VPrintTarget+0x38>
 8005bb8:	e000      	b.n	8005bbc <_VPrintTarget+0x358>
      break;
 8005bba:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d041      	beq.n	8005c46 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	b2d2      	uxtb	r2, r2
 8005bc8:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bce:	6a3b      	ldr	r3, [r7, #32]
 8005bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bd2:	e00b      	b.n	8005bec <_VPrintTarget+0x388>
 8005bd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bd6:	b2da      	uxtb	r2, r3
 8005bd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	6439      	str	r1, [r7, #64]	; 0x40
 8005bde:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]
 8005be6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005be8:	09db      	lsrs	r3, r3, #7
 8005bea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bee:	2b7f      	cmp	r3, #127	; 0x7f
 8005bf0:	d8f0      	bhi.n	8005bd4 <_VPrintTarget+0x370>
 8005bf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	643a      	str	r2, [r7, #64]	; 0x40
 8005bf8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c00:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c06:	2300      	movs	r3, #0
 8005c08:	637b      	str	r3, [r7, #52]	; 0x34
 8005c0a:	e00b      	b.n	8005c24 <_VPrintTarget+0x3c0>
 8005c0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c0e:	b2da      	uxtb	r2, r3
 8005c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c12:	1c59      	adds	r1, r3, #1
 8005c14:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c16:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	09db      	lsrs	r3, r3, #7
 8005c22:	637b      	str	r3, [r7, #52]	; 0x34
 8005c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c26:	2b7f      	cmp	r3, #127	; 0x7f
 8005c28:	d8f0      	bhi.n	8005c0c <_VPrintTarget+0x3a8>
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	1c5a      	adds	r2, r3, #1
 8005c2e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c32:	b2d2      	uxtb	r2, r2
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c38:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	69b9      	ldr	r1, [r7, #24]
 8005c3e:	221a      	movs	r2, #26
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff fb87 	bl	8005354 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c48:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005c4c:	bf00      	nop
 8005c4e:	3758      	adds	r7, #88	; 0x58
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b086      	sub	sp, #24
 8005c58:	af02      	add	r7, sp, #8
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c62:	2300      	movs	r3, #0
 8005c64:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005c68:	4917      	ldr	r1, [pc, #92]	; (8005cc8 <SEGGER_SYSVIEW_Init+0x74>)
 8005c6a:	4818      	ldr	r0, [pc, #96]	; (8005ccc <SEGGER_SYSVIEW_Init+0x78>)
 8005c6c:	f7ff f942 	bl	8004ef4 <SEGGER_RTT_AllocUpBuffer>
 8005c70:	4603      	mov	r3, r0
 8005c72:	b2da      	uxtb	r2, r3
 8005c74:	4b16      	ldr	r3, [pc, #88]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c76:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005c78:	4b15      	ldr	r3, [pc, #84]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c7a:	785a      	ldrb	r2, [r3, #1]
 8005c7c:	4b14      	ldr	r3, [pc, #80]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c7e:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005c80:	4b13      	ldr	r3, [pc, #76]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c82:	7e1b      	ldrb	r3, [r3, #24]
 8005c84:	4618      	mov	r0, r3
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	2308      	movs	r3, #8
 8005c8c:	4a11      	ldr	r2, [pc, #68]	; (8005cd4 <SEGGER_SYSVIEW_Init+0x80>)
 8005c8e:	490f      	ldr	r1, [pc, #60]	; (8005ccc <SEGGER_SYSVIEW_Init+0x78>)
 8005c90:	f7ff f9b4 	bl	8004ffc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005c94:	4b0e      	ldr	r3, [pc, #56]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005c96:	2200      	movs	r2, #0
 8005c98:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c9a:	4b0f      	ldr	r3, [pc, #60]	; (8005cd8 <SEGGER_SYSVIEW_Init+0x84>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a0c      	ldr	r2, [pc, #48]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ca0:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005ca2:	4a0b      	ldr	r2, [pc, #44]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005ca8:	4a09      	ldr	r2, [pc, #36]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005cae:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005cb4:	4a06      	ldr	r2, [pc, #24]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <SEGGER_SYSVIEW_Init+0x7c>)
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005cc0:	bf00      	nop
 8005cc2:	3710      	adds	r7, #16
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bd80      	pop	{r7, pc}
 8005cc8:	2001338c 	.word	0x2001338c
 8005ccc:	08006ddc 	.word	0x08006ddc
 8005cd0:	20014394 	.word	0x20014394
 8005cd4:	2001438c 	.word	0x2001438c
 8005cd8:	e0001004 	.word	0xe0001004

08005cdc <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ce4:	4a04      	ldr	r2, [pc, #16]	; (8005cf8 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6113      	str	r3, [r2, #16]
}
 8005cea:	bf00      	nop
 8005cec:	370c      	adds	r7, #12
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	20014394 	.word	0x20014394

08005cfc <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d04:	f3ef 8311 	mrs	r3, BASEPRI
 8005d08:	f04f 0120 	mov.w	r1, #32
 8005d0c:	f381 8811 	msr	BASEPRI, r1
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	4808      	ldr	r0, [pc, #32]	; (8005d34 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005d14:	f7ff fa2f 	bl	8005176 <_PreparePacket>
 8005d18:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005d1a:	687a      	ldr	r2, [r7, #4]
 8005d1c:	68b9      	ldr	r1, [r7, #8]
 8005d1e:	68b8      	ldr	r0, [r7, #8]
 8005d20:	f7ff fb18 	bl	8005354 <_SendPacket>
  RECORD_END();
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f383 8811 	msr	BASEPRI, r3
}
 8005d2a:	bf00      	nop
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	bf00      	nop
 8005d34:	200143c4 	.word	0x200143c4

08005d38 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b088      	sub	sp, #32
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005d42:	f3ef 8311 	mrs	r3, BASEPRI
 8005d46:	f04f 0120 	mov.w	r1, #32
 8005d4a:	f381 8811 	msr	BASEPRI, r1
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	4816      	ldr	r0, [pc, #88]	; (8005dac <SEGGER_SYSVIEW_RecordU32+0x74>)
 8005d52:	f7ff fa10 	bl	8005176 <_PreparePacket>
 8005d56:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	61fb      	str	r3, [r7, #28]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	61bb      	str	r3, [r7, #24]
 8005d64:	e00b      	b.n	8005d7e <SEGGER_SYSVIEW_RecordU32+0x46>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	b2da      	uxtb	r2, r3
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	1c59      	adds	r1, r3, #1
 8005d6e:	61f9      	str	r1, [r7, #28]
 8005d70:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d74:	b2d2      	uxtb	r2, r2
 8005d76:	701a      	strb	r2, [r3, #0]
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	09db      	lsrs	r3, r3, #7
 8005d7c:	61bb      	str	r3, [r7, #24]
 8005d7e:	69bb      	ldr	r3, [r7, #24]
 8005d80:	2b7f      	cmp	r3, #127	; 0x7f
 8005d82:	d8f0      	bhi.n	8005d66 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	61fa      	str	r2, [r7, #28]
 8005d8a:	69ba      	ldr	r2, [r7, #24]
 8005d8c:	b2d2      	uxtb	r2, r2
 8005d8e:	701a      	strb	r2, [r3, #0]
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	68f9      	ldr	r1, [r7, #12]
 8005d98:	6938      	ldr	r0, [r7, #16]
 8005d9a:	f7ff fadb 	bl	8005354 <_SendPacket>
  RECORD_END();
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f383 8811 	msr	BASEPRI, r3
}
 8005da4:	bf00      	nop
 8005da6:	3720      	adds	r7, #32
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	200143c4 	.word	0x200143c4

08005db0 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	; 0x30
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	60f8      	str	r0, [r7, #12]
 8005db8:	60b9      	str	r1, [r7, #8]
 8005dba:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005dbc:	f3ef 8311 	mrs	r3, BASEPRI
 8005dc0:	f04f 0120 	mov.w	r1, #32
 8005dc4:	f381 8811 	msr	BASEPRI, r1
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	4825      	ldr	r0, [pc, #148]	; (8005e60 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005dcc:	f7ff f9d3 	bl	8005176 <_PreparePacket>
 8005dd0:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dde:	e00b      	b.n	8005df8 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8005de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005de2:	b2da      	uxtb	r2, r3
 8005de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005de6:	1c59      	adds	r1, r3, #1
 8005de8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005dea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	09db      	lsrs	r3, r3, #7
 8005df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	2b7f      	cmp	r3, #127	; 0x7f
 8005dfc:	d8f0      	bhi.n	8005de0 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8005dfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]
 8005e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e0c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	627b      	str	r3, [r7, #36]	; 0x24
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	623b      	str	r3, [r7, #32]
 8005e16:	e00b      	b.n	8005e30 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005e18:	6a3b      	ldr	r3, [r7, #32]
 8005e1a:	b2da      	uxtb	r2, r3
 8005e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1e:	1c59      	adds	r1, r3, #1
 8005e20:	6279      	str	r1, [r7, #36]	; 0x24
 8005e22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	6a3b      	ldr	r3, [r7, #32]
 8005e2c:	09db      	lsrs	r3, r3, #7
 8005e2e:	623b      	str	r3, [r7, #32]
 8005e30:	6a3b      	ldr	r3, [r7, #32]
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	d8f0      	bhi.n	8005e18 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	1c5a      	adds	r2, r3, #1
 8005e3a:	627a      	str	r2, [r7, #36]	; 0x24
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	b2d2      	uxtb	r2, r2
 8005e40:	701a      	strb	r2, [r3, #0]
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	6979      	ldr	r1, [r7, #20]
 8005e4a:	69b8      	ldr	r0, [r7, #24]
 8005e4c:	f7ff fa82 	bl	8005354 <_SendPacket>
  RECORD_END();
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	f383 8811 	msr	BASEPRI, r3
}
 8005e56:	bf00      	nop
 8005e58:	3730      	adds	r7, #48	; 0x30
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200143c4 	.word	0x200143c4

08005e64 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08e      	sub	sp, #56	; 0x38
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
 8005e70:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8005e72:	f3ef 8311 	mrs	r3, BASEPRI
 8005e76:	f04f 0120 	mov.w	r1, #32
 8005e7a:	f381 8811 	msr	BASEPRI, r1
 8005e7e:	61fb      	str	r3, [r7, #28]
 8005e80:	4832      	ldr	r0, [pc, #200]	; (8005f4c <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8005e82:	f7ff f978 	bl	8005176 <_PreparePacket>
 8005e86:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	633b      	str	r3, [r7, #48]	; 0x30
 8005e94:	e00b      	b.n	8005eae <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	b2da      	uxtb	r2, r3
 8005e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e9c:	1c59      	adds	r1, r3, #1
 8005e9e:	6379      	str	r1, [r7, #52]	; 0x34
 8005ea0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ea4:	b2d2      	uxtb	r2, r2
 8005ea6:	701a      	strb	r2, [r3, #0]
 8005ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eaa:	09db      	lsrs	r3, r3, #7
 8005eac:	633b      	str	r3, [r7, #48]	; 0x30
 8005eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eb0:	2b7f      	cmp	r3, #127	; 0x7f
 8005eb2:	d8f0      	bhi.n	8005e96 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eb6:	1c5a      	adds	r2, r3, #1
 8005eb8:	637a      	str	r2, [r7, #52]	; 0x34
 8005eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
 8005ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ecc:	e00b      	b.n	8005ee6 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed0:	b2da      	uxtb	r2, r3
 8005ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ed4:	1c59      	adds	r1, r3, #1
 8005ed6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ed8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005edc:	b2d2      	uxtb	r2, r2
 8005ede:	701a      	strb	r2, [r3, #0]
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eea:	d8f0      	bhi.n	8005ece <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	701a      	strb	r2, [r3, #0]
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	627b      	str	r3, [r7, #36]	; 0x24
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	623b      	str	r3, [r7, #32]
 8005f04:	e00b      	b.n	8005f1e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f0c:	1c59      	adds	r1, r3, #1
 8005f0e:	6279      	str	r1, [r7, #36]	; 0x24
 8005f10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]
 8005f18:	6a3b      	ldr	r3, [r7, #32]
 8005f1a:	09db      	lsrs	r3, r3, #7
 8005f1c:	623b      	str	r3, [r7, #32]
 8005f1e:	6a3b      	ldr	r3, [r7, #32]
 8005f20:	2b7f      	cmp	r3, #127	; 0x7f
 8005f22:	d8f0      	bhi.n	8005f06 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f26:	1c5a      	adds	r2, r3, #1
 8005f28:	627a      	str	r2, [r7, #36]	; 0x24
 8005f2a:	6a3a      	ldr	r2, [r7, #32]
 8005f2c:	b2d2      	uxtb	r2, r2
 8005f2e:	701a      	strb	r2, [r3, #0]
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	6979      	ldr	r1, [r7, #20]
 8005f38:	69b8      	ldr	r0, [r7, #24]
 8005f3a:	f7ff fa0b 	bl	8005354 <_SendPacket>
  RECORD_END();
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f383 8811 	msr	BASEPRI, r3
}
 8005f44:	bf00      	nop
 8005f46:	3738      	adds	r7, #56	; 0x38
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	200143c4 	.word	0x200143c4

08005f50 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b090      	sub	sp, #64	; 0x40
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005f5e:	f3ef 8311 	mrs	r3, BASEPRI
 8005f62:	f04f 0120 	mov.w	r1, #32
 8005f66:	f381 8811 	msr	BASEPRI, r1
 8005f6a:	61fb      	str	r3, [r7, #28]
 8005f6c:	4840      	ldr	r0, [pc, #256]	; (8006070 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005f6e:	f7ff f902 	bl	8005176 <_PreparePacket>
 8005f72:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f80:	e00b      	b.n	8005f9a <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f88:	1c59      	adds	r1, r3, #1
 8005f8a:	63f9      	str	r1, [r7, #60]	; 0x3c
 8005f8c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f90:	b2d2      	uxtb	r2, r2
 8005f92:	701a      	strb	r2, [r3, #0]
 8005f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f96:	09db      	lsrs	r3, r3, #7
 8005f98:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f9c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f9e:	d8f0      	bhi.n	8005f82 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005fa0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fa8:	b2d2      	uxtb	r2, r2
 8005faa:	701a      	strb	r2, [r3, #0]
 8005fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	637b      	str	r3, [r7, #52]	; 0x34
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	633b      	str	r3, [r7, #48]	; 0x30
 8005fb8:	e00b      	b.n	8005fd2 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fc0:	1c59      	adds	r1, r3, #1
 8005fc2:	6379      	str	r1, [r7, #52]	; 0x34
 8005fc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fce:	09db      	lsrs	r3, r3, #7
 8005fd0:	633b      	str	r3, [r7, #48]	; 0x30
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd6:	d8f0      	bhi.n	8005fba <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	1c5a      	adds	r2, r3, #1
 8005fdc:	637a      	str	r2, [r7, #52]	; 0x34
 8005fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]
 8005fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fe6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff0:	e00b      	b.n	800600a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff8:	1c59      	adds	r1, r3, #1
 8005ffa:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005ffc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006000:	b2d2      	uxtb	r2, r2
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006006:	09db      	lsrs	r3, r3, #7
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b7f      	cmp	r3, #127	; 0x7f
 800600e:	d8f0      	bhi.n	8005ff2 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006016:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]
 800601c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800601e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
 8006024:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006026:	623b      	str	r3, [r7, #32]
 8006028:	e00b      	b.n	8006042 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800602a:	6a3b      	ldr	r3, [r7, #32]
 800602c:	b2da      	uxtb	r2, r3
 800602e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006030:	1c59      	adds	r1, r3, #1
 8006032:	6279      	str	r1, [r7, #36]	; 0x24
 8006034:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006038:	b2d2      	uxtb	r2, r2
 800603a:	701a      	strb	r2, [r3, #0]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	09db      	lsrs	r3, r3, #7
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	2b7f      	cmp	r3, #127	; 0x7f
 8006046:	d8f0      	bhi.n	800602a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	627a      	str	r2, [r7, #36]	; 0x24
 800604e:	6a3a      	ldr	r2, [r7, #32]
 8006050:	b2d2      	uxtb	r2, r2
 8006052:	701a      	strb	r2, [r3, #0]
 8006054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006056:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	6979      	ldr	r1, [r7, #20]
 800605c:	69b8      	ldr	r0, [r7, #24]
 800605e:	f7ff f979 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006062:	69fb      	ldr	r3, [r7, #28]
 8006064:	f383 8811 	msr	BASEPRI, r3
}
 8006068:	bf00      	nop
 800606a:	3740      	adds	r7, #64	; 0x40
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	200143c4 	.word	0x200143c4

08006074 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006074:	b580      	push	{r7, lr}
 8006076:	b08c      	sub	sp, #48	; 0x30
 8006078:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800607a:	4b58      	ldr	r3, [pc, #352]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006080:	f3ef 8311 	mrs	r3, BASEPRI
 8006084:	f04f 0120 	mov.w	r1, #32
 8006088:	f381 8811 	msr	BASEPRI, r1
 800608c:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800608e:	4b53      	ldr	r3, [pc, #332]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 8006090:	785b      	ldrb	r3, [r3, #1]
 8006092:	220a      	movs	r2, #10
 8006094:	4952      	ldr	r1, [pc, #328]	; (80061e0 <SEGGER_SYSVIEW_Start+0x16c>)
 8006096:	4618      	mov	r0, r3
 8006098:	f7fa f89a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80060a2:	200a      	movs	r0, #10
 80060a4:	f7ff fe2a 	bl	8005cfc <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80060a8:	f3ef 8311 	mrs	r3, BASEPRI
 80060ac:	f04f 0120 	mov.w	r1, #32
 80060b0:	f381 8811 	msr	BASEPRI, r1
 80060b4:	60bb      	str	r3, [r7, #8]
 80060b6:	484b      	ldr	r0, [pc, #300]	; (80061e4 <SEGGER_SYSVIEW_Start+0x170>)
 80060b8:	f7ff f85d 	bl	8005176 <_PreparePacket>
 80060bc:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060c6:	4b45      	ldr	r3, [pc, #276]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80060cc:	e00b      	b.n	80060e6 <SEGGER_SYSVIEW_Start+0x72>
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060d4:	1c59      	adds	r1, r3, #1
 80060d6:	62f9      	str	r1, [r7, #44]	; 0x2c
 80060d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80060dc:	b2d2      	uxtb	r2, r2
 80060de:	701a      	strb	r2, [r3, #0]
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	09db      	lsrs	r3, r3, #7
 80060e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e8:	2b7f      	cmp	r3, #127	; 0x7f
 80060ea:	d8f0      	bhi.n	80060ce <SEGGER_SYSVIEW_Start+0x5a>
 80060ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ee:	1c5a      	adds	r2, r3, #1
 80060f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80060f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f4:	b2d2      	uxtb	r2, r2
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060fa:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006100:	4b36      	ldr	r3, [pc, #216]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	623b      	str	r3, [r7, #32]
 8006106:	e00b      	b.n	8006120 <SEGGER_SYSVIEW_Start+0xac>
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	b2da      	uxtb	r2, r3
 800610c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610e:	1c59      	adds	r1, r3, #1
 8006110:	6279      	str	r1, [r7, #36]	; 0x24
 8006112:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	6a3b      	ldr	r3, [r7, #32]
 800611c:	09db      	lsrs	r3, r3, #7
 800611e:	623b      	str	r3, [r7, #32]
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	2b7f      	cmp	r3, #127	; 0x7f
 8006124:	d8f0      	bhi.n	8006108 <SEGGER_SYSVIEW_Start+0x94>
 8006126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	627a      	str	r2, [r7, #36]	; 0x24
 800612c:	6a3a      	ldr	r2, [r7, #32]
 800612e:	b2d2      	uxtb	r2, r2
 8006130:	701a      	strb	r2, [r3, #0]
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	61fb      	str	r3, [r7, #28]
 800613a:	4b28      	ldr	r3, [pc, #160]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	61bb      	str	r3, [r7, #24]
 8006140:	e00b      	b.n	800615a <SEGGER_SYSVIEW_Start+0xe6>
 8006142:	69bb      	ldr	r3, [r7, #24]
 8006144:	b2da      	uxtb	r2, r3
 8006146:	69fb      	ldr	r3, [r7, #28]
 8006148:	1c59      	adds	r1, r3, #1
 800614a:	61f9      	str	r1, [r7, #28]
 800614c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	69bb      	ldr	r3, [r7, #24]
 8006156:	09db      	lsrs	r3, r3, #7
 8006158:	61bb      	str	r3, [r7, #24]
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b7f      	cmp	r3, #127	; 0x7f
 800615e:	d8f0      	bhi.n	8006142 <SEGGER_SYSVIEW_Start+0xce>
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	61fa      	str	r2, [r7, #28]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	2300      	movs	r3, #0
 8006176:	613b      	str	r3, [r7, #16]
 8006178:	e00b      	b.n	8006192 <SEGGER_SYSVIEW_Start+0x11e>
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	6179      	str	r1, [r7, #20]
 8006184:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	09db      	lsrs	r3, r3, #7
 8006190:	613b      	str	r3, [r7, #16]
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	2b7f      	cmp	r3, #127	; 0x7f
 8006196:	d8f0      	bhi.n	800617a <SEGGER_SYSVIEW_Start+0x106>
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	1c5a      	adds	r2, r3, #1
 800619c:	617a      	str	r2, [r7, #20]
 800619e:	693a      	ldr	r2, [r7, #16]
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80061a8:	2218      	movs	r2, #24
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f7ff f8d1 	bl	8005354 <_SendPacket>
      RECORD_END();
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80061b8:	4b08      	ldr	r3, [pc, #32]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 80061ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <SEGGER_SYSVIEW_Start+0x168>)
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80061c6:	f000 f9eb 	bl	80065a0 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80061ca:	f000 f9b1 	bl	8006530 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80061ce:	f000 fc23 	bl	8006a18 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80061d2:	bf00      	nop
 80061d4:	3730      	adds	r7, #48	; 0x30
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
 80061da:	bf00      	nop
 80061dc:	20014394 	.word	0x20014394
 80061e0:	08006e54 	.word	0x08006e54
 80061e4:	200143c4 	.word	0x200143c4

080061e8 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b082      	sub	sp, #8
 80061ec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80061ee:	f3ef 8311 	mrs	r3, BASEPRI
 80061f2:	f04f 0120 	mov.w	r1, #32
 80061f6:	f381 8811 	msr	BASEPRI, r1
 80061fa:	607b      	str	r3, [r7, #4]
 80061fc:	480b      	ldr	r0, [pc, #44]	; (800622c <SEGGER_SYSVIEW_Stop+0x44>)
 80061fe:	f7fe ffba 	bl	8005176 <_PreparePacket>
 8006202:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006204:	4b0a      	ldr	r3, [pc, #40]	; (8006230 <SEGGER_SYSVIEW_Stop+0x48>)
 8006206:	781b      	ldrb	r3, [r3, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d007      	beq.n	800621c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800620c:	220b      	movs	r2, #11
 800620e:	6839      	ldr	r1, [r7, #0]
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	f7ff f89f 	bl	8005354 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006216:	4b06      	ldr	r3, [pc, #24]	; (8006230 <SEGGER_SYSVIEW_Stop+0x48>)
 8006218:	2200      	movs	r2, #0
 800621a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f383 8811 	msr	BASEPRI, r3
}
 8006222:	bf00      	nop
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	200143c4 	.word	0x200143c4
 8006230:	20014394 	.word	0x20014394

08006234 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006234:	b580      	push	{r7, lr}
 8006236:	b08c      	sub	sp, #48	; 0x30
 8006238:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800623a:	f3ef 8311 	mrs	r3, BASEPRI
 800623e:	f04f 0120 	mov.w	r1, #32
 8006242:	f381 8811 	msr	BASEPRI, r1
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	4845      	ldr	r0, [pc, #276]	; (8006360 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800624a:	f7fe ff94 	bl	8005176 <_PreparePacket>
 800624e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006258:	4b42      	ldr	r3, [pc, #264]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
 800625e:	e00b      	b.n	8006278 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006262:	b2da      	uxtb	r2, r3
 8006264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	62f9      	str	r1, [r7, #44]	; 0x2c
 800626a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
 8006272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006274:	09db      	lsrs	r3, r3, #7
 8006276:	62bb      	str	r3, [r7, #40]	; 0x28
 8006278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627a:	2b7f      	cmp	r3, #127	; 0x7f
 800627c:	d8f0      	bhi.n	8006260 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	1c5a      	adds	r2, r3, #1
 8006282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
 800628a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	627b      	str	r3, [r7, #36]	; 0x24
 8006292:	4b34      	ldr	r3, [pc, #208]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	623b      	str	r3, [r7, #32]
 8006298:	e00b      	b.n	80062b2 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800629a:	6a3b      	ldr	r3, [r7, #32]
 800629c:	b2da      	uxtb	r2, r3
 800629e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a0:	1c59      	adds	r1, r3, #1
 80062a2:	6279      	str	r1, [r7, #36]	; 0x24
 80062a4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062a8:	b2d2      	uxtb	r2, r2
 80062aa:	701a      	strb	r2, [r3, #0]
 80062ac:	6a3b      	ldr	r3, [r7, #32]
 80062ae:	09db      	lsrs	r3, r3, #7
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	2b7f      	cmp	r3, #127	; 0x7f
 80062b6:	d8f0      	bhi.n	800629a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ba:	1c5a      	adds	r2, r3, #1
 80062bc:	627a      	str	r2, [r7, #36]	; 0x24
 80062be:	6a3a      	ldr	r2, [r7, #32]
 80062c0:	b2d2      	uxtb	r2, r2
 80062c2:	701a      	strb	r2, [r3, #0]
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	4b25      	ldr	r3, [pc, #148]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	61bb      	str	r3, [r7, #24]
 80062d2:	e00b      	b.n	80062ec <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	b2da      	uxtb	r2, r3
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	1c59      	adds	r1, r3, #1
 80062dc:	61f9      	str	r1, [r7, #28]
 80062de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80062e2:	b2d2      	uxtb	r2, r2
 80062e4:	701a      	strb	r2, [r3, #0]
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	09db      	lsrs	r3, r3, #7
 80062ea:	61bb      	str	r3, [r7, #24]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	2b7f      	cmp	r3, #127	; 0x7f
 80062f0:	d8f0      	bhi.n	80062d4 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	61fa      	str	r2, [r7, #28]
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	b2d2      	uxtb	r2, r2
 80062fc:	701a      	strb	r2, [r3, #0]
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	617b      	str	r3, [r7, #20]
 8006306:	2300      	movs	r3, #0
 8006308:	613b      	str	r3, [r7, #16]
 800630a:	e00b      	b.n	8006324 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	b2da      	uxtb	r2, r3
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	6179      	str	r1, [r7, #20]
 8006316:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800631a:	b2d2      	uxtb	r2, r2
 800631c:	701a      	strb	r2, [r3, #0]
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	09db      	lsrs	r3, r3, #7
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	693b      	ldr	r3, [r7, #16]
 8006326:	2b7f      	cmp	r3, #127	; 0x7f
 8006328:	d8f0      	bhi.n	800630c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	1c5a      	adds	r2, r3, #1
 800632e:	617a      	str	r2, [r7, #20]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	b2d2      	uxtb	r2, r2
 8006334:	701a      	strb	r2, [r3, #0]
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800633a:	2218      	movs	r2, #24
 800633c:	6879      	ldr	r1, [r7, #4]
 800633e:	68b8      	ldr	r0, [r7, #8]
 8006340:	f7ff f808 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800634a:	4b06      	ldr	r3, [pc, #24]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	2b00      	cmp	r3, #0
 8006350:	d002      	beq.n	8006358 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006352:	4b04      	ldr	r3, [pc, #16]	; (8006364 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	4798      	blx	r3
  }
}
 8006358:	bf00      	nop
 800635a:	3730      	adds	r7, #48	; 0x30
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}
 8006360:	200143c4 	.word	0x200143c4
 8006364:	20014394 	.word	0x20014394

08006368 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006368:	b580      	push	{r7, lr}
 800636a:	b092      	sub	sp, #72	; 0x48
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006370:	f3ef 8311 	mrs	r3, BASEPRI
 8006374:	f04f 0120 	mov.w	r1, #32
 8006378:	f381 8811 	msr	BASEPRI, r1
 800637c:	617b      	str	r3, [r7, #20]
 800637e:	486a      	ldr	r0, [pc, #424]	; (8006528 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006380:	f7fe fef9 	bl	8005176 <_PreparePacket>
 8006384:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	647b      	str	r3, [r7, #68]	; 0x44
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4b66      	ldr	r3, [pc, #408]	; (800652c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006394:	691b      	ldr	r3, [r3, #16]
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	643b      	str	r3, [r7, #64]	; 0x40
 800639a:	e00b      	b.n	80063b4 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063a2:	1c59      	adds	r1, r3, #1
 80063a4:	6479      	str	r1, [r7, #68]	; 0x44
 80063a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]
 80063ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b0:	09db      	lsrs	r3, r3, #7
 80063b2:	643b      	str	r3, [r7, #64]	; 0x40
 80063b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063b6:	2b7f      	cmp	r3, #127	; 0x7f
 80063b8:	d8f0      	bhi.n	800639c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80063ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063bc:	1c5a      	adds	r2, r3, #1
 80063be:	647a      	str	r2, [r7, #68]	; 0x44
 80063c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80063c2:	b2d2      	uxtb	r2, r2
 80063c4:	701a      	strb	r2, [r3, #0]
 80063c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063d4:	e00b      	b.n	80063ee <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80063d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063d8:	b2da      	uxtb	r2, r3
 80063da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063dc:	1c59      	adds	r1, r3, #1
 80063de:	63f9      	str	r1, [r7, #60]	; 0x3c
 80063e0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80063e4:	b2d2      	uxtb	r2, r2
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ea:	09db      	lsrs	r3, r3, #7
 80063ec:	63bb      	str	r3, [r7, #56]	; 0x38
 80063ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063f0:	2b7f      	cmp	r3, #127	; 0x7f
 80063f2:	d8f0      	bhi.n	80063d6 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	1c5a      	adds	r2, r3, #1
 80063f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006402:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	2220      	movs	r2, #32
 800640a:	4619      	mov	r1, r3
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f7fe fe65 	bl	80050dc <_EncodeStr>
 8006412:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006414:	2209      	movs	r2, #9
 8006416:	68f9      	ldr	r1, [r7, #12]
 8006418:	6938      	ldr	r0, [r7, #16]
 800641a:	f7fe ff9b 	bl	8005354 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800641e:	693b      	ldr	r3, [r7, #16]
 8006420:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	4b40      	ldr	r3, [pc, #256]	; (800652c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	633b      	str	r3, [r7, #48]	; 0x30
 8006432:	e00b      	b.n	800644c <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006436:	b2da      	uxtb	r2, r3
 8006438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643a:	1c59      	adds	r1, r3, #1
 800643c:	6379      	str	r1, [r7, #52]	; 0x34
 800643e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006442:	b2d2      	uxtb	r2, r2
 8006444:	701a      	strb	r2, [r3, #0]
 8006446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	633b      	str	r3, [r7, #48]	; 0x30
 800644c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800644e:	2b7f      	cmp	r3, #127	; 0x7f
 8006450:	d8f0      	bhi.n	8006434 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	637a      	str	r2, [r7, #52]	; 0x34
 8006458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645a:	b2d2      	uxtb	r2, r2
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006460:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
 800646c:	e00b      	b.n	8006486 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800646e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006470:	b2da      	uxtb	r2, r3
 8006472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006474:	1c59      	adds	r1, r3, #1
 8006476:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006478:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800647c:	b2d2      	uxtb	r2, r2
 800647e:	701a      	strb	r2, [r3, #0]
 8006480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006482:	09db      	lsrs	r3, r3, #7
 8006484:	62bb      	str	r3, [r7, #40]	; 0x28
 8006486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006488:	2b7f      	cmp	r3, #127	; 0x7f
 800648a:	d8f0      	bhi.n	800646e <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800648c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006492:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006494:	b2d2      	uxtb	r2, r2
 8006496:	701a      	strb	r2, [r3, #0]
 8006498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	691b      	ldr	r3, [r3, #16]
 80064a4:	623b      	str	r3, [r7, #32]
 80064a6:	e00b      	b.n	80064c0 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	b2da      	uxtb	r2, r3
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	1c59      	adds	r1, r3, #1
 80064b0:	6279      	str	r1, [r7, #36]	; 0x24
 80064b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	09db      	lsrs	r3, r3, #7
 80064be:	623b      	str	r3, [r7, #32]
 80064c0:	6a3b      	ldr	r3, [r7, #32]
 80064c2:	2b7f      	cmp	r3, #127	; 0x7f
 80064c4:	d8f0      	bhi.n	80064a8 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80064c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c8:	1c5a      	adds	r2, r3, #1
 80064ca:	627a      	str	r2, [r7, #36]	; 0x24
 80064cc:	6a3a      	ldr	r2, [r7, #32]
 80064ce:	b2d2      	uxtb	r2, r2
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	61fb      	str	r3, [r7, #28]
 80064da:	2300      	movs	r3, #0
 80064dc:	61bb      	str	r3, [r7, #24]
 80064de:	e00b      	b.n	80064f8 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	b2da      	uxtb	r2, r3
 80064e4:	69fb      	ldr	r3, [r7, #28]
 80064e6:	1c59      	adds	r1, r3, #1
 80064e8:	61f9      	str	r1, [r7, #28]
 80064ea:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	09db      	lsrs	r3, r3, #7
 80064f6:	61bb      	str	r3, [r7, #24]
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	2b7f      	cmp	r3, #127	; 0x7f
 80064fc:	d8f0      	bhi.n	80064e0 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	1c5a      	adds	r2, r3, #1
 8006502:	61fa      	str	r2, [r7, #28]
 8006504:	69ba      	ldr	r2, [r7, #24]
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800650e:	2215      	movs	r2, #21
 8006510:	68f9      	ldr	r1, [r7, #12]
 8006512:	6938      	ldr	r0, [r7, #16]
 8006514:	f7fe ff1e 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f383 8811 	msr	BASEPRI, r3
}
 800651e:	bf00      	nop
 8006520:	3748      	adds	r7, #72	; 0x48
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	200143c4 	.word	0x200143c4
 800652c:	20014394 	.word	0x20014394

08006530 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006530:	b580      	push	{r7, lr}
 8006532:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006534:	4b07      	ldr	r3, [pc, #28]	; (8006554 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006536:	6a1b      	ldr	r3, [r3, #32]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d008      	beq.n	800654e <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800653c:	4b05      	ldr	r3, [pc, #20]	; (8006554 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006546:	4b03      	ldr	r3, [pc, #12]	; (8006554 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	4798      	blx	r3
  }
}
 800654e:	bf00      	nop
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20014394 	.word	0x20014394

08006558 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006560:	f3ef 8311 	mrs	r3, BASEPRI
 8006564:	f04f 0120 	mov.w	r1, #32
 8006568:	f381 8811 	msr	BASEPRI, r1
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	480b      	ldr	r0, [pc, #44]	; (800659c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006570:	f7fe fe01 	bl	8005176 <_PreparePacket>
 8006574:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006576:	2280      	movs	r2, #128	; 0x80
 8006578:	6879      	ldr	r1, [r7, #4]
 800657a:	6938      	ldr	r0, [r7, #16]
 800657c:	f7fe fdae 	bl	80050dc <_EncodeStr>
 8006580:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006582:	220e      	movs	r2, #14
 8006584:	68f9      	ldr	r1, [r7, #12]
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f7fe fee4 	bl	8005354 <_SendPacket>
  RECORD_END();
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f383 8811 	msr	BASEPRI, r3
}
 8006592:	bf00      	nop
 8006594:	3718      	adds	r7, #24
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	200143c4 	.word	0x200143c4

080065a0 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80065a0:	b590      	push	{r4, r7, lr}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80065a6:	4b15      	ldr	r3, [pc, #84]	; (80065fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065a8:	6a1b      	ldr	r3, [r3, #32]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01a      	beq.n	80065e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80065ae:	4b13      	ldr	r3, [pc, #76]	; (80065fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d015      	beq.n	80065e4 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4798      	blx	r3
 80065c0:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065c4:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80065c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	000a      	movs	r2, r1
 80065d4:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80065d6:	4613      	mov	r3, r2
 80065d8:	461a      	mov	r2, r3
 80065da:	4621      	mov	r1, r4
 80065dc:	200d      	movs	r0, #13
 80065de:	f7ff fbe7 	bl	8005db0 <SEGGER_SYSVIEW_RecordU32x2>
 80065e2:	e006      	b.n	80065f2 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4619      	mov	r1, r3
 80065ea:	200c      	movs	r0, #12
 80065ec:	f7ff fba4 	bl	8005d38 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80065f0:	bf00      	nop
 80065f2:	bf00      	nop
 80065f4:	370c      	adds	r7, #12
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd90      	pop	{r4, r7, pc}
 80065fa:	bf00      	nop
 80065fc:	20014394 	.word	0x20014394
 8006600:	e0001004 	.word	0xe0001004

08006604 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006604:	b580      	push	{r7, lr}
 8006606:	b086      	sub	sp, #24
 8006608:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800660a:	f3ef 8311 	mrs	r3, BASEPRI
 800660e:	f04f 0120 	mov.w	r1, #32
 8006612:	f381 8811 	msr	BASEPRI, r1
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	4819      	ldr	r0, [pc, #100]	; (8006680 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800661a:	f7fe fdac 	bl	8005176 <_PreparePacket>
 800661e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006624:	4b17      	ldr	r3, [pc, #92]	; (8006684 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800662c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	617b      	str	r3, [r7, #20]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	613b      	str	r3, [r7, #16]
 8006636:	e00b      	b.n	8006650 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	b2da      	uxtb	r2, r3
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	1c59      	adds	r1, r3, #1
 8006640:	6179      	str	r1, [r7, #20]
 8006642:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006646:	b2d2      	uxtb	r2, r2
 8006648:	701a      	strb	r2, [r3, #0]
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	09db      	lsrs	r3, r3, #7
 800664e:	613b      	str	r3, [r7, #16]
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	2b7f      	cmp	r3, #127	; 0x7f
 8006654:	d8f0      	bhi.n	8006638 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	617a      	str	r2, [r7, #20]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	b2d2      	uxtb	r2, r2
 8006660:	701a      	strb	r2, [r3, #0]
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006666:	2202      	movs	r2, #2
 8006668:	6879      	ldr	r1, [r7, #4]
 800666a:	68b8      	ldr	r0, [r7, #8]
 800666c:	f7fe fe72 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f383 8811 	msr	BASEPRI, r3
}
 8006676:	bf00      	nop
 8006678:	3718      	adds	r7, #24
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
 800667e:	bf00      	nop
 8006680:	200143c4 	.word	0x200143c4
 8006684:	e000ed04 	.word	0xe000ed04

08006688 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800668e:	f3ef 8311 	mrs	r3, BASEPRI
 8006692:	f04f 0120 	mov.w	r1, #32
 8006696:	f381 8811 	msr	BASEPRI, r1
 800669a:	607b      	str	r3, [r7, #4]
 800669c:	4807      	ldr	r0, [pc, #28]	; (80066bc <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800669e:	f7fe fd6a 	bl	8005176 <_PreparePacket>
 80066a2:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80066a4:	2203      	movs	r2, #3
 80066a6:	6839      	ldr	r1, [r7, #0]
 80066a8:	6838      	ldr	r0, [r7, #0]
 80066aa:	f7fe fe53 	bl	8005354 <_SendPacket>
  RECORD_END();
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f383 8811 	msr	BASEPRI, r3
}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	200143c4 	.word	0x200143c4

080066c0 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b082      	sub	sp, #8
 80066c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066c6:	f3ef 8311 	mrs	r3, BASEPRI
 80066ca:	f04f 0120 	mov.w	r1, #32
 80066ce:	f381 8811 	msr	BASEPRI, r1
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	4807      	ldr	r0, [pc, #28]	; (80066f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80066d6:	f7fe fd4e 	bl	8005176 <_PreparePacket>
 80066da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80066dc:	2212      	movs	r2, #18
 80066de:	6839      	ldr	r1, [r7, #0]
 80066e0:	6838      	ldr	r0, [r7, #0]
 80066e2:	f7fe fe37 	bl	8005354 <_SendPacket>
  RECORD_END();
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	f383 8811 	msr	BASEPRI, r3
}
 80066ec:	bf00      	nop
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200143c4 	.word	0x200143c4

080066f8 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b082      	sub	sp, #8
 80066fc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80066fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006702:	f04f 0120 	mov.w	r1, #32
 8006706:	f381 8811 	msr	BASEPRI, r1
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	4807      	ldr	r0, [pc, #28]	; (800672c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800670e:	f7fe fd32 	bl	8005176 <_PreparePacket>
 8006712:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006714:	2211      	movs	r2, #17
 8006716:	6839      	ldr	r1, [r7, #0]
 8006718:	6838      	ldr	r0, [r7, #0]
 800671a:	f7fe fe1b 	bl	8005354 <_SendPacket>
  RECORD_END();
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f383 8811 	msr	BASEPRI, r3
}
 8006724:	bf00      	nop
 8006726:	3708      	adds	r7, #8
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	200143c4 	.word	0x200143c4

08006730 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006738:	f3ef 8311 	mrs	r3, BASEPRI
 800673c:	f04f 0120 	mov.w	r1, #32
 8006740:	f381 8811 	msr	BASEPRI, r1
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	4819      	ldr	r0, [pc, #100]	; (80067ac <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006748:	f7fe fd15 	bl	8005176 <_PreparePacket>
 800674c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006752:	4b17      	ldr	r3, [pc, #92]	; (80067b0 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006754:	691b      	ldr	r3, [r3, #16]
 8006756:	687a      	ldr	r2, [r7, #4]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	61fb      	str	r3, [r7, #28]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	61bb      	str	r3, [r7, #24]
 8006764:	e00b      	b.n	800677e <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	b2da      	uxtb	r2, r3
 800676a:	69fb      	ldr	r3, [r7, #28]
 800676c:	1c59      	adds	r1, r3, #1
 800676e:	61f9      	str	r1, [r7, #28]
 8006770:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006774:	b2d2      	uxtb	r2, r2
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	69bb      	ldr	r3, [r7, #24]
 800677a:	09db      	lsrs	r3, r3, #7
 800677c:	61bb      	str	r3, [r7, #24]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	2b7f      	cmp	r3, #127	; 0x7f
 8006782:	d8f0      	bhi.n	8006766 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	61fa      	str	r2, [r7, #28]
 800678a:	69ba      	ldr	r2, [r7, #24]
 800678c:	b2d2      	uxtb	r2, r2
 800678e:	701a      	strb	r2, [r3, #0]
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006794:	2208      	movs	r2, #8
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6938      	ldr	r0, [r7, #16]
 800679a:	f7fe fddb 	bl	8005354 <_SendPacket>
  RECORD_END();
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	f383 8811 	msr	BASEPRI, r3
}
 80067a4:	bf00      	nop
 80067a6:	3720      	adds	r7, #32
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	200143c4 	.word	0x200143c4
 80067b0:	20014394 	.word	0x20014394

080067b4 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b088      	sub	sp, #32
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067bc:	f3ef 8311 	mrs	r3, BASEPRI
 80067c0:	f04f 0120 	mov.w	r1, #32
 80067c4:	f381 8811 	msr	BASEPRI, r1
 80067c8:	617b      	str	r3, [r7, #20]
 80067ca:	4819      	ldr	r0, [pc, #100]	; (8006830 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80067cc:	f7fe fcd3 	bl	8005176 <_PreparePacket>
 80067d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80067d6:	4b17      	ldr	r3, [pc, #92]	; (8006834 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	687a      	ldr	r2, [r7, #4]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	61fb      	str	r3, [r7, #28]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	61bb      	str	r3, [r7, #24]
 80067e8:	e00b      	b.n	8006802 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80067ea:	69bb      	ldr	r3, [r7, #24]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	1c59      	adds	r1, r3, #1
 80067f2:	61f9      	str	r1, [r7, #28]
 80067f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067f8:	b2d2      	uxtb	r2, r2
 80067fa:	701a      	strb	r2, [r3, #0]
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	09db      	lsrs	r3, r3, #7
 8006800:	61bb      	str	r3, [r7, #24]
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	2b7f      	cmp	r3, #127	; 0x7f
 8006806:	d8f0      	bhi.n	80067ea <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	61fa      	str	r2, [r7, #28]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]
 8006814:	69fb      	ldr	r3, [r7, #28]
 8006816:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006818:	2204      	movs	r2, #4
 800681a:	68f9      	ldr	r1, [r7, #12]
 800681c:	6938      	ldr	r0, [r7, #16]
 800681e:	f7fe fd99 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f383 8811 	msr	BASEPRI, r3
}
 8006828:	bf00      	nop
 800682a:	3720      	adds	r7, #32
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}
 8006830:	200143c4 	.word	0x200143c4
 8006834:	20014394 	.word	0x20014394

08006838 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006840:	f3ef 8311 	mrs	r3, BASEPRI
 8006844:	f04f 0120 	mov.w	r1, #32
 8006848:	f381 8811 	msr	BASEPRI, r1
 800684c:	617b      	str	r3, [r7, #20]
 800684e:	4819      	ldr	r0, [pc, #100]	; (80068b4 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006850:	f7fe fc91 	bl	8005176 <_PreparePacket>
 8006854:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800685a:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800685c:	691b      	ldr	r3, [r3, #16]
 800685e:	687a      	ldr	r2, [r7, #4]
 8006860:	1ad3      	subs	r3, r2, r3
 8006862:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	e00b      	b.n	8006886 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800686e:	69bb      	ldr	r3, [r7, #24]
 8006870:	b2da      	uxtb	r2, r3
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	61f9      	str	r1, [r7, #28]
 8006878:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800687c:	b2d2      	uxtb	r2, r2
 800687e:	701a      	strb	r2, [r3, #0]
 8006880:	69bb      	ldr	r3, [r7, #24]
 8006882:	09db      	lsrs	r3, r3, #7
 8006884:	61bb      	str	r3, [r7, #24]
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	2b7f      	cmp	r3, #127	; 0x7f
 800688a:	d8f0      	bhi.n	800686e <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	61fa      	str	r2, [r7, #28]
 8006892:	69ba      	ldr	r2, [r7, #24]
 8006894:	b2d2      	uxtb	r2, r2
 8006896:	701a      	strb	r2, [r3, #0]
 8006898:	69fb      	ldr	r3, [r7, #28]
 800689a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800689c:	2206      	movs	r2, #6
 800689e:	68f9      	ldr	r1, [r7, #12]
 80068a0:	6938      	ldr	r0, [r7, #16]
 80068a2:	f7fe fd57 	bl	8005354 <_SendPacket>
  RECORD_END();
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f383 8811 	msr	BASEPRI, r3
}
 80068ac:	bf00      	nop
 80068ae:	3720      	adds	r7, #32
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	200143c4 	.word	0x200143c4
 80068b8:	20014394 	.word	0x20014394

080068bc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80068c4:	4b04      	ldr	r3, [pc, #16]	; (80068d8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	1ad3      	subs	r3, r2, r3
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	370c      	adds	r7, #12
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	20014394 	.word	0x20014394

080068dc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08c      	sub	sp, #48	; 0x30
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80068e6:	4b3b      	ldr	r3, [pc, #236]	; (80069d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d06d      	beq.n	80069ca <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80068ee:	4b39      	ldr	r3, [pc, #228]	; (80069d4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80068f4:	2300      	movs	r3, #0
 80068f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80068f8:	e008      	b.n	800690c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80068fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8006900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006902:	2b00      	cmp	r3, #0
 8006904:	d007      	beq.n	8006916 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006908:	3301      	adds	r3, #1
 800690a:	62bb      	str	r3, [r7, #40]	; 0x28
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006910:	429a      	cmp	r2, r3
 8006912:	d3f2      	bcc.n	80068fa <SEGGER_SYSVIEW_SendModule+0x1e>
 8006914:	e000      	b.n	8006918 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006916:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d055      	beq.n	80069ca <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800691e:	f3ef 8311 	mrs	r3, BASEPRI
 8006922:	f04f 0120 	mov.w	r1, #32
 8006926:	f381 8811 	msr	BASEPRI, r1
 800692a:	617b      	str	r3, [r7, #20]
 800692c:	482a      	ldr	r0, [pc, #168]	; (80069d8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800692e:	f7fe fc22 	bl	8005176 <_PreparePacket>
 8006932:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	623b      	str	r3, [r7, #32]
 8006940:	e00b      	b.n	800695a <SEGGER_SYSVIEW_SendModule+0x7e>
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006948:	1c59      	adds	r1, r3, #1
 800694a:	6279      	str	r1, [r7, #36]	; 0x24
 800694c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006950:	b2d2      	uxtb	r2, r2
 8006952:	701a      	strb	r2, [r3, #0]
 8006954:	6a3b      	ldr	r3, [r7, #32]
 8006956:	09db      	lsrs	r3, r3, #7
 8006958:	623b      	str	r3, [r7, #32]
 800695a:	6a3b      	ldr	r3, [r7, #32]
 800695c:	2b7f      	cmp	r3, #127	; 0x7f
 800695e:	d8f0      	bhi.n	8006942 <SEGGER_SYSVIEW_SendModule+0x66>
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	1c5a      	adds	r2, r3, #1
 8006964:	627a      	str	r2, [r7, #36]	; 0x24
 8006966:	6a3a      	ldr	r2, [r7, #32]
 8006968:	b2d2      	uxtb	r2, r2
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	61fb      	str	r3, [r7, #28]
 8006974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	61bb      	str	r3, [r7, #24]
 800697a:	e00b      	b.n	8006994 <SEGGER_SYSVIEW_SendModule+0xb8>
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	b2da      	uxtb	r2, r3
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	1c59      	adds	r1, r3, #1
 8006984:	61f9      	str	r1, [r7, #28]
 8006986:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800698a:	b2d2      	uxtb	r2, r2
 800698c:	701a      	strb	r2, [r3, #0]
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	09db      	lsrs	r3, r3, #7
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	2b7f      	cmp	r3, #127	; 0x7f
 8006998:	d8f0      	bhi.n	800697c <SEGGER_SYSVIEW_SendModule+0xa0>
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	1c5a      	adds	r2, r3, #1
 800699e:	61fa      	str	r2, [r7, #28]
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	b2d2      	uxtb	r2, r2
 80069a4:	701a      	strb	r2, [r3, #0]
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	2280      	movs	r2, #128	; 0x80
 80069b0:	4619      	mov	r1, r3
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7fe fb92 	bl	80050dc <_EncodeStr>
 80069b8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80069ba:	2216      	movs	r2, #22
 80069bc:	68f9      	ldr	r1, [r7, #12]
 80069be:	6938      	ldr	r0, [r7, #16]
 80069c0:	f7fe fcc8 	bl	8005354 <_SendPacket>
      RECORD_END();
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80069ca:	bf00      	nop
 80069cc:	3730      	adds	r7, #48	; 0x30
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200143bc 	.word	0x200143bc
 80069d8:	200143c4 	.word	0x200143c4

080069dc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80069dc:	b580      	push	{r7, lr}
 80069de:	b082      	sub	sp, #8
 80069e0:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80069e2:	4b0c      	ldr	r3, [pc, #48]	; (8006a14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d00f      	beq.n	8006a0a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80069ea:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	68db      	ldr	r3, [r3, #12]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d002      	beq.n	80069fe <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1f2      	bne.n	80069f0 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006a0a:	bf00      	nop
 8006a0c:	3708      	adds	r7, #8
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	200143bc 	.word	0x200143bc

08006a18 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006a1e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a22:	f04f 0120 	mov.w	r1, #32
 8006a26:	f381 8811 	msr	BASEPRI, r1
 8006a2a:	60fb      	str	r3, [r7, #12]
 8006a2c:	4817      	ldr	r0, [pc, #92]	; (8006a8c <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006a2e:	f7fe fba2 	bl	8005176 <_PreparePacket>
 8006a32:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	617b      	str	r3, [r7, #20]
 8006a3c:	4b14      	ldr	r3, [pc, #80]	; (8006a90 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	613b      	str	r3, [r7, #16]
 8006a42:	e00b      	b.n	8006a5c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	b2da      	uxtb	r2, r3
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	1c59      	adds	r1, r3, #1
 8006a4c:	6179      	str	r1, [r7, #20]
 8006a4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a52:	b2d2      	uxtb	r2, r2
 8006a54:	701a      	strb	r2, [r3, #0]
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	09db      	lsrs	r3, r3, #7
 8006a5a:	613b      	str	r3, [r7, #16]
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006a60:	d8f0      	bhi.n	8006a44 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	1c5a      	adds	r2, r3, #1
 8006a66:	617a      	str	r2, [r7, #20]
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	b2d2      	uxtb	r2, r2
 8006a6c:	701a      	strb	r2, [r3, #0]
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006a72:	221b      	movs	r2, #27
 8006a74:	6879      	ldr	r1, [r7, #4]
 8006a76:	68b8      	ldr	r0, [r7, #8]
 8006a78:	f7fe fc6c 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f383 8811 	msr	BASEPRI, r3
}
 8006a82:	bf00      	nop
 8006a84:	3718      	adds	r7, #24
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	200143c4 	.word	0x200143c4
 8006a90:	200143c0 	.word	0x200143c0

08006a94 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006a94:	b40f      	push	{r0, r1, r2, r3}
 8006a96:	b580      	push	{r7, lr}
 8006a98:	b082      	sub	sp, #8
 8006a9a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006a9c:	f107 0314 	add.w	r3, r7, #20
 8006aa0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006aa2:	1d3b      	adds	r3, r7, #4
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6938      	ldr	r0, [r7, #16]
 8006aaa:	f7fe fedb 	bl	8005864 <_VPrintTarget>
  va_end(ParamList);
}
 8006aae:	bf00      	nop
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006ab8:	b004      	add	sp, #16
 8006aba:	4770      	bx	lr

08006abc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b08a      	sub	sp, #40	; 0x28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ac4:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac8:	f04f 0120 	mov.w	r1, #32
 8006acc:	f381 8811 	msr	BASEPRI, r1
 8006ad0:	617b      	str	r3, [r7, #20]
 8006ad2:	4827      	ldr	r0, [pc, #156]	; (8006b70 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006ad4:	f7fe fb4f 	bl	8005176 <_PreparePacket>
 8006ad8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ada:	2280      	movs	r2, #128	; 0x80
 8006adc:	6879      	ldr	r1, [r7, #4]
 8006ade:	6938      	ldr	r0, [r7, #16]
 8006ae0:	f7fe fafc 	bl	80050dc <_EncodeStr>
 8006ae4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
 8006aea:	2301      	movs	r3, #1
 8006aec:	623b      	str	r3, [r7, #32]
 8006aee:	e00b      	b.n	8006b08 <SEGGER_SYSVIEW_Warn+0x4c>
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	1c59      	adds	r1, r3, #1
 8006af8:	6279      	str	r1, [r7, #36]	; 0x24
 8006afa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	09db      	lsrs	r3, r3, #7
 8006b06:	623b      	str	r3, [r7, #32]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b0c:	d8f0      	bhi.n	8006af0 <SEGGER_SYSVIEW_Warn+0x34>
 8006b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b10:	1c5a      	adds	r2, r3, #1
 8006b12:	627a      	str	r2, [r7, #36]	; 0x24
 8006b14:	6a3a      	ldr	r2, [r7, #32]
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	61fb      	str	r3, [r7, #28]
 8006b22:	2300      	movs	r3, #0
 8006b24:	61bb      	str	r3, [r7, #24]
 8006b26:	e00b      	b.n	8006b40 <SEGGER_SYSVIEW_Warn+0x84>
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	b2da      	uxtb	r2, r3
 8006b2c:	69fb      	ldr	r3, [r7, #28]
 8006b2e:	1c59      	adds	r1, r3, #1
 8006b30:	61f9      	str	r1, [r7, #28]
 8006b32:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b36:	b2d2      	uxtb	r2, r2
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	69bb      	ldr	r3, [r7, #24]
 8006b3c:	09db      	lsrs	r3, r3, #7
 8006b3e:	61bb      	str	r3, [r7, #24]
 8006b40:	69bb      	ldr	r3, [r7, #24]
 8006b42:	2b7f      	cmp	r3, #127	; 0x7f
 8006b44:	d8f0      	bhi.n	8006b28 <SEGGER_SYSVIEW_Warn+0x6c>
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	1c5a      	adds	r2, r3, #1
 8006b4a:	61fa      	str	r2, [r7, #28]
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006b56:	221a      	movs	r2, #26
 8006b58:	68f9      	ldr	r1, [r7, #12]
 8006b5a:	6938      	ldr	r0, [r7, #16]
 8006b5c:	f7fe fbfa 	bl	8005354 <_SendPacket>
  RECORD_END();
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	f383 8811 	msr	BASEPRI, r3
}
 8006b66:	bf00      	nop
 8006b68:	3728      	adds	r7, #40	; 0x28
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop
 8006b70:	200143c4 	.word	0x200143c4

08006b74 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8006b74:	b580      	push	{r7, lr}
 8006b76:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8006b78:	4b13      	ldr	r3, [pc, #76]	; (8006bc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006b7a:	7e1b      	ldrb	r3, [r3, #24]
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4a13      	ldr	r2, [pc, #76]	; (8006bcc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006b80:	460b      	mov	r3, r1
 8006b82:	005b      	lsls	r3, r3, #1
 8006b84:	440b      	add	r3, r1
 8006b86:	00db      	lsls	r3, r3, #3
 8006b88:	4413      	add	r3, r2
 8006b8a:	336c      	adds	r3, #108	; 0x6c
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	4b0e      	ldr	r3, [pc, #56]	; (8006bc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006b90:	7e1b      	ldrb	r3, [r3, #24]
 8006b92:	4618      	mov	r0, r3
 8006b94:	490d      	ldr	r1, [pc, #52]	; (8006bcc <SEGGER_SYSVIEW_IsStarted+0x58>)
 8006b96:	4603      	mov	r3, r0
 8006b98:	005b      	lsls	r3, r3, #1
 8006b9a:	4403      	add	r3, r0
 8006b9c:	00db      	lsls	r3, r3, #3
 8006b9e:	440b      	add	r3, r1
 8006ba0:	3370      	adds	r3, #112	; 0x70
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	429a      	cmp	r2, r3
 8006ba6:	d00b      	beq.n	8006bc0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8006ba8:	4b07      	ldr	r3, [pc, #28]	; (8006bc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006baa:	789b      	ldrb	r3, [r3, #2]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d107      	bne.n	8006bc0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8006bb0:	4b05      	ldr	r3, [pc, #20]	; (8006bc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bb2:	2201      	movs	r2, #1
 8006bb4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8006bb6:	f7fe faeb 	bl	8005190 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8006bba:	4b03      	ldr	r3, [pc, #12]	; (8006bc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8006bc0:	4b01      	ldr	r3, [pc, #4]	; (8006bc8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	bd80      	pop	{r7, pc}
 8006bc8:	20014394 	.word	0x20014394
 8006bcc:	20012ed4 	.word	0x20012ed4

08006bd0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8006bd4:	4803      	ldr	r0, [pc, #12]	; (8006be4 <_cbSendSystemDesc+0x14>)
 8006bd6:	f7ff fcbf 	bl	8006558 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8006bda:	4803      	ldr	r0, [pc, #12]	; (8006be8 <_cbSendSystemDesc+0x18>)
 8006bdc:	f7ff fcbc 	bl	8006558 <SEGGER_SYSVIEW_SendSysDesc>
}
 8006be0:	bf00      	nop
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	08006de4 	.word	0x08006de4
 8006be8:	08006e20 	.word	0x08006e20

08006bec <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8006bf0:	4b06      	ldr	r3, [pc, #24]	; (8006c0c <SEGGER_SYSVIEW_Conf+0x20>)
 8006bf2:	6818      	ldr	r0, [r3, #0]
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <SEGGER_SYSVIEW_Conf+0x20>)
 8006bf6:	6819      	ldr	r1, [r3, #0]
 8006bf8:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <SEGGER_SYSVIEW_Conf+0x24>)
 8006bfa:	4a06      	ldr	r2, [pc, #24]	; (8006c14 <SEGGER_SYSVIEW_Conf+0x28>)
 8006bfc:	f7ff f82a 	bl	8005c54 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8006c00:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8006c04:	f7ff f86a 	bl	8005cdc <SEGGER_SYSVIEW_SetRAMBase>
}
 8006c08:	bf00      	nop
 8006c0a:	bd80      	pop	{r7, pc}
 8006c0c:	20000000 	.word	0x20000000
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006e48 	.word	0x08006e48

08006c18 <memcmp>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	3901      	subs	r1, #1
 8006c1c:	4402      	add	r2, r0
 8006c1e:	4290      	cmp	r0, r2
 8006c20:	d101      	bne.n	8006c26 <memcmp+0xe>
 8006c22:	2000      	movs	r0, #0
 8006c24:	e005      	b.n	8006c32 <memcmp+0x1a>
 8006c26:	7803      	ldrb	r3, [r0, #0]
 8006c28:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006c2c:	42a3      	cmp	r3, r4
 8006c2e:	d001      	beq.n	8006c34 <memcmp+0x1c>
 8006c30:	1b18      	subs	r0, r3, r4
 8006c32:	bd10      	pop	{r4, pc}
 8006c34:	3001      	adds	r0, #1
 8006c36:	e7f2      	b.n	8006c1e <memcmp+0x6>

08006c38 <memset>:
 8006c38:	4402      	add	r2, r0
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	4293      	cmp	r3, r2
 8006c3e:	d100      	bne.n	8006c42 <memset+0xa>
 8006c40:	4770      	bx	lr
 8006c42:	f803 1b01 	strb.w	r1, [r3], #1
 8006c46:	e7f9      	b.n	8006c3c <memset+0x4>

08006c48 <__libc_init_array>:
 8006c48:	b570      	push	{r4, r5, r6, lr}
 8006c4a:	4d0d      	ldr	r5, [pc, #52]	; (8006c80 <__libc_init_array+0x38>)
 8006c4c:	4c0d      	ldr	r4, [pc, #52]	; (8006c84 <__libc_init_array+0x3c>)
 8006c4e:	1b64      	subs	r4, r4, r5
 8006c50:	10a4      	asrs	r4, r4, #2
 8006c52:	2600      	movs	r6, #0
 8006c54:	42a6      	cmp	r6, r4
 8006c56:	d109      	bne.n	8006c6c <__libc_init_array+0x24>
 8006c58:	4d0b      	ldr	r5, [pc, #44]	; (8006c88 <__libc_init_array+0x40>)
 8006c5a:	4c0c      	ldr	r4, [pc, #48]	; (8006c8c <__libc_init_array+0x44>)
 8006c5c:	f000 f826 	bl	8006cac <_init>
 8006c60:	1b64      	subs	r4, r4, r5
 8006c62:	10a4      	asrs	r4, r4, #2
 8006c64:	2600      	movs	r6, #0
 8006c66:	42a6      	cmp	r6, r4
 8006c68:	d105      	bne.n	8006c76 <__libc_init_array+0x2e>
 8006c6a:	bd70      	pop	{r4, r5, r6, pc}
 8006c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c70:	4798      	blx	r3
 8006c72:	3601      	adds	r6, #1
 8006c74:	e7ee      	b.n	8006c54 <__libc_init_array+0xc>
 8006c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c7a:	4798      	blx	r3
 8006c7c:	3601      	adds	r6, #1
 8006c7e:	e7f2      	b.n	8006c66 <__libc_init_array+0x1e>
 8006c80:	08006e78 	.word	0x08006e78
 8006c84:	08006e78 	.word	0x08006e78
 8006c88:	08006e78 	.word	0x08006e78
 8006c8c:	08006e7c 	.word	0x08006e7c

08006c90 <memcpy>:
 8006c90:	440a      	add	r2, r1
 8006c92:	4291      	cmp	r1, r2
 8006c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c98:	d100      	bne.n	8006c9c <memcpy+0xc>
 8006c9a:	4770      	bx	lr
 8006c9c:	b510      	push	{r4, lr}
 8006c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ca6:	4291      	cmp	r1, r2
 8006ca8:	d1f9      	bne.n	8006c9e <memcpy+0xe>
 8006caa:	bd10      	pop	{r4, pc}

08006cac <_init>:
 8006cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cae:	bf00      	nop
 8006cb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cb2:	bc08      	pop	{r3}
 8006cb4:	469e      	mov	lr, r3
 8006cb6:	4770      	bx	lr

08006cb8 <_fini>:
 8006cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cba:	bf00      	nop
 8006cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cbe:	bc08      	pop	{r3}
 8006cc0:	469e      	mov	lr, r3
 8006cc2:	4770      	bx	lr
