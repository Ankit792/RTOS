
FreeRTOS5_1Task_Notify.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  080084e4  080084e4  000184e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800873c  0800873c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800873c  0800873c  0001873c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008744  08008744  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008744  08008744  00018744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800874c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00014608  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20014680  20014680  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   00014732  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003334  00000000  00000000  0003481d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001418  00000000  00000000  00037b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f67  00000000  00000000  00038f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002475e  00000000  00000000  00039ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016d5f  00000000  00000000  0005e635  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9cd2  00000000  00000000  00075394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b48  00000000  00000000  0014f068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d5  00000000  00000000  00154bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084cc 	.word	0x080084cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	080084cc 	.word	0x080084cc

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f5c 	.word	0x20012f5c
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fcc1 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f8bb 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f923 	bl	8000864 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800061e:	4849      	ldr	r0, [pc, #292]	; (8000744 <main+0x138>)
 8000620:	f004 fda0 	bl	8005164 <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000624:	4b48      	ldr	r3, [pc, #288]	; (8000748 <main+0x13c>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a47      	ldr	r2, [pc, #284]	; (8000748 <main+0x13c>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000630:	f006 ffec 	bl	800760c <SEGGER_SYSVIEW_Conf>
  printf("in main loop");
 8000634:	4845      	ldr	r0, [pc, #276]	; (800074c <main+0x140>)
 8000636:	f007 f8af 	bl	8007798 <iprintf>
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 4, &ledg_task_handle);
 800063a:	4b45      	ldr	r3, [pc, #276]	; (8000750 <main+0x144>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2304      	movs	r3, #4
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	4943      	ldr	r1, [pc, #268]	; (8000754 <main+0x148>)
 8000648:	4843      	ldr	r0, [pc, #268]	; (8000758 <main+0x14c>)
 800064a:	f002 fab9 	bl	8002bc0 <xTaskCreate>
 800064e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d00a      	beq.n	800066c <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000668:	bf00      	nop
 800066a:	e7fe      	b.n	800066a <main+0x5e>

  next_task_handle = ledg_task_handle;
 800066c:	4b38      	ldr	r3, [pc, #224]	; (8000750 <main+0x144>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a3a      	ldr	r2, [pc, #232]	; (800075c <main+0x150>)
 8000672:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 3, &ledr_task_handle);
 8000674:	4b3a      	ldr	r3, [pc, #232]	; (8000760 <main+0x154>)
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2303      	movs	r3, #3
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	4938      	ldr	r1, [pc, #224]	; (8000764 <main+0x158>)
 8000682:	4839      	ldr	r0, [pc, #228]	; (8000768 <main+0x15c>)
 8000684:	f002 fa9c 	bl	8002bc0 <xTaskCreate>
 8000688:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00a      	beq.n	80006a6 <main+0x9a>
        __asm volatile
 8000690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000694:	f383 8811 	msr	BASEPRI, r3
 8000698:	f3bf 8f6f 	isb	sy
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	60fb      	str	r3, [r7, #12]
    }
 80006a2:	bf00      	nop
 80006a4:	e7fe      	b.n	80006a4 <main+0x98>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80006a6:	4b31      	ldr	r3, [pc, #196]	; (800076c <main+0x160>)
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	492f      	ldr	r1, [pc, #188]	; (8000770 <main+0x164>)
 80006b4:	482f      	ldr	r0, [pc, #188]	; (8000774 <main+0x168>)
 80006b6:	f002 fa83 	bl	8002bc0 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00a      	beq.n	80006d8 <main+0xcc>
        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60bb      	str	r3, [r7, #8]
    }
 80006d4:	bf00      	nop
 80006d6:	e7fe      	b.n	80006d6 <main+0xca>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 1, &ledb_task_handle);
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <main+0x16c>)
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	22c8      	movs	r2, #200	; 0xc8
 80006e4:	4925      	ldr	r1, [pc, #148]	; (800077c <main+0x170>)
 80006e6:	4826      	ldr	r0, [pc, #152]	; (8000780 <main+0x174>)
 80006e8:	f002 fa6a 	bl	8002bc0 <xTaskCreate>
 80006ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d00a      	beq.n	800070a <main+0xfe>
        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	607b      	str	r3, [r7, #4]
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <main+0xfc>

  status = xTaskCreate(button_handler, "Button Task", 200, NULL, 5, &btn_task_handle);   // highest priority
 800070a:	4b1e      	ldr	r3, [pc, #120]	; (8000784 <main+0x178>)
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	2305      	movs	r3, #5
 8000710:	9300      	str	r3, [sp, #0]
 8000712:	2300      	movs	r3, #0
 8000714:	22c8      	movs	r2, #200	; 0xc8
 8000716:	491c      	ldr	r1, [pc, #112]	; (8000788 <main+0x17c>)
 8000718:	481c      	ldr	r0, [pc, #112]	; (800078c <main+0x180>)
 800071a:	f002 fa51 	bl	8002bc0 <xTaskCreate>
 800071e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000720:	697b      	ldr	r3, [r7, #20]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d00a      	beq.n	800073c <main+0x130>
        __asm volatile
 8000726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800072a:	f383 8811 	msr	BASEPRI, r3
 800072e:	f3bf 8f6f 	isb	sy
 8000732:	f3bf 8f4f 	dsb	sy
 8000736:	603b      	str	r3, [r7, #0]
    }
 8000738:	bf00      	nop
 800073a:	e7fe      	b.n	800073a <main+0x12e>


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800073c:	f002 fd72 	bl	8003224 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000740:	e7fe      	b.n	8000740 <main+0x134>
 8000742:	bf00      	nop
 8000744:	0007a120 	.word	0x0007a120
 8000748:	e0001000 	.word	0xe0001000
 800074c:	080084e4 	.word	0x080084e4
 8000750:	20000094 	.word	0x20000094
 8000754:	080084f4 	.word	0x080084f4
 8000758:	080009d9 	.word	0x080009d9
 800075c:	200000a8 	.word	0x200000a8
 8000760:	20000098 	.word	0x20000098
 8000764:	08008504 	.word	0x08008504
 8000768:	08000ad1 	.word	0x08000ad1
 800076c:	2000009c 	.word	0x2000009c
 8000770:	08008514 	.word	0x08008514
 8000774:	08000a59 	.word	0x08000a59
 8000778:	200000a0 	.word	0x200000a0
 800077c:	08008524 	.word	0x08008524
 8000780:	08000b49 	.word	0x08000b49
 8000784:	200000a4 	.word	0x200000a4
 8000788:	08008534 	.word	0x08008534
 800078c:	08000bbd 	.word	0x08000bbd

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	2230      	movs	r2, #48	; 0x30
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 f85f 	bl	8007862 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 030c 	add.w	r3, r7, #12
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	4b28      	ldr	r3, [pc, #160]	; (800085c <SystemClock_Config+0xcc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a27      	ldr	r2, [pc, #156]	; (800085c <SystemClock_Config+0xcc>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b25      	ldr	r3, [pc, #148]	; (800085c <SystemClock_Config+0xcc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xd0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <SystemClock_Config+0xd0>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b1f      	ldr	r3, [pc, #124]	; (8000860 <SystemClock_Config+0xd0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000800:	2308      	movs	r3, #8
 8000802:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000804:	23a8      	movs	r3, #168	; 0xa8
 8000806:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800080c:	2304      	movs	r3, #4
 800080e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000810:	f107 0320 	add.w	r3, r7, #32
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fecb 	bl	80015b0 <HAL_RCC_OscConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000820:	f000 fa46 	bl	8000cb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000824:	230f      	movs	r3, #15
 8000826:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000828:	2302      	movs	r3, #2
 800082a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000830:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000834:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	2105      	movs	r1, #5
 8000842:	4618      	mov	r0, r3
 8000844:	f001 f92c 	bl	8001aa0 <HAL_RCC_ClockConfig>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800084e:	f000 fa2f 	bl	8000cb0 <Error_Handler>
  }
}
 8000852:	bf00      	nop
 8000854:	3750      	adds	r7, #80	; 0x50
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	40023800 	.word	0x40023800
 8000860:	40007000 	.word	0x40007000

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08a      	sub	sp, #40	; 0x28
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	613b      	str	r3, [r7, #16]
 800087e:	4b51      	ldr	r3, [pc, #324]	; (80009c4 <MX_GPIO_Init+0x160>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a50      	ldr	r2, [pc, #320]	; (80009c4 <MX_GPIO_Init+0x160>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b4e      	ldr	r3, [pc, #312]	; (80009c4 <MX_GPIO_Init+0x160>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	4b4a      	ldr	r3, [pc, #296]	; (80009c4 <MX_GPIO_Init+0x160>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a49      	ldr	r2, [pc, #292]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b47      	ldr	r3, [pc, #284]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a42      	ldr	r2, [pc, #264]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	60bb      	str	r3, [r7, #8]
 80008cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	607b      	str	r3, [r7, #4]
 80008d2:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	607b      	str	r3, [r7, #4]
 80008e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	603b      	str	r3, [r7, #0]
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008f4:	f043 0308 	orr.w	r3, r3, #8
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x160>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0308 	and.w	r3, r3, #8
 8000902:	603b      	str	r3, [r7, #0]
 8000904:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8000906:	2200      	movs	r2, #0
 8000908:	2108      	movs	r1, #8
 800090a:	482f      	ldr	r0, [pc, #188]	; (80009c8 <MX_GPIO_Init+0x164>)
 800090c:	f000 fe1c 	bl	8001548 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000910:	2200      	movs	r2, #0
 8000912:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000916:	482d      	ldr	r0, [pc, #180]	; (80009cc <MX_GPIO_Init+0x168>)
 8000918:	f000 fe16 	bl	8001548 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800091c:	2308      	movs	r3, #8
 800091e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000920:	2301      	movs	r3, #1
 8000922:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800092c:	f107 0314 	add.w	r3, r7, #20
 8000930:	4619      	mov	r1, r3
 8000932:	4825      	ldr	r0, [pc, #148]	; (80009c8 <MX_GPIO_Init+0x164>)
 8000934:	f000 fc54 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000938:	2301      	movs	r3, #1
 800093a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000940:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000942:	2300      	movs	r3, #0
 8000944:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4820      	ldr	r0, [pc, #128]	; (80009d0 <MX_GPIO_Init+0x16c>)
 800094e:	f000 fc47 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000952:	2304      	movs	r3, #4
 8000954:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000956:	2300      	movs	r3, #0
 8000958:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	481b      	ldr	r0, [pc, #108]	; (80009d4 <MX_GPIO_Init+0x170>)
 8000966:	f000 fc3b 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800096a:	f24f 0310 	movw	r3, #61456	; 0xf010
 800096e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	4619      	mov	r1, r3
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <MX_GPIO_Init+0x168>)
 8000984:	f000 fc2c 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000988:	2320      	movs	r3, #32
 800098a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098c:	2300      	movs	r3, #0
 800098e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	480c      	ldr	r0, [pc, #48]	; (80009cc <MX_GPIO_Init+0x168>)
 800099c:	f000 fc20 	bl	80011e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80009a0:	2302      	movs	r3, #2
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_GPIO_Init+0x164>)
 80009b6:	f000 fc13 	bl	80011e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	; 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40021000 	.word	0x40021000
 80009cc:	40020c00 	.word	0x40020c00
 80009d0:	40020000 	.word	0x40020000
 80009d4:	40020400 	.word	0x40020400

080009d8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b086      	sub	sp, #24
 80009dc:	af02      	add	r7, sp, #8
 80009de:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		printf("Toggling green LED");
 80009e0:	4817      	ldr	r0, [pc, #92]	; (8000a40 <led_green_handler+0x68>)
 80009e2:	f006 fed9 	bl	8007798 <iprintf>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009e6:	4816      	ldr	r0, [pc, #88]	; (8000a40 <led_green_handler+0x68>)
 80009e8:	f006 fd64 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 80009ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009f0:	4814      	ldr	r0, [pc, #80]	; (8000a44 <led_green_handler+0x6c>)
 80009f2:	f000 fdc2 	bl	800157a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 80009f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	2300      	movs	r3, #0
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2000      	movs	r0, #0
 8000a04:	f003 f9c0 	bl	8003d88 <xTaskGenericNotifyWait>
 8000a08:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2b01      	cmp	r3, #1
 8000a0e:	d1e7      	bne.n	80009e0 <led_green_handler+0x8>
			vTaskSuspendAll();
 8000a10:	f002 fc6a 	bl	80032e8 <vTaskSuspendAll>
			next_task_handle = ledo_task_handle;
 8000a14:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <led_green_handler+0x70>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0c      	ldr	r2, [pc, #48]	; (8000a4c <led_green_handler+0x74>)
 8000a1a:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a1c:	f002 fc72 	bl	8003304 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a26:	4807      	ldr	r0, [pc, #28]	; (8000a44 <led_green_handler+0x6c>)
 8000a28:	f000 fd8e 	bl	8001548 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <led_green_handler+0x78>)
 8000a2e:	f006 fd41 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(ledg_task_handle);
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <led_green_handler+0x7c>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	4618      	mov	r0, r3
 8000a38:	f002 fa82 	bl	8002f40 <vTaskSuspend>
		printf("Toggling green LED");
 8000a3c:	e7d0      	b.n	80009e0 <led_green_handler+0x8>
 8000a3e:	bf00      	nop
 8000a40:	08008540 	.word	0x08008540
 8000a44:	40020c00 	.word	0x40020c00
 8000a48:	2000009c 	.word	0x2000009c
 8000a4c:	200000a8 	.word	0x200000a8
 8000a50:	08008554 	.word	0x08008554
 8000a54:	20000094 	.word	0x20000094

08000a58 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b086      	sub	sp, #24
 8000a5c:	af02      	add	r7, sp, #8
 8000a5e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <led_orange_handler+0x60>)
 8000a62:	f006 fd27 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13 );
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	4814      	ldr	r0, [pc, #80]	; (8000abc <led_orange_handler+0x64>)
 8000a6c:	f000 fd85 	bl	800157a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 8000a70:	f44f 7348 	mov.w	r3, #800	; 0x320
 8000a74:	9300      	str	r3, [sp, #0]
 8000a76:	2300      	movs	r3, #0
 8000a78:	2200      	movs	r2, #0
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f003 f983 	bl	8003d88 <xTaskGenericNotifyWait>
 8000a82:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d1ea      	bne.n	8000a60 <led_orange_handler+0x8>
			vTaskSuspendAll();
 8000a8a:	f002 fc2d 	bl	80032e8 <vTaskSuspendAll>
			next_task_handle = ledr_task_handle;
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <led_orange_handler+0x68>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <led_orange_handler+0x6c>)
 8000a94:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a96:	f002 fc35 	bl	8003304 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000aa0:	4806      	ldr	r0, [pc, #24]	; (8000abc <led_orange_handler+0x64>)
 8000aa2:	f000 fd51 	bl	8001548 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000aa6:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <led_orange_handler+0x70>)
 8000aa8:	f006 fd04 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(ledo_task_handle);
 8000aac:	4b07      	ldr	r3, [pc, #28]	; (8000acc <led_orange_handler+0x74>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f002 fa45 	bl	8002f40 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000ab6:	e7d3      	b.n	8000a60 <led_orange_handler+0x8>
 8000ab8:	0800856c 	.word	0x0800856c
 8000abc:	40020c00 	.word	0x40020c00
 8000ac0:	20000098 	.word	0x20000098
 8000ac4:	200000a8 	.word	0x200000a8
 8000ac8:	08008580 	.word	0x08008580
 8000acc:	2000009c 	.word	0x2000009c

08000ad0 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b086      	sub	sp, #24
 8000ad4:	af02      	add	r7, sp, #8
 8000ad6:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000ad8:	4815      	ldr	r0, [pc, #84]	; (8000b30 <led_red_handler+0x60>)
 8000ada:	f006 fceb 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000ade:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae2:	4814      	ldr	r0, [pc, #80]	; (8000b34 <led_red_handler+0x64>)
 8000ae4:	f000 fd49 	bl	800157a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(600));
 8000ae8:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000aec:	9300      	str	r3, [sp, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	2200      	movs	r2, #0
 8000af2:	2100      	movs	r1, #0
 8000af4:	2000      	movs	r0, #0
 8000af6:	f003 f947 	bl	8003d88 <xTaskGenericNotifyWait>
 8000afa:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	d1ea      	bne.n	8000ad8 <led_red_handler+0x8>
			vTaskSuspendAll();
 8000b02:	f002 fbf1 	bl	80032e8 <vTaskSuspendAll>
			next_task_handle = ledb_task_handle;
 8000b06:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <led_red_handler+0x68>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4a0c      	ldr	r2, [pc, #48]	; (8000b3c <led_red_handler+0x6c>)
 8000b0c:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000b0e:	f002 fbf9 	bl	8003304 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 8000b12:	2201      	movs	r2, #1
 8000b14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b18:	4806      	ldr	r0, [pc, #24]	; (8000b34 <led_red_handler+0x64>)
 8000b1a:	f000 fd15 	bl	8001548 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000b1e:	4808      	ldr	r0, [pc, #32]	; (8000b40 <led_red_handler+0x70>)
 8000b20:	f006 fcc8 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskSuspend(ledr_task_handle);
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <led_red_handler+0x74>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f002 fa09 	bl	8002f40 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000b2e:	e7d3      	b.n	8000ad8 <led_red_handler+0x8>
 8000b30:	08008598 	.word	0x08008598
 8000b34:	40020c00 	.word	0x40020c00
 8000b38:	200000a0 	.word	0x200000a0
 8000b3c:	200000a8 	.word	0x200000a8
 8000b40:	080085ac 	.word	0x080085ac
 8000b44:	20000098 	.word	0x20000098

08000b48 <led_blue_handler>:
	}
}


static void led_blue_handler(void* parameters)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af02      	add	r7, sp, #8
 8000b4e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000b50:	4815      	ldr	r0, [pc, #84]	; (8000ba8 <led_blue_handler+0x60>)
 8000b52:	f006 fcaf 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000b56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b5a:	4814      	ldr	r0, [pc, #80]	; (8000bac <led_blue_handler+0x64>)
 8000b5c:	f000 fd0d 	bl	800157a <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000b60:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2300      	movs	r3, #0
 8000b68:	2200      	movs	r2, #0
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f003 f90b 	bl	8003d88 <xTaskGenericNotifyWait>
 8000b72:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d1ea      	bne.n	8000b50 <led_blue_handler+0x8>
			vTaskSuspendAll();
 8000b7a:	f002 fbb5 	bl	80032e8 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <led_blue_handler+0x68>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000b84:	f002 fbbe 	bl	8003304 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 8000b88:	2201      	movs	r2, #1
 8000b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b8e:	4807      	ldr	r0, [pc, #28]	; (8000bac <led_blue_handler+0x64>)
 8000b90:	f000 fcda 	bl	8001548 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue LED task");
 8000b94:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <led_blue_handler+0x6c>)
 8000b96:	f006 fc8d 	bl	80074b4 <SEGGER_SYSVIEW_PrintfTarget>
//			vTaskDelete(btn_task_handle);
			vTaskSuspend(ledb_task_handle);
 8000b9a:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <led_blue_handler+0x70>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f002 f9ce 	bl	8002f40 <vTaskSuspend>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000ba4:	e7d4      	b.n	8000b50 <led_blue_handler+0x8>
 8000ba6:	bf00      	nop
 8000ba8:	080085c0 	.word	0x080085c0
 8000bac:	40020c00 	.word	0x40020c00
 8000bb0:	200000a8 	.word	0x200000a8
 8000bb4:	080085d4 	.word	0x080085d4
 8000bb8:	200000a0 	.word	0x200000a0

08000bbc <button_handler>:
//        prev_read = btn_read;
//        vTaskDelay(pdMS_TO_TICKS(10));
//    }
//}
static void button_handler(void* parameters)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
    uint8_t btn_read = 0;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
    uint8_t prev_read = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	75fb      	strb	r3, [r7, #23]
    TaskHandle_t current_task_handle = ledg_task_handle;
 8000bcc:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <button_handler+0xbc>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	613b      	str	r3, [r7, #16]

    while(1) {
        btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000bd2:	2101      	movs	r1, #1
 8000bd4:	4829      	ldr	r0, [pc, #164]	; (8000c7c <button_handler+0xc0>)
 8000bd6:	f000 fc9f 	bl	8001518 <HAL_GPIO_ReadPin>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	73fb      	strb	r3, [r7, #15]

        if (btn_read && !prev_read) {
 8000bde:	7bfb      	ldrb	r3, [r7, #15]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d042      	beq.n	8000c6a <button_handler+0xae>
 8000be4:	7dfb      	ldrb	r3, [r7, #23]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d13f      	bne.n	8000c6a <button_handler+0xae>
            // Button pressed

            if (current_task_handle != NULL) {
 8000bea:	693b      	ldr	r3, [r7, #16]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d025      	beq.n	8000c3c <button_handler+0x80>
                // Suspend the current task
                vTaskSuspend(current_task_handle);
 8000bf0:	6938      	ldr	r0, [r7, #16]
 8000bf2:	f002 f9a5 	bl	8002f40 <vTaskSuspend>

                // Get the next task based on priority
                if (current_task_handle == ledg_task_handle) {
 8000bf6:	4b20      	ldr	r3, [pc, #128]	; (8000c78 <button_handler+0xbc>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	429a      	cmp	r2, r3
 8000bfe:	d103      	bne.n	8000c08 <button_handler+0x4c>
                    current_task_handle = ledo_task_handle;
 8000c00:	4b1f      	ldr	r3, [pc, #124]	; (8000c80 <button_handler+0xc4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	e030      	b.n	8000c6a <button_handler+0xae>
                } else if (current_task_handle == ledo_task_handle) {
 8000c08:	4b1d      	ldr	r3, [pc, #116]	; (8000c80 <button_handler+0xc4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	693a      	ldr	r2, [r7, #16]
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d103      	bne.n	8000c1a <button_handler+0x5e>
                    current_task_handle = ledr_task_handle;
 8000c12:	4b1c      	ldr	r3, [pc, #112]	; (8000c84 <button_handler+0xc8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	e027      	b.n	8000c6a <button_handler+0xae>
                } else if (current_task_handle == ledr_task_handle) {
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <button_handler+0xc8>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d103      	bne.n	8000c2c <button_handler+0x70>
                    current_task_handle = ledb_task_handle;
 8000c24:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <button_handler+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	e01e      	b.n	8000c6a <button_handler+0xae>
                } else if (current_task_handle == ledb_task_handle) {
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <button_handler+0xcc>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	429a      	cmp	r2, r3
 8000c34:	d119      	bne.n	8000c6a <button_handler+0xae>
                    current_task_handle = NULL;  // All tasks are suspended
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
 8000c3a:	e016      	b.n	8000c6a <button_handler+0xae>
                }
            } else {
                // Resume all tasks
                vTaskResume(ledg_task_handle);
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <button_handler+0xbc>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f002 fa5d 	bl	8003100 <vTaskResume>
                vTaskResume(ledo_task_handle);
 8000c46:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <button_handler+0xc4>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 fa58 	bl	8003100 <vTaskResume>
                vTaskResume(ledr_task_handle);
 8000c50:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <button_handler+0xc8>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4618      	mov	r0, r3
 8000c56:	f002 fa53 	bl	8003100 <vTaskResume>
                vTaskResume(ledb_task_handle);
 8000c5a:	4b0b      	ldr	r3, [pc, #44]	; (8000c88 <button_handler+0xcc>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f002 fa4e 	bl	8003100 <vTaskResume>
                current_task_handle = ledg_task_handle;
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <button_handler+0xbc>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	613b      	str	r3, [r7, #16]
            }
        }

        prev_read = btn_read;
 8000c6a:	7bfb      	ldrb	r3, [r7, #15]
 8000c6c:	75fb      	strb	r3, [r7, #23]
        vTaskDelay(pdMS_TO_TICKS(10));
 8000c6e:	200a      	movs	r0, #10
 8000c70:	f002 f92e 	bl	8002ed0 <vTaskDelay>
        btn_read = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000c74:	e7ad      	b.n	8000bd2 <button_handler+0x16>
 8000c76:	bf00      	nop
 8000c78:	20000094 	.word	0x20000094
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	2000009c 	.word	0x2000009c
 8000c84:	20000098 	.word	0x20000098
 8000c88:	200000a0 	.word	0x200000a0

08000c8c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a04      	ldr	r2, [pc, #16]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d101      	bne.n	8000ca2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c9e:	f000 f99d 	bl	8000fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40001000 	.word	0x40001000

08000cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb4:	b672      	cpsid	i
}
 8000cb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <Error_Handler+0x8>
	...

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	607b      	str	r3, [r7, #4]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cca:	4a0f      	ldr	r2, [pc, #60]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ccc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cda:	607b      	str	r3, [r7, #4]
 8000cdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	603b      	str	r3, [r7, #0]
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	4a08      	ldr	r2, [pc, #32]	; (8000d08 <HAL_MspInit+0x4c>)
 8000ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cec:	6413      	str	r3, [r2, #64]	; 0x40
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_MspInit+0x4c>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf6:	603b      	str	r3, [r7, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000cfa:	f003 fcfd 	bl	80046f8 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40023800 	.word	0x40023800

08000d0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b08e      	sub	sp, #56	; 0x38
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	4b33      	ldr	r3, [pc, #204]	; (8000df0 <HAL_InitTick+0xe4>)
 8000d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d24:	4a32      	ldr	r2, [pc, #200]	; (8000df0 <HAL_InitTick+0xe4>)
 8000d26:	f043 0310 	orr.w	r3, r3, #16
 8000d2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2c:	4b30      	ldr	r3, [pc, #192]	; (8000df0 <HAL_InitTick+0xe4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	f003 0310 	and.w	r3, r3, #16
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d38:	f107 0210 	add.w	r2, r7, #16
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4611      	mov	r1, r2
 8000d42:	4618      	mov	r0, r3
 8000d44:	f001 f878 	bl	8001e38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d48:	6a3b      	ldr	r3, [r7, #32]
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d103      	bne.n	8000d5a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d52:	f001 f85d 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 8000d56:	6378      	str	r0, [r7, #52]	; 0x34
 8000d58:	e004      	b.n	8000d64 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d5a:	f001 f859 	bl	8001e10 <HAL_RCC_GetPCLK1Freq>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d66:	4a23      	ldr	r2, [pc, #140]	; (8000df4 <HAL_InitTick+0xe8>)
 8000d68:	fba2 2303 	umull	r2, r3, r2, r3
 8000d6c:	0c9b      	lsrs	r3, r3, #18
 8000d6e:	3b01      	subs	r3, #1
 8000d70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d72:	4b21      	ldr	r3, [pc, #132]	; (8000df8 <HAL_InitTick+0xec>)
 8000d74:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <HAL_InitTick+0xf0>)
 8000d76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_InitTick+0xec>)
 8000d7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d80:	4a1d      	ldr	r2, [pc, #116]	; (8000df8 <HAL_InitTick+0xec>)
 8000d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_InitTick+0xec>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <HAL_InitTick+0xec>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_InitTick+0xec>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d98:	4817      	ldr	r0, [pc, #92]	; (8000df8 <HAL_InitTick+0xec>)
 8000d9a:	f001 f87f 	bl	8001e9c <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000da4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d11b      	bne.n	8000de4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dac:	4812      	ldr	r0, [pc, #72]	; (8000df8 <HAL_InitTick+0xec>)
 8000dae:	f001 f8cf 	bl	8001f50 <HAL_TIM_Base_Start_IT>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000db8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d111      	bne.n	8000de4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dc0:	2036      	movs	r0, #54	; 0x36
 8000dc2:	f000 f9ff 	bl	80011c4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b0f      	cmp	r3, #15
 8000dca:	d808      	bhi.n	8000dde <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	6879      	ldr	r1, [r7, #4]
 8000dd0:	2036      	movs	r0, #54	; 0x36
 8000dd2:	f000 f9db 	bl	800118c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <HAL_InitTick+0xf4>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	e002      	b.n	8000de4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000de4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3738      	adds	r7, #56	; 0x38
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800
 8000df4:	431bde83 	.word	0x431bde83
 8000df8:	200000ac 	.word	0x200000ac
 8000dfc:	40001000 	.word	0x40001000
 8000e00:	20000004 	.word	0x20000004

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <TIM6_DAC_IRQHandler+0x10>)
 8000e36:	f001 f8fb 	bl	8002030 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	200000ac 	.word	0x200000ac

08000e44 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	60f8      	str	r0, [r7, #12]
 8000e4c:	60b9      	str	r1, [r7, #8]
 8000e4e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
 8000e54:	e00a      	b.n	8000e6c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e56:	f3af 8000 	nop.w
 8000e5a:	4601      	mov	r1, r0
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	b2ca      	uxtb	r2, r1
 8000e64:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e66:	697b      	ldr	r3, [r7, #20]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	697a      	ldr	r2, [r7, #20]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	dbf0      	blt.n	8000e56 <_read+0x12>
  }

  return len;
 8000e74:	687b      	ldr	r3, [r7, #4]
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	60f8      	str	r0, [r7, #12]
 8000e86:	60b9      	str	r1, [r7, #8]
 8000e88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e009      	b.n	8000ea4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	617b      	str	r3, [r7, #20]
 8000ea4:	697a      	ldr	r2, [r7, #20]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbf1      	blt.n	8000e90 <_write+0x12>
  }
  return len;
 8000eac:	687b      	ldr	r3, [r7, #4]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3718      	adds	r7, #24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <_close>:

int _close(int file)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b083      	sub	sp, #12
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	370c      	adds	r7, #12
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
 8000ed6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ede:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_isatty>:

int _isatty(int file)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ef6:	2301      	movs	r3, #1
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	60f8      	str	r0, [r7, #12]
 8000f0c:	60b9      	str	r1, [r7, #8]
 8000f0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f10:	2300      	movs	r3, #0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3714      	adds	r7, #20
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
	...

08000f20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f006 fcc5 	bl	8007900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb49 	bl	800060c <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f88:	0800874c 	.word	0x0800874c
  ldr r2, =_sbss
 8000f8c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000f90:	20014680 	.word	0x20014680

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f8d8 	bl	8001176 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	200f      	movs	r0, #15
 8000fc8:	f7ff fea0 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe76 	bl	8000cbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_IncTick+0x20>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	461a      	mov	r2, r3
 8000fe6:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x24>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4413      	add	r3, r2
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_IncTick+0x24>)
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000008 	.word	0x20000008
 8001000:	200000f4 	.word	0x200000f4

08001004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  return uwTick;
 8001008:	4b03      	ldr	r3, [pc, #12]	; (8001018 <HAL_GetTick+0x14>)
 800100a:	681b      	ldr	r3, [r3, #0]
}
 800100c:	4618      	mov	r0, r3
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	200000f4 	.word	0x200000f4

0800101c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f003 0307 	and.w	r3, r3, #7
 800102a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001032:	68ba      	ldr	r2, [r7, #8]
 8001034:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001038:	4013      	ands	r3, r2
 800103a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001044:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001048:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800104c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800104e:	4a04      	ldr	r2, [pc, #16]	; (8001060 <__NVIC_SetPriorityGrouping+0x44>)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	60d3      	str	r3, [r2, #12]
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001068:	4b04      	ldr	r3, [pc, #16]	; (800107c <__NVIC_GetPriorityGrouping+0x18>)
 800106a:	68db      	ldr	r3, [r3, #12]
 800106c:	0a1b      	lsrs	r3, r3, #8
 800106e:	f003 0307 	and.w	r3, r3, #7
}
 8001072:	4618      	mov	r0, r3
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	4603      	mov	r3, r0
 8001088:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	2b00      	cmp	r3, #0
 8001090:	db0b      	blt.n	80010aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001092:	79fb      	ldrb	r3, [r7, #7]
 8001094:	f003 021f 	and.w	r2, r3, #31
 8001098:	4907      	ldr	r1, [pc, #28]	; (80010b8 <__NVIC_EnableIRQ+0x38>)
 800109a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109e:	095b      	lsrs	r3, r3, #5
 80010a0:	2001      	movs	r0, #1
 80010a2:	fa00 f202 	lsl.w	r2, r0, r2
 80010a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	e000e100 	.word	0xe000e100

080010bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	4603      	mov	r3, r0
 80010c4:	6039      	str	r1, [r7, #0]
 80010c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	db0a      	blt.n	80010e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	490c      	ldr	r1, [pc, #48]	; (8001108 <__NVIC_SetPriority+0x4c>)
 80010d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010da:	0112      	lsls	r2, r2, #4
 80010dc:	b2d2      	uxtb	r2, r2
 80010de:	440b      	add	r3, r1
 80010e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010e4:	e00a      	b.n	80010fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	b2da      	uxtb	r2, r3
 80010ea:	4908      	ldr	r1, [pc, #32]	; (800110c <__NVIC_SetPriority+0x50>)
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	3b04      	subs	r3, #4
 80010f4:	0112      	lsls	r2, r2, #4
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	440b      	add	r3, r1
 80010fa:	761a      	strb	r2, [r3, #24]
}
 80010fc:	bf00      	nop
 80010fe:	370c      	adds	r7, #12
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	e000e100 	.word	0xe000e100
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001110:	b480      	push	{r7}
 8001112:	b089      	sub	sp, #36	; 0x24
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	f003 0307 	and.w	r3, r3, #7
 8001122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f1c3 0307 	rsb	r3, r3, #7
 800112a:	2b04      	cmp	r3, #4
 800112c:	bf28      	it	cs
 800112e:	2304      	movcs	r3, #4
 8001130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	3304      	adds	r3, #4
 8001136:	2b06      	cmp	r3, #6
 8001138:	d902      	bls.n	8001140 <NVIC_EncodePriority+0x30>
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3b03      	subs	r3, #3
 800113e:	e000      	b.n	8001142 <NVIC_EncodePriority+0x32>
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001144:	f04f 32ff 	mov.w	r2, #4294967295
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	fa02 f303 	lsl.w	r3, r2, r3
 800114e:	43da      	mvns	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	401a      	ands	r2, r3
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001158:	f04f 31ff 	mov.w	r1, #4294967295
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	fa01 f303 	lsl.w	r3, r1, r3
 8001162:	43d9      	mvns	r1, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001168:	4313      	orrs	r3, r2
         );
}
 800116a:	4618      	mov	r0, r3
 800116c:	3724      	adds	r7, #36	; 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff ff4c 	bl	800101c <__NVIC_SetPriorityGrouping>
}
 8001184:	bf00      	nop
 8001186:	3708      	adds	r7, #8
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}

0800118c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	60b9      	str	r1, [r7, #8]
 8001196:	607a      	str	r2, [r7, #4]
 8001198:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800119a:	2300      	movs	r3, #0
 800119c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119e:	f7ff ff61 	bl	8001064 <__NVIC_GetPriorityGrouping>
 80011a2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	68b9      	ldr	r1, [r7, #8]
 80011a8:	6978      	ldr	r0, [r7, #20]
 80011aa:	f7ff ffb1 	bl	8001110 <NVIC_EncodePriority>
 80011ae:	4602      	mov	r2, r0
 80011b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b4:	4611      	mov	r1, r2
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff80 	bl	80010bc <__NVIC_SetPriority>
}
 80011bc:	bf00      	nop
 80011be:	3718      	adds	r7, #24
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff ff54 	bl	8001080 <__NVIC_EnableIRQ>
}
 80011d8:	bf00      	nop
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	; 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	61fb      	str	r3, [r7, #28]
 80011fa:	e16b      	b.n	80014d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011fc:	2201      	movs	r2, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4013      	ands	r3, r2
 800120e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	429a      	cmp	r2, r3
 8001216:	f040 815a 	bne.w	80014ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	2b01      	cmp	r3, #1
 8001224:	d005      	beq.n	8001232 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800122e:	2b02      	cmp	r3, #2
 8001230:	d130      	bne.n	8001294 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	2203      	movs	r2, #3
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	68da      	ldr	r2, [r3, #12]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001268:	2201      	movs	r2, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	091b      	lsrs	r3, r3, #4
 800127e:	f003 0201 	and.w	r2, r3, #1
 8001282:	69fb      	ldr	r3, [r7, #28]
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	69ba      	ldr	r2, [r7, #24]
 800128a:	4313      	orrs	r3, r2
 800128c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 0303 	and.w	r3, r3, #3
 800129c:	2b03      	cmp	r3, #3
 800129e:	d017      	beq.n	80012d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	fa02 f303 	lsl.w	r3, r2, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f003 0303 	and.w	r3, r3, #3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d123      	bne.n	8001324 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012dc:	69fb      	ldr	r3, [r7, #28]
 80012de:	08da      	lsrs	r2, r3, #3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3208      	adds	r2, #8
 80012e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	f003 0307 	and.w	r3, r3, #7
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	220f      	movs	r2, #15
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691a      	ldr	r2, [r3, #16]
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	fa02 f303 	lsl.w	r3, r2, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4313      	orrs	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	08da      	lsrs	r2, r3, #3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	3208      	adds	r2, #8
 800131e:	69b9      	ldr	r1, [r7, #24]
 8001320:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4013      	ands	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0203 	and.w	r2, r3, #3
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001360:	2b00      	cmp	r3, #0
 8001362:	f000 80b4 	beq.w	80014ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b60      	ldr	r3, [pc, #384]	; (80014ec <HAL_GPIO_Init+0x30c>)
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	4a5f      	ldr	r2, [pc, #380]	; (80014ec <HAL_GPIO_Init+0x30c>)
 8001370:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001374:	6453      	str	r3, [r2, #68]	; 0x44
 8001376:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <HAL_GPIO_Init+0x30c>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001382:	4a5b      	ldr	r2, [pc, #364]	; (80014f0 <HAL_GPIO_Init+0x310>)
 8001384:	69fb      	ldr	r3, [r7, #28]
 8001386:	089b      	lsrs	r3, r3, #2
 8001388:	3302      	adds	r3, #2
 800138a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800138e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	4013      	ands	r3, r2
 80013a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	4a52      	ldr	r2, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x314>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d02b      	beq.n	8001406 <HAL_GPIO_Init+0x226>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a51      	ldr	r2, [pc, #324]	; (80014f8 <HAL_GPIO_Init+0x318>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x222>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a50      	ldr	r2, [pc, #320]	; (80014fc <HAL_GPIO_Init+0x31c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x21e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4f      	ldr	r2, [pc, #316]	; (8001500 <HAL_GPIO_Init+0x320>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x21a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4e      	ldr	r2, [pc, #312]	; (8001504 <HAL_GPIO_Init+0x324>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x216>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4d      	ldr	r2, [pc, #308]	; (8001508 <HAL_GPIO_Init+0x328>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x212>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4c      	ldr	r2, [pc, #304]	; (800150c <HAL_GPIO_Init+0x32c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x20e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4b      	ldr	r2, [pc, #300]	; (8001510 <HAL_GPIO_Init+0x330>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x20a>
 80013e6:	2307      	movs	r3, #7
 80013e8:	e00e      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013ea:	2308      	movs	r3, #8
 80013ec:	e00c      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013ee:	2306      	movs	r3, #6
 80013f0:	e00a      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013f2:	2305      	movs	r3, #5
 80013f4:	e008      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013f6:	2304      	movs	r3, #4
 80013f8:	e006      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013fa:	2303      	movs	r3, #3
 80013fc:	e004      	b.n	8001408 <HAL_GPIO_Init+0x228>
 80013fe:	2302      	movs	r3, #2
 8001400:	e002      	b.n	8001408 <HAL_GPIO_Init+0x228>
 8001402:	2301      	movs	r3, #1
 8001404:	e000      	b.n	8001408 <HAL_GPIO_Init+0x228>
 8001406:	2300      	movs	r3, #0
 8001408:	69fa      	ldr	r2, [r7, #28]
 800140a:	f002 0203 	and.w	r2, r2, #3
 800140e:	0092      	lsls	r2, r2, #2
 8001410:	4093      	lsls	r3, r2
 8001412:	69ba      	ldr	r2, [r7, #24]
 8001414:	4313      	orrs	r3, r2
 8001416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001418:	4935      	ldr	r1, [pc, #212]	; (80014f0 <HAL_GPIO_Init+0x310>)
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	089b      	lsrs	r3, r3, #2
 800141e:	3302      	adds	r3, #2
 8001420:	69ba      	ldr	r2, [r7, #24]
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001426:	4b3b      	ldr	r3, [pc, #236]	; (8001514 <HAL_GPIO_Init+0x334>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	43db      	mvns	r3, r3
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	4013      	ands	r3, r2
 8001434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d003      	beq.n	800144a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800144a:	4a32      	ldr	r2, [pc, #200]	; (8001514 <HAL_GPIO_Init+0x334>)
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001450:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_GPIO_Init+0x334>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	43db      	mvns	r3, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4013      	ands	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001474:	4a27      	ldr	r2, [pc, #156]	; (8001514 <HAL_GPIO_Init+0x334>)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_GPIO_Init+0x334>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	43db      	mvns	r3, r3
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	4013      	ands	r3, r2
 8001488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001496:	69ba      	ldr	r2, [r7, #24]
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149e:	4a1d      	ldr	r2, [pc, #116]	; (8001514 <HAL_GPIO_Init+0x334>)
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_GPIO_Init+0x334>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	43db      	mvns	r3, r3
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	4013      	ands	r3, r2
 80014b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d003      	beq.n	80014c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c8:	4a12      	ldr	r2, [pc, #72]	; (8001514 <HAL_GPIO_Init+0x334>)
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3301      	adds	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	f67f ae90 	bls.w	80011fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3724      	adds	r7, #36	; 0x24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40023800 	.word	0x40023800
 80014f0:	40013800 	.word	0x40013800
 80014f4:	40020000 	.word	0x40020000
 80014f8:	40020400 	.word	0x40020400
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020c00 	.word	0x40020c00
 8001504:	40021000 	.word	0x40021000
 8001508:	40021400 	.word	0x40021400
 800150c:	40021800 	.word	0x40021800
 8001510:	40021c00 	.word	0x40021c00
 8001514:	40013c00 	.word	0x40013c00

08001518 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	691a      	ldr	r2, [r3, #16]
 8001528:	887b      	ldrh	r3, [r7, #2]
 800152a:	4013      	ands	r3, r2
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001530:	2301      	movs	r3, #1
 8001532:	73fb      	strb	r3, [r7, #15]
 8001534:	e001      	b.n	800153a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001536:	2300      	movs	r3, #0
 8001538:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
 8001554:	4613      	mov	r3, r2
 8001556:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001558:	787b      	ldrb	r3, [r7, #1]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800155e:	887a      	ldrh	r2, [r7, #2]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001564:	e003      	b.n	800156e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001566:	887b      	ldrh	r3, [r7, #2]
 8001568:	041a      	lsls	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	619a      	str	r2, [r3, #24]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	460b      	mov	r3, r1
 8001584:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800158c:	887a      	ldrh	r2, [r7, #2]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4013      	ands	r3, r2
 8001592:	041a      	lsls	r2, r3, #16
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	43d9      	mvns	r1, r3
 8001598:	887b      	ldrh	r3, [r7, #2]
 800159a:	400b      	ands	r3, r1
 800159c:	431a      	orrs	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	619a      	str	r2, [r3, #24]
}
 80015a2:	bf00      	nop
 80015a4:	3714      	adds	r7, #20
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
	...

080015b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b086      	sub	sp, #24
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d101      	bne.n	80015c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e267      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d075      	beq.n	80016ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015ce:	4b88      	ldr	r3, [pc, #544]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	f003 030c 	and.w	r3, r3, #12
 80015d6:	2b04      	cmp	r3, #4
 80015d8:	d00c      	beq.n	80015f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015da:	4b85      	ldr	r3, [pc, #532]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80015e2:	2b08      	cmp	r3, #8
 80015e4:	d112      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80015e6:	4b82      	ldr	r3, [pc, #520]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015f2:	d10b      	bne.n	800160c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015f4:	4b7e      	ldr	r3, [pc, #504]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d05b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x108>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d157      	bne.n	80016b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e242      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001614:	d106      	bne.n	8001624 <HAL_RCC_OscConfig+0x74>
 8001616:	4b76      	ldr	r3, [pc, #472]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a75      	ldr	r2, [pc, #468]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800161c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001620:	6013      	str	r3, [r2, #0]
 8001622:	e01d      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800162c:	d10c      	bne.n	8001648 <HAL_RCC_OscConfig+0x98>
 800162e:	4b70      	ldr	r3, [pc, #448]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4a6f      	ldr	r2, [pc, #444]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001634:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001638:	6013      	str	r3, [r2, #0]
 800163a:	4b6d      	ldr	r3, [pc, #436]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a6c      	ldr	r2, [pc, #432]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001640:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	e00b      	b.n	8001660 <HAL_RCC_OscConfig+0xb0>
 8001648:	4b69      	ldr	r3, [pc, #420]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a68      	ldr	r2, [pc, #416]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800164e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001652:	6013      	str	r3, [r2, #0]
 8001654:	4b66      	ldr	r3, [pc, #408]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a65      	ldr	r2, [pc, #404]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800165a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800165e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d013      	beq.n	8001690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff fccc 	bl	8001004 <HAL_GetTick>
 800166c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001670:	f7ff fcc8 	bl	8001004 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b64      	cmp	r3, #100	; 0x64
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e207      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b5b      	ldr	r3, [pc, #364]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0xc0>
 800168e:	e014      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001690:	f7ff fcb8 	bl	8001004 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001698:	f7ff fcb4 	bl	8001004 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b64      	cmp	r3, #100	; 0x64
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e1f3      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016aa:	4b51      	ldr	r3, [pc, #324]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0xe8>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0302 	and.w	r3, r3, #2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d063      	beq.n	800178e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016c6:	4b4a      	ldr	r3, [pc, #296]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 030c 	and.w	r3, r3, #12
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d00b      	beq.n	80016ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016d2:	4b47      	ldr	r3, [pc, #284]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d11c      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	4b44      	ldr	r3, [pc, #272]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d116      	bne.n	8001718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ea:	4b41      	ldr	r3, [pc, #260]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d005      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	68db      	ldr	r3, [r3, #12]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d001      	beq.n	8001702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e1c7      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001702:	4b3b      	ldr	r3, [pc, #236]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	00db      	lsls	r3, r3, #3
 8001710:	4937      	ldr	r1, [pc, #220]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001712:	4313      	orrs	r3, r2
 8001714:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001716:	e03a      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d020      	beq.n	8001762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001720:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001722:	2201      	movs	r2, #1
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001726:	f7ff fc6d 	bl	8001004 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800172e:	f7ff fc69 	bl	8001004 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e1a8      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001740:	4b2b      	ldr	r3, [pc, #172]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 0302 	and.w	r3, r3, #2
 8001748:	2b00      	cmp	r3, #0
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174c:	4b28      	ldr	r3, [pc, #160]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	691b      	ldr	r3, [r3, #16]
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	4925      	ldr	r1, [pc, #148]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 800175c:	4313      	orrs	r3, r2
 800175e:	600b      	str	r3, [r1, #0]
 8001760:	e015      	b.n	800178e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001762:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x244>)
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001768:	f7ff fc4c 	bl	8001004 <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800176e:	e008      	b.n	8001782 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001770:	f7ff fc48 	bl	8001004 <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e187      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0308 	and.w	r3, r3, #8
 8001796:	2b00      	cmp	r3, #0
 8001798:	d036      	beq.n	8001808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d016      	beq.n	80017d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017a4:	2201      	movs	r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017a8:	f7ff fc2c 	bl	8001004 <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017b0:	f7ff fc28 	bl	8001004 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e167      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <HAL_RCC_OscConfig+0x240>)
 80017c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0x200>
 80017ce:	e01b      	b.n	8001808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017d0:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_OscConfig+0x248>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d6:	f7ff fc15 	bl	8001004 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017dc:	e00e      	b.n	80017fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017de:	f7ff fc11 	bl	8001004 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d907      	bls.n	80017fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e150      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 80017f0:	40023800 	.word	0x40023800
 80017f4:	42470000 	.word	0x42470000
 80017f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017fc:	4b88      	ldr	r3, [pc, #544]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80017fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ea      	bne.n	80017de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	f000 8097 	beq.w	8001944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001816:	2300      	movs	r3, #0
 8001818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800181a:	4b81      	ldr	r3, [pc, #516]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	2b00      	cmp	r3, #0
 8001824:	d10f      	bne.n	8001846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b7d      	ldr	r3, [pc, #500]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800182c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182e:	4a7c      	ldr	r2, [pc, #496]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001834:	6413      	str	r3, [r2, #64]	; 0x40
 8001836:	4b7a      	ldr	r3, [pc, #488]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001842:	2301      	movs	r3, #1
 8001844:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001846:	4b77      	ldr	r3, [pc, #476]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184e:	2b00      	cmp	r3, #0
 8001850:	d118      	bne.n	8001884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001852:	4b74      	ldr	r3, [pc, #464]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a73      	ldr	r2, [pc, #460]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 8001858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800185c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185e:	f7ff fbd1 	bl	8001004 <HAL_GetTick>
 8001862:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001864:	e008      	b.n	8001878 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001866:	f7ff fbcd 	bl	8001004 <HAL_GetTick>
 800186a:	4602      	mov	r2, r0
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e10c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001878:	4b6a      	ldr	r3, [pc, #424]	; (8001a24 <HAL_RCC_OscConfig+0x474>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d0f0      	beq.n	8001866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d106      	bne.n	800189a <HAL_RCC_OscConfig+0x2ea>
 800188c:	4b64      	ldr	r3, [pc, #400]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800188e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001890:	4a63      	ldr	r2, [pc, #396]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001892:	f043 0301 	orr.w	r3, r3, #1
 8001896:	6713      	str	r3, [r2, #112]	; 0x70
 8001898:	e01c      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689b      	ldr	r3, [r3, #8]
 800189e:	2b05      	cmp	r3, #5
 80018a0:	d10c      	bne.n	80018bc <HAL_RCC_OscConfig+0x30c>
 80018a2:	4b5f      	ldr	r3, [pc, #380]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	4a5e      	ldr	r2, [pc, #376]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018a8:	f043 0304 	orr.w	r3, r3, #4
 80018ac:	6713      	str	r3, [r2, #112]	; 0x70
 80018ae:	4b5c      	ldr	r3, [pc, #368]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018b2:	4a5b      	ldr	r2, [pc, #364]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018b4:	f043 0301 	orr.w	r3, r3, #1
 80018b8:	6713      	str	r3, [r2, #112]	; 0x70
 80018ba:	e00b      	b.n	80018d4 <HAL_RCC_OscConfig+0x324>
 80018bc:	4b58      	ldr	r3, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018c0:	4a57      	ldr	r2, [pc, #348]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018c2:	f023 0301 	bic.w	r3, r3, #1
 80018c6:	6713      	str	r3, [r2, #112]	; 0x70
 80018c8:	4b55      	ldr	r3, [pc, #340]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	4a54      	ldr	r2, [pc, #336]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018ce:	f023 0304 	bic.w	r3, r3, #4
 80018d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d015      	beq.n	8001908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018dc:	f7ff fb92 	bl	8001004 <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018e2:	e00a      	b.n	80018fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb8e 	bl	8001004 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e0cb      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018fa:	4b49      	ldr	r3, [pc, #292]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80018fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0ee      	beq.n	80018e4 <HAL_RCC_OscConfig+0x334>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fb7c 	bl	8001004 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	e00a      	b.n	8001926 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001910:	f7ff fb78 	bl	8001004 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e0b5      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001926:	4b3e      	ldr	r3, [pc, #248]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1ee      	bne.n	8001910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001932:	7dfb      	ldrb	r3, [r7, #23]
 8001934:	2b01      	cmp	r3, #1
 8001936:	d105      	bne.n	8001944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001938:	4b39      	ldr	r3, [pc, #228]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 800193e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001942:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	2b00      	cmp	r3, #0
 800194a:	f000 80a1 	beq.w	8001a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800194e:	4b34      	ldr	r3, [pc, #208]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	f003 030c 	and.w	r3, r3, #12
 8001956:	2b08      	cmp	r3, #8
 8001958:	d05c      	beq.n	8001a14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d141      	bne.n	80019e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001962:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb4c 	bl	8001004 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001970:	f7ff fb48 	bl	8001004 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e087      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001982:	4b27      	ldr	r3, [pc, #156]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1f0      	bne.n	8001970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6a1b      	ldr	r3, [r3, #32]
 8001996:	431a      	orrs	r2, r3
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199c:	019b      	lsls	r3, r3, #6
 800199e:	431a      	orrs	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a4:	085b      	lsrs	r3, r3, #1
 80019a6:	3b01      	subs	r3, #1
 80019a8:	041b      	lsls	r3, r3, #16
 80019aa:	431a      	orrs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	061b      	lsls	r3, r3, #24
 80019b2:	491b      	ldr	r1, [pc, #108]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019b4:	4313      	orrs	r3, r2
 80019b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019b8:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019be:	f7ff fb21 	bl	8001004 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019c6:	f7ff fb1d 	bl	8001004 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e05c      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d0f0      	beq.n	80019c6 <HAL_RCC_OscConfig+0x416>
 80019e4:	e054      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019e6:	4b10      	ldr	r3, [pc, #64]	; (8001a28 <HAL_RCC_OscConfig+0x478>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ec:	f7ff fb0a 	bl	8001004 <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019f4:	f7ff fb06 	bl	8001004 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e045      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <HAL_RCC_OscConfig+0x470>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1f0      	bne.n	80019f4 <HAL_RCC_OscConfig+0x444>
 8001a12:	e03d      	b.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d107      	bne.n	8001a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	e038      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
 8001a20:	40023800 	.word	0x40023800
 8001a24:	40007000 	.word	0x40007000
 8001a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_RCC_OscConfig+0x4ec>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	699b      	ldr	r3, [r3, #24]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d028      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d121      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d11a      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a64:	4293      	cmp	r3, r2
 8001a66:	d111      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a72:	085b      	lsrs	r3, r3, #1
 8001a74:	3b01      	subs	r3, #1
 8001a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d107      	bne.n	8001a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e000      	b.n	8001a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3718      	adds	r7, #24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40023800 	.word	0x40023800

08001aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e0cc      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ab4:	4b68      	ldr	r3, [pc, #416]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d90c      	bls.n	8001adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001ac4:	683a      	ldr	r2, [r7, #0]
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aca:	4b63      	ldr	r3, [pc, #396]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	683a      	ldr	r2, [r7, #0]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d001      	beq.n	8001adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e0b8      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d020      	beq.n	8001b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001af4:	4b59      	ldr	r3, [pc, #356]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001afa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001afe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	4a52      	ldr	r2, [pc, #328]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b18:	4b50      	ldr	r3, [pc, #320]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	494d      	ldr	r1, [pc, #308]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d044      	beq.n	8001bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d107      	bne.n	8001b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b3e:	4b47      	ldr	r3, [pc, #284]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d119      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e07f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d003      	beq.n	8001b5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b5a:	2b03      	cmp	r3, #3
 8001b5c:	d107      	bne.n	8001b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b5e:	4b3f      	ldr	r3, [pc, #252]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e06f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b6e:	4b3b      	ldr	r3, [pc, #236]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e067      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b7e:	4b37      	ldr	r3, [pc, #220]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f023 0203 	bic.w	r2, r3, #3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4934      	ldr	r1, [pc, #208]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b90:	f7ff fa38 	bl	8001004 <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b96:	e00a      	b.n	8001bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b98:	f7ff fa34 	bl	8001004 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e04f      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bae:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 020c 	and.w	r2, r3, #12
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d1eb      	bne.n	8001b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc0:	4b25      	ldr	r3, [pc, #148]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0307 	and.w	r3, r3, #7
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d20c      	bcs.n	8001be8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd6:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <HAL_RCC_ClockConfig+0x1b8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0307 	and.w	r3, r3, #7
 8001bde:	683a      	ldr	r2, [r7, #0]
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d001      	beq.n	8001be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e032      	b.n	8001c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d008      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	4916      	ldr	r1, [pc, #88]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d009      	beq.n	8001c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	490e      	ldr	r1, [pc, #56]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c26:	f000 f821 	bl	8001c6c <HAL_RCC_GetSysClockFreq>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <HAL_RCC_ClockConfig+0x1bc>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	091b      	lsrs	r3, r3, #4
 8001c32:	f003 030f 	and.w	r3, r3, #15
 8001c36:	490a      	ldr	r1, [pc, #40]	; (8001c60 <HAL_RCC_ClockConfig+0x1c0>)
 8001c38:	5ccb      	ldrb	r3, [r1, r3]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <HAL_RCC_ClockConfig+0x1c4>)
 8001c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c42:	4b09      	ldr	r3, [pc, #36]	; (8001c68 <HAL_RCC_ClockConfig+0x1c8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff f860 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40023c00 	.word	0x40023c00
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	080086c8 	.word	0x080086c8
 8001c64:	20000000 	.word	0x20000000
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c70:	b090      	sub	sp, #64	; 0x40
 8001c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	637b      	str	r3, [r7, #52]	; 0x34
 8001c78:	2300      	movs	r3, #0
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c84:	4b59      	ldr	r3, [pc, #356]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	f003 030c 	and.w	r3, r3, #12
 8001c8c:	2b08      	cmp	r3, #8
 8001c8e:	d00d      	beq.n	8001cac <HAL_RCC_GetSysClockFreq+0x40>
 8001c90:	2b08      	cmp	r3, #8
 8001c92:	f200 80a1 	bhi.w	8001dd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d002      	beq.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8001c9a:	2b04      	cmp	r3, #4
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c9e:	e09b      	b.n	8001dd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b53      	ldr	r3, [pc, #332]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ca2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001ca4:	e09b      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ca6:	4b53      	ldr	r3, [pc, #332]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ca8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001caa:	e098      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001cac:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cb6:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d028      	beq.n	8001d14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	099b      	lsrs	r3, r3, #6
 8001cc8:	2200      	movs	r2, #0
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	627a      	str	r2, [r7, #36]	; 0x24
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001cd8:	fb03 f201 	mul.w	r2, r3, r1
 8001cdc:	2300      	movs	r3, #0
 8001cde:	fb00 f303 	mul.w	r3, r0, r3
 8001ce2:	4413      	add	r3, r2
 8001ce4:	4a43      	ldr	r2, [pc, #268]	; (8001df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8001cea:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001cec:	460a      	mov	r2, r1
 8001cee:	62ba      	str	r2, [r7, #40]	; 0x28
 8001cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf2:	4413      	add	r3, r2
 8001cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	61fa      	str	r2, [r7, #28]
 8001cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001d06:	f7fe fb03 	bl	8000310 <__aeabi_uldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d12:	e053      	b.n	8001dbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d14:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	099b      	lsrs	r3, r3, #6
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	613b      	str	r3, [r7, #16]
 8001d1e:	617a      	str	r2, [r7, #20]
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001d26:	f04f 0b00 	mov.w	fp, #0
 8001d2a:	4652      	mov	r2, sl
 8001d2c:	465b      	mov	r3, fp
 8001d2e:	f04f 0000 	mov.w	r0, #0
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	0159      	lsls	r1, r3, #5
 8001d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d3c:	0150      	lsls	r0, r2, #5
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	ebb2 080a 	subs.w	r8, r2, sl
 8001d46:	eb63 090b 	sbc.w	r9, r3, fp
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001d5e:	ebb2 0408 	subs.w	r4, r2, r8
 8001d62:	eb63 0509 	sbc.w	r5, r3, r9
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	00eb      	lsls	r3, r5, #3
 8001d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d74:	00e2      	lsls	r2, r4, #3
 8001d76:	4614      	mov	r4, r2
 8001d78:	461d      	mov	r5, r3
 8001d7a:	eb14 030a 	adds.w	r3, r4, sl
 8001d7e:	603b      	str	r3, [r7, #0]
 8001d80:	eb45 030b 	adc.w	r3, r5, fp
 8001d84:	607b      	str	r3, [r7, #4]
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	f04f 0300 	mov.w	r3, #0
 8001d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d92:	4629      	mov	r1, r5
 8001d94:	028b      	lsls	r3, r1, #10
 8001d96:	4621      	mov	r1, r4
 8001d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d9c:	4621      	mov	r1, r4
 8001d9e:	028a      	lsls	r2, r1, #10
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001da6:	2200      	movs	r2, #0
 8001da8:	60bb      	str	r3, [r7, #8]
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001db0:	f7fe faae 	bl	8000310 <__aeabi_uldivmod>
 8001db4:	4602      	mov	r2, r0
 8001db6:	460b      	mov	r3, r1
 8001db8:	4613      	mov	r3, r2
 8001dba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001dbc:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <HAL_RCC_GetSysClockFreq+0x180>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	0c1b      	lsrs	r3, r3, #16
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001dcc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001dd6:	e002      	b.n	8001dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001dd8:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001dda:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3740      	adds	r7, #64	; 0x40
 8001de4:	46bd      	mov	sp, r7
 8001de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	00f42400 	.word	0x00f42400
 8001df4:	017d7840 	.word	0x017d7840

08001df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000000 	.word	0x20000000

08001e10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001e14:	f7ff fff0 	bl	8001df8 <HAL_RCC_GetHCLKFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b05      	ldr	r3, [pc, #20]	; (8001e30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	0a9b      	lsrs	r3, r3, #10
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	40023800 	.word	0x40023800
 8001e34:	080086d8 	.word	0x080086d8

08001e38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	220f      	movs	r2, #15
 8001e46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e48:	4b12      	ldr	r3, [pc, #72]	; (8001e94 <HAL_RCC_GetClockConfig+0x5c>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e54:	4b0f      	ldr	r3, [pc, #60]	; (8001e94 <HAL_RCC_GetClockConfig+0x5c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_RCC_GetClockConfig+0x5c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	08db      	lsrs	r3, r3, #3
 8001e72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <HAL_RCC_GetClockConfig+0x60>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0207 	and.w	r2, r3, #7
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	601a      	str	r2, [r3, #0]
}
 8001e86:	bf00      	nop
 8001e88:	370c      	adds	r7, #12
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40023c00 	.word	0x40023c00

08001e9c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e041      	b.n	8001f32 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d106      	bne.n	8001ec8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f000 f839 	bl	8001f3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	4619      	mov	r1, r3
 8001eda:	4610      	mov	r0, r2
 8001edc:	f000 f9d8 	bl	8002290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2201      	movs	r2, #1
 8001eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2201      	movs	r2, #1
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f3a:	b480      	push	{r7}
 8001f3c:	b083      	sub	sp, #12
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d001      	beq.n	8001f68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e04e      	b.n	8002006 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2202      	movs	r2, #2
 8001f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68da      	ldr	r2, [r3, #12]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a23      	ldr	r2, [pc, #140]	; (8002014 <HAL_TIM_Base_Start_IT+0xc4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d022      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f92:	d01d      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a1f      	ldr	r2, [pc, #124]	; (8002018 <HAL_TIM_Base_Start_IT+0xc8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d018      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a1e      	ldr	r2, [pc, #120]	; (800201c <HAL_TIM_Base_Start_IT+0xcc>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d013      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <HAL_TIM_Base_Start_IT+0xd0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00e      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <HAL_TIM_Base_Start_IT+0xd4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d009      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_TIM_Base_Start_IT+0xd8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d004      	beq.n	8001fd0 <HAL_TIM_Base_Start_IT+0x80>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_TIM_Base_Start_IT+0xdc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d111      	bne.n	8001ff4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	689b      	ldr	r3, [r3, #8]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2b06      	cmp	r3, #6
 8001fe0:	d010      	beq.n	8002004 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f042 0201 	orr.w	r2, r2, #1
 8001ff0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ff2:	e007      	b.n	8002004 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0201 	orr.w	r2, r2, #1
 8002002:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40010000 	.word	0x40010000
 8002018:	40000400 	.word	0x40000400
 800201c:	40000800 	.word	0x40000800
 8002020:	40000c00 	.word	0x40000c00
 8002024:	40010400 	.word	0x40010400
 8002028:	40014000 	.word	0x40014000
 800202c:	40001800 	.word	0x40001800

08002030 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b02      	cmp	r3, #2
 8002044:	d122      	bne.n	800208c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b02      	cmp	r3, #2
 8002052:	d11b      	bne.n	800208c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f06f 0202 	mvn.w	r2, #2
 800205c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699b      	ldr	r3, [r3, #24]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8ee 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8002078:	e005      	b.n	8002086 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 f8e0 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f000 f8f1 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2200      	movs	r2, #0
 800208a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	2b04      	cmp	r3, #4
 8002098:	d122      	bne.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f003 0304 	and.w	r3, r3, #4
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d11b      	bne.n	80020e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f06f 0204 	mvn.w	r2, #4
 80020b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2202      	movs	r2, #2
 80020b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f8c4 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 80020cc:	e005      	b.n	80020da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f8b6 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	f000 f8c7 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b08      	cmp	r3, #8
 80020ec:	d122      	bne.n	8002134 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d11b      	bne.n	8002134 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f06f 0208 	mvn.w	r2, #8
 8002104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2204      	movs	r2, #4
 800210a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	f003 0303 	and.w	r3, r3, #3
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 f89a 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8002120:	e005      	b.n	800212e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 f88c 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f89d 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2200      	movs	r2, #0
 8002132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0310 	and.w	r3, r3, #16
 800213e:	2b10      	cmp	r3, #16
 8002140:	d122      	bne.n	8002188 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	f003 0310 	and.w	r3, r3, #16
 800214c:	2b10      	cmp	r3, #16
 800214e:	d11b      	bne.n	8002188 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f06f 0210 	mvn.w	r2, #16
 8002158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2208      	movs	r2, #8
 800215e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	69db      	ldr	r3, [r3, #28]
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 f870 	bl	8002254 <HAL_TIM_IC_CaptureCallback>
 8002174:	e005      	b.n	8002182 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f862 	bl	8002240 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 f873 	bl	8002268 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2200      	movs	r2, #0
 8002186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b01      	cmp	r3, #1
 8002194:	d10e      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f003 0301 	and.w	r3, r3, #1
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d107      	bne.n	80021b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f06f 0201 	mvn.w	r2, #1
 80021ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7fe fd6c 	bl	8000c8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021be:	2b80      	cmp	r3, #128	; 0x80
 80021c0:	d10e      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021cc:	2b80      	cmp	r3, #128	; 0x80
 80021ce:	d107      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80021d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f902 	bl	80023e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ea:	2b40      	cmp	r3, #64	; 0x40
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021f8:	2b40      	cmp	r3, #64	; 0x40
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f838 	bl	800227c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0320 	and.w	r3, r3, #32
 8002216:	2b20      	cmp	r3, #32
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b20      	cmp	r3, #32
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0220 	mvn.w	r2, #32
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f8cc 	bl	80023d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002238:	bf00      	nop
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800225c:	bf00      	nop
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002284:	bf00      	nop
 8002286:	370c      	adds	r7, #12
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a40      	ldr	r2, [pc, #256]	; (80023a4 <TIM_Base_SetConfig+0x114>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d013      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022ae:	d00f      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a3d      	ldr	r2, [pc, #244]	; (80023a8 <TIM_Base_SetConfig+0x118>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d00b      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a3c      	ldr	r2, [pc, #240]	; (80023ac <TIM_Base_SetConfig+0x11c>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d007      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a3b      	ldr	r2, [pc, #236]	; (80023b0 <TIM_Base_SetConfig+0x120>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d003      	beq.n	80022d0 <TIM_Base_SetConfig+0x40>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	4a3a      	ldr	r2, [pc, #232]	; (80023b4 <TIM_Base_SetConfig+0x124>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d108      	bne.n	80022e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	685b      	ldr	r3, [r3, #4]
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4313      	orrs	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a2f      	ldr	r2, [pc, #188]	; (80023a4 <TIM_Base_SetConfig+0x114>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d02b      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f0:	d027      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a2c      	ldr	r2, [pc, #176]	; (80023a8 <TIM_Base_SetConfig+0x118>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d023      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a2b      	ldr	r2, [pc, #172]	; (80023ac <TIM_Base_SetConfig+0x11c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d01f      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <TIM_Base_SetConfig+0x120>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d01b      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a29      	ldr	r2, [pc, #164]	; (80023b4 <TIM_Base_SetConfig+0x124>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d017      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a28      	ldr	r2, [pc, #160]	; (80023b8 <TIM_Base_SetConfig+0x128>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a27      	ldr	r2, [pc, #156]	; (80023bc <TIM_Base_SetConfig+0x12c>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d00f      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a26      	ldr	r2, [pc, #152]	; (80023c0 <TIM_Base_SetConfig+0x130>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00b      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <TIM_Base_SetConfig+0x134>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d007      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a24      	ldr	r2, [pc, #144]	; (80023c8 <TIM_Base_SetConfig+0x138>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d003      	beq.n	8002342 <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a23      	ldr	r2, [pc, #140]	; (80023cc <TIM_Base_SetConfig+0x13c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d108      	bne.n	8002354 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	68fa      	ldr	r2, [r7, #12]
 8002350:	4313      	orrs	r3, r2
 8002352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4313      	orrs	r3, r2
 8002360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	68fa      	ldr	r2, [r7, #12]
 8002366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <TIM_Base_SetConfig+0x114>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d003      	beq.n	8002388 <TIM_Base_SetConfig+0xf8>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a0c      	ldr	r2, [pc, #48]	; (80023b4 <TIM_Base_SetConfig+0x124>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d103      	bne.n	8002390 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	615a      	str	r2, [r3, #20]
}
 8002396:	bf00      	nop
 8002398:	3714      	adds	r7, #20
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr
 80023a2:	bf00      	nop
 80023a4:	40010000 	.word	0x40010000
 80023a8:	40000400 	.word	0x40000400
 80023ac:	40000800 	.word	0x40000800
 80023b0:	40000c00 	.word	0x40000c00
 80023b4:	40010400 	.word	0x40010400
 80023b8:	40014000 	.word	0x40014000
 80023bc:	40014400 	.word	0x40014400
 80023c0:	40014800 	.word	0x40014800
 80023c4:	40001800 	.word	0x40001800
 80023c8:	40001c00 	.word	0x40001c00
 80023cc:	40002000 	.word	0x40002000

080023d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f103 0208 	add.w	r2, r3, #8
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	f04f 32ff 	mov.w	r2, #4294967295
 8002410:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f103 0208 	add.w	r2, r3, #8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f103 0208 	add.w	r2, r3, #8
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002452:	b480      	push	{r7}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	601a      	str	r2, [r3, #0]
}
 800248e:	bf00      	nop
 8002490:	3714      	adds	r7, #20
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr

0800249a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800249a:	b480      	push	{r7}
 800249c:	b085      	sub	sp, #20
 800249e:	af00      	add	r7, sp, #0
 80024a0:	6078      	str	r0, [r7, #4]
 80024a2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d103      	bne.n	80024ba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	e00c      	b.n	80024d4 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3308      	adds	r3, #8
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e002      	b.n	80024c8 <vListInsert+0x2e>
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68ba      	ldr	r2, [r7, #8]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d2f6      	bcs.n	80024c2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	601a      	str	r2, [r3, #0]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800250c:	b480      	push	{r7}
 800250e:	b085      	sub	sp, #20
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6892      	ldr	r2, [r2, #8]
 8002522:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	6852      	ldr	r2, [r2, #4]
 800252c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	429a      	cmp	r2, r3
 8002536:	d103      	bne.n	8002540 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	689a      	ldr	r2, [r3, #8]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2200      	movs	r2, #0
 8002544:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	1e5a      	subs	r2, r3, #1
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800256a:	2301      	movs	r3, #1
 800256c:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d10a      	bne.n	800258e <xQueueGenericReset+0x2e>
        __asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	60fb      	str	r3, [r7, #12]
    }
 800258a:	bf00      	nop
 800258c:	e7fe      	b.n	800258c <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05d      	beq.n	8002650 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8002598:	2b00      	cmp	r3, #0
 800259a:	d059      	beq.n	8002650 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a4:	2100      	movs	r1, #0
 80025a6:	fba3 2302 	umull	r2, r3, r3, r2
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d000      	beq.n	80025b0 <xQueueGenericReset+0x50>
 80025ae:	2101      	movs	r1, #1
 80025b0:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d14c      	bne.n	8002650 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 80025b6:	f002 f91d 	bl	80047f4 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c2:	6939      	ldr	r1, [r7, #16]
 80025c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025c6:	fb01 f303 	mul.w	r3, r1, r3
 80025ca:	441a      	add	r2, r3
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	2200      	movs	r2, #0
 80025d4:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	3b01      	subs	r3, #1
 80025e8:	6939      	ldr	r1, [r7, #16]
 80025ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ec:	fb01 f303 	mul.w	r3, r1, r3
 80025f0:	441a      	add	r2, r3
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	22ff      	movs	r2, #255	; 0xff
 80025fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	22ff      	movs	r2, #255	; 0xff
 8002602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d114      	bne.n	8002636 <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800260c:	693b      	ldr	r3, [r7, #16]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d01a      	beq.n	800264a <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	3310      	adds	r3, #16
 8002618:	4618      	mov	r0, r3
 800261a:	f001 f985 	bl	8003928 <xTaskRemoveFromEventList>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d012      	beq.n	800264a <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002624:	4b15      	ldr	r3, [pc, #84]	; (800267c <xQueueGenericReset+0x11c>)
 8002626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800262a:	601a      	str	r2, [r3, #0]
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	e009      	b.n	800264a <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	3310      	adds	r3, #16
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fedc 	bl	80023f8 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	3324      	adds	r3, #36	; 0x24
 8002644:	4618      	mov	r0, r3
 8002646:	f7ff fed7 	bl	80023f8 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 800264a:	f002 f903 	bl	8004854 <vPortExitCritical>
 800264e:	e001      	b.n	8002654 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 8002650:	2300      	movs	r3, #0
 8002652:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10a      	bne.n	8002670 <xQueueGenericReset+0x110>
        __asm volatile
 800265a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265e:	f383 8811 	msr	BASEPRI, r3
 8002662:	f3bf 8f6f 	isb	sy
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	60bb      	str	r3, [r7, #8]
    }
 800266c:	bf00      	nop
 800266e:	e7fe      	b.n	800266e <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002670:	697b      	ldr	r3, [r7, #20]
}
 8002672:	4618      	mov	r0, r3
 8002674:	3718      	adds	r7, #24
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002680:	b580      	push	{r7, lr}
 8002682:	b08a      	sub	sp, #40	; 0x28
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d02e      	beq.n	80026f6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002698:	2100      	movs	r1, #0
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	fba3 2302 	umull	r2, r3, r3, r2
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d000      	beq.n	80026a8 <xQueueGenericCreate+0x28>
 80026a6:	2101      	movs	r1, #1
 80026a8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d123      	bne.n	80026f6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80026b6:	f113 0f51 	cmn.w	r3, #81	; 0x51
 80026ba:	d81c      	bhi.n	80026f6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	fb02 f303 	mul.w	r3, r2, r3
 80026c4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026c6:	69bb      	ldr	r3, [r7, #24]
 80026c8:	3350      	adds	r3, #80	; 0x50
 80026ca:	4618      	mov	r0, r3
 80026cc:	f002 f9be 	bl	8004a4c <pvPortMalloc>
 80026d0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80026d2:	69fb      	ldr	r3, [r7, #28]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01c      	beq.n	8002712 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	3350      	adds	r3, #80	; 0x50
 80026e0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026e2:	79fa      	ldrb	r2, [r7, #7]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	9300      	str	r3, [sp, #0]
 80026e8:	4613      	mov	r3, r2
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	68f8      	ldr	r0, [r7, #12]
 80026f0:	f000 f814 	bl	800271c <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80026f4:	e00d      	b.n	8002712 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xQueueGenericCreate+0x92>
        __asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	613b      	str	r3, [r7, #16]
    }
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002712:	69fb      	ldr	r3, [r7, #28]
    }
 8002714:	4618      	mov	r0, r3
 8002716:	3720      	adds	r7, #32
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
 8002728:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d103      	bne.n	8002738 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	69ba      	ldr	r2, [r7, #24]
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	e002      	b.n	800273e <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	687a      	ldr	r2, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	68fa      	ldr	r2, [r7, #12]
 8002742:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800274a:	2101      	movs	r1, #1
 800274c:	69b8      	ldr	r0, [r7, #24]
 800274e:	f7ff ff07 	bl	8002560 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 800275a:	78fb      	ldrb	r3, [r7, #3]
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	68f9      	ldr	r1, [r7, #12]
 8002760:	2073      	movs	r0, #115	; 0x73
 8002762:	f004 f82f 	bl	80067c4 <SEGGER_SYSVIEW_RecordU32x3>
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b08f      	sub	sp, #60	; 0x3c
 8002774:	af02      	add	r7, sp, #8
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 800277c:	2300      	movs	r3, #0
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10a      	bne.n	80027a0 <xQueueReceive+0x30>
        __asm volatile
 800278a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278e:	f383 8811 	msr	BASEPRI, r3
 8002792:	f3bf 8f6f 	isb	sy
 8002796:	f3bf 8f4f 	dsb	sy
 800279a:	623b      	str	r3, [r7, #32]
    }
 800279c:	bf00      	nop
 800279e:	e7fe      	b.n	800279e <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <xQueueReceive+0x3e>
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <xQueueReceive+0x42>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <xQueueReceive+0x44>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10a      	bne.n	80027ce <xQueueReceive+0x5e>
        __asm volatile
 80027b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027bc:	f383 8811 	msr	BASEPRI, r3
 80027c0:	f3bf 8f6f 	isb	sy
 80027c4:	f3bf 8f4f 	dsb	sy
 80027c8:	61fb      	str	r3, [r7, #28]
    }
 80027ca:	bf00      	nop
 80027cc:	e7fe      	b.n	80027cc <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027ce:	f001 fabd 	bl	8003d4c <xTaskGetSchedulerState>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d102      	bne.n	80027de <xQueueReceive+0x6e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <xQueueReceive+0x72>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueReceive+0x74>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueReceive+0x8e>
        __asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	61bb      	str	r3, [r7, #24]
    }
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80027fe:	f001 fff9 	bl	80047f4 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002806:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280a:	2b00      	cmp	r3, #0
 800280c:	d02f      	beq.n	800286e <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800280e:	68b9      	ldr	r1, [r7, #8]
 8002810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002812:	f000 f8bd 	bl	8002990 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002818:	4618      	mov	r0, r3
 800281a:	f004 fd5f 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 800281e:	4604      	mov	r4, r0
 8002820:	2000      	movs	r0, #0
 8002822:	f004 fd5b 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8002826:	4602      	mov	r2, r0
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2101      	movs	r1, #1
 800282c:	9100      	str	r1, [sp, #0]
 800282e:	4621      	mov	r1, r4
 8002830:	205c      	movs	r0, #92	; 0x5c
 8002832:	f004 f83d 	bl	80068b0 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	1e5a      	subs	r2, r3, #1
 800283a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800283c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d00f      	beq.n	8002866 <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	3310      	adds	r3, #16
 800284a:	4618      	mov	r0, r3
 800284c:	f001 f86c 	bl	8003928 <xTaskRemoveFromEventList>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d007      	beq.n	8002866 <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002856:	4b4d      	ldr	r3, [pc, #308]	; (800298c <xQueueReceive+0x21c>)
 8002858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800285c:	601a      	str	r2, [r3, #0]
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002866:	f001 fff5 	bl	8004854 <vPortExitCritical>
                return pdPASS;
 800286a:	2301      	movs	r3, #1
 800286c:	e08a      	b.n	8002984 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d113      	bne.n	800289c <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002874:	f001 ffee 	bl	8004854 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287a:	4618      	mov	r0, r3
 800287c:	f004 fd2e 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8002880:	4604      	mov	r4, r0
 8002882:	2000      	movs	r0, #0
 8002884:	f004 fd2a 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8002888:	4602      	mov	r2, r0
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2101      	movs	r1, #1
 800288e:	9100      	str	r1, [sp, #0]
 8002890:	4621      	mov	r1, r4
 8002892:	205c      	movs	r0, #92	; 0x5c
 8002894:	f004 f80c 	bl	80068b0 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002898:	2300      	movs	r3, #0
 800289a:	e073      	b.n	8002984 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80028a2:	f107 0310 	add.w	r3, r7, #16
 80028a6:	4618      	mov	r0, r3
 80028a8:	f001 f916 	bl	8003ad8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80028ac:	2301      	movs	r3, #1
 80028ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80028b0:	f001 ffd0 	bl	8004854 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80028b4:	f000 fd18 	bl	80032e8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80028b8:	f001 ff9c 	bl	80047f4 <vPortEnterCritical>
 80028bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028c2:	b25b      	sxtb	r3, r3
 80028c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c8:	d103      	bne.n	80028d2 <xQueueReceive+0x162>
 80028ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d8:	b25b      	sxtb	r3, r3
 80028da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028de:	d103      	bne.n	80028e8 <xQueueReceive+0x178>
 80028e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e8:	f001 ffb4 	bl	8004854 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028ec:	1d3a      	adds	r2, r7, #4
 80028ee:	f107 0310 	add.w	r3, r7, #16
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f001 f905 	bl	8003b04 <xTaskCheckForTimeOut>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d124      	bne.n	800294a <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002900:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002902:	f000 f8bd 	bl	8002a80 <prvIsQueueEmpty>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d018      	beq.n	800293e <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	3324      	adds	r3, #36	; 0x24
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	4611      	mov	r1, r2
 8002914:	4618      	mov	r0, r3
 8002916:	f000 ff9b 	bl	8003850 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800291a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800291c:	f000 f85e 	bl	80029dc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002920:	f000 fcf0 	bl	8003304 <xTaskResumeAll>
 8002924:	4603      	mov	r3, r0
 8002926:	2b00      	cmp	r3, #0
 8002928:	f47f af69 	bne.w	80027fe <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 800292c:	4b17      	ldr	r3, [pc, #92]	; (800298c <xQueueReceive+0x21c>)
 800292e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	e75f      	b.n	80027fe <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800293e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002940:	f000 f84c 	bl	80029dc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002944:	f000 fcde 	bl	8003304 <xTaskResumeAll>
 8002948:	e759      	b.n	80027fe <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800294a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294c:	f000 f846 	bl	80029dc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002950:	f000 fcd8 	bl	8003304 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002956:	f000 f893 	bl	8002a80 <prvIsQueueEmpty>
 800295a:	4603      	mov	r3, r0
 800295c:	2b00      	cmp	r3, #0
 800295e:	f43f af4e 	beq.w	80027fe <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002964:	4618      	mov	r0, r3
 8002966:	f004 fcb9 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 800296a:	4604      	mov	r4, r0
 800296c:	2000      	movs	r0, #0
 800296e:	f004 fcb5 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8002972:	4602      	mov	r2, r0
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2101      	movs	r1, #1
 8002978:	9100      	str	r1, [sp, #0]
 800297a:	4621      	mov	r1, r4
 800297c:	205c      	movs	r0, #92	; 0x5c
 800297e:	f003 ff97 	bl	80068b0 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002982:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002984:	4618      	mov	r0, r3
 8002986:	3734      	adds	r7, #52	; 0x34
 8002988:	46bd      	mov	sp, r7
 800298a:	bd90      	pop	{r4, r7, pc}
 800298c:	e000ed04 	.word	0xe000ed04

08002990 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d018      	beq.n	80029d4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029aa:	441a      	add	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	68da      	ldr	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d303      	bcc.n	80029c4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	68d9      	ldr	r1, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	461a      	mov	r2, r3
 80029ce:	6838      	ldr	r0, [r7, #0]
 80029d0:	f004 ffbc 	bl	800794c <memcpy>
    }
}
 80029d4:	bf00      	nop
 80029d6:	3708      	adds	r7, #8
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80029e4:	f001 ff06 	bl	80047f4 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029ee:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80029f0:	e011      	b.n	8002a16 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	3324      	adds	r3, #36	; 0x24
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 ff92 	bl	8003928 <xTaskRemoveFromEventList>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d001      	beq.n	8002a0e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002a0a:	f001 f8e1 	bl	8003bd0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	dce9      	bgt.n	80029f2 <prvUnlockQueue+0x16>
 8002a1e:	e000      	b.n	8002a22 <prvUnlockQueue+0x46>
                    break;
 8002a20:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	22ff      	movs	r2, #255	; 0xff
 8002a26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8002a2a:	f001 ff13 	bl	8004854 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002a2e:	f001 fee1 	bl	80047f4 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a38:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a3a:	e011      	b.n	8002a60 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d012      	beq.n	8002a6a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3310      	adds	r3, #16
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f000 ff6d 	bl	8003928 <xTaskRemoveFromEventList>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d001      	beq.n	8002a58 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002a54:	f001 f8bc 	bl	8003bd0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002a58:	7bbb      	ldrb	r3, [r7, #14]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a60:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	dce9      	bgt.n	8002a3c <prvUnlockQueue+0x60>
 8002a68:	e000      	b.n	8002a6c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002a6a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	22ff      	movs	r2, #255	; 0xff
 8002a70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002a74:	f001 feee 	bl	8004854 <vPortExitCritical>
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002a88:	f001 feb4 	bl	80047f4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d102      	bne.n	8002a9a <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002a94:	2301      	movs	r3, #1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e001      	b.n	8002a9e <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002a9e:	f001 fed9 	bl	8004854 <vPortExitCritical>

    return xReturn;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3710      	adds	r7, #16
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac4:	f383 8811 	msr	BASEPRI, r3
 8002ac8:	f3bf 8f6f 	isb	sy
 8002acc:	f3bf 8f4f 	dsb	sy
 8002ad0:	60fb      	str	r3, [r7, #12]
    }
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d024      	beq.n	8002b26 <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e01e      	b.n	8002b20 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002ae2:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <vQueueAddToRegistry+0xa8>)
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d105      	bne.n	8002afe <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	00db      	lsls	r3, r3, #3
 8002af6:	4a17      	ldr	r2, [pc, #92]	; (8002b54 <vQueueAddToRegistry+0xa8>)
 8002af8:	4413      	add	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
                    break;
 8002afc:	e013      	b.n	8002b26 <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10a      	bne.n	8002b1a <vQueueAddToRegistry+0x6e>
 8002b04:	4a13      	ldr	r2, [pc, #76]	; (8002b54 <vQueueAddToRegistry+0xa8>)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d104      	bne.n	8002b1a <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	00db      	lsls	r3, r3, #3
 8002b14:	4a0f      	ldr	r2, [pc, #60]	; (8002b54 <vQueueAddToRegistry+0xa8>)
 8002b16:	4413      	add	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b07      	cmp	r3, #7
 8002b24:	d9dd      	bls.n	8002ae2 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00f      	beq.n	8002b4c <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f004 fbce 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8002b40:	4601      	mov	r1, r0
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	461a      	mov	r2, r3
 8002b46:	2071      	movs	r0, #113	; 0x71
 8002b48:	f003 fde2 	bl	8006710 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002b4c:	bf00      	nop
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	200000f8 	.word	0x200000f8

08002b58 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002b68:	f001 fe44 	bl	80047f4 <vPortEnterCritical>
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b72:	b25b      	sxtb	r3, r3
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d103      	bne.n	8002b82 <vQueueWaitForMessageRestricted+0x2a>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b88:	b25b      	sxtb	r3, r3
 8002b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8e:	d103      	bne.n	8002b98 <vQueueWaitForMessageRestricted+0x40>
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b98:	f001 fe5c 	bl	8004854 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d106      	bne.n	8002bb2 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	3324      	adds	r3, #36	; 0x24
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f000 fe73 	bl	8003898 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff ff12 	bl	80029dc <prvUnlockQueue>
    }
 8002bb8:	bf00      	nop
 8002bba:	3718      	adds	r7, #24
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b08c      	sub	sp, #48	; 0x30
 8002bc4:	af04      	add	r7, sp, #16
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	603b      	str	r3, [r7, #0]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f001 ff39 	bl	8004a4c <pvPortMalloc>
 8002bda:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d013      	beq.n	8002c0a <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002be2:	2058      	movs	r0, #88	; 0x58
 8002be4:	f001 ff32 	bl	8004a4c <pvPortMalloc>
 8002be8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002bf0:	2258      	movs	r2, #88	; 0x58
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	69f8      	ldr	r0, [r7, #28]
 8002bf6:	f004 fe34 	bl	8007862 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	631a      	str	r2, [r3, #48]	; 0x30
 8002c00:	e005      	b.n	8002c0e <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002c02:	6978      	ldr	r0, [r7, #20]
 8002c04:	f001 ffdc 	bl	8004bc0 <vPortFree>
 8002c08:	e001      	b.n	8002c0e <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c14:	88fa      	ldrh	r2, [r7, #6]
 8002c16:	2300      	movs	r3, #0
 8002c18:	9303      	str	r3, [sp, #12]
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	9302      	str	r3, [sp, #8]
 8002c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c20:	9301      	str	r3, [sp, #4]
 8002c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c24:	9300      	str	r3, [sp, #0]
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68b9      	ldr	r1, [r7, #8]
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f80e 	bl	8002c4c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002c30:	69f8      	ldr	r0, [r7, #28]
 8002c32:	f000 f899 	bl	8002d68 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002c36:	2301      	movs	r3, #1
 8002c38:	61bb      	str	r3, [r7, #24]
 8002c3a:	e002      	b.n	8002c42 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c40:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002c42:	69bb      	ldr	r3, [r7, #24]
    }
 8002c44:	4618      	mov	r0, r3
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	461a      	mov	r2, r3
 8002c64:	21a5      	movs	r1, #165	; 0xa5
 8002c66:	f004 fdfc 	bl	8007862 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c74:	3b01      	subs	r3, #1
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	4413      	add	r3, r2
 8002c7a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	f023 0307 	bic.w	r3, r3, #7
 8002c82:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
 8002c9e:	617b      	str	r3, [r7, #20]
    }
 8002ca0:	bf00      	nop
 8002ca2:	e7fe      	b.n	8002ca2 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d01e      	beq.n	8002ce8 <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e012      	b.n	8002cd6 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cb0:	68ba      	ldr	r2, [r7, #8]
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	7819      	ldrb	r1, [r3, #0]
 8002cb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	4413      	add	r3, r2
 8002cbe:	3334      	adds	r3, #52	; 0x34
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d006      	beq.n	8002cde <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b09      	cmp	r3, #9
 8002cda:	d9e9      	bls.n	8002cb0 <prvInitialiseNewTask+0x64>
 8002cdc:	e000      	b.n	8002ce0 <prvInitialiseNewTask+0x94>
            {
                break;
 8002cde:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cea:	2b05      	cmp	r3, #5
 8002cec:	d90a      	bls.n	8002d04 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf2:	f383 8811 	msr	BASEPRI, r3
 8002cf6:	f3bf 8f6f 	isb	sy
 8002cfa:	f3bf 8f4f 	dsb	sy
 8002cfe:	613b      	str	r3, [r7, #16]
    }
 8002d00:	bf00      	nop
 8002d02:	e7fe      	b.n	8002d02 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d06:	2b05      	cmp	r3, #5
 8002d08:	d901      	bls.n	8002d0e <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002d0a:	2305      	movs	r3, #5
 8002d0c:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d12:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d18:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	3304      	adds	r3, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fb8a 	bl	8002438 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d26:	3318      	adds	r3, #24
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7ff fb85 	bl	8002438 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	f1c3 0206 	rsb	r2, r3, #6
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	68f9      	ldr	r1, [r7, #12]
 8002d48:	69b8      	ldr	r0, [r7, #24]
 8002d4a:	f001 fba9 	bl	80044a0 <pxPortInitialiseStack>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d52:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d002      	beq.n	8002d60 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d5e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002d70:	f001 fd40 	bl	80047f4 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002d74:	4b4f      	ldr	r3, [pc, #316]	; (8002eb4 <prvAddNewTaskToReadyList+0x14c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	4a4e      	ldr	r2, [pc, #312]	; (8002eb4 <prvAddNewTaskToReadyList+0x14c>)
 8002d7c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002d7e:	4b4e      	ldr	r3, [pc, #312]	; (8002eb8 <prvAddNewTaskToReadyList+0x150>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d109      	bne.n	8002d9a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002d86:	4a4c      	ldr	r2, [pc, #304]	; (8002eb8 <prvAddNewTaskToReadyList+0x150>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002d8c:	4b49      	ldr	r3, [pc, #292]	; (8002eb4 <prvAddNewTaskToReadyList+0x14c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d110      	bne.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002d94:	f000 ff40 	bl	8003c18 <prvInitialiseTaskLists>
 8002d98:	e00d      	b.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002d9a:	4b48      	ldr	r3, [pc, #288]	; (8002ebc <prvAddNewTaskToReadyList+0x154>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d109      	bne.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002da2:	4b45      	ldr	r3, [pc, #276]	; (8002eb8 <prvAddNewTaskToReadyList+0x150>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d802      	bhi.n	8002db6 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002db0:	4a41      	ldr	r2, [pc, #260]	; (8002eb8 <prvAddNewTaskToReadyList+0x150>)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002db6:	4b42      	ldr	r3, [pc, #264]	; (8002ec0 <prvAddNewTaskToReadyList+0x158>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a40      	ldr	r2, [pc, #256]	; (8002ec0 <prvAddNewTaskToReadyList+0x158>)
 8002dbe:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <prvAddNewTaskToReadyList+0x158>)
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d016      	beq.n	8002dfc <prvAddNewTaskToReadyList+0x94>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f004 f95d 	bl	8007090 <SEGGER_SYSVIEW_OnTaskCreate>
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	461d      	mov	r5, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461c      	mov	r4, r3
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	1ae3      	subs	r3, r4, r3
 8002df4:	9300      	str	r3, [sp, #0]
 8002df6:	462b      	mov	r3, r5
 8002df8:	f002 f880 	bl	8004efc <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 f9ca 	bl	8007198 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2201      	movs	r2, #1
 8002e0a:	409a      	lsls	r2, r3
 8002e0c:	4b2d      	ldr	r3, [pc, #180]	; (8002ec4 <prvAddNewTaskToReadyList+0x15c>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	4a2c      	ldr	r2, [pc, #176]	; (8002ec4 <prvAddNewTaskToReadyList+0x15c>)
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1a:	492b      	ldr	r1, [pc, #172]	; (8002ec8 <prvAddNewTaskToReadyList+0x160>)
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	009b      	lsls	r3, r3, #2
 8002e24:	440b      	add	r3, r1
 8002e26:	3304      	adds	r3, #4
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	609a      	str	r2, [r3, #8]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	689a      	ldr	r2, [r3, #8]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	3204      	adds	r2, #4
 8002e42:	605a      	str	r2, [r3, #4]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	609a      	str	r2, [r3, #8]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <prvAddNewTaskToReadyList+0x160>)
 8002e5a:	441a      	add	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	615a      	str	r2, [r3, #20]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e64:	4918      	ldr	r1, [pc, #96]	; (8002ec8 <prvAddNewTaskToReadyList+0x160>)
 8002e66:	4613      	mov	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	1c59      	adds	r1, r3, #1
 8002e74:	4814      	ldr	r0, [pc, #80]	; (8002ec8 <prvAddNewTaskToReadyList+0x160>)
 8002e76:	4613      	mov	r3, r2
 8002e78:	009b      	lsls	r3, r3, #2
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4403      	add	r3, r0
 8002e80:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002e82:	f001 fce7 	bl	8004854 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <prvAddNewTaskToReadyList+0x154>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00e      	beq.n	8002eac <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e8e:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <prvAddNewTaskToReadyList+0x150>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d207      	bcs.n	8002eac <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002e9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ecc <prvAddNewTaskToReadyList+0x164>)
 8002e9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ea2:	601a      	str	r2, [r3, #0]
 8002ea4:	f3bf 8f4f 	dsb	sy
 8002ea8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002eac:	bf00      	nop
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8002eb4:	20000224 	.word	0x20000224
 8002eb8:	20000138 	.word	0x20000138
 8002ebc:	20000230 	.word	0x20000230
 8002ec0:	20000240 	.word	0x20000240
 8002ec4:	2000022c 	.word	0x2000022c
 8002ec8:	2000013c 	.word	0x2000013c
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d01b      	beq.n	8002f1a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <vTaskDelay+0x68>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00a      	beq.n	8002f00 <vTaskDelay+0x30>
        __asm volatile
 8002eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eee:	f383 8811 	msr	BASEPRI, r3
 8002ef2:	f3bf 8f6f 	isb	sy
 8002ef6:	f3bf 8f4f 	dsb	sy
 8002efa:	60bb      	str	r3, [r7, #8]
    }
 8002efc:	bf00      	nop
 8002efe:	e7fe      	b.n	8002efe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002f00:	f000 f9f2 	bl	80032e8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	2023      	movs	r0, #35	; 0x23
 8002f08:	f003 fbc6 	bl	8006698 <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 ffc2 	bl	8003e98 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002f14:	f000 f9f6 	bl	8003304 <xTaskResumeAll>
 8002f18:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d107      	bne.n	8002f30 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8002f20:	4b06      	ldr	r3, [pc, #24]	; (8002f3c <vTaskDelay+0x6c>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002f30:	bf00      	nop
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	2000024c 	.word	0x2000024c
 8002f3c:	e000ed04 	.word	0xe000ed04

08002f40 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskSuspend( TaskHandle_t xTaskToSuspend )
    {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002f48:	f001 fc54 	bl	80047f4 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the running task that is
             * being suspended. */
            pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d102      	bne.n	8002f58 <vTaskSuspend+0x18>
 8002f52:	4b4a      	ldr	r3, [pc, #296]	; (800307c <vTaskSuspend+0x13c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	e000      	b.n	8002f5a <vTaskSuspend+0x1a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	613b      	str	r3, [r7, #16]

            traceTASK_SUSPEND( pxTCB );
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f004 f9bc 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8002f64:	4603      	mov	r3, r0
 8002f66:	4619      	mov	r1, r3
 8002f68:	2029      	movs	r0, #41	; 0x29
 8002f6a:	f003 fb95 	bl	8006698 <SEGGER_SYSVIEW_RecordU32>

            /* Remove task from the ready/delayed list and place in the
             * suspended list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	3304      	adds	r3, #4
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff faca 	bl	800250c <uxListRemove>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d115      	bne.n	8002faa <vTaskSuspend+0x6a>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f82:	493f      	ldr	r1, [pc, #252]	; (8003080 <vTaskSuspend+0x140>)
 8002f84:	4613      	mov	r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	4413      	add	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d10a      	bne.n	8002faa <vTaskSuspend+0x6a>
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f98:	2201      	movs	r2, #1
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	4b38      	ldr	r3, [pc, #224]	; (8003084 <vTaskSuspend+0x144>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	4a37      	ldr	r2, [pc, #220]	; (8003084 <vTaskSuspend+0x144>)
 8002fa8:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <vTaskSuspend+0x7c>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	3318      	adds	r3, #24
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff faa8 	bl	800250c <uxListRemove>
            }
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
			traceMOVED_TASK_TO_SUSPENDED_LIST(pxTCB);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	211b      	movs	r1, #27
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f92b 	bl	800721c <SEGGER_SYSVIEW_OnTaskStopReady>
            vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	3304      	adds	r3, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	482e      	ldr	r0, [pc, #184]	; (8003088 <vTaskSuspend+0x148>)
 8002fce:	f7ff fa40 	bl	8002452 <vListInsertEnd>

            #if ( configUSE_TASK_NOTIFICATIONS == 1 )
            {
                BaseType_t x;

                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
 8002fd6:	e010      	b.n	8002ffa <vTaskSuspend+0xba>
                {
                    if( pxTCB->ucNotifyState[ x ] == taskWAITING_NOTIFICATION )
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	4413      	add	r3, r2
 8002fde:	3354      	adds	r3, #84	; 0x54
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d105      	bne.n	8002ff4 <vTaskSuspend+0xb4>
                    {
                        /* The task was blocked to wait for a notification, but is
                         * now suspended, so no notification was received. */
                        pxTCB->ucNotifyState[ x ] = taskNOT_WAITING_NOTIFICATION;
 8002fe8:	693a      	ldr	r2, [r7, #16]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	4413      	add	r3, r2
 8002fee:	3354      	adds	r3, #84	; 0x54
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
                for( x = 0; x < configTASK_NOTIFICATION_ARRAY_ENTRIES; x++ )
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	ddeb      	ble.n	8002fd8 <vTaskSuspend+0x98>
                    }
                }
            }
            #endif /* if ( configUSE_TASK_NOTIFICATIONS == 1 ) */
        }
        taskEXIT_CRITICAL();
 8003000:	f001 fc28 	bl	8004854 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003004:	4b21      	ldr	r3, [pc, #132]	; (800308c <vTaskSuspend+0x14c>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d005      	beq.n	8003018 <vTaskSuspend+0xd8>
        {
            /* Reset the next expected unblock time in case it referred to the
             * task that is now in the Suspended state. */
            taskENTER_CRITICAL();
 800300c:	f001 fbf2 	bl	80047f4 <vPortEnterCritical>
            {
                prvResetNextTaskUnblockTime();
 8003010:	f000 fe80 	bl	8003d14 <prvResetNextTaskUnblockTime>
            }
            taskEXIT_CRITICAL();
 8003014:	f001 fc1e 	bl	8004854 <vPortExitCritical>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( pxTCB == pxCurrentTCB )
 8003018:	4b18      	ldr	r3, [pc, #96]	; (800307c <vTaskSuspend+0x13c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	429a      	cmp	r2, r3
 8003020:	d127      	bne.n	8003072 <vTaskSuspend+0x132>
        {
            if( xSchedulerRunning != pdFALSE )
 8003022:	4b1a      	ldr	r3, [pc, #104]	; (800308c <vTaskSuspend+0x14c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d017      	beq.n	800305a <vTaskSuspend+0x11a>
            {
                /* The current task has just been suspended. */
                configASSERT( uxSchedulerSuspended == 0 );
 800302a:	4b19      	ldr	r3, [pc, #100]	; (8003090 <vTaskSuspend+0x150>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00a      	beq.n	8003048 <vTaskSuspend+0x108>
        __asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
    }
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <vTaskSuspend+0x106>
                portYIELD_WITHIN_API();
 8003048:	4b12      	ldr	r3, [pc, #72]	; (8003094 <vTaskSuspend+0x154>)
 800304a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800304e:	601a      	str	r2, [r3, #0]
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8003058:	e00b      	b.n	8003072 <vTaskSuspend+0x132>
                if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800305a:	4b0b      	ldr	r3, [pc, #44]	; (8003088 <vTaskSuspend+0x148>)
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b0e      	ldr	r3, [pc, #56]	; (8003098 <vTaskSuspend+0x158>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d103      	bne.n	800306e <vTaskSuspend+0x12e>
                    pxCurrentTCB = NULL;
 8003066:	4b05      	ldr	r3, [pc, #20]	; (800307c <vTaskSuspend+0x13c>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
    }
 800306c:	e001      	b.n	8003072 <vTaskSuspend+0x132>
                    vTaskSwitchContext();
 800306e:	f000 fb85 	bl	800377c <vTaskSwitchContext>
    }
 8003072:	bf00      	nop
 8003074:	3718      	adds	r7, #24
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000138 	.word	0x20000138
 8003080:	2000013c 	.word	0x2000013c
 8003084:	2000022c 	.word	0x2000022c
 8003088:	20000210 	.word	0x20000210
 800308c:	20000230 	.word	0x20000230
 8003090:	2000024c 	.word	0x2000024c
 8003094:	e000ed04 	.word	0xe000ed04
 8003098:	20000224 	.word	0x20000224

0800309c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
    {
 800309c:	b480      	push	{r7}
 800309e:	b087      	sub	sp, #28
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	617b      	str	r3, [r7, #20]
        const TCB_t * const pxTCB = xTask;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	613b      	str	r3, [r7, #16]

        /* Accesses xPendingReadyList so must be called from a critical
         * section. */

        /* It does not make sense to check if the calling task is suspended. */
        configASSERT( xTask );
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d10a      	bne.n	80030c8 <prvTaskIsTaskSuspended+0x2c>
        __asm volatile
 80030b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030b6:	f383 8811 	msr	BASEPRI, r3
 80030ba:	f3bf 8f6f 	isb	sy
 80030be:	f3bf 8f4f 	dsb	sy
 80030c2:	60fb      	str	r3, [r7, #12]
    }
 80030c4:	bf00      	nop
 80030c6:	e7fe      	b.n	80030c6 <prvTaskIsTaskSuspended+0x2a>

        /* Is the task being resumed actually in the suspended list? */
        if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	; (80030f8 <prvTaskIsTaskSuspended+0x5c>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d10a      	bne.n	80030e8 <prvTaskIsTaskSuspended+0x4c>
        {
            /* Has the task already been resumed from within an ISR? */
            if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d6:	4a09      	ldr	r2, [pc, #36]	; (80030fc <prvTaskIsTaskSuspended+0x60>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d005      	beq.n	80030e8 <prvTaskIsTaskSuspended+0x4c>
            {
                /* Is it in the suspended list because it is in the Suspended
                 * state, or because is is blocked with no timeout? */
                if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <prvTaskIsTaskSuspended+0x4c>
                {
                    xReturn = pdTRUE;
 80030e4:	2301      	movs	r3, #1
 80030e6:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80030e8:	697b      	ldr	r3, [r7, #20]
    } /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80030ea:	4618      	mov	r0, r3
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	20000210 	.word	0x20000210
 80030fc:	200001e4 	.word	0x200001e4

08003100 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

    void vTaskResume( TaskHandle_t xTaskToResume )
    {
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = xTaskToResume;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	617b      	str	r3, [r7, #20]

        /* It does not make sense to resume the calling task. */
        configASSERT( xTaskToResume );
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10a      	bne.n	8003128 <vTaskResume+0x28>
        __asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	f383 8811 	msr	BASEPRI, r3
 800311a:	f3bf 8f6f 	isb	sy
 800311e:	f3bf 8f4f 	dsb	sy
 8003122:	60fb      	str	r3, [r7, #12]
    }
 8003124:	bf00      	nop
 8003126:	e7fe      	b.n	8003126 <vTaskResume+0x26>

        /* The parameter cannot be NULL as it is impossible to resume the
         * currently executing task. */
        if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003128:	4b3a      	ldr	r3, [pc, #232]	; (8003214 <vTaskResume+0x114>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	429a      	cmp	r2, r3
 8003130:	d06c      	beq.n	800320c <vTaskResume+0x10c>
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d069      	beq.n	800320c <vTaskResume+0x10c>
        {
            taskENTER_CRITICAL();
 8003138:	f001 fb5c 	bl	80047f4 <vPortEnterCritical>
            {
                if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800313c:	6978      	ldr	r0, [r7, #20]
 800313e:	f7ff ffad 	bl	800309c <prvTaskIsTaskSuspended>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d05f      	beq.n	8003208 <vTaskResume+0x108>
                {
                    traceTASK_RESUME( pxTCB );
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	4618      	mov	r0, r3
 800314c:	f004 f8c6 	bl	80072dc <SEGGER_SYSVIEW_ShrinkId>
 8003150:	4603      	mov	r3, r0
 8003152:	4619      	mov	r1, r3
 8003154:	202a      	movs	r0, #42	; 0x2a
 8003156:	f003 fa9f 	bl	8006698 <SEGGER_SYSVIEW_RecordU32>

                    /* The ready list can be accessed even if the scheduler is
                     * suspended because this is inside a critical section. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	3304      	adds	r3, #4
 800315e:	4618      	mov	r0, r3
 8003160:	f7ff f9d4 	bl	800250c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8003164:	697b      	ldr	r3, [r7, #20]
 8003166:	4618      	mov	r0, r3
 8003168:	f004 f816 	bl	8007198 <SEGGER_SYSVIEW_OnTaskStartReady>
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	2201      	movs	r2, #1
 8003172:	409a      	lsls	r2, r3
 8003174:	4b28      	ldr	r3, [pc, #160]	; (8003218 <vTaskResume+0x118>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	4a27      	ldr	r2, [pc, #156]	; (8003218 <vTaskResume+0x118>)
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003182:	4926      	ldr	r1, [pc, #152]	; (800321c <vTaskResume+0x11c>)
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	440b      	add	r3, r1
 800318e:	3304      	adds	r3, #4
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	613b      	str	r3, [r7, #16]
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	609a      	str	r2, [r3, #8]
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	689a      	ldr	r2, [r3, #8]
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	3204      	adds	r2, #4
 80031aa:	605a      	str	r2, [r3, #4]
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	1d1a      	adds	r2, r3, #4
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b8:	4613      	mov	r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	4413      	add	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <vTaskResume+0x11c>)
 80031c2:	441a      	add	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031cc:	4913      	ldr	r1, [pc, #76]	; (800321c <vTaskResume+0x11c>)
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	1c59      	adds	r1, r3, #1
 80031dc:	480f      	ldr	r0, [pc, #60]	; (800321c <vTaskResume+0x11c>)
 80031de:	4613      	mov	r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	4413      	add	r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	4403      	add	r3, r0
 80031e8:	6019      	str	r1, [r3, #0]

                    /* A higher priority task may have just been resumed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ee:	4b09      	ldr	r3, [pc, #36]	; (8003214 <vTaskResume+0x114>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f4:	429a      	cmp	r2, r3
 80031f6:	d307      	bcc.n	8003208 <vTaskResume+0x108>
                    {
                        /* This yield may not cause the task just resumed to run,
                         * but will leave the lists in the correct state for the
                         * next yield. */
                        taskYIELD_IF_USING_PREEMPTION();
 80031f8:	4b09      	ldr	r3, [pc, #36]	; (8003220 <vTaskResume+0x120>)
 80031fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	f3bf 8f4f 	dsb	sy
 8003204:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8003208:	f001 fb24 	bl	8004854 <vPortExitCritical>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800320c:	bf00      	nop
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	20000138 	.word	0x20000138
 8003218:	2000022c 	.word	0x2000022c
 800321c:	2000013c 	.word	0x2000013c
 8003220:	e000ed04 	.word	0xe000ed04

08003224 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 800322a:	4b27      	ldr	r3, [pc, #156]	; (80032c8 <vTaskStartScheduler+0xa4>)
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2300      	movs	r3, #0
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	2282      	movs	r2, #130	; 0x82
 8003236:	4925      	ldr	r1, [pc, #148]	; (80032cc <vTaskStartScheduler+0xa8>)
 8003238:	4825      	ldr	r0, [pc, #148]	; (80032d0 <vTaskStartScheduler+0xac>)
 800323a:	f7ff fcc1 	bl	8002bc0 <xTaskCreate>
 800323e:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b01      	cmp	r3, #1
 8003244:	d102      	bne.n	800324c <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8003246:	f000 fea7 	bl	8003f98 <xTimerCreateTimerTask>
 800324a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d124      	bne.n	800329c <vTaskStartScheduler+0x78>
        __asm volatile
 8003252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003256:	f383 8811 	msr	BASEPRI, r3
 800325a:	f3bf 8f6f 	isb	sy
 800325e:	f3bf 8f4f 	dsb	sy
 8003262:	60bb      	str	r3, [r7, #8]
    }
 8003264:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003266:	4b1b      	ldr	r3, [pc, #108]	; (80032d4 <vTaskStartScheduler+0xb0>)
 8003268:	f04f 32ff 	mov.w	r2, #4294967295
 800326c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800326e:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <vTaskStartScheduler+0xb4>)
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003274:	4b19      	ldr	r3, [pc, #100]	; (80032dc <vTaskStartScheduler+0xb8>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800327a:	4b19      	ldr	r3, [pc, #100]	; (80032e0 <vTaskStartScheduler+0xbc>)
 800327c:	681a      	ldr	r2, [r3, #0]
 800327e:	4b12      	ldr	r3, [pc, #72]	; (80032c8 <vTaskStartScheduler+0xa4>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d102      	bne.n	800328c <vTaskStartScheduler+0x68>
 8003286:	f003 fee7 	bl	8007058 <SEGGER_SYSVIEW_OnIdle>
 800328a:	e004      	b.n	8003296 <vTaskStartScheduler+0x72>
 800328c:	4b14      	ldr	r3, [pc, #80]	; (80032e0 <vTaskStartScheduler+0xbc>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f003 ff3f 	bl	8007114 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8003296:	f001 f98d 	bl	80045b4 <xPortStartScheduler>
 800329a:	e00e      	b.n	80032ba <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d10a      	bne.n	80032ba <vTaskStartScheduler+0x96>
        __asm volatile
 80032a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032a8:	f383 8811 	msr	BASEPRI, r3
 80032ac:	f3bf 8f6f 	isb	sy
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	607b      	str	r3, [r7, #4]
    }
 80032b6:	bf00      	nop
 80032b8:	e7fe      	b.n	80032b8 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80032ba:	4b0a      	ldr	r3, [pc, #40]	; (80032e4 <vTaskStartScheduler+0xc0>)
 80032bc:	681b      	ldr	r3, [r3, #0]
}
 80032be:	bf00      	nop
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	20000248 	.word	0x20000248
 80032cc:	080085ec 	.word	0x080085ec
 80032d0:	08003be9 	.word	0x08003be9
 80032d4:	20000244 	.word	0x20000244
 80032d8:	20000230 	.word	0x20000230
 80032dc:	20000228 	.word	0x20000228
 80032e0:	20000138 	.word	0x20000138
 80032e4:	2000000c 	.word	0x2000000c

080032e8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032e8:	b480      	push	{r7}
 80032ea:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032ec:	4b04      	ldr	r3, [pc, #16]	; (8003300 <vTaskSuspendAll+0x18>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3301      	adds	r3, #1
 80032f2:	4a03      	ldr	r2, [pc, #12]	; (8003300 <vTaskSuspendAll+0x18>)
 80032f4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032f6:	bf00      	nop
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	2000024c 	.word	0x2000024c

08003304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b088      	sub	sp, #32
 8003308:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800330e:	2300      	movs	r3, #0
 8003310:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8003312:	4b73      	ldr	r3, [pc, #460]	; (80034e0 <xTaskResumeAll+0x1dc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10a      	bne.n	8003330 <xTaskResumeAll+0x2c>
        __asm volatile
 800331a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	607b      	str	r3, [r7, #4]
    }
 800332c:	bf00      	nop
 800332e:	e7fe      	b.n	800332e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003330:	f001 fa60 	bl	80047f4 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003334:	4b6a      	ldr	r3, [pc, #424]	; (80034e0 <xTaskResumeAll+0x1dc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	3b01      	subs	r3, #1
 800333a:	4a69      	ldr	r2, [pc, #420]	; (80034e0 <xTaskResumeAll+0x1dc>)
 800333c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800333e:	4b68      	ldr	r3, [pc, #416]	; (80034e0 <xTaskResumeAll+0x1dc>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f040 80c4 	bne.w	80034d0 <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003348:	4b66      	ldr	r3, [pc, #408]	; (80034e4 <xTaskResumeAll+0x1e0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80bf 	beq.w	80034d0 <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003352:	e08e      	b.n	8003472 <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003354:	4b64      	ldr	r3, [pc, #400]	; (80034e8 <xTaskResumeAll+0x1e4>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	69db      	ldr	r3, [r3, #28]
 8003366:	69fa      	ldr	r2, [r7, #28]
 8003368:	6a12      	ldr	r2, [r2, #32]
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	69d2      	ldr	r2, [r2, #28]
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3318      	adds	r3, #24
 800337e:	429a      	cmp	r2, r3
 8003380:	d103      	bne.n	800338a <xTaskResumeAll+0x86>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	6a1a      	ldr	r2, [r3, #32]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	2200      	movs	r2, #0
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	695b      	ldr	r3, [r3, #20]
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	68d2      	ldr	r2, [r2, #12]
 80033a8:	609a      	str	r2, [r3, #8]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	69fa      	ldr	r2, [r7, #28]
 80033b0:	6892      	ldr	r2, [r2, #8]
 80033b2:	605a      	str	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	3304      	adds	r3, #4
 80033bc:	429a      	cmp	r2, r3
 80033be:	d103      	bne.n	80033c8 <xTaskResumeAll+0xc4>
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	605a      	str	r2, [r3, #4]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2200      	movs	r2, #0
 80033cc:	615a      	str	r2, [r3, #20]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	1e5a      	subs	r2, r3, #1
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 fedc 	bl	8007198 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	4b40      	ldr	r3, [pc, #256]	; (80034ec <xTaskResumeAll+0x1e8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4313      	orrs	r3, r2
 80033ee:	4a3f      	ldr	r2, [pc, #252]	; (80034ec <xTaskResumeAll+0x1e8>)
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	493e      	ldr	r1, [pc, #248]	; (80034f0 <xTaskResumeAll+0x1ec>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	3304      	adds	r3, #4
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60bb      	str	r3, [r7, #8]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	60da      	str	r2, [r3, #12]
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	3204      	adds	r2, #4
 800341e:	605a      	str	r2, [r3, #4]
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	1d1a      	adds	r2, r3, #4
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	4a2e      	ldr	r2, [pc, #184]	; (80034f0 <xTaskResumeAll+0x1ec>)
 8003436:	441a      	add	r2, r3
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	615a      	str	r2, [r3, #20]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003440:	492b      	ldr	r1, [pc, #172]	; (80034f0 <xTaskResumeAll+0x1ec>)
 8003442:	4613      	mov	r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	4413      	add	r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	440b      	add	r3, r1
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	1c59      	adds	r1, r3, #1
 8003450:	4827      	ldr	r0, [pc, #156]	; (80034f0 <xTaskResumeAll+0x1ec>)
 8003452:	4613      	mov	r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4403      	add	r3, r0
 800345c:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <xTaskResumeAll+0x1f0>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003468:	429a      	cmp	r2, r3
 800346a:	d302      	bcc.n	8003472 <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <xTaskResumeAll+0x1f4>)
 800346e:	2201      	movs	r2, #1
 8003470:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <xTaskResumeAll+0x1e4>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	f47f af6c 	bne.w	8003354 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800347c:	69fb      	ldr	r3, [r7, #28]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003482:	f000 fc47 	bl	8003d14 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003486:	4b1d      	ldr	r3, [pc, #116]	; (80034fc <xTaskResumeAll+0x1f8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d010      	beq.n	80034b4 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003492:	f000 f859 	bl	8003548 <xTaskIncrementTick>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d002      	beq.n	80034a2 <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 800349c:	4b16      	ldr	r3, [pc, #88]	; (80034f8 <xTaskResumeAll+0x1f4>)
 800349e:	2201      	movs	r2, #1
 80034a0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	3b01      	subs	r3, #1
 80034a6:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1f1      	bne.n	8003492 <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 80034ae:	4b13      	ldr	r3, [pc, #76]	; (80034fc <xTaskResumeAll+0x1f8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <xTaskResumeAll+0x1f4>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d009      	beq.n	80034d0 <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 80034bc:	2301      	movs	r3, #1
 80034be:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <xTaskResumeAll+0x1fc>)
 80034c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	f3bf 8f4f 	dsb	sy
 80034cc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034d0:	f001 f9c0 	bl	8004854 <vPortExitCritical>

    return xAlreadyYielded;
 80034d4:	69bb      	ldr	r3, [r7, #24]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3720      	adds	r7, #32
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	2000024c 	.word	0x2000024c
 80034e4:	20000224 	.word	0x20000224
 80034e8:	200001e4 	.word	0x200001e4
 80034ec:	2000022c 	.word	0x2000022c
 80034f0:	2000013c 	.word	0x2000013c
 80034f4:	20000138 	.word	0x20000138
 80034f8:	20000238 	.word	0x20000238
 80034fc:	20000234 	.word	0x20000234
 8003500:	e000ed04 	.word	0xe000ed04

08003504 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <xTaskGetTickCount+0x1c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8003510:	687b      	ldr	r3, [r7, #4]
}
 8003512:	4618      	mov	r0, r3
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	20000228 	.word	0x20000228

08003524 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800352a:	f001 fa4f 	bl	80049cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003532:	4b04      	ldr	r3, [pc, #16]	; (8003544 <xTaskGetTickCountFromISR+0x20>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003538:	683b      	ldr	r3, [r7, #0]
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000228 	.word	0x20000228

08003548 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800354e:	2300      	movs	r3, #0
 8003550:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003552:	4b7f      	ldr	r3, [pc, #508]	; (8003750 <xTaskIncrementTick+0x208>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	f040 80f0 	bne.w	800373c <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800355c:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <xTaskIncrementTick+0x20c>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003564:	4a7b      	ldr	r2, [pc, #492]	; (8003754 <xTaskIncrementTick+0x20c>)
 8003566:	6a3b      	ldr	r3, [r7, #32]
 8003568:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800356a:	6a3b      	ldr	r3, [r7, #32]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d120      	bne.n	80035b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8003570:	4b79      	ldr	r3, [pc, #484]	; (8003758 <xTaskIncrementTick+0x210>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <xTaskIncrementTick+0x48>
        __asm volatile
 800357a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800357e:	f383 8811 	msr	BASEPRI, r3
 8003582:	f3bf 8f6f 	isb	sy
 8003586:	f3bf 8f4f 	dsb	sy
 800358a:	607b      	str	r3, [r7, #4]
    }
 800358c:	bf00      	nop
 800358e:	e7fe      	b.n	800358e <xTaskIncrementTick+0x46>
 8003590:	4b71      	ldr	r3, [pc, #452]	; (8003758 <xTaskIncrementTick+0x210>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	4b71      	ldr	r3, [pc, #452]	; (800375c <xTaskIncrementTick+0x214>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a6f      	ldr	r2, [pc, #444]	; (8003758 <xTaskIncrementTick+0x210>)
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4a6f      	ldr	r2, [pc, #444]	; (800375c <xTaskIncrementTick+0x214>)
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	6013      	str	r3, [r2, #0]
 80035a4:	4b6e      	ldr	r3, [pc, #440]	; (8003760 <xTaskIncrementTick+0x218>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3301      	adds	r3, #1
 80035aa:	4a6d      	ldr	r2, [pc, #436]	; (8003760 <xTaskIncrementTick+0x218>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	f000 fbb1 	bl	8003d14 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <xTaskIncrementTick+0x21c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6a3a      	ldr	r2, [r7, #32]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	f0c0 80aa 	bcc.w	8003712 <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035be:	4b66      	ldr	r3, [pc, #408]	; (8003758 <xTaskIncrementTick+0x210>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d104      	bne.n	80035d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035c8:	4b66      	ldr	r3, [pc, #408]	; (8003764 <xTaskIncrementTick+0x21c>)
 80035ca:	f04f 32ff 	mov.w	r2, #4294967295
 80035ce:	601a      	str	r2, [r3, #0]
                    break;
 80035d0:	e09f      	b.n	8003712 <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d2:	4b61      	ldr	r3, [pc, #388]	; (8003758 <xTaskIncrementTick+0x210>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80035e2:	6a3a      	ldr	r2, [r7, #32]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d203      	bcs.n	80035f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035ea:	4a5e      	ldr	r2, [pc, #376]	; (8003764 <xTaskIncrementTick+0x21c>)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80035f0:	e08f      	b.n	8003712 <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	695b      	ldr	r3, [r3, #20]
 80035f6:	613b      	str	r3, [r7, #16]
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	68d2      	ldr	r2, [r2, #12]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	6892      	ldr	r2, [r2, #8]
 800360a:	605a      	str	r2, [r3, #4]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	685a      	ldr	r2, [r3, #4]
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	3304      	adds	r3, #4
 8003614:	429a      	cmp	r2, r3
 8003616:	d103      	bne.n	8003620 <xTaskIncrementTick+0xd8>
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	68da      	ldr	r2, [r3, #12]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	69bb      	ldr	r3, [r7, #24]
 8003622:	2200      	movs	r2, #0
 8003624:	615a      	str	r2, [r3, #20]
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1e5a      	subs	r2, r3, #1
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01e      	beq.n	8003676 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003638:	69bb      	ldr	r3, [r7, #24]
 800363a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	69db      	ldr	r3, [r3, #28]
 8003642:	69ba      	ldr	r2, [r7, #24]
 8003644:	6a12      	ldr	r2, [r2, #32]
 8003646:	609a      	str	r2, [r3, #8]
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	6a1b      	ldr	r3, [r3, #32]
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	69d2      	ldr	r2, [r2, #28]
 8003650:	605a      	str	r2, [r3, #4]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	69bb      	ldr	r3, [r7, #24]
 8003658:	3318      	adds	r3, #24
 800365a:	429a      	cmp	r2, r3
 800365c:	d103      	bne.n	8003666 <xTaskIncrementTick+0x11e>
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	6a1a      	ldr	r2, [r3, #32]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	2200      	movs	r2, #0
 800366a:	629a      	str	r2, [r3, #40]	; 0x28
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	1e5a      	subs	r2, r3, #1
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	4618      	mov	r0, r3
 800367a:	f003 fd8d 	bl	8007198 <SEGGER_SYSVIEW_OnTaskStartReady>
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	2201      	movs	r2, #1
 8003684:	409a      	lsls	r2, r3
 8003686:	4b38      	ldr	r3, [pc, #224]	; (8003768 <xTaskIncrementTick+0x220>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4313      	orrs	r3, r2
 800368c:	4a36      	ldr	r2, [pc, #216]	; (8003768 <xTaskIncrementTick+0x220>)
 800368e:	6013      	str	r3, [r2, #0]
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003694:	4935      	ldr	r1, [pc, #212]	; (800376c <xTaskIncrementTick+0x224>)
 8003696:	4613      	mov	r3, r2
 8003698:	009b      	lsls	r3, r3, #2
 800369a:	4413      	add	r3, r2
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	440b      	add	r3, r1
 80036a0:	3304      	adds	r3, #4
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	60bb      	str	r3, [r7, #8]
 80036a6:	69bb      	ldr	r3, [r7, #24]
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	609a      	str	r2, [r3, #8]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	60da      	str	r2, [r3, #12]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	3204      	adds	r2, #4
 80036bc:	605a      	str	r2, [r3, #4]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1d1a      	adds	r2, r3, #4
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	609a      	str	r2, [r3, #8]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ca:	4613      	mov	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	4a26      	ldr	r2, [pc, #152]	; (800376c <xTaskIncrementTick+0x224>)
 80036d4:	441a      	add	r2, r3
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	615a      	str	r2, [r3, #20]
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	4923      	ldr	r1, [pc, #140]	; (800376c <xTaskIncrementTick+0x224>)
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	1c59      	adds	r1, r3, #1
 80036ee:	481f      	ldr	r0, [pc, #124]	; (800376c <xTaskIncrementTick+0x224>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4403      	add	r3, r0
 80036fa:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003700:	4b1b      	ldr	r3, [pc, #108]	; (8003770 <xTaskIncrementTick+0x228>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	429a      	cmp	r2, r3
 8003708:	f67f af59 	bls.w	80035be <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003710:	e755      	b.n	80035be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003712:	4b17      	ldr	r3, [pc, #92]	; (8003770 <xTaskIncrementTick+0x228>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003718:	4914      	ldr	r1, [pc, #80]	; (800376c <xTaskIncrementTick+0x224>)
 800371a:	4613      	mov	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4413      	add	r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d901      	bls.n	800372e <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 800372a:	2301      	movs	r3, #1
 800372c:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800372e:	4b11      	ldr	r3, [pc, #68]	; (8003774 <xTaskIncrementTick+0x22c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d007      	beq.n	8003746 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 8003736:	2301      	movs	r3, #1
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
 800373a:	e004      	b.n	8003746 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800373c:	4b0e      	ldr	r3, [pc, #56]	; (8003778 <xTaskIncrementTick+0x230>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3301      	adds	r3, #1
 8003742:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <xTaskIncrementTick+0x230>)
 8003744:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003748:	4618      	mov	r0, r3
 800374a:	3728      	adds	r7, #40	; 0x28
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	2000024c 	.word	0x2000024c
 8003754:	20000228 	.word	0x20000228
 8003758:	200001dc 	.word	0x200001dc
 800375c:	200001e0 	.word	0x200001e0
 8003760:	2000023c 	.word	0x2000023c
 8003764:	20000244 	.word	0x20000244
 8003768:	2000022c 	.word	0x2000022c
 800376c:	2000013c 	.word	0x2000013c
 8003770:	20000138 	.word	0x20000138
 8003774:	20000238 	.word	0x20000238
 8003778:	20000234 	.word	0x20000234

0800377c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003782:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <vTaskSwitchContext+0xbc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800378a:	4b2c      	ldr	r3, [pc, #176]	; (800383c <vTaskSwitchContext+0xc0>)
 800378c:	2201      	movs	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003790:	e04d      	b.n	800382e <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8003792:	4b2a      	ldr	r3, [pc, #168]	; (800383c <vTaskSwitchContext+0xc0>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003798:	4b29      	ldr	r3, [pc, #164]	; (8003840 <vTaskSwitchContext+0xc4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	fab3 f383 	clz	r3, r3
 80037a4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80037a6:	7afb      	ldrb	r3, [r7, #11]
 80037a8:	f1c3 031f 	rsb	r3, r3, #31
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	4925      	ldr	r1, [pc, #148]	; (8003844 <vTaskSwitchContext+0xc8>)
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	440b      	add	r3, r1
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <vTaskSwitchContext+0x5c>
        __asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	607b      	str	r3, [r7, #4]
    }
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <vTaskSwitchContext+0x5a>
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4a18      	ldr	r2, [pc, #96]	; (8003844 <vTaskSwitchContext+0xc8>)
 80037e4:	4413      	add	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	685a      	ldr	r2, [r3, #4]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	605a      	str	r2, [r3, #4]
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	685a      	ldr	r2, [r3, #4]
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	3308      	adds	r3, #8
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d104      	bne.n	8003808 <vTaskSwitchContext+0x8c>
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	4a0e      	ldr	r2, [pc, #56]	; (8003848 <vTaskSwitchContext+0xcc>)
 8003810:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003812:	4b0d      	ldr	r3, [pc, #52]	; (8003848 <vTaskSwitchContext+0xcc>)
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	4b0d      	ldr	r3, [pc, #52]	; (800384c <vTaskSwitchContext+0xd0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	429a      	cmp	r2, r3
 800381c:	d102      	bne.n	8003824 <vTaskSwitchContext+0xa8>
 800381e:	f003 fc1b 	bl	8007058 <SEGGER_SYSVIEW_OnIdle>
}
 8003822:	e004      	b.n	800382e <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8003824:	4b08      	ldr	r3, [pc, #32]	; (8003848 <vTaskSwitchContext+0xcc>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4618      	mov	r0, r3
 800382a:	f003 fc73 	bl	8007114 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800382e:	bf00      	nop
 8003830:	3718      	adds	r7, #24
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	2000024c 	.word	0x2000024c
 800383c:	20000238 	.word	0x20000238
 8003840:	2000022c 	.word	0x2000022c
 8003844:	2000013c 	.word	0x2000013c
 8003848:	20000138 	.word	0x20000138
 800384c:	20000248 	.word	0x20000248

08003850 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10a      	bne.n	8003876 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 8003860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003864:	f383 8811 	msr	BASEPRI, r3
 8003868:	f3bf 8f6f 	isb	sy
 800386c:	f3bf 8f4f 	dsb	sy
 8003870:	60fb      	str	r3, [r7, #12]
    }
 8003872:	bf00      	nop
 8003874:	e7fe      	b.n	8003874 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003876:	4b07      	ldr	r3, [pc, #28]	; (8003894 <vTaskPlaceOnEventList+0x44>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	3318      	adds	r3, #24
 800387c:	4619      	mov	r1, r3
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f7fe fe0b 	bl	800249a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003884:	2101      	movs	r1, #1
 8003886:	6838      	ldr	r0, [r7, #0]
 8003888:	f000 fb06 	bl	8003e98 <prvAddCurrentTaskToDelayedList>
}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	20000138 	.word	0x20000138

08003898 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af00      	add	r7, sp, #0
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d10a      	bne.n	80038c0 <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 80038aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ae:	f383 8811 	msr	BASEPRI, r3
 80038b2:	f3bf 8f6f 	isb	sy
 80038b6:	f3bf 8f4f 	dsb	sy
 80038ba:	613b      	str	r3, [r7, #16]
    }
 80038bc:	bf00      	nop
 80038be:	e7fe      	b.n	80038be <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	4b17      	ldr	r3, [pc, #92]	; (8003924 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	697a      	ldr	r2, [r7, #20]
 80038cc:	61da      	str	r2, [r3, #28]
 80038ce:	4b15      	ldr	r3, [pc, #84]	; (8003924 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	697a      	ldr	r2, [r7, #20]
 80038d4:	6892      	ldr	r2, [r2, #8]
 80038d6:	621a      	str	r2, [r3, #32]
 80038d8:	4b12      	ldr	r3, [pc, #72]	; (8003924 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	3218      	adds	r2, #24
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	4b0f      	ldr	r3, [pc, #60]	; (8003924 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f103 0218 	add.w	r2, r3, #24
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <vTaskPlaceOnEventListRestricted+0x8c>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	629a      	str	r2, [r3, #40]	; 0x28
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d002      	beq.n	800390e <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 8003908:	f04f 33ff 	mov.w	r3, #4294967295
 800390c:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 800390e:	2024      	movs	r0, #36	; 0x24
 8003910:	f002 fea4 	bl	800665c <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	68b8      	ldr	r0, [r7, #8]
 8003918:	f000 fabe 	bl	8003e98 <prvAddCurrentTaskToDelayedList>
    }
 800391c:	bf00      	nop
 800391e:	3718      	adds	r7, #24
 8003920:	46bd      	mov	sp, r7
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000138 	.word	0x20000138

08003928 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b08a      	sub	sp, #40	; 0x28
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10a      	bne.n	8003954 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 800393e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003942:	f383 8811 	msr	BASEPRI, r3
 8003946:	f3bf 8f6f 	isb	sy
 800394a:	f3bf 8f4f 	dsb	sy
 800394e:	60fb      	str	r3, [r7, #12]
    }
 8003950:	bf00      	nop
 8003952:	e7fe      	b.n	8003952 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003958:	61fb      	str	r3, [r7, #28]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	6a3a      	ldr	r2, [r7, #32]
 8003960:	6a12      	ldr	r2, [r2, #32]
 8003962:	609a      	str	r2, [r3, #8]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	6a1b      	ldr	r3, [r3, #32]
 8003968:	6a3a      	ldr	r2, [r7, #32]
 800396a:	69d2      	ldr	r2, [r2, #28]
 800396c:	605a      	str	r2, [r3, #4]
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	6a3b      	ldr	r3, [r7, #32]
 8003974:	3318      	adds	r3, #24
 8003976:	429a      	cmp	r2, r3
 8003978:	d103      	bne.n	8003982 <xTaskRemoveFromEventList+0x5a>
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	6a1a      	ldr	r2, [r3, #32]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	605a      	str	r2, [r3, #4]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	2200      	movs	r2, #0
 8003986:	629a      	str	r2, [r3, #40]	; 0x28
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	1e5a      	subs	r2, r3, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003992:	4b4b      	ldr	r3, [pc, #300]	; (8003ac0 <xTaskRemoveFromEventList+0x198>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d162      	bne.n	8003a60 <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	6a3b      	ldr	r3, [r7, #32]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	6a3a      	ldr	r2, [r7, #32]
 80039a6:	68d2      	ldr	r2, [r2, #12]
 80039a8:	609a      	str	r2, [r3, #8]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	68db      	ldr	r3, [r3, #12]
 80039ae:	6a3a      	ldr	r2, [r7, #32]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	605a      	str	r2, [r3, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	685a      	ldr	r2, [r3, #4]
 80039b8:	6a3b      	ldr	r3, [r7, #32]
 80039ba:	3304      	adds	r3, #4
 80039bc:	429a      	cmp	r2, r3
 80039be:	d103      	bne.n	80039c8 <xTaskRemoveFromEventList+0xa0>
 80039c0:	6a3b      	ldr	r3, [r7, #32]
 80039c2:	68da      	ldr	r2, [r3, #12]
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	605a      	str	r2, [r3, #4]
 80039c8:	6a3b      	ldr	r3, [r7, #32]
 80039ca:	2200      	movs	r2, #0
 80039cc:	615a      	str	r2, [r3, #20]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039d8:	6a3b      	ldr	r3, [r7, #32]
 80039da:	4618      	mov	r0, r3
 80039dc:	f003 fbdc 	bl	8007198 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039e0:	6a3b      	ldr	r3, [r7, #32]
 80039e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e4:	2201      	movs	r2, #1
 80039e6:	409a      	lsls	r2, r3
 80039e8:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <xTaskRemoveFromEventList+0x19c>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	4a35      	ldr	r2, [pc, #212]	; (8003ac4 <xTaskRemoveFromEventList+0x19c>)
 80039f0:	6013      	str	r3, [r2, #0]
 80039f2:	6a3b      	ldr	r3, [r7, #32]
 80039f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f6:	4934      	ldr	r1, [pc, #208]	; (8003ac8 <xTaskRemoveFromEventList+0x1a0>)
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3304      	adds	r3, #4
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	613b      	str	r3, [r7, #16]
 8003a08:	6a3b      	ldr	r3, [r7, #32]
 8003a0a:	693a      	ldr	r2, [r7, #16]
 8003a0c:	609a      	str	r2, [r3, #8]
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	689a      	ldr	r2, [r3, #8]
 8003a12:	6a3b      	ldr	r3, [r7, #32]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	6a3a      	ldr	r2, [r7, #32]
 8003a1c:	3204      	adds	r2, #4
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	6a3b      	ldr	r3, [r7, #32]
 8003a22:	1d1a      	adds	r2, r3, #4
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	6a3b      	ldr	r3, [r7, #32]
 8003a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <xTaskRemoveFromEventList+0x1a0>)
 8003a36:	441a      	add	r2, r3
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	615a      	str	r2, [r3, #20]
 8003a3c:	6a3b      	ldr	r3, [r7, #32]
 8003a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a40:	4921      	ldr	r1, [pc, #132]	; (8003ac8 <xTaskRemoveFromEventList+0x1a0>)
 8003a42:	4613      	mov	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4413      	add	r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	1c59      	adds	r1, r3, #1
 8003a50:	481d      	ldr	r0, [pc, #116]	; (8003ac8 <xTaskRemoveFromEventList+0x1a0>)
 8003a52:	4613      	mov	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4403      	add	r3, r0
 8003a5c:	6019      	str	r1, [r3, #0]
 8003a5e:	e01b      	b.n	8003a98 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a60:	4b1a      	ldr	r3, [pc, #104]	; (8003acc <xTaskRemoveFromEventList+0x1a4>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	61bb      	str	r3, [r7, #24]
 8003a66:	6a3b      	ldr	r3, [r7, #32]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	61da      	str	r2, [r3, #28]
 8003a6c:	69bb      	ldr	r3, [r7, #24]
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	621a      	str	r2, [r3, #32]
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	6a3a      	ldr	r2, [r7, #32]
 8003a7a:	3218      	adds	r2, #24
 8003a7c:	605a      	str	r2, [r3, #4]
 8003a7e:	6a3b      	ldr	r3, [r7, #32]
 8003a80:	f103 0218 	add.w	r2, r3, #24
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	609a      	str	r2, [r3, #8]
 8003a88:	6a3b      	ldr	r3, [r7, #32]
 8003a8a:	4a10      	ldr	r2, [pc, #64]	; (8003acc <xTaskRemoveFromEventList+0x1a4>)
 8003a8c:	629a      	str	r2, [r3, #40]	; 0x28
 8003a8e:	4b0f      	ldr	r3, [pc, #60]	; (8003acc <xTaskRemoveFromEventList+0x1a4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	3301      	adds	r3, #1
 8003a94:	4a0d      	ldr	r2, [pc, #52]	; (8003acc <xTaskRemoveFromEventList+0x1a4>)
 8003a96:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a9c:	4b0c      	ldr	r3, [pc, #48]	; (8003ad0 <xTaskRemoveFromEventList+0x1a8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d905      	bls.n	8003ab2 <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003aaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ad4 <xTaskRemoveFromEventList+0x1ac>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	e001      	b.n	8003ab6 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	2000024c 	.word	0x2000024c
 8003ac4:	2000022c 	.word	0x2000022c
 8003ac8:	2000013c 	.word	0x2000013c
 8003acc:	200001e4 	.word	0x200001e4
 8003ad0:	20000138 	.word	0x20000138
 8003ad4:	20000238 	.word	0x20000238

08003ad8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ae0:	4b06      	ldr	r3, [pc, #24]	; (8003afc <vTaskInternalSetTimeOutState+0x24>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ae8:	4b05      	ldr	r3, [pc, #20]	; (8003b00 <vTaskInternalSetTimeOutState+0x28>)
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	605a      	str	r2, [r3, #4]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr
 8003afc:	2000023c 	.word	0x2000023c
 8003b00:	20000228 	.word	0x20000228

08003b04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10a      	bne.n	8003b2a <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b18:	f383 8811 	msr	BASEPRI, r3
 8003b1c:	f3bf 8f6f 	isb	sy
 8003b20:	f3bf 8f4f 	dsb	sy
 8003b24:	613b      	str	r3, [r7, #16]
    }
 8003b26:	bf00      	nop
 8003b28:	e7fe      	b.n	8003b28 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10a      	bne.n	8003b46 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b34:	f383 8811 	msr	BASEPRI, r3
 8003b38:	f3bf 8f6f 	isb	sy
 8003b3c:	f3bf 8f4f 	dsb	sy
 8003b40:	60fb      	str	r3, [r7, #12]
    }
 8003b42:	bf00      	nop
 8003b44:	e7fe      	b.n	8003b44 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b46:	f000 fe55 	bl	80047f4 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b4a:	4b1f      	ldr	r3, [pc, #124]	; (8003bc8 <xTaskCheckForTimeOut+0xc4>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b62:	d102      	bne.n	8003b6a <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b64:	2300      	movs	r3, #0
 8003b66:	61fb      	str	r3, [r7, #28]
 8003b68:	e026      	b.n	8003bb8 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	4b17      	ldr	r3, [pc, #92]	; (8003bcc <xTaskCheckForTimeOut+0xc8>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d00a      	beq.n	8003b8c <xTaskCheckForTimeOut+0x88>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	69ba      	ldr	r2, [r7, #24]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d305      	bcc.n	8003b8c <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	2200      	movs	r2, #0
 8003b88:	601a      	str	r2, [r3, #0]
 8003b8a:	e015      	b.n	8003bb8 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d20b      	bcs.n	8003bae <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	1ad2      	subs	r2, r2, r3
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff ff98 	bl	8003ad8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	e004      	b.n	8003bb8 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003bb8:	f000 fe4c 	bl	8004854 <vPortExitCritical>

    return xReturn;
 8003bbc:	69fb      	ldr	r3, [r7, #28]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000228 	.word	0x20000228
 8003bcc:	2000023c 	.word	0x2000023c

08003bd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bd4:	4b03      	ldr	r3, [pc, #12]	; (8003be4 <vTaskMissedYield+0x14>)
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
}
 8003bda:	bf00      	nop
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr
 8003be4:	20000238 	.word	0x20000238

08003be8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bf0:	f000 f852 	bl	8003c98 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bf4:	4b06      	ldr	r3, [pc, #24]	; (8003c10 <prvIdleTask+0x28>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d9f9      	bls.n	8003bf0 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <prvIdleTask+0x2c>)
 8003bfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003c0c:	e7f0      	b.n	8003bf0 <prvIdleTask+0x8>
 8003c0e:	bf00      	nop
 8003c10:	2000013c 	.word	0x2000013c
 8003c14:	e000ed04 	.word	0xe000ed04

08003c18 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c1e:	2300      	movs	r3, #0
 8003c20:	607b      	str	r3, [r7, #4]
 8003c22:	e00c      	b.n	8003c3e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c24:	687a      	ldr	r2, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4a12      	ldr	r2, [pc, #72]	; (8003c78 <prvInitialiseTaskLists+0x60>)
 8003c30:	4413      	add	r3, r2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fe fbe0 	bl	80023f8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	607b      	str	r3, [r7, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b05      	cmp	r3, #5
 8003c42:	d9ef      	bls.n	8003c24 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c44:	480d      	ldr	r0, [pc, #52]	; (8003c7c <prvInitialiseTaskLists+0x64>)
 8003c46:	f7fe fbd7 	bl	80023f8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c4a:	480d      	ldr	r0, [pc, #52]	; (8003c80 <prvInitialiseTaskLists+0x68>)
 8003c4c:	f7fe fbd4 	bl	80023f8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c50:	480c      	ldr	r0, [pc, #48]	; (8003c84 <prvInitialiseTaskLists+0x6c>)
 8003c52:	f7fe fbd1 	bl	80023f8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c56:	480c      	ldr	r0, [pc, #48]	; (8003c88 <prvInitialiseTaskLists+0x70>)
 8003c58:	f7fe fbce 	bl	80023f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c5c:	480b      	ldr	r0, [pc, #44]	; (8003c8c <prvInitialiseTaskLists+0x74>)
 8003c5e:	f7fe fbcb 	bl	80023f8 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c62:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <prvInitialiseTaskLists+0x78>)
 8003c64:	4a05      	ldr	r2, [pc, #20]	; (8003c7c <prvInitialiseTaskLists+0x64>)
 8003c66:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c68:	4b0a      	ldr	r3, [pc, #40]	; (8003c94 <prvInitialiseTaskLists+0x7c>)
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <prvInitialiseTaskLists+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	2000013c 	.word	0x2000013c
 8003c7c:	200001b4 	.word	0x200001b4
 8003c80:	200001c8 	.word	0x200001c8
 8003c84:	200001e4 	.word	0x200001e4
 8003c88:	200001f8 	.word	0x200001f8
 8003c8c:	20000210 	.word	0x20000210
 8003c90:	200001dc 	.word	0x200001dc
 8003c94:	200001e0 	.word	0x200001e0

08003c98 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c9e:	e019      	b.n	8003cd4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003ca0:	f000 fda8 	bl	80047f4 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca4:	4b10      	ldr	r3, [pc, #64]	; (8003ce8 <prvCheckTasksWaitingTermination+0x50>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	3304      	adds	r3, #4
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fe fc2b 	bl	800250c <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003cb6:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <prvCheckTasksWaitingTermination+0x54>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	4a0b      	ldr	r2, [pc, #44]	; (8003cec <prvCheckTasksWaitingTermination+0x54>)
 8003cbe:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003cc0:	4b0b      	ldr	r3, [pc, #44]	; (8003cf0 <prvCheckTasksWaitingTermination+0x58>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <prvCheckTasksWaitingTermination+0x58>)
 8003cc8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003cca:	f000 fdc3 	bl	8004854 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f810 	bl	8003cf4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <prvCheckTasksWaitingTermination+0x58>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1e1      	bne.n	8003ca0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3708      	adds	r7, #8
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
 8003ce6:	bf00      	nop
 8003ce8:	200001f8 	.word	0x200001f8
 8003cec:	20000224 	.word	0x20000224
 8003cf0:	2000020c 	.word	0x2000020c

08003cf4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	4618      	mov	r0, r3
 8003d02:	f000 ff5d 	bl	8004bc0 <vPortFree>
            vPortFree( pxTCB );
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f000 ff5a 	bl	8004bc0 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003d0c:	bf00      	nop
 8003d0e:	3708      	adds	r7, #8
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d18:	4b0a      	ldr	r3, [pc, #40]	; (8003d44 <prvResetNextTaskUnblockTime+0x30>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d104      	bne.n	8003d2c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <prvResetNextTaskUnblockTime+0x34>)
 8003d24:	f04f 32ff 	mov.w	r2, #4294967295
 8003d28:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d2a:	e005      	b.n	8003d38 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <prvResetNextTaskUnblockTime+0x30>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <prvResetNextTaskUnblockTime+0x34>)
 8003d36:	6013      	str	r3, [r2, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	200001dc 	.word	0x200001dc
 8003d48:	20000244 	.word	0x20000244

08003d4c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d4c:	b480      	push	{r7}
 8003d4e:	b083      	sub	sp, #12
 8003d50:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d52:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <xTaskGetSchedulerState+0x34>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	607b      	str	r3, [r7, #4]
 8003d5e:	e008      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d60:	4b08      	ldr	r3, [pc, #32]	; (8003d84 <xTaskGetSchedulerState+0x38>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d102      	bne.n	8003d6e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	607b      	str	r3, [r7, #4]
 8003d6c:	e001      	b.n	8003d72 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d72:	687b      	ldr	r3, [r7, #4]
    }
 8003d74:	4618      	mov	r0, r3
 8003d76:	370c      	adds	r7, #12
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr
 8003d80:	20000230 	.word	0x20000230
 8003d84:	2000024c 	.word	0x2000024c

08003d88 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b088      	sub	sp, #32
 8003d8c:	af02      	add	r7, sp, #8
 8003d8e:	60f8      	str	r0, [r7, #12]
 8003d90:	60b9      	str	r1, [r7, #8]
 8003d92:	607a      	str	r2, [r7, #4]
 8003d94:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d00a      	beq.n	8003db2 <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da0:	f383 8811 	msr	BASEPRI, r3
 8003da4:	f3bf 8f6f 	isb	sy
 8003da8:	f3bf 8f4f 	dsb	sy
 8003dac:	613b      	str	r3, [r7, #16]
    }
 8003dae:	bf00      	nop
 8003db0:	e7fe      	b.n	8003db0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003db2:	f000 fd1f 	bl	80047f4 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003db6:	4b36      	ldr	r3, [pc, #216]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	3354      	adds	r3, #84	; 0x54
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d022      	beq.n	8003e0e <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	3214      	adds	r2, #20
 8003dd0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	43d2      	mvns	r2, r2
 8003dd8:	4011      	ands	r1, r2
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	3214      	adds	r2, #20
 8003dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003de2:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4413      	add	r3, r2
 8003dea:	3354      	adds	r3, #84	; 0x54
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003df6:	2101      	movs	r1, #1
 8003df8:	6a38      	ldr	r0, [r7, #32]
 8003dfa:	f000 f84d 	bl	8003e98 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003dfe:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <xTaskGenericNotifyWait+0x10c>)
 8003e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	f3bf 8f4f 	dsb	sy
 8003e0a:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003e0e:	f000 fd21 	bl	8004854 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003e12:	f000 fcef 	bl	80047f4 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003e16:	683a      	ldr	r2, [r7, #0]
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	2040      	movs	r0, #64	; 0x40
 8003e24:	f002 fd44 	bl	80068b0 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d007      	beq.n	8003e3e <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003e2e:	4b18      	ldr	r3, [pc, #96]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	3214      	adds	r2, #20
 8003e36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	3354      	adds	r3, #84	; 0x54
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d002      	beq.n	8003e56 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003e50:	2300      	movs	r3, #0
 8003e52:	617b      	str	r3, [r7, #20]
 8003e54:	e00e      	b.n	8003e74 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003e56:	4b0e      	ldr	r3, [pc, #56]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	3214      	adds	r2, #20
 8003e5e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	43d2      	mvns	r2, r2
 8003e66:	4011      	ands	r1, r2
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	3214      	adds	r2, #20
 8003e6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003e70:	2301      	movs	r3, #1
 8003e72:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <xTaskGenericNotifyWait+0x108>)
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4413      	add	r3, r2
 8003e7c:	3354      	adds	r3, #84	; 0x54
 8003e7e:	2200      	movs	r2, #0
 8003e80:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003e82:	f000 fce7 	bl	8004854 <vPortExitCritical>

        return xReturn;
 8003e86:	697b      	ldr	r3, [r7, #20]
    }
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20000138 	.word	0x20000138
 8003e94:	e000ed04 	.word	0xe000ed04

08003e98 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ea2:	4b36      	ldr	r3, [pc, #216]	; (8003f7c <prvAddCurrentTaskToDelayedList+0xe4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ea8:	4b35      	ldr	r3, [pc, #212]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	3304      	adds	r3, #4
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f7fe fb2c 	bl	800250c <uxListRemove>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003eba:	4b31      	ldr	r3, [pc, #196]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43da      	mvns	r2, r3
 8003ec8:	4b2e      	ldr	r3, [pc, #184]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4013      	ands	r3, r2
 8003ece:	4a2d      	ldr	r2, [pc, #180]	; (8003f84 <prvAddCurrentTaskToDelayedList+0xec>)
 8003ed0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d124      	bne.n	8003f24 <prvAddCurrentTaskToDelayedList+0x8c>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d021      	beq.n	8003f24 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ee0:	4b29      	ldr	r3, [pc, #164]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	609a      	str	r2, [r3, #8]
 8003eee:	4b24      	ldr	r3, [pc, #144]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	60da      	str	r2, [r3, #12]
 8003ef8:	4b21      	ldr	r3, [pc, #132]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	3204      	adds	r2, #4
 8003f02:	605a      	str	r2, [r3, #4]
 8003f04:	4b1e      	ldr	r3, [pc, #120]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	1d1a      	adds	r2, r3, #4
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	609a      	str	r2, [r3, #8]
 8003f0e:	4b1c      	ldr	r3, [pc, #112]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a1d      	ldr	r2, [pc, #116]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f14:	615a      	str	r2, [r3, #20]
 8003f16:	4b1c      	ldr	r3, [pc, #112]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	4a1a      	ldr	r2, [pc, #104]	; (8003f88 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003f1e:	6013      	str	r3, [r2, #0]
 8003f20:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f22:	e026      	b.n	8003f72 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003f24:	697a      	ldr	r2, [r7, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f2c:	4b14      	ldr	r3, [pc, #80]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d209      	bcs.n	8003f50 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f3c:	4b13      	ldr	r3, [pc, #76]	; (8003f8c <prvAddCurrentTaskToDelayedList+0xf4>)
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	4b0f      	ldr	r3, [pc, #60]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3304      	adds	r3, #4
 8003f46:	4619      	mov	r1, r3
 8003f48:	4610      	mov	r0, r2
 8003f4a:	f7fe faa6 	bl	800249a <vListInsert>
}
 8003f4e:	e010      	b.n	8003f72 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b0a      	ldr	r3, [pc, #40]	; (8003f80 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	3304      	adds	r3, #4
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f7fe fa9c 	bl	800249a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d202      	bcs.n	8003f72 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003f6c:	4a09      	ldr	r2, [pc, #36]	; (8003f94 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6013      	str	r3, [r2, #0]
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	20000228 	.word	0x20000228
 8003f80:	20000138 	.word	0x20000138
 8003f84:	2000022c 	.word	0x2000022c
 8003f88:	20000210 	.word	0x20000210
 8003f8c:	200001e0 	.word	0x200001e0
 8003f90:	200001dc 	.word	0x200001dc
 8003f94:	20000244 	.word	0x20000244

08003f98 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003fa2:	f000 fa47 	bl	8004434 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003fa6:	4b11      	ldr	r3, [pc, #68]	; (8003fec <xTimerCreateTimerTask+0x54>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00b      	beq.n	8003fc6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <xTimerCreateTimerTask+0x58>)
 8003fb0:	9301      	str	r3, [sp, #4]
 8003fb2:	2302      	movs	r3, #2
 8003fb4:	9300      	str	r3, [sp, #0]
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003fbc:	490d      	ldr	r1, [pc, #52]	; (8003ff4 <xTimerCreateTimerTask+0x5c>)
 8003fbe:	480e      	ldr	r0, [pc, #56]	; (8003ff8 <xTimerCreateTimerTask+0x60>)
 8003fc0:	f7fe fdfe 	bl	8002bc0 <xTaskCreate>
 8003fc4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	603b      	str	r3, [r7, #0]
    }
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003fe2:	687b      	ldr	r3, [r7, #4]
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3708      	adds	r7, #8
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	20000280 	.word	0x20000280
 8003ff0:	20000284 	.word	0x20000284
 8003ff4:	080085f4 	.word	0x080085f4
 8003ff8:	080040a1 	.word	0x080040a1

08003ffc <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	60b9      	str	r1, [r7, #8]
 8004006:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8004008:	e008      	b.n	800401c <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	4413      	add	r3, r2
 8004012:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	699a      	ldr	r2, [r3, #24]
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	18d1      	adds	r1, r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f000 f8dd 	bl	80041e8 <prvInsertTimerInActiveList>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1ea      	bne.n	800400a <prvReloadTimer+0xe>
        }
    }
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
	...

08004040 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <prvProcessExpiredTimer+0x5c>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	3304      	adds	r3, #4
 8004058:	4618      	mov	r0, r3
 800405a:	f7fe fa57 	bl	800250c <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004064:	f003 0304 	and.w	r3, r3, #4
 8004068:	2b00      	cmp	r3, #0
 800406a:	d005      	beq.n	8004078 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7ff ffc3 	bl	8003ffc <prvReloadTimer>
 8004076:	e008      	b.n	800408a <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	b2da      	uxtb	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	4798      	blx	r3
    }
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	20000278 	.word	0x20000278

080040a0 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040a8:	f107 0308 	add.w	r3, r7, #8
 80040ac:	4618      	mov	r0, r3
 80040ae:	f000 f857 	bl	8004160 <prvGetNextExpireTime>
 80040b2:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4619      	mov	r1, r3
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f803 	bl	80040c4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80040be:	f000 f8d5 	bl	800426c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040c2:	e7f1      	b.n	80040a8 <prvTimerTask+0x8>

080040c4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80040ce:	f7ff f90b 	bl	80032e8 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040d2:	f107 0308 	add.w	r3, r7, #8
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 f866 	bl	80041a8 <prvSampleTimeNow>
 80040dc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d130      	bne.n	8004146 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d10a      	bne.n	8004100 <prvProcessTimerOrBlockTask+0x3c>
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d806      	bhi.n	8004100 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80040f2:	f7ff f907 	bl	8003304 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f7ff ffa1 	bl	8004040 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80040fe:	e024      	b.n	800414a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d008      	beq.n	8004118 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004106:	4b13      	ldr	r3, [pc, #76]	; (8004154 <prvProcessTimerOrBlockTask+0x90>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <prvProcessTimerOrBlockTask+0x50>
 8004110:	2301      	movs	r3, #1
 8004112:	e000      	b.n	8004116 <prvProcessTimerOrBlockTask+0x52>
 8004114:	2300      	movs	r3, #0
 8004116:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <prvProcessTimerOrBlockTask+0x94>)
 800411a:	6818      	ldr	r0, [r3, #0]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	4619      	mov	r1, r3
 8004126:	f7fe fd17 	bl	8002b58 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800412a:	f7ff f8eb 	bl	8003304 <xTaskResumeAll>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10a      	bne.n	800414a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004134:	4b09      	ldr	r3, [pc, #36]	; (800415c <prvProcessTimerOrBlockTask+0x98>)
 8004136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800413a:	601a      	str	r2, [r3, #0]
 800413c:	f3bf 8f4f 	dsb	sy
 8004140:	f3bf 8f6f 	isb	sy
    }
 8004144:	e001      	b.n	800414a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004146:	f7ff f8dd 	bl	8003304 <xTaskResumeAll>
    }
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	2000027c 	.word	0x2000027c
 8004158:	20000280 	.word	0x20000280
 800415c:	e000ed04 	.word	0xe000ed04

08004160 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004160:	b480      	push	{r7}
 8004162:	b085      	sub	sp, #20
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004168:	4b0e      	ldr	r3, [pc, #56]	; (80041a4 <prvGetNextExpireTime+0x44>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <prvGetNextExpireTime+0x16>
 8004172:	2201      	movs	r2, #1
 8004174:	e000      	b.n	8004178 <prvGetNextExpireTime+0x18>
 8004176:	2200      	movs	r2, #0
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004184:	4b07      	ldr	r3, [pc, #28]	; (80041a4 <prvGetNextExpireTime+0x44>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68db      	ldr	r3, [r3, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e001      	b.n	8004194 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004194:	68fb      	ldr	r3, [r7, #12]
    }
 8004196:	4618      	mov	r0, r3
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000278 	.word	0x20000278

080041a8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80041b0:	f7ff f9a8 	bl	8003504 <xTaskGetTickCount>
 80041b4:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80041b6:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <prvSampleTimeNow+0x3c>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d205      	bcs.n	80041cc <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80041c0:	f000 f912 	bl	80043e8 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	e002      	b.n	80041d2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80041d2:	4a04      	ldr	r2, [pc, #16]	; (80041e4 <prvSampleTimeNow+0x3c>)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80041d8:	68fb      	ldr	r3, [r7, #12]
    }
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000288 	.word	0x20000288

080041e8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80041f6:	2300      	movs	r3, #0
 80041f8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	429a      	cmp	r2, r3
 800420c:	d812      	bhi.n	8004234 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	1ad2      	subs	r2, r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	429a      	cmp	r2, r3
 800421a:	d302      	bcc.n	8004222 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800421c:	2301      	movs	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	e01b      	b.n	800425a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004222:	4b10      	ldr	r3, [pc, #64]	; (8004264 <prvInsertTimerInActiveList+0x7c>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	3304      	adds	r3, #4
 800422a:	4619      	mov	r1, r3
 800422c:	4610      	mov	r0, r2
 800422e:	f7fe f934 	bl	800249a <vListInsert>
 8004232:	e012      	b.n	800425a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	429a      	cmp	r2, r3
 800423a:	d206      	bcs.n	800424a <prvInsertTimerInActiveList+0x62>
 800423c:	68ba      	ldr	r2, [r7, #8]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d302      	bcc.n	800424a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004244:	2301      	movs	r3, #1
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	e007      	b.n	800425a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <prvInsertTimerInActiveList+0x80>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	3304      	adds	r3, #4
 8004252:	4619      	mov	r1, r3
 8004254:	4610      	mov	r0, r2
 8004256:	f7fe f920 	bl	800249a <vListInsert>
            }
        }

        return xProcessTimerNow;
 800425a:	697b      	ldr	r3, [r7, #20]
    }
 800425c:	4618      	mov	r0, r3
 800425e:	3718      	adds	r7, #24
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	2000027c 	.word	0x2000027c
 8004268:	20000278 	.word	0x20000278

0800426c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800426c:	b580      	push	{r7, lr}
 800426e:	b088      	sub	sp, #32
 8004270:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004272:	e0a6      	b.n	80043c2 <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	2b00      	cmp	r3, #0
 8004278:	f2c0 80a3 	blt.w	80043c2 <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d004      	beq.n	8004292 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	3304      	adds	r3, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f7fe f93d 	bl	800250c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	4618      	mov	r0, r3
 8004296:	f7ff ff87 	bl	80041a8 <prvSampleTimeNow>
 800429a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	3b01      	subs	r3, #1
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	f200 808d 	bhi.w	80043c0 <prvProcessReceivedCommands+0x154>
 80042a6:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <prvProcessReceivedCommands+0x40>)
 80042a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042d1 	.word	0x080042d1
 80042b4:	08004339 	.word	0x08004339
 80042b8:	0800434d 	.word	0x0800434d
 80042bc:	08004397 	.word	0x08004397
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042d1 	.word	0x080042d1
 80042c8:	08004339 	.word	0x08004339
 80042cc:	0800434d 	.word	0x0800434d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	18d1      	adds	r1, r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	69ba      	ldr	r2, [r7, #24]
 80042ee:	69f8      	ldr	r0, [r7, #28]
 80042f0:	f7ff ff7a 	bl	80041e8 <prvInsertTimerInActiveList>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d063      	beq.n	80043c2 <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	4413      	add	r3, r2
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	4619      	mov	r1, r3
 8004314:	69f8      	ldr	r0, [r7, #28]
 8004316:	f7ff fe71 	bl	8003ffc <prvReloadTimer>
 800431a:	e008      	b.n	800432e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004322:	f023 0301 	bic.w	r3, r3, #1
 8004326:	b2da      	uxtb	r2, r3
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	69f8      	ldr	r0, [r7, #28]
 8004334:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004336:	e044      	b.n	80043c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 800434a:	e03a      	b.n	80043c2 <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	b2da      	uxtb	r2, r3
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800435e:	68fa      	ldr	r2, [r7, #12]
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d10a      	bne.n	8004382 <prvProcessReceivedCommands+0x116>
        __asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	617b      	str	r3, [r7, #20]
    }
 800437e:	bf00      	nop
 8004380:	e7fe      	b.n	8004380 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	18d1      	adds	r1, r2, r3
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	69f8      	ldr	r0, [r7, #28]
 8004390:	f7ff ff2a 	bl	80041e8 <prvInsertTimerInActiveList>
                        break;
 8004394:	e015      	b.n	80043c2 <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 80043a4:	69f8      	ldr	r0, [r7, #28]
 80043a6:	f000 fc0b 	bl	8004bc0 <vPortFree>
 80043aa:	e00a      	b.n	80043c2 <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	b2da      	uxtb	r2, r3
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80043be:	e000      	b.n	80043c2 <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 80043c0:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043c2:	4b08      	ldr	r3, [pc, #32]	; (80043e4 <prvProcessReceivedCommands+0x178>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f107 0108 	add.w	r1, r7, #8
 80043ca:	2200      	movs	r2, #0
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7fe f9cf 	bl	8002770 <xQueueReceive>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f47f af4d 	bne.w	8004274 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80043da:	bf00      	nop
 80043dc:	bf00      	nop
 80043de:	3720      	adds	r7, #32
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	20000280 	.word	0x20000280

080043e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043ee:	e009      	b.n	8004404 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043f0:	4b0e      	ldr	r3, [pc, #56]	; (800442c <prvSwitchTimerLists+0x44>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80043fa:	f04f 31ff 	mov.w	r1, #4294967295
 80043fe:	6838      	ldr	r0, [r7, #0]
 8004400:	f7ff fe1e 	bl	8004040 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004404:	4b09      	ldr	r3, [pc, #36]	; (800442c <prvSwitchTimerLists+0x44>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 800440e:	4b07      	ldr	r3, [pc, #28]	; (800442c <prvSwitchTimerLists+0x44>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004414:	4b06      	ldr	r3, [pc, #24]	; (8004430 <prvSwitchTimerLists+0x48>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a04      	ldr	r2, [pc, #16]	; (800442c <prvSwitchTimerLists+0x44>)
 800441a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 800441c:	4a04      	ldr	r2, [pc, #16]	; (8004430 <prvSwitchTimerLists+0x48>)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6013      	str	r3, [r2, #0]
    }
 8004422:	bf00      	nop
 8004424:	3708      	adds	r7, #8
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000278 	.word	0x20000278
 8004430:	2000027c 	.word	0x2000027c

08004434 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004438:	f000 f9dc 	bl	80047f4 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 800443c:	4b12      	ldr	r3, [pc, #72]	; (8004488 <prvCheckForValidListAndQueue+0x54>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d11d      	bne.n	8004480 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8004444:	4811      	ldr	r0, [pc, #68]	; (800448c <prvCheckForValidListAndQueue+0x58>)
 8004446:	f7fd ffd7 	bl	80023f8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 800444a:	4811      	ldr	r0, [pc, #68]	; (8004490 <prvCheckForValidListAndQueue+0x5c>)
 800444c:	f7fd ffd4 	bl	80023f8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004450:	4b10      	ldr	r3, [pc, #64]	; (8004494 <prvCheckForValidListAndQueue+0x60>)
 8004452:	4a0e      	ldr	r2, [pc, #56]	; (800448c <prvCheckForValidListAndQueue+0x58>)
 8004454:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <prvCheckForValidListAndQueue+0x64>)
 8004458:	4a0d      	ldr	r2, [pc, #52]	; (8004490 <prvCheckForValidListAndQueue+0x5c>)
 800445a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800445c:	2200      	movs	r2, #0
 800445e:	210c      	movs	r1, #12
 8004460:	200a      	movs	r0, #10
 8004462:	f7fe f90d 	bl	8002680 <xQueueGenericCreate>
 8004466:	4603      	mov	r3, r0
 8004468:	4a07      	ldr	r2, [pc, #28]	; (8004488 <prvCheckForValidListAndQueue+0x54>)
 800446a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 800446c:	4b06      	ldr	r3, [pc, #24]	; (8004488 <prvCheckForValidListAndQueue+0x54>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d005      	beq.n	8004480 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004474:	4b04      	ldr	r3, [pc, #16]	; (8004488 <prvCheckForValidListAndQueue+0x54>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4908      	ldr	r1, [pc, #32]	; (800449c <prvCheckForValidListAndQueue+0x68>)
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fb16 	bl	8002aac <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004480:	f000 f9e8 	bl	8004854 <vPortExitCritical>
    }
 8004484:	bf00      	nop
 8004486:	bd80      	pop	{r7, pc}
 8004488:	20000280 	.word	0x20000280
 800448c:	20000250 	.word	0x20000250
 8004490:	20000264 	.word	0x20000264
 8004494:	20000278 	.word	0x20000278
 8004498:	2000027c 	.word	0x2000027c
 800449c:	080085fc 	.word	0x080085fc

080044a0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80044a0:	b480      	push	{r7}
 80044a2:	b085      	sub	sp, #20
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3b04      	subs	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044b8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	3b04      	subs	r3, #4
 80044be:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	f023 0201 	bic.w	r2, r3, #1
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	3b04      	subs	r3, #4
 80044ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80044d0:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <pxPortInitialiseStack+0x64>)
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b14      	subs	r3, #20
 80044da:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	3b04      	subs	r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f06f 0202 	mvn.w	r2, #2
 80044ee:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	3b20      	subs	r3, #32
 80044f4:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80044f6:	68fb      	ldr	r3, [r7, #12]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3714      	adds	r7, #20
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr
 8004504:	08004509 	.word	0x08004509

08004508 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004508:	b480      	push	{r7}
 800450a:	b085      	sub	sp, #20
 800450c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800450e:	2300      	movs	r3, #0
 8004510:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004512:	4b12      	ldr	r3, [pc, #72]	; (800455c <prvTaskExitError+0x54>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d00a      	beq.n	8004532 <prvTaskExitError+0x2a>
        __asm volatile
 800451c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004520:	f383 8811 	msr	BASEPRI, r3
 8004524:	f3bf 8f6f 	isb	sy
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	60fb      	str	r3, [r7, #12]
    }
 800452e:	bf00      	nop
 8004530:	e7fe      	b.n	8004530 <prvTaskExitError+0x28>
        __asm volatile
 8004532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004536:	f383 8811 	msr	BASEPRI, r3
 800453a:	f3bf 8f6f 	isb	sy
 800453e:	f3bf 8f4f 	dsb	sy
 8004542:	60bb      	str	r3, [r7, #8]
    }
 8004544:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004546:	bf00      	nop
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d0fc      	beq.n	8004548 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 800454e:	bf00      	nop
 8004550:	bf00      	nop
 8004552:	3714      	adds	r7, #20
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	20000010 	.word	0x20000010

08004560 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004560:	4b07      	ldr	r3, [pc, #28]	; (8004580 <pxCurrentTCBConst2>)
 8004562:	6819      	ldr	r1, [r3, #0]
 8004564:	6808      	ldr	r0, [r1, #0]
 8004566:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800456a:	f380 8809 	msr	PSP, r0
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f04f 0000 	mov.w	r0, #0
 8004576:	f380 8811 	msr	BASEPRI, r0
 800457a:	4770      	bx	lr
 800457c:	f3af 8000 	nop.w

08004580 <pxCurrentTCBConst2>:
 8004580:	20000138 	.word	0x20000138
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004584:	bf00      	nop
 8004586:	bf00      	nop

08004588 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004588:	4808      	ldr	r0, [pc, #32]	; (80045ac <prvPortStartFirstTask+0x24>)
 800458a:	6800      	ldr	r0, [r0, #0]
 800458c:	6800      	ldr	r0, [r0, #0]
 800458e:	f380 8808 	msr	MSP, r0
 8004592:	f04f 0000 	mov.w	r0, #0
 8004596:	f380 8814 	msr	CONTROL, r0
 800459a:	b662      	cpsie	i
 800459c:	b661      	cpsie	f
 800459e:	f3bf 8f4f 	dsb	sy
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	df00      	svc	0
 80045a8:	bf00      	nop
 80045aa:	0000      	.short	0x0000
 80045ac:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80045b0:	bf00      	nop
 80045b2:	bf00      	nop

080045b4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b086      	sub	sp, #24
 80045b8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045ba:	4b46      	ldr	r3, [pc, #280]	; (80046d4 <xPortStartScheduler+0x120>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4a46      	ldr	r2, [pc, #280]	; (80046d8 <xPortStartScheduler+0x124>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d10a      	bne.n	80045da <xPortStartScheduler+0x26>
        __asm volatile
 80045c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c8:	f383 8811 	msr	BASEPRI, r3
 80045cc:	f3bf 8f6f 	isb	sy
 80045d0:	f3bf 8f4f 	dsb	sy
 80045d4:	613b      	str	r3, [r7, #16]
    }
 80045d6:	bf00      	nop
 80045d8:	e7fe      	b.n	80045d8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80045da:	4b3e      	ldr	r3, [pc, #248]	; (80046d4 <xPortStartScheduler+0x120>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a3f      	ldr	r2, [pc, #252]	; (80046dc <xPortStartScheduler+0x128>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d10a      	bne.n	80045fa <xPortStartScheduler+0x46>
        __asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	60fb      	str	r3, [r7, #12]
    }
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045fa:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <xPortStartScheduler+0x12c>)
 80045fc:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	22ff      	movs	r2, #255	; 0xff
 800460a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	b2db      	uxtb	r3, r3
 8004612:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	b2db      	uxtb	r3, r3
 8004618:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b31      	ldr	r3, [pc, #196]	; (80046e4 <xPortStartScheduler+0x130>)
 8004620:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004622:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <xPortStartScheduler+0x134>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004628:	e009      	b.n	800463e <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 800462a:	4b2f      	ldr	r3, [pc, #188]	; (80046e8 <xPortStartScheduler+0x134>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3b01      	subs	r3, #1
 8004630:	4a2d      	ldr	r2, [pc, #180]	; (80046e8 <xPortStartScheduler+0x134>)
 8004632:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004634:	78fb      	ldrb	r3, [r7, #3]
 8004636:	b2db      	uxtb	r3, r3
 8004638:	005b      	lsls	r3, r3, #1
 800463a:	b2db      	uxtb	r3, r3
 800463c:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800463e:	78fb      	ldrb	r3, [r7, #3]
 8004640:	b2db      	uxtb	r3, r3
 8004642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004646:	2b80      	cmp	r3, #128	; 0x80
 8004648:	d0ef      	beq.n	800462a <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800464a:	4b27      	ldr	r3, [pc, #156]	; (80046e8 <xPortStartScheduler+0x134>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f1c3 0307 	rsb	r3, r3, #7
 8004652:	2b04      	cmp	r3, #4
 8004654:	d00a      	beq.n	800466c <xPortStartScheduler+0xb8>
        __asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	60bb      	str	r3, [r7, #8]
    }
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800466c:	4b1e      	ldr	r3, [pc, #120]	; (80046e8 <xPortStartScheduler+0x134>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	4a1d      	ldr	r2, [pc, #116]	; (80046e8 <xPortStartScheduler+0x134>)
 8004674:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004676:	4b1c      	ldr	r3, [pc, #112]	; (80046e8 <xPortStartScheduler+0x134>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800467e:	4a1a      	ldr	r2, [pc, #104]	; (80046e8 <xPortStartScheduler+0x134>)
 8004680:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	b2da      	uxtb	r2, r3
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800468a:	4b18      	ldr	r3, [pc, #96]	; (80046ec <xPortStartScheduler+0x138>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a17      	ldr	r2, [pc, #92]	; (80046ec <xPortStartScheduler+0x138>)
 8004690:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004694:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004696:	4b15      	ldr	r3, [pc, #84]	; (80046ec <xPortStartScheduler+0x138>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a14      	ldr	r2, [pc, #80]	; (80046ec <xPortStartScheduler+0x138>)
 800469c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80046a0:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80046a2:	f000 f963 	bl	800496c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80046a6:	4b12      	ldr	r3, [pc, #72]	; (80046f0 <xPortStartScheduler+0x13c>)
 80046a8:	2200      	movs	r2, #0
 80046aa:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80046ac:	f000 f982 	bl	80049b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046b0:	4b10      	ldr	r3, [pc, #64]	; (80046f4 <xPortStartScheduler+0x140>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <xPortStartScheduler+0x140>)
 80046b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046ba:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80046bc:	f7ff ff64 	bl	8004588 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80046c0:	f7ff f85c 	bl	800377c <vTaskSwitchContext>
    prvTaskExitError();
 80046c4:	f7ff ff20 	bl	8004508 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}
 80046d2:	bf00      	nop
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	410fc271 	.word	0x410fc271
 80046dc:	410fc270 	.word	0x410fc270
 80046e0:	e000e400 	.word	0xe000e400
 80046e4:	2000028c 	.word	0x2000028c
 80046e8:	20000290 	.word	0x20000290
 80046ec:	e000ed20 	.word	0xe000ed20
 80046f0:	20000010 	.word	0x20000010
 80046f4:	e000ef34 	.word	0xe000ef34

080046f8 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046fe:	4b37      	ldr	r3, [pc, #220]	; (80047dc <vInitPrioGroupValue+0xe4>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a37      	ldr	r2, [pc, #220]	; (80047e0 <vInitPrioGroupValue+0xe8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d10a      	bne.n	800471e <vInitPrioGroupValue+0x26>
        __asm volatile
 8004708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800470c:	f383 8811 	msr	BASEPRI, r3
 8004710:	f3bf 8f6f 	isb	sy
 8004714:	f3bf 8f4f 	dsb	sy
 8004718:	613b      	str	r3, [r7, #16]
    }
 800471a:	bf00      	nop
 800471c:	e7fe      	b.n	800471c <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800471e:	4b2f      	ldr	r3, [pc, #188]	; (80047dc <vInitPrioGroupValue+0xe4>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a30      	ldr	r2, [pc, #192]	; (80047e4 <vInitPrioGroupValue+0xec>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10a      	bne.n	800473e <vInitPrioGroupValue+0x46>
        __asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
    }
 800473a:	bf00      	nop
 800473c:	e7fe      	b.n	800473c <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800473e:	4b2a      	ldr	r3, [pc, #168]	; (80047e8 <vInitPrioGroupValue+0xf0>)
 8004740:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	22ff      	movs	r2, #255	; 0xff
 800474e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	b2db      	uxtb	r3, r3
 8004756:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004758:	78fb      	ldrb	r3, [r7, #3]
 800475a:	b2db      	uxtb	r3, r3
 800475c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b22      	ldr	r3, [pc, #136]	; (80047ec <vInitPrioGroupValue+0xf4>)
 8004764:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004766:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 8004768:	2207      	movs	r2, #7
 800476a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800476c:	e009      	b.n	8004782 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 800476e:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	4a1e      	ldr	r2, [pc, #120]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 8004776:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004778:	78fb      	ldrb	r3, [r7, #3]
 800477a:	b2db      	uxtb	r3, r3
 800477c:	005b      	lsls	r3, r3, #1
 800477e:	b2db      	uxtb	r3, r3
 8004780:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004782:	78fb      	ldrb	r3, [r7, #3]
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d0ef      	beq.n	800476e <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f1c3 0307 	rsb	r3, r3, #7
 8004796:	2b04      	cmp	r3, #4
 8004798:	d00a      	beq.n	80047b0 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800479a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800479e:	f383 8811 	msr	BASEPRI, r3
 80047a2:	f3bf 8f6f 	isb	sy
 80047a6:	f3bf 8f4f 	dsb	sy
 80047aa:	60bb      	str	r3, [r7, #8]
    }
 80047ac:	bf00      	nop
 80047ae:	e7fe      	b.n	80047ae <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80047b0:	4b0f      	ldr	r3, [pc, #60]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	021b      	lsls	r3, r3, #8
 80047b6:	4a0e      	ldr	r2, [pc, #56]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 80047b8:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80047ba:	4b0d      	ldr	r3, [pc, #52]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80047c2:	4a0b      	ldr	r2, [pc, #44]	; (80047f0 <vInitPrioGroupValue+0xf8>)
 80047c4:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	e000ed00 	.word	0xe000ed00
 80047e0:	410fc271 	.word	0x410fc271
 80047e4:	410fc270 	.word	0x410fc270
 80047e8:	e000e400 	.word	0xe000e400
 80047ec:	2000028c 	.word	0x2000028c
 80047f0:	20000290 	.word	0x20000290

080047f4 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
        __asm volatile
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	607b      	str	r3, [r7, #4]
    }
 800480c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800480e:	4b0f      	ldr	r3, [pc, #60]	; (800484c <vPortEnterCritical+0x58>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	4a0d      	ldr	r2, [pc, #52]	; (800484c <vPortEnterCritical+0x58>)
 8004816:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004818:	4b0c      	ldr	r3, [pc, #48]	; (800484c <vPortEnterCritical+0x58>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d10f      	bne.n	8004840 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <vPortEnterCritical+0x5c>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00a      	beq.n	8004840 <vPortEnterCritical+0x4c>
        __asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	603b      	str	r3, [r7, #0]
    }
 800483c:	bf00      	nop
 800483e:	e7fe      	b.n	800483e <vPortEnterCritical+0x4a>
    }
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	20000010 	.word	0x20000010
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800485a:	4b12      	ldr	r3, [pc, #72]	; (80048a4 <vPortExitCritical+0x50>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vPortExitCritical+0x24>
        __asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
    }
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004878:	4b0a      	ldr	r3, [pc, #40]	; (80048a4 <vPortExitCritical+0x50>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	3b01      	subs	r3, #1
 800487e:	4a09      	ldr	r2, [pc, #36]	; (80048a4 <vPortExitCritical+0x50>)
 8004880:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004882:	4b08      	ldr	r3, [pc, #32]	; (80048a4 <vPortExitCritical+0x50>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <vPortExitCritical+0x42>
 800488a:	2300      	movs	r3, #0
 800488c:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004894:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004896:	bf00      	nop
 8004898:	370c      	adds	r7, #12
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr
 80048a2:	bf00      	nop
 80048a4:	20000010 	.word	0x20000010
	...

080048b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80048b0:	f3ef 8009 	mrs	r0, PSP
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4b15      	ldr	r3, [pc, #84]	; (8004910 <pxCurrentTCBConst>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	f01e 0f10 	tst.w	lr, #16
 80048c0:	bf08      	it	eq
 80048c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048ca:	6010      	str	r0, [r2, #0]
 80048cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048d4:	f380 8811 	msr	BASEPRI, r0
 80048d8:	f3bf 8f4f 	dsb	sy
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f7fe ff4c 	bl	800377c <vTaskSwitchContext>
 80048e4:	f04f 0000 	mov.w	r0, #0
 80048e8:	f380 8811 	msr	BASEPRI, r0
 80048ec:	bc09      	pop	{r0, r3}
 80048ee:	6819      	ldr	r1, [r3, #0]
 80048f0:	6808      	ldr	r0, [r1, #0]
 80048f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048f6:	f01e 0f10 	tst.w	lr, #16
 80048fa:	bf08      	it	eq
 80048fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004900:	f380 8809 	msr	PSP, r0
 8004904:	f3bf 8f6f 	isb	sy
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	f3af 8000 	nop.w

08004910 <pxCurrentTCBConst>:
 8004910:	20000138 	.word	0x20000138
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004914:	bf00      	nop
 8004916:	bf00      	nop

08004918 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
        __asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	607b      	str	r3, [r7, #4]
    }
 8004930:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004932:	f002 fb17 	bl	8006f64 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004936:	f7fe fe07 	bl	8003548 <xTaskIncrementTick>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d006      	beq.n	800494e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004940:	f002 fb6e 	bl	8007020 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004944:	4b08      	ldr	r3, [pc, #32]	; (8004968 <SysTick_Handler+0x50>)
 8004946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494a:	601a      	str	r2, [r3, #0]
 800494c:	e001      	b.n	8004952 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800494e:	f002 fb4b 	bl	8006fe8 <SEGGER_SYSVIEW_RecordExitISR>
 8004952:	2300      	movs	r3, #0
 8004954:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	f383 8811 	msr	BASEPRI, r3
    }
 800495c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800495e:	bf00      	nop
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <vPortSetupTimerInterrupt+0x38>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <vPortSetupTimerInterrupt+0x40>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <vPortSetupTimerInterrupt+0x44>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e010 	.word	0xe000e010
 80049a4:	e000e018 	.word	0xe000e018
 80049a8:	20000000 	.word	0x20000000
 80049ac:	10624dd3 	.word	0x10624dd3
 80049b0:	e000e014 	.word	0xe000e014

080049b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80049b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049c4 <vPortEnableVFP+0x10>
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049be:	6001      	str	r1, [r0, #0]
 80049c0:	4770      	bx	lr
 80049c2:	0000      	.short	0x0000
 80049c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80049c8:	bf00      	nop
 80049ca:	bf00      	nop

080049cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80049d2:	f3ef 8305 	mrs	r3, IPSR
 80049d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	2b0f      	cmp	r3, #15
 80049dc:	d914      	bls.n	8004a08 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049de:	4a17      	ldr	r2, [pc, #92]	; (8004a3c <vPortValidateInterruptPriority+0x70>)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	4413      	add	r3, r2
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049e8:	4b15      	ldr	r3, [pc, #84]	; (8004a40 <vPortValidateInterruptPriority+0x74>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	7afa      	ldrb	r2, [r7, #11]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d20a      	bcs.n	8004a08 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	607b      	str	r3, [r7, #4]
    }
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a08:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <vPortValidateInterruptPriority+0x78>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a10:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <vPortValidateInterruptPriority+0x7c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d90a      	bls.n	8004a2e <vPortValidateInterruptPriority+0x62>
        __asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	603b      	str	r3, [r7, #0]
    }
 8004a2a:	bf00      	nop
 8004a2c:	e7fe      	b.n	8004a2c <vPortValidateInterruptPriority+0x60>
    }
 8004a2e:	bf00      	nop
 8004a30:	3714      	adds	r7, #20
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	e000e3f0 	.word	0xe000e3f0
 8004a40:	2000028c 	.word	0x2000028c
 8004a44:	e000ed0c 	.word	0xe000ed0c
 8004a48:	20000290 	.word	0x20000290

08004a4c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b08a      	sub	sp, #40	; 0x28
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004a54:	2300      	movs	r3, #0
 8004a56:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8004a58:	f7fe fc46 	bl	80032e8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004a5c:	4b53      	ldr	r3, [pc, #332]	; (8004bac <pvPortMalloc+0x160>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004a64:	f000 f908 	bl	8004c78 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d012      	beq.n	8004a94 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a6e:	2208      	movs	r2, #8
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	3308      	adds	r3, #8
 8004a7a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d804      	bhi.n	8004a90 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	607b      	str	r3, [r7, #4]
 8004a8e:	e001      	b.n	8004a94 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a90:	2300      	movs	r3, #0
 8004a92:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	db70      	blt.n	8004b7c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d06d      	beq.n	8004b7c <pvPortMalloc+0x130>
 8004aa0:	4b43      	ldr	r3, [pc, #268]	; (8004bb0 <pvPortMalloc+0x164>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	687a      	ldr	r2, [r7, #4]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d868      	bhi.n	8004b7c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004aaa:	4b42      	ldr	r3, [pc, #264]	; (8004bb4 <pvPortMalloc+0x168>)
 8004aac:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004aae:	4b41      	ldr	r3, [pc, #260]	; (8004bb4 <pvPortMalloc+0x168>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ab4:	e004      	b.n	8004ac0 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d903      	bls.n	8004ad2 <pvPortMalloc+0x86>
 8004aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1f1      	bne.n	8004ab6 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004ad2:	4b36      	ldr	r3, [pc, #216]	; (8004bac <pvPortMalloc+0x160>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d04f      	beq.n	8004b7c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004adc:	6a3b      	ldr	r3, [r7, #32]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2208      	movs	r2, #8
 8004ae2:	4413      	add	r3, r2
 8004ae4:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	6a3b      	ldr	r3, [r7, #32]
 8004aec:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1ad2      	subs	r2, r2, r3
 8004af6:	2308      	movs	r3, #8
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d91f      	bls.n	8004b3e <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <pvPortMalloc+0xda>
        __asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	613b      	str	r3, [r7, #16]
    }
 8004b22:	bf00      	nop
 8004b24:	e7fe      	b.n	8004b24 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	1ad2      	subs	r2, r2, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b38:	6978      	ldr	r0, [r7, #20]
 8004b3a:	f000 f8f9 	bl	8004d30 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <pvPortMalloc+0x164>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	4a19      	ldr	r2, [pc, #100]	; (8004bb0 <pvPortMalloc+0x164>)
 8004b4a:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <pvPortMalloc+0x164>)
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	4b19      	ldr	r3, [pc, #100]	; (8004bb8 <pvPortMalloc+0x16c>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d203      	bcs.n	8004b60 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b58:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <pvPortMalloc+0x164>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <pvPortMalloc+0x16c>)
 8004b5e:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6a:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	2200      	movs	r2, #0
 8004b70:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b72:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <pvPortMalloc+0x170>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	3301      	adds	r3, #1
 8004b78:	4a10      	ldr	r2, [pc, #64]	; (8004bbc <pvPortMalloc+0x170>)
 8004b7a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b7c:	f7fe fbc2 	bl	8003304 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b80:	69fb      	ldr	r3, [r7, #28]
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00a      	beq.n	8004ba0 <pvPortMalloc+0x154>
        __asm volatile
 8004b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8e:	f383 8811 	msr	BASEPRI, r3
 8004b92:	f3bf 8f6f 	isb	sy
 8004b96:	f3bf 8f4f 	dsb	sy
 8004b9a:	60fb      	str	r3, [r7, #12]
    }
 8004b9c:	bf00      	nop
 8004b9e:	e7fe      	b.n	8004b9e <pvPortMalloc+0x152>
    return pvReturn;
 8004ba0:	69fb      	ldr	r3, [r7, #28]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3728      	adds	r7, #40	; 0x28
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20012e9c 	.word	0x20012e9c
 8004bb0:	20012ea0 	.word	0x20012ea0
 8004bb4:	20012e94 	.word	0x20012e94
 8004bb8:	20012ea4 	.word	0x20012ea4
 8004bbc:	20012ea8 	.word	0x20012ea8

08004bc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d049      	beq.n	8004c66 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	425b      	negs	r3, r3
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4413      	add	r3, r2
 8004bda:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	db0a      	blt.n	8004bfe <vPortFree+0x3e>
        __asm volatile
 8004be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bec:	f383 8811 	msr	BASEPRI, r3
 8004bf0:	f3bf 8f6f 	isb	sy
 8004bf4:	f3bf 8f4f 	dsb	sy
 8004bf8:	60fb      	str	r3, [r7, #12]
    }
 8004bfa:	bf00      	nop
 8004bfc:	e7fe      	b.n	8004bfc <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <vPortFree+0x5c>
        __asm volatile
 8004c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c0a:	f383 8811 	msr	BASEPRI, r3
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f3bf 8f4f 	dsb	sy
 8004c16:	60bb      	str	r3, [r7, #8]
    }
 8004c18:	bf00      	nop
 8004c1a:	e7fe      	b.n	8004c1a <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	0fdb      	lsrs	r3, r3, #31
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01c      	beq.n	8004c66 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d118      	bne.n	8004c66 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004c40:	f7fe fb52 	bl	80032e8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	4b09      	ldr	r3, [pc, #36]	; (8004c70 <vPortFree+0xb0>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	4a08      	ldr	r2, [pc, #32]	; (8004c70 <vPortFree+0xb0>)
 8004c50:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c52:	6938      	ldr	r0, [r7, #16]
 8004c54:	f000 f86c 	bl	8004d30 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004c58:	4b06      	ldr	r3, [pc, #24]	; (8004c74 <vPortFree+0xb4>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <vPortFree+0xb4>)
 8004c60:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004c62:	f7fe fb4f 	bl	8003304 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c66:	bf00      	nop
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	20012ea0 	.word	0x20012ea0
 8004c74:	20012eac 	.word	0x20012eac

08004c78 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c7e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c82:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c84:	4b25      	ldr	r3, [pc, #148]	; (8004d1c <prvHeapInit+0xa4>)
 8004c86:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f003 0307 	and.w	r3, r3, #7
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00c      	beq.n	8004cac <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3307      	adds	r3, #7
 8004c96:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0307 	bic.w	r3, r3, #7
 8004c9e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004ca0:	68ba      	ldr	r2, [r7, #8]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <prvHeapInit+0xa4>)
 8004ca8:	4413      	add	r3, r2
 8004caa:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <prvHeapInit+0xa8>)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <prvHeapInit+0xa8>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004cc4:	2208      	movs	r2, #8
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0307 	bic.w	r3, r3, #7
 8004cd2:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4a13      	ldr	r2, [pc, #76]	; (8004d24 <prvHeapInit+0xac>)
 8004cd8:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004cda:	4b12      	ldr	r3, [pc, #72]	; (8004d24 <prvHeapInit+0xac>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004ce2:	4b10      	ldr	r3, [pc, #64]	; (8004d24 <prvHeapInit+0xac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	1ad2      	subs	r2, r2, r3
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004cf8:	4b0a      	ldr	r3, [pc, #40]	; (8004d24 <prvHeapInit+0xac>)
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	4a08      	ldr	r2, [pc, #32]	; (8004d28 <prvHeapInit+0xb0>)
 8004d06:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a07      	ldr	r2, [pc, #28]	; (8004d2c <prvHeapInit+0xb4>)
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	20000294 	.word	0x20000294
 8004d20:	20012e94 	.word	0x20012e94
 8004d24:	20012e9c 	.word	0x20012e9c
 8004d28:	20012ea4 	.word	0x20012ea4
 8004d2c:	20012ea0 	.word	0x20012ea0

08004d30 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d38:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <prvInsertBlockIntoFreeList+0xac>)
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e002      	b.n	8004d44 <prvInsertBlockIntoFreeList+0x14>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d8f7      	bhi.n	8004d3e <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4413      	add	r3, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d108      	bne.n	8004d72 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	441a      	add	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	68ba      	ldr	r2, [r7, #8]
 8004d7c:	441a      	add	r2, r3
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d118      	bne.n	8004db8 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <prvInsertBlockIntoFreeList+0xb0>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d00d      	beq.n	8004dae <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	441a      	add	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	601a      	str	r2, [r3, #0]
 8004dac:	e008      	b.n	8004dc0 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <prvInsertBlockIntoFreeList+0xb0>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e003      	b.n	8004dc0 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d002      	beq.n	8004dce <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	687a      	ldr	r2, [r7, #4]
 8004dcc:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004dce:	bf00      	nop
 8004dd0:	3714      	adds	r7, #20
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	20012e94 	.word	0x20012e94
 8004de0:	20012e9c 	.word	0x20012e9c

08004de4 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004dea:	2300      	movs	r3, #0
 8004dec:	607b      	str	r3, [r7, #4]
 8004dee:	e033      	b.n	8004e58 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004df0:	491e      	ldr	r1, [pc, #120]	; (8004e6c <_cbSendTaskList+0x88>)
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	491a      	ldr	r1, [pc, #104]	; (8004e6c <_cbSendTaskList+0x88>)
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3304      	adds	r3, #4
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	4c16      	ldr	r4, [pc, #88]	; (8004e6c <_cbSendTaskList+0x88>)
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	4423      	add	r3, r4
 8004e20:	3308      	adds	r3, #8
 8004e22:	681c      	ldr	r4, [r3, #0]
 8004e24:	4d11      	ldr	r5, [pc, #68]	; (8004e6c <_cbSendTaskList+0x88>)
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	442b      	add	r3, r5
 8004e32:	330c      	adds	r3, #12
 8004e34:	681d      	ldr	r5, [r3, #0]
 8004e36:	4e0d      	ldr	r6, [pc, #52]	; (8004e6c <_cbSendTaskList+0x88>)
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	4613      	mov	r3, r2
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	4413      	add	r3, r2
 8004e40:	009b      	lsls	r3, r3, #2
 8004e42:	4433      	add	r3, r6
 8004e44:	3310      	adds	r3, #16
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	9300      	str	r3, [sp, #0]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	4622      	mov	r2, r4
 8004e4e:	f000 f8bd 	bl	8004fcc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3301      	adds	r3, #1
 8004e56:	607b      	str	r3, [r7, #4]
 8004e58:	4b05      	ldr	r3, [pc, #20]	; (8004e70 <_cbSendTaskList+0x8c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d3c6      	bcc.n	8004df0 <_cbSendTaskList+0xc>
  }
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	370c      	adds	r7, #12
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e6c:	20012eb0 	.word	0x20012eb0
 8004e70:	20012f50 	.word	0x20012f50

08004e74 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e7c:	f7fe fb52 	bl	8003524 <xTaskGetTickCountFromISR>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2200      	movs	r2, #0
 8004e84:	469a      	mov	sl, r3
 8004e86:	4693      	mov	fp, r2
 8004e88:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e8c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	f04f 0a00 	mov.w	sl, #0
 8004e98:	f04f 0b00 	mov.w	fp, #0
 8004e9c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004ea0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004ea4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004ea8:	4652      	mov	r2, sl
 8004eaa:	465b      	mov	r3, fp
 8004eac:	1a14      	subs	r4, r2, r0
 8004eae:	eb63 0501 	sbc.w	r5, r3, r1
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	00ab      	lsls	r3, r5, #2
 8004ebc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ec0:	00a2      	lsls	r2, r4, #2
 8004ec2:	4614      	mov	r4, r2
 8004ec4:	461d      	mov	r5, r3
 8004ec6:	eb14 0800 	adds.w	r8, r4, r0
 8004eca:	eb45 0901 	adc.w	r9, r5, r1
 8004ece:	f04f 0200 	mov.w	r2, #0
 8004ed2:	f04f 0300 	mov.w	r3, #0
 8004ed6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eda:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ede:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ee2:	4690      	mov	r8, r2
 8004ee4:	4699      	mov	r9, r3
 8004ee6:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004eea:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004eee:	4610      	mov	r0, r2
 8004ef0:	4619      	mov	r1, r3
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004efc <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
 8004f08:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004f0a:	2205      	movs	r2, #5
 8004f0c:	492b      	ldr	r1, [pc, #172]	; (8004fbc <SYSVIEW_AddTask+0xc0>)
 8004f0e:	68b8      	ldr	r0, [r7, #8]
 8004f10:	f002 fc97 	bl	8007842 <memcmp>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d04b      	beq.n	8004fb2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004f1a:	4b29      	ldr	r3, [pc, #164]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	2b07      	cmp	r3, #7
 8004f20:	d903      	bls.n	8004f2a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f22:	4828      	ldr	r0, [pc, #160]	; (8004fc4 <SYSVIEW_AddTask+0xc8>)
 8004f24:	f002 fada 	bl	80074dc <SEGGER_SYSVIEW_Warn>
    return;
 8004f28:	e044      	b.n	8004fb4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f2a:	4b25      	ldr	r3, [pc, #148]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f2c:	681a      	ldr	r2, [r3, #0]
 8004f2e:	4926      	ldr	r1, [pc, #152]	; (8004fc8 <SYSVIEW_AddTask+0xcc>)
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	68fa      	ldr	r2, [r7, #12]
 8004f3c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f3e:	4b20      	ldr	r3, [pc, #128]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	4921      	ldr	r1, [pc, #132]	; (8004fc8 <SYSVIEW_AddTask+0xcc>)
 8004f44:	4613      	mov	r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	4413      	add	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	440b      	add	r3, r1
 8004f4e:	3304      	adds	r3, #4
 8004f50:	68ba      	ldr	r2, [r7, #8]
 8004f52:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	491b      	ldr	r1, [pc, #108]	; (8004fc8 <SYSVIEW_AddTask+0xcc>)
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4413      	add	r3, r2
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	440b      	add	r3, r1
 8004f64:	3308      	adds	r3, #8
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f6a:	4b15      	ldr	r3, [pc, #84]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f6c:	681a      	ldr	r2, [r3, #0]
 8004f6e:	4916      	ldr	r1, [pc, #88]	; (8004fc8 <SYSVIEW_AddTask+0xcc>)
 8004f70:	4613      	mov	r3, r2
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	4413      	add	r3, r2
 8004f76:	009b      	lsls	r3, r3, #2
 8004f78:	440b      	add	r3, r1
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f80:	4b0f      	ldr	r3, [pc, #60]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	4910      	ldr	r1, [pc, #64]	; (8004fc8 <SYSVIEW_AddTask+0xcc>)
 8004f86:	4613      	mov	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	3310      	adds	r3, #16
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f96:	4b0a      	ldr	r3, [pc, #40]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <SYSVIEW_AddTask+0xc4>)
 8004f9e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	9300      	str	r3, [sp, #0]
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	68b9      	ldr	r1, [r7, #8]
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f000 f80e 	bl	8004fcc <SYSVIEW_SendTaskInfo>
 8004fb0:	e000      	b.n	8004fb4 <SYSVIEW_AddTask+0xb8>
    return;
 8004fb2:	bf00      	nop

}
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	08008604 	.word	0x08008604
 8004fc0:	20012f50 	.word	0x20012f50
 8004fc4:	0800860c 	.word	0x0800860c
 8004fc8:	20012eb0 	.word	0x20012eb0

08004fcc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	; 0x28
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	607a      	str	r2, [r7, #4]
 8004fd8:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004fda:	f107 0314 	add.w	r3, r7, #20
 8004fde:	2214      	movs	r2, #20
 8004fe0:	2100      	movs	r1, #0
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	f002 fc3d 	bl	8007862 <memset>
  TaskInfo.TaskID     = TaskID;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004ffc:	f107 0314 	add.w	r3, r7, #20
 8005000:	4618      	mov	r0, r3
 8005002:	f001 fe61 	bl	8006cc8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005006:	bf00      	nop
 8005008:	3728      	adds	r7, #40	; 0x28
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
	...

08005010 <__NVIC_EnableIRQ>:
{
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	4603      	mov	r3, r0
 8005018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800501a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800501e:	2b00      	cmp	r3, #0
 8005020:	db0b      	blt.n	800503a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005022:	79fb      	ldrb	r3, [r7, #7]
 8005024:	f003 021f 	and.w	r2, r3, #31
 8005028:	4907      	ldr	r1, [pc, #28]	; (8005048 <__NVIC_EnableIRQ+0x38>)
 800502a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502e:	095b      	lsrs	r3, r3, #5
 8005030:	2001      	movs	r0, #1
 8005032:	fa00 f202 	lsl.w	r2, r0, r2
 8005036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	e000e100 	.word	0xe000e100

0800504c <__NVIC_SetPriority>:
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	4603      	mov	r3, r0
 8005054:	6039      	str	r1, [r7, #0]
 8005056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800505c:	2b00      	cmp	r3, #0
 800505e:	db0a      	blt.n	8005076 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	b2da      	uxtb	r2, r3
 8005064:	490c      	ldr	r1, [pc, #48]	; (8005098 <__NVIC_SetPriority+0x4c>)
 8005066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800506a:	0112      	lsls	r2, r2, #4
 800506c:	b2d2      	uxtb	r2, r2
 800506e:	440b      	add	r3, r1
 8005070:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005074:	e00a      	b.n	800508c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	b2da      	uxtb	r2, r3
 800507a:	4908      	ldr	r1, [pc, #32]	; (800509c <__NVIC_SetPriority+0x50>)
 800507c:	79fb      	ldrb	r3, [r7, #7]
 800507e:	f003 030f 	and.w	r3, r3, #15
 8005082:	3b04      	subs	r3, #4
 8005084:	0112      	lsls	r2, r2, #4
 8005086:	b2d2      	uxtb	r2, r2
 8005088:	440b      	add	r3, r1
 800508a:	761a      	strb	r2, [r3, #24]
}
 800508c:	bf00      	nop
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr
 8005098:	e000e100 	.word	0xe000e100
 800509c:	e000ed00 	.word	0xe000ed00

080050a0 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80050a6:	f002 fa75 	bl	8007594 <SEGGER_SYSVIEW_IsStarted>
 80050aa:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80050b2:	f001 fc8f 	bl	80069d4 <SEGGER_SYSVIEW_Start>
  }
}
 80050b6:	bf00      	nop
 80050b8:	3708      	adds	r7, #8
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}
	...

080050c0 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	4603      	mov	r3, r0
 80050c8:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80050ca:	4b0c      	ldr	r3, [pc, #48]	; (80050fc <_cbOnUARTRx+0x3c>)
 80050cc:	781b      	ldrb	r3, [r3, #0]
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d806      	bhi.n	80050e0 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80050d2:	4b0a      	ldr	r3, [pc, #40]	; (80050fc <_cbOnUARTRx+0x3c>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	3301      	adds	r3, #1
 80050d8:	b2da      	uxtb	r2, r3
 80050da:	4b08      	ldr	r3, [pc, #32]	; (80050fc <_cbOnUARTRx+0x3c>)
 80050dc:	701a      	strb	r2, [r3, #0]
    goto Done;
 80050de:	e009      	b.n	80050f4 <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80050e0:	f7ff ffde 	bl	80050a0 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80050e4:	4b05      	ldr	r3, [pc, #20]	; (80050fc <_cbOnUARTRx+0x3c>)
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4618      	mov	r0, r3
 80050ea:	1dfb      	adds	r3, r7, #7
 80050ec:	2201      	movs	r2, #1
 80050ee:	4619      	mov	r1, r3
 80050f0:	f000 fb8a 	bl	8005808 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80050f4:	bf00      	nop
}
 80050f6:	3708      	adds	r7, #8
 80050f8:	46bd      	mov	sp, r7
 80050fa:	bd80      	pop	{r7, pc}
 80050fc:	20000014 	.word	0x20000014

08005100 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005108:	4b14      	ldr	r3, [pc, #80]	; (800515c <_cbOnUARTTx+0x5c>)
 800510a:	785b      	ldrb	r3, [r3, #1]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d80f      	bhi.n	8005130 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005110:	4b12      	ldr	r3, [pc, #72]	; (800515c <_cbOnUARTTx+0x5c>)
 8005112:	785b      	ldrb	r3, [r3, #1]
 8005114:	461a      	mov	r2, r3
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <_cbOnUARTTx+0x60>)
 8005118:	5c9a      	ldrb	r2, [r3, r2]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 800511e:	4b0f      	ldr	r3, [pc, #60]	; (800515c <_cbOnUARTTx+0x5c>)
 8005120:	785b      	ldrb	r3, [r3, #1]
 8005122:	3301      	adds	r3, #1
 8005124:	b2da      	uxtb	r2, r3
 8005126:	4b0d      	ldr	r3, [pc, #52]	; (800515c <_cbOnUARTTx+0x5c>)
 8005128:	705a      	strb	r2, [r3, #1]
    r = 1;
 800512a:	2301      	movs	r3, #1
 800512c:	60fb      	str	r3, [r7, #12]
    goto Done;
 800512e:	e00f      	b.n	8005150 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005130:	4b0a      	ldr	r3, [pc, #40]	; (800515c <_cbOnUARTTx+0x5c>)
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	2201      	movs	r2, #1
 8005136:	6879      	ldr	r1, [r7, #4]
 8005138:	4618      	mov	r0, r3
 800513a:	f000 fa09 	bl	8005550 <SEGGER_RTT_ReadUpBufferNoLock>
 800513e:	4603      	mov	r3, r0
 8005140:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2b00      	cmp	r3, #0
 8005146:	da02      	bge.n	800514e <_cbOnUARTTx+0x4e>
    r = 0;
 8005148:	2300      	movs	r3, #0
 800514a:	60fb      	str	r3, [r7, #12]
 800514c:	e000      	b.n	8005150 <_cbOnUARTTx+0x50>
  }
Done:
 800514e:	bf00      	nop
  return r;
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	4618      	mov	r0, r3
 8005154:	3710      	adds	r7, #16
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	20000014 	.word	0x20000014
 8005160:	080086e8 	.word	0x080086e8

08005164 <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 800516c:	4a04      	ldr	r2, [pc, #16]	; (8005180 <SEGGER_UART_init+0x1c>)
 800516e:	4905      	ldr	r1, [pc, #20]	; (8005184 <SEGGER_UART_init+0x20>)
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f853 	bl	800521c <HIF_UART_Init>
}
 8005176:	bf00      	nop
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	080050c1 	.word	0x080050c1
 8005184:	08005101 	.word	0x08005101

08005188 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005188:	b580      	push	{r7, lr}
 800518a:	b084      	sub	sp, #16
 800518c:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 800518e:	4b1e      	ldr	r3, [pc, #120]	; (8005208 <USART2_IRQHandler+0x80>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0320 	and.w	r3, r3, #32
 800519a:	2b00      	cmp	r3, #0
 800519c:	d011      	beq.n	80051c2 <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 800519e:	4b1b      	ldr	r3, [pc, #108]	; (800520c <USART2_IRQHandler+0x84>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	b2db      	uxtb	r3, r3
 80051a4:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	f003 030b 	and.w	r3, r3, #11
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d108      	bne.n	80051c2 <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80051b0:	4b17      	ldr	r3, [pc, #92]	; (8005210 <USART2_IRQHandler+0x88>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80051b8:	4b15      	ldr	r3, [pc, #84]	; (8005210 <USART2_IRQHandler+0x88>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	79fa      	ldrb	r2, [r7, #7]
 80051be:	4610      	mov	r0, r2
 80051c0:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80051cc:	4b11      	ldr	r3, [pc, #68]	; (8005214 <USART2_IRQHandler+0x8c>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80051d4:	4b0f      	ldr	r3, [pc, #60]	; (8005214 <USART2_IRQHandler+0x8c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	1dfa      	adds	r2, r7, #7
 80051da:	4610      	mov	r0, r2
 80051dc:	4798      	blx	r3
 80051de:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d106      	bne.n	80051f4 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80051e6:	4b0c      	ldr	r3, [pc, #48]	; (8005218 <USART2_IRQHandler+0x90>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a0b      	ldr	r2, [pc, #44]	; (8005218 <USART2_IRQHandler+0x90>)
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	6013      	str	r3, [r2, #0]
 80051f2:	e006      	b.n	8005202 <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <USART2_IRQHandler+0x80>)
 80051f6:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 80051f8:	79fa      	ldrb	r2, [r7, #7]
 80051fa:	4b04      	ldr	r3, [pc, #16]	; (800520c <USART2_IRQHandler+0x84>)
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	e000      	b.n	8005202 <USART2_IRQHandler+0x7a>
      return;
 8005200:	bf00      	nop
    }
  }
}
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	40004400 	.word	0x40004400
 800520c:	40004404 	.word	0x40004404
 8005210:	20012f54 	.word	0x20012f54
 8005214:	20012f58 	.word	0x20012f58
 8005218:	4000440c 	.word	0x4000440c

0800521c <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005228:	4b2e      	ldr	r3, [pc, #184]	; (80052e4 <HIF_UART_Init+0xc8>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2d      	ldr	r2, [pc, #180]	; (80052e4 <HIF_UART_Init+0xc8>)
 800522e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005232:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 8005234:	4b2c      	ldr	r3, [pc, #176]	; (80052e8 <HIF_UART_Init+0xcc>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2b      	ldr	r2, [pc, #172]	; (80052e8 <HIF_UART_Init+0xcc>)
 800523a:	f043 0301 	orr.w	r3, r3, #1
 800523e:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005240:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <HIF_UART_Init+0xd0>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800524c:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8005254:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <HIF_UART_Init+0xd0>)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 800525c:	4b24      	ldr	r3, [pc, #144]	; (80052f0 <HIF_UART_Init+0xd4>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005268:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005270:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <HIF_UART_Init+0xd4>)
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005278:	4b1e      	ldr	r3, [pc, #120]	; (80052f4 <HIF_UART_Init+0xd8>)
 800527a:	f24a 022c 	movw	r2, #41004	; 0xa02c
 800527e:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005280:	4b1d      	ldr	r3, [pc, #116]	; (80052f8 <HIF_UART_Init+0xdc>)
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 8005286:	4b1d      	ldr	r3, [pc, #116]	; (80052fc <HIF_UART_Init+0xe0>)
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	00db      	lsls	r3, r3, #3
 8005290:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 8005292:	4a1b      	ldr	r2, [pc, #108]	; (8005300 <HIF_UART_Init+0xe4>)
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	fbb2 f3f3 	udiv	r3, r2, r3
 800529a:	3301      	adds	r3, #1
 800529c:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	085b      	lsrs	r3, r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052aa:	d302      	bcc.n	80052b2 <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80052ac:	f640 73ff 	movw	r3, #4095	; 0xfff
 80052b0:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d004      	beq.n	80052c2 <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	4a11      	ldr	r2, [pc, #68]	; (8005304 <HIF_UART_Init+0xe8>)
 80052be:	b29b      	uxth	r3, r3
 80052c0:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80052c2:	4a11      	ldr	r2, [pc, #68]	; (8005308 <HIF_UART_Init+0xec>)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80052c8:	4a10      	ldr	r2, [pc, #64]	; (800530c <HIF_UART_Init+0xf0>)
 80052ca:	68bb      	ldr	r3, [r7, #8]
 80052cc:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80052ce:	2106      	movs	r1, #6
 80052d0:	2026      	movs	r0, #38	; 0x26
 80052d2:	f7ff febb 	bl	800504c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80052d6:	2026      	movs	r0, #38	; 0x26
 80052d8:	f7ff fe9a 	bl	8005010 <__NVIC_EnableIRQ>
}
 80052dc:	bf00      	nop
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40023840 	.word	0x40023840
 80052e8:	40023830 	.word	0x40023830
 80052ec:	40020020 	.word	0x40020020
 80052f0:	40020000 	.word	0x40020000
 80052f4:	4000440c 	.word	0x4000440c
 80052f8:	40004410 	.word	0x40004410
 80052fc:	40004414 	.word	0x40004414
 8005300:	0501bd00 	.word	0x0501bd00
 8005304:	40004408 	.word	0x40004408
 8005308:	20012f54 	.word	0x20012f54
 800530c:	20012f58 	.word	0x20012f58

08005310 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <_DoInit+0x98>)
 8005318:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2203      	movs	r2, #3
 800531e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2203      	movs	r2, #3
 8005324:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <_DoInit+0x9c>)
 800532a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <_DoInit+0xa0>)
 8005330:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005338:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a17      	ldr	r2, [pc, #92]	; (80053ac <_DoInit+0x9c>)
 8005350:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a17      	ldr	r2, [pc, #92]	; (80053b4 <_DoInit+0xa4>)
 8005356:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2210      	movs	r2, #16
 800535c:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2200      	movs	r2, #0
 800536e:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3307      	adds	r3, #7
 8005374:	4a10      	ldr	r2, [pc, #64]	; (80053b8 <_DoInit+0xa8>)
 8005376:	6810      	ldr	r0, [r2, #0]
 8005378:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800537a:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a0e      	ldr	r2, [pc, #56]	; (80053bc <_DoInit+0xac>)
 8005382:	6810      	ldr	r0, [r2, #0]
 8005384:	6018      	str	r0, [r3, #0]
 8005386:	8891      	ldrh	r1, [r2, #4]
 8005388:	7992      	ldrb	r2, [r2, #6]
 800538a:	8099      	strh	r1, [r3, #4]
 800538c:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800538e:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005398:	f3bf 8f5f 	dmb	sy
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	20012f5c 	.word	0x20012f5c
 80053ac:	0800865c 	.word	0x0800865c
 80053b0:	20013004 	.word	0x20013004
 80053b4:	20013404 	.word	0x20013404
 80053b8:	08008668 	.word	0x08008668
 80053bc:	0800866c 	.word	0x0800866c

080053c0 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b08a      	sub	sp, #40	; 0x28
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	60f8      	str	r0, [r7, #12]
 80053c8:	60b9      	str	r1, [r7, #8]
 80053ca:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80053cc:	2300      	movs	r3, #0
 80053ce:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	69fb      	ldr	r3, [r7, #28]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d905      	bls.n	80053f0 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
 80053ee:	e007      	b.n	8005400 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	69b9      	ldr	r1, [r7, #24]
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	1acb      	subs	r3, r1, r3
 80053fa:	4413      	add	r3, r2
 80053fc:	3b01      	subs	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800540a:	4293      	cmp	r3, r2
 800540c:	bf28      	it	cs
 800540e:	4613      	movcs	r3, r2
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 8005412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4293      	cmp	r3, r2
 8005418:	bf28      	it	cs
 800541a:	4613      	movcs	r3, r2
 800541c:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	685a      	ldr	r2, [r3, #4]
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	4413      	add	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	6978      	ldr	r0, [r7, #20]
 800542e:	f002 fa8d 	bl	800794c <memcpy>
    NumBytesWritten += NumBytesToWrite;
 8005432:	6a3a      	ldr	r2, [r7, #32]
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	4413      	add	r3, r2
 8005438:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800543a:	68ba      	ldr	r2, [r7, #8]
 800543c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800543e:	4413      	add	r3, r2
 8005440:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800544e:	4413      	add	r3, r2
 8005450:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	69fa      	ldr	r2, [r7, #28]
 8005458:	429a      	cmp	r2, r3
 800545a:	d101      	bne.n	8005460 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800545c:	2300      	movs	r3, #0
 800545e:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005460:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	69fa      	ldr	r2, [r7, #28]
 8005468:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1b2      	bne.n	80053d6 <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005470:	6a3b      	ldr	r3, [r7, #32]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3728      	adds	r7, #40	; 0x28
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800547a:	b580      	push	{r7, lr}
 800547c:	b088      	sub	sp, #32
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	689a      	ldr	r2, [r3, #8]
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	1ad3      	subs	r3, r2, r3
 8005494:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	429a      	cmp	r2, r3
 800549c:	d911      	bls.n	80054c2 <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	68b9      	ldr	r1, [r7, #8]
 80054ac:	6938      	ldr	r0, [r7, #16]
 80054ae:	f002 fa4d 	bl	800794c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054b2:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	441a      	add	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80054c0:	e01f      	b.n	8005502 <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	4413      	add	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80054d0:	697a      	ldr	r2, [r7, #20]
 80054d2:	68b9      	ldr	r1, [r7, #8]
 80054d4:	6938      	ldr	r0, [r7, #16]
 80054d6:	f002 fa39 	bl	800794c <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	1ad3      	subs	r3, r2, r3
 80054e0:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	4413      	add	r3, r2
 80054ee:	697a      	ldr	r2, [r7, #20]
 80054f0:	4619      	mov	r1, r3
 80054f2:	6938      	ldr	r0, [r7, #16]
 80054f4:	f002 fa2a 	bl	800794c <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	697a      	ldr	r2, [r7, #20]
 8005500:	60da      	str	r2, [r3, #12]
}
 8005502:	bf00      	nop
 8005504:	3720      	adds	r7, #32
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}

0800550a <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800550a:	b480      	push	{r7}
 800550c:	b087      	sub	sp, #28
 800550e:	af00      	add	r7, sp, #0
 8005510:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	429a      	cmp	r2, r3
 8005524:	d808      	bhi.n	8005538 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad2      	subs	r2, r2, r3
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4413      	add	r3, r2
 8005532:	3b01      	subs	r3, #1
 8005534:	617b      	str	r3, [r7, #20]
 8005536:	e004      	b.n	8005542 <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	3b01      	subs	r3, #1
 8005540:	617b      	str	r3, [r7, #20]
  }
  return r;
 8005542:	697b      	ldr	r3, [r7, #20]
}
 8005544:	4618      	mov	r0, r3
 8005546:	371c      	adds	r7, #28
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	; 0x30
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 800555c:	4b3e      	ldr	r3, [pc, #248]	; (8005658 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800555e:	623b      	str	r3, [r7, #32]
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 800556a:	f7ff fed1 	bl	8005310 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	4613      	mov	r3, r2
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	4413      	add	r3, r2
 8005578:	00db      	lsls	r3, r3, #3
 800557a:	4a37      	ldr	r2, [pc, #220]	; (8005658 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 800557c:	4413      	add	r3, r2
 800557e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005590:	2300      	movs	r3, #0
 8005592:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005594:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	429a      	cmp	r2, r3
 800559a:	d92b      	bls.n	80055f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055a6:	697a      	ldr	r2, [r7, #20]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	4293      	cmp	r3, r2
 80055ac:	bf28      	it	cs
 80055ae:	4613      	movcs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055b8:	4413      	add	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	6939      	ldr	r1, [r7, #16]
 80055c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80055c2:	f002 f9c3 	bl	800794c <memcpy>
    NumBytesRead += NumBytesRem;
 80055c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4413      	add	r3, r2
 80055cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80055ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	4413      	add	r3, r2
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80055de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	4413      	add	r3, r2
 80055e4:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d101      	bne.n	80055f4 <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80055f0:	2300      	movs	r3, #0
 80055f2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80055f4:	69ba      	ldr	r2, [r7, #24]
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80055fc:	697a      	ldr	r2, [r7, #20]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4293      	cmp	r3, r2
 8005602:	bf28      	it	cs
 8005604:	4613      	movcs	r3, r2
 8005606:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d019      	beq.n	8005642 <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	685a      	ldr	r2, [r3, #4]
 8005612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005614:	4413      	add	r3, r2
 8005616:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	6939      	ldr	r1, [r7, #16]
 800561c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800561e:	f002 f995 	bl	800794c <memcpy>
    NumBytesRead += NumBytesRem;
 8005622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	4413      	add	r3, r2
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800562a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	4413      	add	r3, r2
 8005630:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800563a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	4413      	add	r3, r2
 8005640:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 8005642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005644:	2b00      	cmp	r3, #0
 8005646:	d002      	beq.n	800564e <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005648:	69fb      	ldr	r3, [r7, #28]
 800564a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800564c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005650:	4618      	mov	r0, r3
 8005652:	3730      	adds	r7, #48	; 0x30
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	20012f5c 	.word	0x20012f5c

0800565c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800565c:	b580      	push	{r7, lr}
 800565e:	b08c      	sub	sp, #48	; 0x30
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005668:	4b3e      	ldr	r3, [pc, #248]	; (8005764 <SEGGER_RTT_ReadNoLock+0x108>)
 800566a:	623b      	str	r3, [r7, #32]
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	b2db      	uxtb	r3, r3
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <SEGGER_RTT_ReadNoLock+0x1e>
 8005676:	f7ff fe4b 	bl	8005310 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	4613      	mov	r3, r2
 800567e:	005b      	lsls	r3, r3, #1
 8005680:	4413      	add	r3, r2
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	3360      	adds	r3, #96	; 0x60
 8005686:	4a37      	ldr	r2, [pc, #220]	; (8005764 <SEGGER_RTT_ReadNoLock+0x108>)
 8005688:	4413      	add	r3, r2
 800568a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	691b      	ldr	r3, [r3, #16]
 8005694:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800569c:	2300      	movs	r3, #0
 800569e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80056a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d92b      	bls.n	8005700 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056b2:	697a      	ldr	r2, [r7, #20]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4293      	cmp	r3, r2
 80056b8:	bf28      	it	cs
 80056ba:	4613      	movcs	r3, r2
 80056bc:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	4413      	add	r3, r2
 80056c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056c8:	697a      	ldr	r2, [r7, #20]
 80056ca:	6939      	ldr	r1, [r7, #16]
 80056cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ce:	f002 f93d 	bl	800794c <memcpy>
    NumBytesRead += NumBytesRem;
 80056d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	4413      	add	r3, r2
 80056d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	4413      	add	r3, r2
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	4413      	add	r3, r2
 80056f0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d101      	bne.n	8005700 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80056fc:	2300      	movs	r3, #0
 80056fe:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005700:	69ba      	ldr	r2, [r7, #24]
 8005702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005704:	1ad3      	subs	r3, r2, r3
 8005706:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4293      	cmp	r3, r2
 800570e:	bf28      	it	cs
 8005710:	4613      	movcs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d019      	beq.n	800574e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005720:	4413      	add	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005724:	697a      	ldr	r2, [r7, #20]
 8005726:	6939      	ldr	r1, [r7, #16]
 8005728:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800572a:	f002 f90f 	bl	800794c <memcpy>
    NumBytesRead += NumBytesRem;
 800572e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	4413      	add	r3, r2
 8005734:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	4413      	add	r3, r2
 800573c:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	4413      	add	r3, r2
 800574c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800574e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005758:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800575a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800575c:	4618      	mov	r0, r3
 800575e:	3730      	adds	r7, #48	; 0x30
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	20012f5c 	.word	0x20012f5c

08005768 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4613      	mov	r3, r2
 800577c:	005b      	lsls	r3, r3, #1
 800577e:	4413      	add	r3, r2
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	3360      	adds	r3, #96	; 0x60
 8005784:	4a1f      	ldr	r2, [pc, #124]	; (8005804 <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 8005786:	4413      	add	r3, r2
 8005788:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	695b      	ldr	r3, [r3, #20]
 800578e:	2b02      	cmp	r3, #2
 8005790:	d029      	beq.n	80057e6 <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 8005792:	2b02      	cmp	r3, #2
 8005794:	d82e      	bhi.n	80057f4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 800579a:	2b01      	cmp	r3, #1
 800579c:	d013      	beq.n	80057c6 <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 800579e:	e029      	b.n	80057f4 <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057a0:	6978      	ldr	r0, [r7, #20]
 80057a2:	f7ff feb2 	bl	800550a <_GetAvailWriteSpace>
 80057a6:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d202      	bcs.n	80057b6 <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80057b4:	e021      	b.n	80057fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	69b9      	ldr	r1, [r7, #24]
 80057be:	6978      	ldr	r0, [r7, #20]
 80057c0:	f7ff fe5b 	bl	800547a <_WriteNoCheck>
    break;
 80057c4:	e019      	b.n	80057fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80057c6:	6978      	ldr	r0, [r7, #20]
 80057c8:	f7ff fe9f 	bl	800550a <_GetAvailWriteSpace>
 80057cc:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	4293      	cmp	r3, r2
 80057d4:	bf28      	it	cs
 80057d6:	4613      	movcs	r3, r2
 80057d8:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80057da:	69fa      	ldr	r2, [r7, #28]
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	6978      	ldr	r0, [r7, #20]
 80057e0:	f7ff fe4b 	bl	800547a <_WriteNoCheck>
    break;
 80057e4:	e009      	b.n	80057fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	69b9      	ldr	r1, [r7, #24]
 80057ea:	6978      	ldr	r0, [r7, #20]
 80057ec:	f7ff fde8 	bl	80053c0 <_WriteBlocking>
 80057f0:	61f8      	str	r0, [r7, #28]
    break;
 80057f2:	e002      	b.n	80057fa <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61fb      	str	r3, [r7, #28]
    break;
 80057f8:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 80057fa:	69fb      	ldr	r3, [r7, #28]
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3720      	adds	r7, #32
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	20012f5c 	.word	0x20012f5c

08005808 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af00      	add	r7, sp, #0
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	60b9      	str	r1, [r7, #8]
 8005812:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8005814:	4b0e      	ldr	r3, [pc, #56]	; (8005850 <SEGGER_RTT_WriteDownBuffer+0x48>)
 8005816:	61fb      	str	r3, [r7, #28]
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	b2db      	uxtb	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <SEGGER_RTT_WriteDownBuffer+0x1e>
 8005822:	f7ff fd75 	bl	8005310 <_DoInit>
  SEGGER_RTT_LOCK();
 8005826:	f3ef 8311 	mrs	r3, BASEPRI
 800582a:	f04f 0120 	mov.w	r1, #32
 800582e:	f381 8811 	msr	BASEPRI, r1
 8005832:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	68b9      	ldr	r1, [r7, #8]
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f7ff ff95 	bl	8005768 <SEGGER_RTT_WriteDownBufferNoLock>
 800583e:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005840:	69bb      	ldr	r3, [r7, #24]
 8005842:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8005846:	697b      	ldr	r3, [r7, #20]
}
 8005848:	4618      	mov	r0, r3
 800584a:	3720      	adds	r7, #32
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}
 8005850:	20012f5c 	.word	0x20012f5c

08005854 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005854:	b580      	push	{r7, lr}
 8005856:	b088      	sub	sp, #32
 8005858:	af00      	add	r7, sp, #0
 800585a:	60f8      	str	r0, [r7, #12]
 800585c:	60b9      	str	r1, [r7, #8]
 800585e:	607a      	str	r2, [r7, #4]
 8005860:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005862:	4b3d      	ldr	r3, [pc, #244]	; (8005958 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d101      	bne.n	8005874 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005870:	f7ff fd4e 	bl	8005310 <_DoInit>
  SEGGER_RTT_LOCK();
 8005874:	f3ef 8311 	mrs	r3, BASEPRI
 8005878:	f04f 0120 	mov.w	r1, #32
 800587c:	f381 8811 	msr	BASEPRI, r1
 8005880:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005882:	4b35      	ldr	r3, [pc, #212]	; (8005958 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005884:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800588a:	6939      	ldr	r1, [r7, #16]
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	1c5a      	adds	r2, r3, #1
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	440b      	add	r3, r1
 800589a:	3304      	adds	r3, #4
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	3301      	adds	r3, #1
 80058a6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	dbeb      	blt.n	800588a <SEGGER_RTT_AllocUpBuffer+0x36>
 80058b2:	e000      	b.n	80058b6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80058b4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80058b6:	693b      	ldr	r3, [r7, #16]
 80058b8:	691b      	ldr	r3, [r3, #16]
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	429a      	cmp	r2, r3
 80058be:	da3f      	bge.n	8005940 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80058c0:	6939      	ldr	r1, [r7, #16]
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	440b      	add	r3, r1
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80058d4:	6939      	ldr	r1, [r7, #16]
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	4613      	mov	r3, r2
 80058dc:	005b      	lsls	r3, r3, #1
 80058de:	4413      	add	r3, r2
 80058e0:	00db      	lsls	r3, r3, #3
 80058e2:	440b      	add	r3, r1
 80058e4:	3304      	adds	r3, #4
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80058ea:	6939      	ldr	r1, [r7, #16]
 80058ec:	69fa      	ldr	r2, [r7, #28]
 80058ee:	4613      	mov	r3, r2
 80058f0:	005b      	lsls	r3, r3, #1
 80058f2:	4413      	add	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	440b      	add	r3, r1
 80058f8:	3320      	adds	r3, #32
 80058fa:	687a      	ldr	r2, [r7, #4]
 80058fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80058fe:	6939      	ldr	r1, [r7, #16]
 8005900:	69fa      	ldr	r2, [r7, #28]
 8005902:	4613      	mov	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4413      	add	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	440b      	add	r3, r1
 800590c:	3328      	adds	r3, #40	; 0x28
 800590e:	2200      	movs	r2, #0
 8005910:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005912:	6939      	ldr	r1, [r7, #16]
 8005914:	69fa      	ldr	r2, [r7, #28]
 8005916:	4613      	mov	r3, r2
 8005918:	005b      	lsls	r3, r3, #1
 800591a:	4413      	add	r3, r2
 800591c:	00db      	lsls	r3, r3, #3
 800591e:	440b      	add	r3, r1
 8005920:	3324      	adds	r3, #36	; 0x24
 8005922:	2200      	movs	r2, #0
 8005924:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005926:	6939      	ldr	r1, [r7, #16]
 8005928:	69fa      	ldr	r2, [r7, #28]
 800592a:	4613      	mov	r3, r2
 800592c:	005b      	lsls	r3, r3, #1
 800592e:	4413      	add	r3, r2
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	440b      	add	r3, r1
 8005934:	332c      	adds	r3, #44	; 0x2c
 8005936:	683a      	ldr	r2, [r7, #0]
 8005938:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800593a:	f3bf 8f5f 	dmb	sy
 800593e:	e002      	b.n	8005946 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295
 8005944:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800594c:	69fb      	ldr	r3, [r7, #28]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3720      	adds	r7, #32
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	20012f5c 	.word	0x20012f5c

0800595c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800596a:	4b33      	ldr	r3, [pc, #204]	; (8005a38 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005978:	f7ff fcca 	bl	8005310 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800597c:	4b2e      	ldr	r3, [pc, #184]	; (8005a38 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 800597e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	461a      	mov	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4293      	cmp	r3, r2
 800598a:	d24d      	bcs.n	8005a28 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800598c:	f3ef 8311 	mrs	r3, BASEPRI
 8005990:	f04f 0120 	mov.w	r1, #32
 8005994:	f381 8811 	msr	BASEPRI, r1
 8005998:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d031      	beq.n	8005a04 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 80059a0:	6979      	ldr	r1, [r7, #20]
 80059a2:	68fa      	ldr	r2, [r7, #12]
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	00db      	lsls	r3, r3, #3
 80059ac:	440b      	add	r3, r1
 80059ae:	3360      	adds	r3, #96	; 0x60
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 80059b4:	6979      	ldr	r1, [r7, #20]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4613      	mov	r3, r2
 80059ba:	005b      	lsls	r3, r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	00db      	lsls	r3, r3, #3
 80059c0:	440b      	add	r3, r1
 80059c2:	3364      	adds	r3, #100	; 0x64
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 80059c8:	6979      	ldr	r1, [r7, #20]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4613      	mov	r3, r2
 80059ce:	005b      	lsls	r3, r3, #1
 80059d0:	4413      	add	r3, r2
 80059d2:	00db      	lsls	r3, r3, #3
 80059d4:	440b      	add	r3, r1
 80059d6:	3368      	adds	r3, #104	; 0x68
 80059d8:	683a      	ldr	r2, [r7, #0]
 80059da:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80059dc:	6979      	ldr	r1, [r7, #20]
 80059de:	68fa      	ldr	r2, [r7, #12]
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	00db      	lsls	r3, r3, #3
 80059e8:	440b      	add	r3, r1
 80059ea:	3370      	adds	r3, #112	; 0x70
 80059ec:	2200      	movs	r2, #0
 80059ee:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4613      	mov	r3, r2
 80059f6:	005b      	lsls	r3, r3, #1
 80059f8:	4413      	add	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	440b      	add	r3, r1
 80059fe:	336c      	adds	r3, #108	; 0x6c
 8005a00:	2200      	movs	r2, #0
 8005a02:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005a04:	6979      	ldr	r1, [r7, #20]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4613      	mov	r3, r2
 8005a0a:	005b      	lsls	r3, r3, #1
 8005a0c:	4413      	add	r3, r2
 8005a0e:	00db      	lsls	r3, r3, #3
 8005a10:	440b      	add	r3, r1
 8005a12:	3374      	adds	r3, #116	; 0x74
 8005a14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a16:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a18:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e002      	b.n	8005a2e <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005a28:	f04f 33ff 	mov.w	r3, #4294967295
 8005a2c:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005a2e:	69fb      	ldr	r3, [r7, #28]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3720      	adds	r7, #32
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	20012f5c 	.word	0x20012f5c

08005a3c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005a3c:	b480      	push	{r7}
 8005a3e:	b087      	sub	sp, #28
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a4c:	e002      	b.n	8005a54 <_EncodeStr+0x18>
    Len++;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	3301      	adds	r3, #1
 8005a52:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005a54:	68ba      	ldr	r2, [r7, #8]
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4413      	add	r3, r2
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d1f6      	bne.n	8005a4e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	429a      	cmp	r2, r3
 8005a66:	d901      	bls.n	8005a6c <_EncodeStr+0x30>
    Len = Limit;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005a6c:	693b      	ldr	r3, [r7, #16]
 8005a6e:	2bfe      	cmp	r3, #254	; 0xfe
 8005a70:	d806      	bhi.n	8005a80 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1c5a      	adds	r2, r3, #1
 8005a76:	60fa      	str	r2, [r7, #12]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	b2d2      	uxtb	r2, r2
 8005a7c:	701a      	strb	r2, [r3, #0]
 8005a7e:	e011      	b.n	8005aa4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	1c5a      	adds	r2, r3, #1
 8005a84:	60fa      	str	r2, [r7, #12]
 8005a86:	22ff      	movs	r2, #255	; 0xff
 8005a88:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	60fa      	str	r2, [r7, #12]
 8005a90:	693a      	ldr	r2, [r7, #16]
 8005a92:	b2d2      	uxtb	r2, r2
 8005a94:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005a96:	693b      	ldr	r3, [r7, #16]
 8005a98:	0a19      	lsrs	r1, r3, #8
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1c5a      	adds	r2, r3, #1
 8005a9e:	60fa      	str	r2, [r7, #12]
 8005aa0:	b2ca      	uxtb	r2, r1
 8005aa2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005aa8:	e00a      	b.n	8005ac0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	1c53      	adds	r3, r2, #1
 8005aae:	60bb      	str	r3, [r7, #8]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	1c59      	adds	r1, r3, #1
 8005ab4:	60f9      	str	r1, [r7, #12]
 8005ab6:	7812      	ldrb	r2, [r2, #0]
 8005ab8:	701a      	strb	r2, [r3, #0]
    n++;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	3301      	adds	r3, #1
 8005abe:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d3f0      	bcc.n	8005aaa <_EncodeStr+0x6e>
  }
  return pPayload;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	3304      	adds	r3, #4
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
	...

08005af0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005af6:	4b35      	ldr	r3, [pc, #212]	; (8005bcc <_HandleIncomingPacket+0xdc>)
 8005af8:	7e1b      	ldrb	r3, [r3, #24]
 8005afa:	4618      	mov	r0, r3
 8005afc:	1cfb      	adds	r3, r7, #3
 8005afe:	2201      	movs	r2, #1
 8005b00:	4619      	mov	r1, r3
 8005b02:	f7ff fdab 	bl	800565c <SEGGER_RTT_ReadNoLock>
 8005b06:	4603      	mov	r3, r0
 8005b08:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	dd59      	ble.n	8005bc4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005b10:	78fb      	ldrb	r3, [r7, #3]
 8005b12:	2b80      	cmp	r3, #128	; 0x80
 8005b14:	d032      	beq.n	8005b7c <_HandleIncomingPacket+0x8c>
 8005b16:	2b80      	cmp	r3, #128	; 0x80
 8005b18:	dc42      	bgt.n	8005ba0 <_HandleIncomingPacket+0xb0>
 8005b1a:	2b07      	cmp	r3, #7
 8005b1c:	dc16      	bgt.n	8005b4c <_HandleIncomingPacket+0x5c>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	dd3e      	ble.n	8005ba0 <_HandleIncomingPacket+0xb0>
 8005b22:	3b01      	subs	r3, #1
 8005b24:	2b06      	cmp	r3, #6
 8005b26:	d83b      	bhi.n	8005ba0 <_HandleIncomingPacket+0xb0>
 8005b28:	a201      	add	r2, pc, #4	; (adr r2, 8005b30 <_HandleIncomingPacket+0x40>)
 8005b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b2e:	bf00      	nop
 8005b30:	08005b53 	.word	0x08005b53
 8005b34:	08005b59 	.word	0x08005b59
 8005b38:	08005b5f 	.word	0x08005b5f
 8005b3c:	08005b65 	.word	0x08005b65
 8005b40:	08005b6b 	.word	0x08005b6b
 8005b44:	08005b71 	.word	0x08005b71
 8005b48:	08005b77 	.word	0x08005b77
 8005b4c:	2b7f      	cmp	r3, #127	; 0x7f
 8005b4e:	d034      	beq.n	8005bba <_HandleIncomingPacket+0xca>
 8005b50:	e026      	b.n	8005ba0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005b52:	f000 ff3f 	bl	80069d4 <SEGGER_SYSVIEW_Start>
      break;
 8005b56:	e035      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005b58:	f000 fff6 	bl	8006b48 <SEGGER_SYSVIEW_Stop>
      break;
 8005b5c:	e032      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005b5e:	f001 f9cf 	bl	8006f00 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005b62:	e02f      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005b64:	f001 f994 	bl	8006e90 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005b68:	e02c      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005b6a:	f001 f813 	bl	8006b94 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005b6e:	e029      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005b70:	f001 fc62 	bl	8007438 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005b74:	e026      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005b76:	f001 fc41 	bl	80073fc <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005b7a:	e023      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005b7c:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <_HandleIncomingPacket+0xdc>)
 8005b7e:	7e1b      	ldrb	r3, [r3, #24]
 8005b80:	4618      	mov	r0, r3
 8005b82:	1cfb      	adds	r3, r7, #3
 8005b84:	2201      	movs	r2, #1
 8005b86:	4619      	mov	r1, r3
 8005b88:	f7ff fd68 	bl	800565c <SEGGER_RTT_ReadNoLock>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dd13      	ble.n	8005bbe <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005b96:	78fb      	ldrb	r3, [r7, #3]
 8005b98:	4618      	mov	r0, r3
 8005b9a:	f001 fbaf 	bl	80072fc <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005b9e:	e00e      	b.n	8005bbe <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005ba0:	78fb      	ldrb	r3, [r7, #3]
 8005ba2:	b25b      	sxtb	r3, r3
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	da0c      	bge.n	8005bc2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005ba8:	4b08      	ldr	r3, [pc, #32]	; (8005bcc <_HandleIncomingPacket+0xdc>)
 8005baa:	7e1b      	ldrb	r3, [r3, #24]
 8005bac:	4618      	mov	r0, r3
 8005bae:	1cfb      	adds	r3, r7, #3
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	f7ff fd52 	bl	800565c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005bb8:	e003      	b.n	8005bc2 <_HandleIncomingPacket+0xd2>
      break;
 8005bba:	bf00      	nop
 8005bbc:	e002      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
      break;
 8005bbe:	bf00      	nop
 8005bc0:	e000      	b.n	8005bc4 <_HandleIncomingPacket+0xd4>
      break;
 8005bc2:	bf00      	nop
    }
  }
}
 8005bc4:	bf00      	nop
 8005bc6:	3708      	adds	r7, #8
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	2001441c 	.word	0x2001441c

08005bd0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b08c      	sub	sp, #48	; 0x30
 8005bd4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	3301      	adds	r3, #1
 8005bde:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005be0:	69fb      	ldr	r3, [r7, #28]
 8005be2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005be4:	4b31      	ldr	r3, [pc, #196]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bea:	e00b      	b.n	8005c04 <_TrySendOverflowPacket+0x34>
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	b2da      	uxtb	r2, r3
 8005bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf2:	1c59      	adds	r1, r3, #1
 8005bf4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005bf6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005bfa:	b2d2      	uxtb	r2, r2
 8005bfc:	701a      	strb	r2, [r3, #0]
 8005bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c00:	09db      	lsrs	r3, r3, #7
 8005c02:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c06:	2b7f      	cmp	r3, #127	; 0x7f
 8005c08:	d8f0      	bhi.n	8005bec <_TrySendOverflowPacket+0x1c>
 8005c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c12:	b2d2      	uxtb	r2, r2
 8005c14:	701a      	strb	r2, [r3, #0]
 8005c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c18:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005c1a:	4b25      	ldr	r3, [pc, #148]	; (8005cb0 <_TrySendOverflowPacket+0xe0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005c20:	4b22      	ldr	r3, [pc, #136]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	623b      	str	r3, [r7, #32]
 8005c32:	e00b      	b.n	8005c4c <_TrySendOverflowPacket+0x7c>
 8005c34:	6a3b      	ldr	r3, [r7, #32]
 8005c36:	b2da      	uxtb	r2, r3
 8005c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3a:	1c59      	adds	r1, r3, #1
 8005c3c:	6279      	str	r1, [r7, #36]	; 0x24
 8005c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005c42:	b2d2      	uxtb	r2, r2
 8005c44:	701a      	strb	r2, [r3, #0]
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	09db      	lsrs	r3, r3, #7
 8005c4a:	623b      	str	r3, [r7, #32]
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8005c50:	d8f0      	bhi.n	8005c34 <_TrySendOverflowPacket+0x64>
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	627a      	str	r2, [r7, #36]	; 0x24
 8005c58:	6a3a      	ldr	r2, [r7, #32]
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	4618      	mov	r0, r3
 8005c68:	1d3b      	adds	r3, r7, #4
 8005c6a:	69fa      	ldr	r2, [r7, #28]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	1d3b      	adds	r3, r7, #4
 8005c72:	4619      	mov	r1, r3
 8005c74:	f7fa faac 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d009      	beq.n	8005c96 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005c82:	4a0a      	ldr	r2, [pc, #40]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005c88:	4b08      	ldr	r3, [pc, #32]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b2da      	uxtb	r2, r3
 8005c90:	4b06      	ldr	r3, [pc, #24]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c92:	701a      	strb	r2, [r3, #0]
 8005c94:	e004      	b.n	8005ca0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c98:	695b      	ldr	r3, [r3, #20]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	4a03      	ldr	r2, [pc, #12]	; (8005cac <_TrySendOverflowPacket+0xdc>)
 8005c9e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005ca0:	693b      	ldr	r3, [r7, #16]
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3730      	adds	r7, #48	; 0x30
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	2001441c 	.word	0x2001441c
 8005cb0:	e0001004 	.word	0xe0001004

08005cb4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b08a      	sub	sp, #40	; 0x28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005cc0:	4b6c      	ldr	r3, [pc, #432]	; (8005e74 <_SendPacket+0x1c0>)
 8005cc2:	781b      	ldrb	r3, [r3, #0]
 8005cc4:	2b01      	cmp	r3, #1
 8005cc6:	d010      	beq.n	8005cea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005cc8:	4b6a      	ldr	r3, [pc, #424]	; (8005e74 <_SendPacket+0x1c0>)
 8005cca:	781b      	ldrb	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f000 80a3 	beq.w	8005e18 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005cd2:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <_SendPacket+0x1c0>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b02      	cmp	r3, #2
 8005cd8:	d109      	bne.n	8005cee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005cda:	f7ff ff79 	bl	8005bd0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005cde:	4b65      	ldr	r3, [pc, #404]	; (8005e74 <_SendPacket+0x1c0>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	f040 809a 	bne.w	8005e1c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005ce8:	e001      	b.n	8005cee <_SendPacket+0x3a>
    goto Send;
 8005cea:	bf00      	nop
 8005cec:	e000      	b.n	8005cf0 <_SendPacket+0x3c>
Send:
 8005cee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2b1f      	cmp	r3, #31
 8005cf4:	d809      	bhi.n	8005d0a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005cf6:	4b5f      	ldr	r3, [pc, #380]	; (8005e74 <_SendPacket+0x1c0>)
 8005cf8:	69da      	ldr	r2, [r3, #28]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8005d00:	f003 0301 	and.w	r3, r3, #1
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 808b 	bne.w	8005e20 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2b17      	cmp	r3, #23
 8005d0e:	d807      	bhi.n	8005d20 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3b01      	subs	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	e03d      	b.n	8005d9c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b7f      	cmp	r3, #127	; 0x7f
 8005d2c:	d912      	bls.n	8005d54 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	09da      	lsrs	r2, r3, #7
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3b01      	subs	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	3a01      	subs	r2, #1
 8005d46:	60fa      	str	r2, [r7, #12]
 8005d48:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	701a      	strb	r2, [r3, #0]
 8005d52:	e006      	b.n	8005d62 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	b2da      	uxtb	r2, r3
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b7f      	cmp	r3, #127	; 0x7f
 8005d66:	d912      	bls.n	8005d8e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	09da      	lsrs	r2, r3, #7
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	b2db      	uxtb	r3, r3
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	3a01      	subs	r2, #1
 8005d80:	60fa      	str	r2, [r7, #12]
 8005d82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d86:	b2da      	uxtb	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e006      	b.n	8005d9c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3b01      	subs	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d9c:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <_SendPacket+0x1c4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005da2:	4b34      	ldr	r3, [pc, #208]	; (8005e74 <_SendPacket+0x1c0>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	1ad3      	subs	r3, r2, r3
 8005daa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	627b      	str	r3, [r7, #36]	; 0x24
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	623b      	str	r3, [r7, #32]
 8005db4:	e00b      	b.n	8005dce <_SendPacket+0x11a>
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	1c59      	adds	r1, r3, #1
 8005dbe:	6279      	str	r1, [r7, #36]	; 0x24
 8005dc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005dc4:	b2d2      	uxtb	r2, r2
 8005dc6:	701a      	strb	r2, [r3, #0]
 8005dc8:	6a3b      	ldr	r3, [r7, #32]
 8005dca:	09db      	lsrs	r3, r3, #7
 8005dcc:	623b      	str	r3, [r7, #32]
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	2b7f      	cmp	r3, #127	; 0x7f
 8005dd2:	d8f0      	bhi.n	8005db6 <_SendPacket+0x102>
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	627a      	str	r2, [r7, #36]	; 0x24
 8005dda:	6a3a      	ldr	r2, [r7, #32]
 8005ddc:	b2d2      	uxtb	r2, r2
 8005dde:	701a      	strb	r2, [r3, #0]
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005de4:	4b23      	ldr	r3, [pc, #140]	; (8005e74 <_SendPacket+0x1c0>)
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	4618      	mov	r0, r3
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	461a      	mov	r2, r3
 8005df2:	68f9      	ldr	r1, [r7, #12]
 8005df4:	f7fa f9ec 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d003      	beq.n	8005e0a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005e02:	4a1c      	ldr	r2, [pc, #112]	; (8005e74 <_SendPacket+0x1c0>)
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	60d3      	str	r3, [r2, #12]
 8005e08:	e00b      	b.n	8005e22 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005e0a:	4b1a      	ldr	r3, [pc, #104]	; (8005e74 <_SendPacket+0x1c0>)
 8005e0c:	781b      	ldrb	r3, [r3, #0]
 8005e0e:	3301      	adds	r3, #1
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	4b18      	ldr	r3, [pc, #96]	; (8005e74 <_SendPacket+0x1c0>)
 8005e14:	701a      	strb	r2, [r3, #0]
 8005e16:	e004      	b.n	8005e22 <_SendPacket+0x16e>
    goto SendDone;
 8005e18:	bf00      	nop
 8005e1a:	e002      	b.n	8005e22 <_SendPacket+0x16e>
      goto SendDone;
 8005e1c:	bf00      	nop
 8005e1e:	e000      	b.n	8005e22 <_SendPacket+0x16e>
      goto SendDone;
 8005e20:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005e22:	4b14      	ldr	r3, [pc, #80]	; (8005e74 <_SendPacket+0x1c0>)
 8005e24:	7e1b      	ldrb	r3, [r3, #24]
 8005e26:	4619      	mov	r1, r3
 8005e28:	4a14      	ldr	r2, [pc, #80]	; (8005e7c <_SendPacket+0x1c8>)
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	005b      	lsls	r3, r3, #1
 8005e2e:	440b      	add	r3, r1
 8005e30:	00db      	lsls	r3, r3, #3
 8005e32:	4413      	add	r3, r2
 8005e34:	336c      	adds	r3, #108	; 0x6c
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	4b0e      	ldr	r3, [pc, #56]	; (8005e74 <_SendPacket+0x1c0>)
 8005e3a:	7e1b      	ldrb	r3, [r3, #24]
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	490f      	ldr	r1, [pc, #60]	; (8005e7c <_SendPacket+0x1c8>)
 8005e40:	4603      	mov	r3, r0
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4403      	add	r3, r0
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	440b      	add	r3, r1
 8005e4a:	3370      	adds	r3, #112	; 0x70
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d00b      	beq.n	8005e6a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005e52:	4b08      	ldr	r3, [pc, #32]	; (8005e74 <_SendPacket+0x1c0>)
 8005e54:	789b      	ldrb	r3, [r3, #2]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d107      	bne.n	8005e6a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005e5a:	4b06      	ldr	r3, [pc, #24]	; (8005e74 <_SendPacket+0x1c0>)
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005e60:	f7ff fe46 	bl	8005af0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005e64:	4b03      	ldr	r3, [pc, #12]	; (8005e74 <_SendPacket+0x1c0>)
 8005e66:	2200      	movs	r2, #0
 8005e68:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005e6a:	bf00      	nop
 8005e6c:	3728      	adds	r7, #40	; 0x28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	2001441c 	.word	0x2001441c
 8005e78:	e0001004 	.word	0xe0001004
 8005e7c:	20012f5c 	.word	0x20012f5c

08005e80 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	460b      	mov	r3, r1
 8005e8a:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	3301      	adds	r3, #1
 8005e96:	2b80      	cmp	r3, #128	; 0x80
 8005e98:	d80a      	bhi.n	8005eb0 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	1c59      	adds	r1, r3, #1
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	6051      	str	r1, [r2, #4]
 8005ea4:	78fa      	ldrb	r2, [r7, #3]
 8005ea6:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d15a      	bne.n	8005f6e <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	691a      	ldr	r2, [r3, #16]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	b2d2      	uxtb	r2, r2
 8005ec2:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	623b      	str	r3, [r7, #32]
 8005ed8:	e00b      	b.n	8005ef2 <_StoreChar+0x72>
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	b2da      	uxtb	r2, r3
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	1c59      	adds	r1, r3, #1
 8005ee2:	6279      	str	r1, [r7, #36]	; 0x24
 8005ee4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	701a      	strb	r2, [r3, #0]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	09db      	lsrs	r3, r3, #7
 8005ef0:	623b      	str	r3, [r7, #32]
 8005ef2:	6a3b      	ldr	r3, [r7, #32]
 8005ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8005ef6:	d8f0      	bhi.n	8005eda <_StoreChar+0x5a>
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	1c5a      	adds	r2, r3, #1
 8005efc:	627a      	str	r2, [r7, #36]	; 0x24
 8005efe:	6a3a      	ldr	r2, [r7, #32]
 8005f00:	b2d2      	uxtb	r2, r2
 8005f02:	701a      	strb	r2, [r3, #0]
 8005f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f06:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	61fb      	str	r3, [r7, #28]
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	e00b      	b.n	8005f2a <_StoreChar+0xaa>
 8005f12:	69bb      	ldr	r3, [r7, #24]
 8005f14:	b2da      	uxtb	r2, r3
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	1c59      	adds	r1, r3, #1
 8005f1a:	61f9      	str	r1, [r7, #28]
 8005f1c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005f20:	b2d2      	uxtb	r2, r2
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	09db      	lsrs	r3, r3, #7
 8005f28:	61bb      	str	r3, [r7, #24]
 8005f2a:	69bb      	ldr	r3, [r7, #24]
 8005f2c:	2b7f      	cmp	r3, #127	; 0x7f
 8005f2e:	d8f0      	bhi.n	8005f12 <_StoreChar+0x92>
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	61fa      	str	r2, [r7, #28]
 8005f36:	69ba      	ldr	r2, [r7, #24]
 8005f38:	b2d2      	uxtb	r2, r2
 8005f3a:	701a      	strb	r2, [r3, #0]
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	221a      	movs	r2, #26
 8005f46:	6939      	ldr	r1, [r7, #16]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7ff feb3 	bl	8005cb4 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff fdbf 	bl	8005ad6 <_PreparePacket>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	611a      	str	r2, [r3, #16]
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b08a      	sub	sp, #40	; 0x28
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
 8005f84:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005f92:	e007      	b.n	8005fa4 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005f94:	6a3a      	ldr	r2, [r7, #32]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f9c:	623b      	str	r3, [r7, #32]
    Width++;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005fa4:	6a3a      	ldr	r2, [r7, #32]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	429a      	cmp	r2, r3
 8005faa:	d2f3      	bcs.n	8005f94 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005fac:	683a      	ldr	r2, [r7, #0]
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d901      	bls.n	8005fb8 <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d11f      	bne.n	8006002 <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d01c      	beq.n	8006002 <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d005      	beq.n	8005fde <_PrintUnsigned+0x66>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d102      	bne.n	8005fde <_PrintUnsigned+0x66>
        c = '0';
 8005fd8:	2330      	movs	r3, #48	; 0x30
 8005fda:	76fb      	strb	r3, [r7, #27]
 8005fdc:	e001      	b.n	8005fe2 <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 8005fde:	2320      	movs	r3, #32
 8005fe0:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005fe2:	e007      	b.n	8005ff4 <_PrintUnsigned+0x7c>
        FieldWidth--;
 8005fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 8005fea:	7efb      	ldrb	r3, [r7, #27]
 8005fec:	4619      	mov	r1, r3
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff ff46 	bl	8005e80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <_PrintUnsigned+0x8a>
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d3f0      	bcc.n	8005fe4 <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d903      	bls.n	8006010 <_PrintUnsigned+0x98>
      NumDigits--;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	3b01      	subs	r3, #1
 800600c:	603b      	str	r3, [r7, #0]
 800600e:	e009      	b.n	8006024 <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006010:	68ba      	ldr	r2, [r7, #8]
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	fbb2 f3f3 	udiv	r3, r2, r3
 8006018:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	429a      	cmp	r2, r3
 8006020:	d200      	bcs.n	8006024 <_PrintUnsigned+0xac>
        break;
 8006022:	e005      	b.n	8006030 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 8006024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	fb02 f303 	mul.w	r3, r2, r3
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800602e:	e7e8      	b.n	8006002 <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800603e:	fb02 f303 	mul.w	r3, r2, r3
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006048:	4a15      	ldr	r2, [pc, #84]	; (80060a0 <_PrintUnsigned+0x128>)
 800604a:	697b      	ldr	r3, [r7, #20]
 800604c:	4413      	add	r3, r2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	4619      	mov	r1, r3
 8006052:	68f8      	ldr	r0, [r7, #12]
 8006054:	f7ff ff14 	bl	8005e80 <_StoreChar>
    Digit /= Base;
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006060:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	2b00      	cmp	r3, #0
 8006066:	d1e3      	bne.n	8006030 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006068:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800606a:	f003 0301 	and.w	r3, r3, #1
 800606e:	2b00      	cmp	r3, #0
 8006070:	d011      	beq.n	8006096 <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 8006072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006074:	2b00      	cmp	r3, #0
 8006076:	d00e      	beq.n	8006096 <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006078:	e006      	b.n	8006088 <_PrintUnsigned+0x110>
        FieldWidth--;
 800607a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607c:	3b01      	subs	r3, #1
 800607e:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006080:	2120      	movs	r1, #32
 8006082:	68f8      	ldr	r0, [r7, #12]
 8006084:	f7ff fefc 	bl	8005e80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608a:	2b00      	cmp	r3, #0
 800608c:	d003      	beq.n	8006096 <_PrintUnsigned+0x11e>
 800608e:	69fa      	ldr	r2, [r7, #28]
 8006090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006092:	429a      	cmp	r2, r3
 8006094:	d3f1      	bcc.n	800607a <_PrintUnsigned+0x102>
      }
    }
  }
}
 8006096:	bf00      	nop
 8006098:	3728      	adds	r7, #40	; 0x28
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	080086f8 	.word	0x080086f8

080060a4 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b088      	sub	sp, #32
 80060a8:	af02      	add	r7, sp, #8
 80060aa:	60f8      	str	r0, [r7, #12]
 80060ac:	60b9      	str	r1, [r7, #8]
 80060ae:	607a      	str	r2, [r7, #4]
 80060b0:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	bfb8      	it	lt
 80060b8:	425b      	neglt	r3, r3
 80060ba:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80060c0:	e007      	b.n	80060d2 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80060ca:	613b      	str	r3, [r7, #16]
    Width++;
 80060cc:	697b      	ldr	r3, [r7, #20]
 80060ce:	3301      	adds	r3, #1
 80060d0:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	daf3      	bge.n	80060c2 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d901      	bls.n	80060e6 <_PrintInt+0x42>
    Width = NumDigits;
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80060e6:	6a3b      	ldr	r3, [r7, #32]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <_PrintInt+0x5e>
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	db04      	blt.n	80060fc <_PrintInt+0x58>
 80060f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f4:	f003 0304 	and.w	r3, r3, #4
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d002      	beq.n	8006102 <_PrintInt+0x5e>
    FieldWidth--;
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	3b01      	subs	r3, #1
 8006100:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8006102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006104:	f003 0302 	and.w	r3, r3, #2
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <_PrintInt+0x6e>
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d016      	beq.n	8006140 <_PrintInt+0x9c>
 8006112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006114:	f003 0301 	and.w	r3, r3, #1
 8006118:	2b00      	cmp	r3, #0
 800611a:	d111      	bne.n	8006140 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 800611c:	6a3b      	ldr	r3, [r7, #32]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00e      	beq.n	8006140 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006122:	e006      	b.n	8006132 <_PrintInt+0x8e>
        FieldWidth--;
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	3b01      	subs	r3, #1
 8006128:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 800612a:	2120      	movs	r1, #32
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f7ff fea7 	bl	8005e80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d003      	beq.n	8006140 <_PrintInt+0x9c>
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	6a3b      	ldr	r3, [r7, #32]
 800613c:	429a      	cmp	r2, r3
 800613e:	d3f1      	bcc.n	8006124 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b00      	cmp	r3, #0
 8006144:	da07      	bge.n	8006156 <_PrintInt+0xb2>
    v = -v;
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	425b      	negs	r3, r3
 800614a:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 800614c:	212d      	movs	r1, #45	; 0x2d
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fe96 	bl	8005e80 <_StoreChar>
 8006154:	e008      	b.n	8006168 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8006156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006160:	212b      	movs	r1, #43	; 0x2b
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f7ff fe8c 	bl	8005e80 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616a:	f003 0302 	and.w	r3, r3, #2
 800616e:	2b00      	cmp	r3, #0
 8006170:	d019      	beq.n	80061a6 <_PrintInt+0x102>
 8006172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d114      	bne.n	80061a6 <_PrintInt+0x102>
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d111      	bne.n	80061a6 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8006182:	6a3b      	ldr	r3, [r7, #32]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00e      	beq.n	80061a6 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006188:	e006      	b.n	8006198 <_PrintInt+0xf4>
        FieldWidth--;
 800618a:	6a3b      	ldr	r3, [r7, #32]
 800618c:	3b01      	subs	r3, #1
 800618e:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006190:	2130      	movs	r1, #48	; 0x30
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff fe74 	bl	8005e80 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006198:	6a3b      	ldr	r3, [r7, #32]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d003      	beq.n	80061a6 <_PrintInt+0x102>
 800619e:	697a      	ldr	r2, [r7, #20]
 80061a0:	6a3b      	ldr	r3, [r7, #32]
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d3f1      	bcc.n	800618a <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	9301      	str	r3, [sp, #4]
 80061ac:	6a3b      	ldr	r3, [r7, #32]
 80061ae:	9300      	str	r3, [sp, #0]
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f7ff fedf 	bl	8005f78 <_PrintUnsigned>
}
 80061ba:	bf00      	nop
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80061c4:	b580      	push	{r7, lr}
 80061c6:	b098      	sub	sp, #96	; 0x60
 80061c8:	af02      	add	r7, sp, #8
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061d0:	f3ef 8311 	mrs	r3, BASEPRI
 80061d4:	f04f 0120 	mov.w	r1, #32
 80061d8:	f381 8811 	msr	BASEPRI, r1
 80061dc:	633b      	str	r3, [r7, #48]	; 0x30
 80061de:	48b7      	ldr	r0, [pc, #732]	; (80064bc <_VPrintTarget+0x2f8>)
 80061e0:	f7ff fc79 	bl	8005ad6 <_PreparePacket>
 80061e4:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80061e6:	4bb5      	ldr	r3, [pc, #724]	; (80064bc <_VPrintTarget+0x2f8>)
 80061e8:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80061ea:	2300      	movs	r3, #0
 80061ec:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80061ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f0:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80061f2:	69fb      	ldr	r3, [r7, #28]
 80061f4:	3301      	adds	r3, #1
 80061f6:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3301      	adds	r3, #1
 8006208:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 800620a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800620e:	2b00      	cmp	r3, #0
 8006210:	f000 8183 	beq.w	800651a <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8006214:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006218:	2b25      	cmp	r3, #37	; 0x25
 800621a:	f040 8170 	bne.w	80064fe <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800621e:	2300      	movs	r3, #0
 8006220:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 8006222:	2301      	movs	r3, #1
 8006224:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 800622e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006232:	3b23      	subs	r3, #35	; 0x23
 8006234:	2b0d      	cmp	r3, #13
 8006236:	d83f      	bhi.n	80062b8 <_VPrintTarget+0xf4>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <_VPrintTarget+0x7c>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	080062a9 	.word	0x080062a9
 8006244:	080062b9 	.word	0x080062b9
 8006248:	080062b9 	.word	0x080062b9
 800624c:	080062b9 	.word	0x080062b9
 8006250:	080062b9 	.word	0x080062b9
 8006254:	080062b9 	.word	0x080062b9
 8006258:	080062b9 	.word	0x080062b9
 800625c:	080062b9 	.word	0x080062b9
 8006260:	08006299 	.word	0x08006299
 8006264:	080062b9 	.word	0x080062b9
 8006268:	08006279 	.word	0x08006279
 800626c:	080062b9 	.word	0x080062b9
 8006270:	080062b9 	.word	0x080062b9
 8006274:	08006289 	.word	0x08006289
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006278:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800627a:	f043 0301 	orr.w	r3, r3, #1
 800627e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	3301      	adds	r3, #1
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	e01a      	b.n	80062be <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006288:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3301      	adds	r3, #1
 8006294:	60fb      	str	r3, [r7, #12]
 8006296:	e012      	b.n	80062be <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8006298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800629a:	f043 0304 	orr.w	r3, r3, #4
 800629e:	64bb      	str	r3, [r7, #72]	; 0x48
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	3301      	adds	r3, #1
 80062a4:	60fb      	str	r3, [r7, #12]
 80062a6:	e00a      	b.n	80062be <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80062a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062aa:	f043 0308 	orr.w	r3, r3, #8
 80062ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	3301      	adds	r3, #1
 80062b4:	60fb      	str	r3, [r7, #12]
 80062b6:	e002      	b.n	80062be <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80062b8:	2300      	movs	r3, #0
 80062ba:	653b      	str	r3, [r7, #80]	; 0x50
 80062bc:	bf00      	nop
        }
      } while (v);
 80062be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1b0      	bne.n	8006226 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80062c4:	2300      	movs	r3, #0
 80062c6:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80062d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062d4:	2b2f      	cmp	r3, #47	; 0x2f
 80062d6:	d912      	bls.n	80062fe <_VPrintTarget+0x13a>
 80062d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062dc:	2b39      	cmp	r3, #57	; 0x39
 80062de:	d80e      	bhi.n	80062fe <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	3301      	adds	r3, #1
 80062e4:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80062e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	461a      	mov	r2, r3
 80062f2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80062f6:	4413      	add	r3, r2
 80062f8:	3b30      	subs	r3, #48	; 0x30
 80062fa:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 80062fc:	e7e4      	b.n	80062c8 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 80062fe:	2300      	movs	r3, #0
 8006300:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 800630a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800630e:	2b2e      	cmp	r3, #46	; 0x2e
 8006310:	d11d      	bne.n	800634e <_VPrintTarget+0x18a>
        sFormat++;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006324:	2b2f      	cmp	r3, #47	; 0x2f
 8006326:	d912      	bls.n	800634e <_VPrintTarget+0x18a>
 8006328:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800632c:	2b39      	cmp	r3, #57	; 0x39
 800632e:	d80e      	bhi.n	800634e <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	3301      	adds	r3, #1
 8006334:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8006336:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006338:	4613      	mov	r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	4413      	add	r3, r2
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	461a      	mov	r2, r3
 8006342:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006346:	4413      	add	r3, r2
 8006348:	3b30      	subs	r3, #48	; 0x30
 800634a:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 800634c:	e7e4      	b.n	8006318 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8006356:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800635a:	2b6c      	cmp	r3, #108	; 0x6c
 800635c:	d003      	beq.n	8006366 <_VPrintTarget+0x1a2>
 800635e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006362:	2b68      	cmp	r3, #104	; 0x68
 8006364:	d107      	bne.n	8006376 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3301      	adds	r3, #1
 8006372:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8006374:	e7ef      	b.n	8006356 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8006376:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800637a:	2b25      	cmp	r3, #37	; 0x25
 800637c:	f000 80b3 	beq.w	80064e6 <_VPrintTarget+0x322>
 8006380:	2b25      	cmp	r3, #37	; 0x25
 8006382:	f2c0 80b7 	blt.w	80064f4 <_VPrintTarget+0x330>
 8006386:	2b78      	cmp	r3, #120	; 0x78
 8006388:	f300 80b4 	bgt.w	80064f4 <_VPrintTarget+0x330>
 800638c:	2b58      	cmp	r3, #88	; 0x58
 800638e:	f2c0 80b1 	blt.w	80064f4 <_VPrintTarget+0x330>
 8006392:	3b58      	subs	r3, #88	; 0x58
 8006394:	2b20      	cmp	r3, #32
 8006396:	f200 80ad 	bhi.w	80064f4 <_VPrintTarget+0x330>
 800639a:	a201      	add	r2, pc, #4	; (adr r2, 80063a0 <_VPrintTarget+0x1dc>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	08006497 	.word	0x08006497
 80063a4:	080064f5 	.word	0x080064f5
 80063a8:	080064f5 	.word	0x080064f5
 80063ac:	080064f5 	.word	0x080064f5
 80063b0:	080064f5 	.word	0x080064f5
 80063b4:	080064f5 	.word	0x080064f5
 80063b8:	080064f5 	.word	0x080064f5
 80063bc:	080064f5 	.word	0x080064f5
 80063c0:	080064f5 	.word	0x080064f5
 80063c4:	080064f5 	.word	0x080064f5
 80063c8:	080064f5 	.word	0x080064f5
 80063cc:	08006425 	.word	0x08006425
 80063d0:	0800644b 	.word	0x0800644b
 80063d4:	080064f5 	.word	0x080064f5
 80063d8:	080064f5 	.word	0x080064f5
 80063dc:	080064f5 	.word	0x080064f5
 80063e0:	080064f5 	.word	0x080064f5
 80063e4:	080064f5 	.word	0x080064f5
 80063e8:	080064f5 	.word	0x080064f5
 80063ec:	080064f5 	.word	0x080064f5
 80063f0:	080064f5 	.word	0x080064f5
 80063f4:	080064f5 	.word	0x080064f5
 80063f8:	080064f5 	.word	0x080064f5
 80063fc:	080064f5 	.word	0x080064f5
 8006400:	080064c1 	.word	0x080064c1
 8006404:	080064f5 	.word	0x080064f5
 8006408:	080064f5 	.word	0x080064f5
 800640c:	080064f5 	.word	0x080064f5
 8006410:	080064f5 	.word	0x080064f5
 8006414:	08006471 	.word	0x08006471
 8006418:	080064f5 	.word	0x080064f5
 800641c:	080064f5 	.word	0x080064f5
 8006420:	08006497 	.word	0x08006497
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	1d19      	adds	r1, r3, #4
 800642a:	687a      	ldr	r2, [r7, #4]
 800642c:	6011      	str	r1, [r2, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 8006432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006434:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006438:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800643c:	f107 0314 	add.w	r3, r7, #20
 8006440:	4611      	mov	r1, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7ff fd1c 	bl	8005e80 <_StoreChar>
        break;
 8006448:	e055      	b.n	80064f6 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	1d19      	adds	r1, r3, #4
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	6011      	str	r1, [r2, #0]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006458:	f107 0014 	add.w	r0, r7, #20
 800645c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800645e:	9301      	str	r3, [sp, #4]
 8006460:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006462:	9300      	str	r3, [sp, #0]
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006466:	220a      	movs	r2, #10
 8006468:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800646a:	f7ff fe1b 	bl	80060a4 <_PrintInt>
        break;
 800646e:	e042      	b.n	80064f6 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	1d19      	adds	r1, r3, #4
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800647e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006480:	f107 0014 	add.w	r0, r7, #20
 8006484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006486:	9301      	str	r3, [sp, #4]
 8006488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800648e:	220a      	movs	r2, #10
 8006490:	f7ff fd72 	bl	8005f78 <_PrintUnsigned>
        break;
 8006494:	e02f      	b.n	80064f6 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	1d19      	adds	r1, r3, #4
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6011      	str	r1, [r2, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80064a4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064a6:	f107 0014 	add.w	r0, r7, #20
 80064aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064b4:	2210      	movs	r2, #16
 80064b6:	f7ff fd5f 	bl	8005f78 <_PrintUnsigned>
        break;
 80064ba:	e01c      	b.n	80064f6 <_VPrintTarget+0x332>
 80064bc:	2001444c 	.word	0x2001444c
      case 'p':
        v = va_arg(*pParamList, int);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	1d19      	adds	r1, r3, #4
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	6011      	str	r1, [r2, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80064ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80064d0:	f107 0014 	add.w	r0, r7, #20
 80064d4:	2300      	movs	r3, #0
 80064d6:	9301      	str	r3, [sp, #4]
 80064d8:	2308      	movs	r3, #8
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2308      	movs	r3, #8
 80064de:	2210      	movs	r2, #16
 80064e0:	f7ff fd4a 	bl	8005f78 <_PrintUnsigned>
        break;
 80064e4:	e007      	b.n	80064f6 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80064e6:	f107 0314 	add.w	r3, r7, #20
 80064ea:	2125      	movs	r1, #37	; 0x25
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7ff fcc7 	bl	8005e80 <_StoreChar>
        break;
 80064f2:	e000      	b.n	80064f6 <_VPrintTarget+0x332>
      default:
        break;
 80064f4:	bf00      	nop
      }
      sFormat++;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3301      	adds	r3, #1
 80064fa:	60fb      	str	r3, [r7, #12]
 80064fc:	e007      	b.n	800650e <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 80064fe:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006502:	f107 0314 	add.w	r3, r7, #20
 8006506:	4611      	mov	r1, r2
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fcb9 	bl	8005e80 <_StoreChar>
    }
  } while (*sFormat);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	781b      	ldrb	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	f47f ae72 	bne.w	80061fc <_VPrintTarget+0x38>
 8006518:	e000      	b.n	800651c <_VPrintTarget+0x358>
      break;
 800651a:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 800651c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800651e:	2b00      	cmp	r3, #0
 8006520:	d041      	beq.n	80065a6 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8006522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	b2d2      	uxtb	r2, r2
 8006528:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 800652a:	69bb      	ldr	r3, [r7, #24]
 800652c:	643b      	str	r3, [r7, #64]	; 0x40
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006532:	e00b      	b.n	800654c <_VPrintTarget+0x388>
 8006534:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006536:	b2da      	uxtb	r2, r3
 8006538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800653a:	1c59      	adds	r1, r3, #1
 800653c:	6439      	str	r1, [r7, #64]	; 0x40
 800653e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006542:	b2d2      	uxtb	r2, r2
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006548:	09db      	lsrs	r3, r3, #7
 800654a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800654c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654e:	2b7f      	cmp	r3, #127	; 0x7f
 8006550:	d8f0      	bhi.n	8006534 <_VPrintTarget+0x370>
 8006552:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006554:	1c5a      	adds	r2, r3, #1
 8006556:	643a      	str	r2, [r7, #64]	; 0x40
 8006558:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006560:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006562:	69bb      	ldr	r3, [r7, #24]
 8006564:	63bb      	str	r3, [r7, #56]	; 0x38
 8006566:	2300      	movs	r3, #0
 8006568:	637b      	str	r3, [r7, #52]	; 0x34
 800656a:	e00b      	b.n	8006584 <_VPrintTarget+0x3c0>
 800656c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656e:	b2da      	uxtb	r2, r3
 8006570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	63b9      	str	r1, [r7, #56]	; 0x38
 8006576:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800657a:	b2d2      	uxtb	r2, r2
 800657c:	701a      	strb	r2, [r3, #0]
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	09db      	lsrs	r3, r3, #7
 8006582:	637b      	str	r3, [r7, #52]	; 0x34
 8006584:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006586:	2b7f      	cmp	r3, #127	; 0x7f
 8006588:	d8f0      	bhi.n	800656c <_VPrintTarget+0x3a8>
 800658a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800658c:	1c5a      	adds	r2, r3, #1
 800658e:	63ba      	str	r2, [r7, #56]	; 0x38
 8006590:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006592:	b2d2      	uxtb	r2, r2
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006598:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	69b9      	ldr	r1, [r7, #24]
 800659e:	221a      	movs	r2, #26
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fb87 	bl	8005cb4 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80065a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a8:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80065ac:	bf00      	nop
 80065ae:	3758      	adds	r7, #88	; 0x58
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af02      	add	r7, sp, #8
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065c2:	2300      	movs	r3, #0
 80065c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80065c8:	4917      	ldr	r1, [pc, #92]	; (8006628 <SEGGER_SYSVIEW_Init+0x74>)
 80065ca:	4818      	ldr	r0, [pc, #96]	; (800662c <SEGGER_SYSVIEW_Init+0x78>)
 80065cc:	f7ff f942 	bl	8005854 <SEGGER_RTT_AllocUpBuffer>
 80065d0:	4603      	mov	r3, r0
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	4b16      	ldr	r3, [pc, #88]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 80065d6:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80065d8:	4b15      	ldr	r3, [pc, #84]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 80065da:	785a      	ldrb	r2, [r3, #1]
 80065dc:	4b14      	ldr	r3, [pc, #80]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 80065de:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80065e0:	4b13      	ldr	r3, [pc, #76]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 80065e2:	7e1b      	ldrb	r3, [r3, #24]
 80065e4:	4618      	mov	r0, r3
 80065e6:	2300      	movs	r3, #0
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	2308      	movs	r3, #8
 80065ec:	4a11      	ldr	r2, [pc, #68]	; (8006634 <SEGGER_SYSVIEW_Init+0x80>)
 80065ee:	490f      	ldr	r1, [pc, #60]	; (800662c <SEGGER_SYSVIEW_Init+0x78>)
 80065f0:	f7ff f9b4 	bl	800595c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80065f4:	4b0e      	ldr	r3, [pc, #56]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 80065f6:	2200      	movs	r2, #0
 80065f8:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80065fa:	4b0f      	ldr	r3, [pc, #60]	; (8006638 <SEGGER_SYSVIEW_Init+0x84>)
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 8006600:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8006602:	4a0b      	ldr	r2, [pc, #44]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006608:	4a09      	ldr	r2, [pc, #36]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800660e:	4a08      	ldr	r2, [pc, #32]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8006614:	4a06      	ldr	r2, [pc, #24]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <SEGGER_SYSVIEW_Init+0x7c>)
 800661c:	2200      	movs	r2, #0
 800661e:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20013414 	.word	0x20013414
 800662c:	08008674 	.word	0x08008674
 8006630:	2001441c 	.word	0x2001441c
 8006634:	20014414 	.word	0x20014414
 8006638:	e0001004 	.word	0xe0001004

0800663c <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006644:	4a04      	ldr	r2, [pc, #16]	; (8006658 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6113      	str	r3, [r2, #16]
}
 800664a:	bf00      	nop
 800664c:	370c      	adds	r7, #12
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	2001441c 	.word	0x2001441c

0800665c <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006664:	f3ef 8311 	mrs	r3, BASEPRI
 8006668:	f04f 0120 	mov.w	r1, #32
 800666c:	f381 8811 	msr	BASEPRI, r1
 8006670:	60fb      	str	r3, [r7, #12]
 8006672:	4808      	ldr	r0, [pc, #32]	; (8006694 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006674:	f7ff fa2f 	bl	8005ad6 <_PreparePacket>
 8006678:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	68b9      	ldr	r1, [r7, #8]
 800667e:	68b8      	ldr	r0, [r7, #8]
 8006680:	f7ff fb18 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f383 8811 	msr	BASEPRI, r3
}
 800668a:	bf00      	nop
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	2001444c 	.word	0x2001444c

08006698 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006698:	b580      	push	{r7, lr}
 800669a:	b088      	sub	sp, #32
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80066a2:	f3ef 8311 	mrs	r3, BASEPRI
 80066a6:	f04f 0120 	mov.w	r1, #32
 80066aa:	f381 8811 	msr	BASEPRI, r1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	4816      	ldr	r0, [pc, #88]	; (800670c <SEGGER_SYSVIEW_RecordU32+0x74>)
 80066b2:	f7ff fa10 	bl	8005ad6 <_PreparePacket>
 80066b6:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	61fb      	str	r3, [r7, #28]
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	61bb      	str	r3, [r7, #24]
 80066c4:	e00b      	b.n	80066de <SEGGER_SYSVIEW_RecordU32+0x46>
 80066c6:	69bb      	ldr	r3, [r7, #24]
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	1c59      	adds	r1, r3, #1
 80066ce:	61f9      	str	r1, [r7, #28]
 80066d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	09db      	lsrs	r3, r3, #7
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	2b7f      	cmp	r3, #127	; 0x7f
 80066e2:	d8f0      	bhi.n	80066c6 <SEGGER_SYSVIEW_RecordU32+0x2e>
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	1c5a      	adds	r2, r3, #1
 80066e8:	61fa      	str	r2, [r7, #28]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	b2d2      	uxtb	r2, r2
 80066ee:	701a      	strb	r2, [r3, #0]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80066f4:	687a      	ldr	r2, [r7, #4]
 80066f6:	68f9      	ldr	r1, [r7, #12]
 80066f8:	6938      	ldr	r0, [r7, #16]
 80066fa:	f7ff fadb 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	f383 8811 	msr	BASEPRI, r3
}
 8006704:	bf00      	nop
 8006706:	3720      	adds	r7, #32
 8006708:	46bd      	mov	sp, r7
 800670a:	bd80      	pop	{r7, pc}
 800670c:	2001444c 	.word	0x2001444c

08006710 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006710:	b580      	push	{r7, lr}
 8006712:	b08c      	sub	sp, #48	; 0x30
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800671c:	f3ef 8311 	mrs	r3, BASEPRI
 8006720:	f04f 0120 	mov.w	r1, #32
 8006724:	f381 8811 	msr	BASEPRI, r1
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	4825      	ldr	r0, [pc, #148]	; (80067c0 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800672c:	f7ff f9d3 	bl	8005ad6 <_PreparePacket>
 8006730:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	62bb      	str	r3, [r7, #40]	; 0x28
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	b2da      	uxtb	r2, r3
 8006744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	62f9      	str	r1, [r7, #44]	; 0x2c
 800674a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
 8006758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800675a:	2b7f      	cmp	r3, #127	; 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006764:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800676c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800676e:	697b      	ldr	r3, [r7, #20]
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	623b      	str	r3, [r7, #32]
 8006776:	e00b      	b.n	8006790 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006778:	6a3b      	ldr	r3, [r7, #32]
 800677a:	b2da      	uxtb	r2, r3
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	1c59      	adds	r1, r3, #1
 8006780:	6279      	str	r1, [r7, #36]	; 0x24
 8006782:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006786:	b2d2      	uxtb	r2, r2
 8006788:	701a      	strb	r2, [r3, #0]
 800678a:	6a3b      	ldr	r3, [r7, #32]
 800678c:	09db      	lsrs	r3, r3, #7
 800678e:	623b      	str	r3, [r7, #32]
 8006790:	6a3b      	ldr	r3, [r7, #32]
 8006792:	2b7f      	cmp	r3, #127	; 0x7f
 8006794:	d8f0      	bhi.n	8006778 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	1c5a      	adds	r2, r3, #1
 800679a:	627a      	str	r2, [r7, #36]	; 0x24
 800679c:	6a3a      	ldr	r2, [r7, #32]
 800679e:	b2d2      	uxtb	r2, r2
 80067a0:	701a      	strb	r2, [r3, #0]
 80067a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a4:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	6979      	ldr	r1, [r7, #20]
 80067aa:	69b8      	ldr	r0, [r7, #24]
 80067ac:	f7ff fa82 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	f383 8811 	msr	BASEPRI, r3
}
 80067b6:	bf00      	nop
 80067b8:	3730      	adds	r7, #48	; 0x30
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}
 80067be:	bf00      	nop
 80067c0:	2001444c 	.word	0x2001444c

080067c4 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b08e      	sub	sp, #56	; 0x38
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
 80067d0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80067d2:	f3ef 8311 	mrs	r3, BASEPRI
 80067d6:	f04f 0120 	mov.w	r1, #32
 80067da:	f381 8811 	msr	BASEPRI, r1
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	4832      	ldr	r0, [pc, #200]	; (80068ac <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80067e2:	f7ff f978 	bl	8005ad6 <_PreparePacket>
 80067e6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	637b      	str	r3, [r7, #52]	; 0x34
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	633b      	str	r3, [r7, #48]	; 0x30
 80067f4:	e00b      	b.n	800680e <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80067f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f8:	b2da      	uxtb	r2, r3
 80067fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067fc:	1c59      	adds	r1, r3, #1
 80067fe:	6379      	str	r1, [r7, #52]	; 0x34
 8006800:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006804:	b2d2      	uxtb	r2, r2
 8006806:	701a      	strb	r2, [r3, #0]
 8006808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800680a:	09db      	lsrs	r3, r3, #7
 800680c:	633b      	str	r3, [r7, #48]	; 0x30
 800680e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006810:	2b7f      	cmp	r3, #127	; 0x7f
 8006812:	d8f0      	bhi.n	80067f6 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	637a      	str	r2, [r7, #52]	; 0x34
 800681a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800681c:	b2d2      	uxtb	r2, r2
 800681e:	701a      	strb	r2, [r3, #0]
 8006820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006822:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	62bb      	str	r3, [r7, #40]	; 0x28
 800682c:	e00b      	b.n	8006846 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	b2da      	uxtb	r2, r3
 8006832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006834:	1c59      	adds	r1, r3, #1
 8006836:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006838:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800683c:	b2d2      	uxtb	r2, r2
 800683e:	701a      	strb	r2, [r3, #0]
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	09db      	lsrs	r3, r3, #7
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
 8006846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006848:	2b7f      	cmp	r3, #127	; 0x7f
 800684a:	d8f0      	bhi.n	800682e <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006852:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	623b      	str	r3, [r7, #32]
 8006864:	e00b      	b.n	800687e <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8006866:	6a3b      	ldr	r3, [r7, #32]
 8006868:	b2da      	uxtb	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	1c59      	adds	r1, r3, #1
 800686e:	6279      	str	r1, [r7, #36]	; 0x24
 8006870:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006874:	b2d2      	uxtb	r2, r2
 8006876:	701a      	strb	r2, [r3, #0]
 8006878:	6a3b      	ldr	r3, [r7, #32]
 800687a:	09db      	lsrs	r3, r3, #7
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	6a3b      	ldr	r3, [r7, #32]
 8006880:	2b7f      	cmp	r3, #127	; 0x7f
 8006882:	d8f0      	bhi.n	8006866 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	627a      	str	r2, [r7, #36]	; 0x24
 800688a:	6a3a      	ldr	r2, [r7, #32]
 800688c:	b2d2      	uxtb	r2, r2
 800688e:	701a      	strb	r2, [r3, #0]
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006894:	68fa      	ldr	r2, [r7, #12]
 8006896:	6979      	ldr	r1, [r7, #20]
 8006898:	69b8      	ldr	r0, [r7, #24]
 800689a:	f7ff fa0b 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 800689e:	69fb      	ldr	r3, [r7, #28]
 80068a0:	f383 8811 	msr	BASEPRI, r3
}
 80068a4:	bf00      	nop
 80068a6:	3738      	adds	r7, #56	; 0x38
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	2001444c 	.word	0x2001444c

080068b0 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b090      	sub	sp, #64	; 0x40
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80068be:	f3ef 8311 	mrs	r3, BASEPRI
 80068c2:	f04f 0120 	mov.w	r1, #32
 80068c6:	f381 8811 	msr	BASEPRI, r1
 80068ca:	61fb      	str	r3, [r7, #28]
 80068cc:	4840      	ldr	r0, [pc, #256]	; (80069d0 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80068ce:	f7ff f902 	bl	8005ad6 <_PreparePacket>
 80068d2:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	63bb      	str	r3, [r7, #56]	; 0x38
 80068e0:	e00b      	b.n	80068fa <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80068e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068e4:	b2da      	uxtb	r2, r3
 80068e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068e8:	1c59      	adds	r1, r3, #1
 80068ea:	63f9      	str	r1, [r7, #60]	; 0x3c
 80068ec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80068f0:	b2d2      	uxtb	r2, r2
 80068f2:	701a      	strb	r2, [r3, #0]
 80068f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f6:	09db      	lsrs	r3, r3, #7
 80068f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80068fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fc:	2b7f      	cmp	r3, #127	; 0x7f
 80068fe:	d8f0      	bhi.n	80068e2 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006902:	1c5a      	adds	r2, r3, #1
 8006904:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006908:	b2d2      	uxtb	r2, r2
 800690a:	701a      	strb	r2, [r3, #0]
 800690c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800690e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	637b      	str	r3, [r7, #52]	; 0x34
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	633b      	str	r3, [r7, #48]	; 0x30
 8006918:	e00b      	b.n	8006932 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 800691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691c:	b2da      	uxtb	r2, r3
 800691e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006920:	1c59      	adds	r1, r3, #1
 8006922:	6379      	str	r1, [r7, #52]	; 0x34
 8006924:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006928:	b2d2      	uxtb	r2, r2
 800692a:	701a      	strb	r2, [r3, #0]
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	09db      	lsrs	r3, r3, #7
 8006930:	633b      	str	r3, [r7, #48]	; 0x30
 8006932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006934:	2b7f      	cmp	r3, #127	; 0x7f
 8006936:	d8f0      	bhi.n	800691a <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800693a:	1c5a      	adds	r2, r3, #1
 800693c:	637a      	str	r2, [r7, #52]	; 0x34
 800693e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006940:	b2d2      	uxtb	r2, r2
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006946:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006950:	e00b      	b.n	800696a <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006954:	b2da      	uxtb	r2, r3
 8006956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006958:	1c59      	adds	r1, r3, #1
 800695a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800695c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006960:	b2d2      	uxtb	r2, r2
 8006962:	701a      	strb	r2, [r3, #0]
 8006964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006966:	09db      	lsrs	r3, r3, #7
 8006968:	62bb      	str	r3, [r7, #40]	; 0x28
 800696a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696c:	2b7f      	cmp	r3, #127	; 0x7f
 800696e:	d8f0      	bhi.n	8006952 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	1c5a      	adds	r2, r3, #1
 8006974:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006976:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006978:	b2d2      	uxtb	r2, r2
 800697a:	701a      	strb	r2, [r3, #0]
 800697c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	627b      	str	r3, [r7, #36]	; 0x24
 8006984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006986:	623b      	str	r3, [r7, #32]
 8006988:	e00b      	b.n	80069a2 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800698a:	6a3b      	ldr	r3, [r7, #32]
 800698c:	b2da      	uxtb	r2, r3
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	1c59      	adds	r1, r3, #1
 8006992:	6279      	str	r1, [r7, #36]	; 0x24
 8006994:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	701a      	strb	r2, [r3, #0]
 800699c:	6a3b      	ldr	r3, [r7, #32]
 800699e:	09db      	lsrs	r3, r3, #7
 80069a0:	623b      	str	r3, [r7, #32]
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	2b7f      	cmp	r3, #127	; 0x7f
 80069a6:	d8f0      	bhi.n	800698a <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	1c5a      	adds	r2, r3, #1
 80069ac:	627a      	str	r2, [r7, #36]	; 0x24
 80069ae:	6a3a      	ldr	r2, [r7, #32]
 80069b0:	b2d2      	uxtb	r2, r2
 80069b2:	701a      	strb	r2, [r3, #0]
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	6979      	ldr	r1, [r7, #20]
 80069bc:	69b8      	ldr	r0, [r7, #24]
 80069be:	f7ff f979 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 80069c2:	69fb      	ldr	r3, [r7, #28]
 80069c4:	f383 8811 	msr	BASEPRI, r3
}
 80069c8:	bf00      	nop
 80069ca:	3740      	adds	r7, #64	; 0x40
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	2001444c 	.word	0x2001444c

080069d4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08c      	sub	sp, #48	; 0x30
 80069d8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80069da:	4b58      	ldr	r3, [pc, #352]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 80069dc:	2201      	movs	r2, #1
 80069de:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80069e0:	f3ef 8311 	mrs	r3, BASEPRI
 80069e4:	f04f 0120 	mov.w	r1, #32
 80069e8:	f381 8811 	msr	BASEPRI, r1
 80069ec:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80069ee:	4b53      	ldr	r3, [pc, #332]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 80069f0:	785b      	ldrb	r3, [r3, #1]
 80069f2:	220a      	movs	r2, #10
 80069f4:	4952      	ldr	r1, [pc, #328]	; (8006b40 <SEGGER_SYSVIEW_Start+0x16c>)
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7f9 fbea 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006a02:	200a      	movs	r0, #10
 8006a04:	f7ff fe2a 	bl	800665c <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006a08:	f3ef 8311 	mrs	r3, BASEPRI
 8006a0c:	f04f 0120 	mov.w	r1, #32
 8006a10:	f381 8811 	msr	BASEPRI, r1
 8006a14:	60bb      	str	r3, [r7, #8]
 8006a16:	484b      	ldr	r0, [pc, #300]	; (8006b44 <SEGGER_SYSVIEW_Start+0x170>)
 8006a18:	f7ff f85d 	bl	8005ad6 <_PreparePacket>
 8006a1c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a26:	4b45      	ldr	r3, [pc, #276]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a2c:	e00b      	b.n	8006a46 <SEGGER_SYSVIEW_Start+0x72>
 8006a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a30:	b2da      	uxtb	r2, r3
 8006a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a34:	1c59      	adds	r1, r3, #1
 8006a36:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a38:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a3c:	b2d2      	uxtb	r2, r2
 8006a3e:	701a      	strb	r2, [r3, #0]
 8006a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a42:	09db      	lsrs	r3, r3, #7
 8006a44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a48:	2b7f      	cmp	r3, #127	; 0x7f
 8006a4a:	d8f0      	bhi.n	8006a2e <SEGGER_SYSVIEW_Start+0x5a>
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	1c5a      	adds	r2, r3, #1
 8006a50:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a54:	b2d2      	uxtb	r2, r2
 8006a56:	701a      	strb	r2, [r3, #0]
 8006a58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a5a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a60:	4b36      	ldr	r3, [pc, #216]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	623b      	str	r3, [r7, #32]
 8006a66:	e00b      	b.n	8006a80 <SEGGER_SYSVIEW_Start+0xac>
 8006a68:	6a3b      	ldr	r3, [r7, #32]
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6e:	1c59      	adds	r1, r3, #1
 8006a70:	6279      	str	r1, [r7, #36]	; 0x24
 8006a72:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
 8006a7a:	6a3b      	ldr	r3, [r7, #32]
 8006a7c:	09db      	lsrs	r3, r3, #7
 8006a7e:	623b      	str	r3, [r7, #32]
 8006a80:	6a3b      	ldr	r3, [r7, #32]
 8006a82:	2b7f      	cmp	r3, #127	; 0x7f
 8006a84:	d8f0      	bhi.n	8006a68 <SEGGER_SYSVIEW_Start+0x94>
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	1c5a      	adds	r2, r3, #1
 8006a8a:	627a      	str	r2, [r7, #36]	; 0x24
 8006a8c:	6a3a      	ldr	r2, [r7, #32]
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a94:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	61fb      	str	r3, [r7, #28]
 8006a9a:	4b28      	ldr	r3, [pc, #160]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	61bb      	str	r3, [r7, #24]
 8006aa0:	e00b      	b.n	8006aba <SEGGER_SYSVIEW_Start+0xe6>
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	1c59      	adds	r1, r3, #1
 8006aaa:	61f9      	str	r1, [r7, #28]
 8006aac:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	09db      	lsrs	r3, r3, #7
 8006ab8:	61bb      	str	r3, [r7, #24]
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	2b7f      	cmp	r3, #127	; 0x7f
 8006abe:	d8f0      	bhi.n	8006aa2 <SEGGER_SYSVIEW_Start+0xce>
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	1c5a      	adds	r2, r3, #1
 8006ac4:	61fa      	str	r2, [r7, #28]
 8006ac6:	69ba      	ldr	r2, [r7, #24]
 8006ac8:	b2d2      	uxtb	r2, r2
 8006aca:	701a      	strb	r2, [r3, #0]
 8006acc:	69fb      	ldr	r3, [r7, #28]
 8006ace:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	617b      	str	r3, [r7, #20]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	613b      	str	r3, [r7, #16]
 8006ad8:	e00b      	b.n	8006af2 <SEGGER_SYSVIEW_Start+0x11e>
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	697b      	ldr	r3, [r7, #20]
 8006ae0:	1c59      	adds	r1, r3, #1
 8006ae2:	6179      	str	r1, [r7, #20]
 8006ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	701a      	strb	r2, [r3, #0]
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	09db      	lsrs	r3, r3, #7
 8006af0:	613b      	str	r3, [r7, #16]
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b7f      	cmp	r3, #127	; 0x7f
 8006af6:	d8f0      	bhi.n	8006ada <SEGGER_SYSVIEW_Start+0x106>
 8006af8:	697b      	ldr	r3, [r7, #20]
 8006afa:	1c5a      	adds	r2, r3, #1
 8006afc:	617a      	str	r2, [r7, #20]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	b2d2      	uxtb	r2, r2
 8006b02:	701a      	strb	r2, [r3, #0]
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006b08:	2218      	movs	r2, #24
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f7ff f8d1 	bl	8005cb4 <_SendPacket>
      RECORD_END();
 8006b12:	68bb      	ldr	r3, [r7, #8]
 8006b14:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006b18:	4b08      	ldr	r3, [pc, #32]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d002      	beq.n	8006b26 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006b20:	4b06      	ldr	r3, [pc, #24]	; (8006b3c <SEGGER_SYSVIEW_Start+0x168>)
 8006b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b24:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006b26:	f000 f9eb 	bl	8006f00 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006b2a:	f000 f9b1 	bl	8006e90 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006b2e:	f000 fc83 	bl	8007438 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006b32:	bf00      	nop
 8006b34:	3730      	adds	r7, #48	; 0x30
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	2001441c 	.word	0x2001441c
 8006b40:	080086ec 	.word	0x080086ec
 8006b44:	2001444c 	.word	0x2001444c

08006b48 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b4e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b52:	f04f 0120 	mov.w	r1, #32
 8006b56:	f381 8811 	msr	BASEPRI, r1
 8006b5a:	607b      	str	r3, [r7, #4]
 8006b5c:	480b      	ldr	r0, [pc, #44]	; (8006b8c <SEGGER_SYSVIEW_Stop+0x44>)
 8006b5e:	f7fe ffba 	bl	8005ad6 <_PreparePacket>
 8006b62:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006b64:	4b0a      	ldr	r3, [pc, #40]	; (8006b90 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d007      	beq.n	8006b7c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006b6c:	220b      	movs	r2, #11
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6838      	ldr	r0, [r7, #0]
 8006b72:	f7ff f89f 	bl	8005cb4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006b76:	4b06      	ldr	r3, [pc, #24]	; (8006b90 <SEGGER_SYSVIEW_Stop+0x48>)
 8006b78:	2200      	movs	r2, #0
 8006b7a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f383 8811 	msr	BASEPRI, r3
}
 8006b82:	bf00      	nop
 8006b84:	3708      	adds	r7, #8
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	2001444c 	.word	0x2001444c
 8006b90:	2001441c 	.word	0x2001441c

08006b94 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b08c      	sub	sp, #48	; 0x30
 8006b98:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b9e:	f04f 0120 	mov.w	r1, #32
 8006ba2:	f381 8811 	msr	BASEPRI, r1
 8006ba6:	60fb      	str	r3, [r7, #12]
 8006ba8:	4845      	ldr	r0, [pc, #276]	; (8006cc0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006baa:	f7fe ff94 	bl	8005ad6 <_PreparePacket>
 8006bae:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb8:	4b42      	ldr	r3, [pc, #264]	; (8006cc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bbe:	e00b      	b.n	8006bd8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	b2da      	uxtb	r2, r3
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	1c59      	adds	r1, r3, #1
 8006bc8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bca:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bce:	b2d2      	uxtb	r2, r2
 8006bd0:	701a      	strb	r2, [r3, #0]
 8006bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd4:	09db      	lsrs	r3, r3, #7
 8006bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	2b7f      	cmp	r3, #127	; 0x7f
 8006bdc:	d8f0      	bhi.n	8006bc0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006be4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006be6:	b2d2      	uxtb	r2, r2
 8006be8:	701a      	strb	r2, [r3, #0]
 8006bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	4b34      	ldr	r3, [pc, #208]	; (8006cc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	623b      	str	r3, [r7, #32]
 8006bf8:	e00b      	b.n	8006c12 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006bfa:	6a3b      	ldr	r3, [r7, #32]
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	1c59      	adds	r1, r3, #1
 8006c02:	6279      	str	r1, [r7, #36]	; 0x24
 8006c04:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c08:	b2d2      	uxtb	r2, r2
 8006c0a:	701a      	strb	r2, [r3, #0]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
 8006c0e:	09db      	lsrs	r3, r3, #7
 8006c10:	623b      	str	r3, [r7, #32]
 8006c12:	6a3b      	ldr	r3, [r7, #32]
 8006c14:	2b7f      	cmp	r3, #127	; 0x7f
 8006c16:	d8f0      	bhi.n	8006bfa <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	1c5a      	adds	r2, r3, #1
 8006c1c:	627a      	str	r2, [r7, #36]	; 0x24
 8006c1e:	6a3a      	ldr	r2, [r7, #32]
 8006c20:	b2d2      	uxtb	r2, r2
 8006c22:	701a      	strb	r2, [r3, #0]
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	61fb      	str	r3, [r7, #28]
 8006c2c:	4b25      	ldr	r3, [pc, #148]	; (8006cc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	61bb      	str	r3, [r7, #24]
 8006c32:	e00b      	b.n	8006c4c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006c34:	69bb      	ldr	r3, [r7, #24]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	69fb      	ldr	r3, [r7, #28]
 8006c3a:	1c59      	adds	r1, r3, #1
 8006c3c:	61f9      	str	r1, [r7, #28]
 8006c3e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	09db      	lsrs	r3, r3, #7
 8006c4a:	61bb      	str	r3, [r7, #24]
 8006c4c:	69bb      	ldr	r3, [r7, #24]
 8006c4e:	2b7f      	cmp	r3, #127	; 0x7f
 8006c50:	d8f0      	bhi.n	8006c34 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	1c5a      	adds	r2, r3, #1
 8006c56:	61fa      	str	r2, [r7, #28]
 8006c58:	69ba      	ldr	r2, [r7, #24]
 8006c5a:	b2d2      	uxtb	r2, r2
 8006c5c:	701a      	strb	r2, [r3, #0]
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	617b      	str	r3, [r7, #20]
 8006c66:	2300      	movs	r3, #0
 8006c68:	613b      	str	r3, [r7, #16]
 8006c6a:	e00b      	b.n	8006c84 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	b2da      	uxtb	r2, r3
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	1c59      	adds	r1, r3, #1
 8006c74:	6179      	str	r1, [r7, #20]
 8006c76:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006c7a:	b2d2      	uxtb	r2, r2
 8006c7c:	701a      	strb	r2, [r3, #0]
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	09db      	lsrs	r3, r3, #7
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2b7f      	cmp	r3, #127	; 0x7f
 8006c88:	d8f0      	bhi.n	8006c6c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	1c5a      	adds	r2, r3, #1
 8006c8e:	617a      	str	r2, [r7, #20]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	b2d2      	uxtb	r2, r2
 8006c94:	701a      	strb	r2, [r3, #0]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006c9a:	2218      	movs	r2, #24
 8006c9c:	6879      	ldr	r1, [r7, #4]
 8006c9e:	68b8      	ldr	r0, [r7, #8]
 8006ca0:	f7ff f808 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d002      	beq.n	8006cb8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006cb2:	4b04      	ldr	r3, [pc, #16]	; (8006cc4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb6:	4798      	blx	r3
  }
}
 8006cb8:	bf00      	nop
 8006cba:	3730      	adds	r7, #48	; 0x30
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	2001444c 	.word	0x2001444c
 8006cc4:	2001441c 	.word	0x2001441c

08006cc8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b092      	sub	sp, #72	; 0x48
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006cd0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cd4:	f04f 0120 	mov.w	r1, #32
 8006cd8:	f381 8811 	msr	BASEPRI, r1
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	486a      	ldr	r0, [pc, #424]	; (8006e88 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006ce0:	f7fe fef9 	bl	8005ad6 <_PreparePacket>
 8006ce4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	647b      	str	r3, [r7, #68]	; 0x44
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b66      	ldr	r3, [pc, #408]	; (8006e8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	1ad3      	subs	r3, r2, r3
 8006cf8:	643b      	str	r3, [r7, #64]	; 0x40
 8006cfa:	e00b      	b.n	8006d14 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d02:	1c59      	adds	r1, r3, #1
 8006d04:	6479      	str	r1, [r7, #68]	; 0x44
 8006d06:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d0a:	b2d2      	uxtb	r2, r2
 8006d0c:	701a      	strb	r2, [r3, #0]
 8006d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d10:	09db      	lsrs	r3, r3, #7
 8006d12:	643b      	str	r3, [r7, #64]	; 0x40
 8006d14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d16:	2b7f      	cmp	r3, #127	; 0x7f
 8006d18:	d8f0      	bhi.n	8006cfc <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d1c:	1c5a      	adds	r2, r3, #1
 8006d1e:	647a      	str	r2, [r7, #68]	; 0x44
 8006d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d22:	b2d2      	uxtb	r2, r2
 8006d24:	701a      	strb	r2, [r3, #0]
 8006d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d28:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d34:	e00b      	b.n	8006d4e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	b2da      	uxtb	r2, r3
 8006d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d3c:	1c59      	adds	r1, r3, #1
 8006d3e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006d40:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d44:	b2d2      	uxtb	r2, r2
 8006d46:	701a      	strb	r2, [r3, #0]
 8006d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d4a:	09db      	lsrs	r3, r3, #7
 8006d4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d50:	2b7f      	cmp	r3, #127	; 0x7f
 8006d52:	d8f0      	bhi.n	8006d36 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006d5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d5c:	b2d2      	uxtb	r2, r2
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d62:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2220      	movs	r2, #32
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	68f8      	ldr	r0, [r7, #12]
 8006d6e:	f7fe fe65 	bl	8005a3c <_EncodeStr>
 8006d72:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006d74:	2209      	movs	r2, #9
 8006d76:	68f9      	ldr	r1, [r7, #12]
 8006d78:	6938      	ldr	r0, [r7, #16]
 8006d7a:	f7fe ff9b 	bl	8005cb4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	637b      	str	r3, [r7, #52]	; 0x34
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	4b40      	ldr	r3, [pc, #256]	; (8006e8c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006d8c:	691b      	ldr	r3, [r3, #16]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	633b      	str	r3, [r7, #48]	; 0x30
 8006d92:	e00b      	b.n	8006dac <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d96:	b2da      	uxtb	r2, r3
 8006d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d9a:	1c59      	adds	r1, r3, #1
 8006d9c:	6379      	str	r1, [r7, #52]	; 0x34
 8006d9e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006da2:	b2d2      	uxtb	r2, r2
 8006da4:	701a      	strb	r2, [r3, #0]
 8006da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006da8:	09db      	lsrs	r3, r3, #7
 8006daa:	633b      	str	r3, [r7, #48]	; 0x30
 8006dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dae:	2b7f      	cmp	r3, #127	; 0x7f
 8006db0:	d8f0      	bhi.n	8006d94 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006db4:	1c5a      	adds	r2, r3, #1
 8006db6:	637a      	str	r2, [r7, #52]	; 0x34
 8006db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dc0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	68db      	ldr	r3, [r3, #12]
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dcc:	e00b      	b.n	8006de6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd4:	1c59      	adds	r1, r3, #1
 8006dd6:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006dd8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ddc:	b2d2      	uxtb	r2, r2
 8006dde:	701a      	strb	r2, [r3, #0]
 8006de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de2:	09db      	lsrs	r3, r3, #7
 8006de4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	2b7f      	cmp	r3, #127	; 0x7f
 8006dea:	d8f0      	bhi.n	8006dce <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dee:	1c5a      	adds	r2, r3, #1
 8006df0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006df2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006df4:	b2d2      	uxtb	r2, r2
 8006df6:	701a      	strb	r2, [r3, #0]
 8006df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfa:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	691b      	ldr	r3, [r3, #16]
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	e00b      	b.n	8006e20 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006e08:	6a3b      	ldr	r3, [r7, #32]
 8006e0a:	b2da      	uxtb	r2, r3
 8006e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e0e:	1c59      	adds	r1, r3, #1
 8006e10:	6279      	str	r1, [r7, #36]	; 0x24
 8006e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e16:	b2d2      	uxtb	r2, r2
 8006e18:	701a      	strb	r2, [r3, #0]
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	09db      	lsrs	r3, r3, #7
 8006e1e:	623b      	str	r3, [r7, #32]
 8006e20:	6a3b      	ldr	r3, [r7, #32]
 8006e22:	2b7f      	cmp	r3, #127	; 0x7f
 8006e24:	d8f0      	bhi.n	8006e08 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1c5a      	adds	r2, r3, #1
 8006e2a:	627a      	str	r2, [r7, #36]	; 0x24
 8006e2c:	6a3a      	ldr	r2, [r7, #32]
 8006e2e:	b2d2      	uxtb	r2, r2
 8006e30:	701a      	strb	r2, [r3, #0]
 8006e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e34:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e00b      	b.n	8006e58 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	b2da      	uxtb	r2, r3
 8006e44:	69fb      	ldr	r3, [r7, #28]
 8006e46:	1c59      	adds	r1, r3, #1
 8006e48:	61f9      	str	r1, [r7, #28]
 8006e4a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e4e:	b2d2      	uxtb	r2, r2
 8006e50:	701a      	strb	r2, [r3, #0]
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	09db      	lsrs	r3, r3, #7
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	69bb      	ldr	r3, [r7, #24]
 8006e5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006e5c:	d8f0      	bhi.n	8006e40 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006e5e:	69fb      	ldr	r3, [r7, #28]
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	61fa      	str	r2, [r7, #28]
 8006e64:	69ba      	ldr	r2, [r7, #24]
 8006e66:	b2d2      	uxtb	r2, r2
 8006e68:	701a      	strb	r2, [r3, #0]
 8006e6a:	69fb      	ldr	r3, [r7, #28]
 8006e6c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006e6e:	2215      	movs	r2, #21
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	6938      	ldr	r0, [r7, #16]
 8006e74:	f7fe ff1e 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	f383 8811 	msr	BASEPRI, r3
}
 8006e7e:	bf00      	nop
 8006e80:	3748      	adds	r7, #72	; 0x48
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	2001444c 	.word	0x2001444c
 8006e8c:	2001441c 	.word	0x2001441c

08006e90 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006e94:	4b07      	ldr	r3, [pc, #28]	; (8006eb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d008      	beq.n	8006eae <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006e9e:	6a1b      	ldr	r3, [r3, #32]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d003      	beq.n	8006eae <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006ea6:	4b03      	ldr	r3, [pc, #12]	; (8006eb4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	4798      	blx	r3
  }
}
 8006eae:	bf00      	nop
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	2001441c 	.word	0x2001441c

08006eb8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ec0:	f3ef 8311 	mrs	r3, BASEPRI
 8006ec4:	f04f 0120 	mov.w	r1, #32
 8006ec8:	f381 8811 	msr	BASEPRI, r1
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	480b      	ldr	r0, [pc, #44]	; (8006efc <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8006ed0:	f7fe fe01 	bl	8005ad6 <_PreparePacket>
 8006ed4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006ed6:	2280      	movs	r2, #128	; 0x80
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	6938      	ldr	r0, [r7, #16]
 8006edc:	f7fe fdae 	bl	8005a3c <_EncodeStr>
 8006ee0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8006ee2:	220e      	movs	r2, #14
 8006ee4:	68f9      	ldr	r1, [r7, #12]
 8006ee6:	6938      	ldr	r0, [r7, #16]
 8006ee8:	f7fe fee4 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	f383 8811 	msr	BASEPRI, r3
}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	2001444c 	.word	0x2001444c

08006f00 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006f00:	b590      	push	{r4, r7, lr}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006f06:	4b15      	ldr	r3, [pc, #84]	; (8006f5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f08:	6a1b      	ldr	r3, [r3, #32]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d01a      	beq.n	8006f44 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d015      	beq.n	8006f44 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006f18:	4b10      	ldr	r3, [pc, #64]	; (8006f5c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006f1a:	6a1b      	ldr	r3, [r3, #32]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4798      	blx	r3
 8006f20:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f24:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006f26:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f2a:	f04f 0200 	mov.w	r2, #0
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	000a      	movs	r2, r1
 8006f34:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006f36:	4613      	mov	r3, r2
 8006f38:	461a      	mov	r2, r3
 8006f3a:	4621      	mov	r1, r4
 8006f3c:	200d      	movs	r0, #13
 8006f3e:	f7ff fbe7 	bl	8006710 <SEGGER_SYSVIEW_RecordU32x2>
 8006f42:	e006      	b.n	8006f52 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006f44:	4b06      	ldr	r3, [pc, #24]	; (8006f60 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	200c      	movs	r0, #12
 8006f4c:	f7ff fba4 	bl	8006698 <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006f50:	bf00      	nop
 8006f52:	bf00      	nop
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd90      	pop	{r4, r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	2001441c 	.word	0x2001441c
 8006f60:	e0001004 	.word	0xe0001004

08006f64 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b086      	sub	sp, #24
 8006f68:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006f6a:	f3ef 8311 	mrs	r3, BASEPRI
 8006f6e:	f04f 0120 	mov.w	r1, #32
 8006f72:	f381 8811 	msr	BASEPRI, r1
 8006f76:	60fb      	str	r3, [r7, #12]
 8006f78:	4819      	ldr	r0, [pc, #100]	; (8006fe0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006f7a:	f7fe fdac 	bl	8005ad6 <_PreparePacket>
 8006f7e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006f80:	68bb      	ldr	r3, [r7, #8]
 8006f82:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006f84:	4b17      	ldr	r3, [pc, #92]	; (8006fe4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f8c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	617b      	str	r3, [r7, #20]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	613b      	str	r3, [r7, #16]
 8006f96:	e00b      	b.n	8006fb0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	1c59      	adds	r1, r3, #1
 8006fa0:	6179      	str	r1, [r7, #20]
 8006fa2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	09db      	lsrs	r3, r3, #7
 8006fae:	613b      	str	r3, [r7, #16]
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb4:	d8f0      	bhi.n	8006f98 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	617a      	str	r2, [r7, #20]
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006fc6:	2202      	movs	r2, #2
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	68b8      	ldr	r0, [r7, #8]
 8006fcc:	f7fe fe72 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f383 8811 	msr	BASEPRI, r3
}
 8006fd6:	bf00      	nop
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	2001444c 	.word	0x2001444c
 8006fe4:	e000ed04 	.word	0xe000ed04

08006fe8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b082      	sub	sp, #8
 8006fec:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006fee:	f3ef 8311 	mrs	r3, BASEPRI
 8006ff2:	f04f 0120 	mov.w	r1, #32
 8006ff6:	f381 8811 	msr	BASEPRI, r1
 8006ffa:	607b      	str	r3, [r7, #4]
 8006ffc:	4807      	ldr	r0, [pc, #28]	; (800701c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ffe:	f7fe fd6a 	bl	8005ad6 <_PreparePacket>
 8007002:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007004:	2203      	movs	r2, #3
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6838      	ldr	r0, [r7, #0]
 800700a:	f7fe fe53 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f383 8811 	msr	BASEPRI, r3
}
 8007014:	bf00      	nop
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}
 800701c:	2001444c 	.word	0x2001444c

08007020 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007026:	f3ef 8311 	mrs	r3, BASEPRI
 800702a:	f04f 0120 	mov.w	r1, #32
 800702e:	f381 8811 	msr	BASEPRI, r1
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	4807      	ldr	r0, [pc, #28]	; (8007054 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8007036:	f7fe fd4e 	bl	8005ad6 <_PreparePacket>
 800703a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 800703c:	2212      	movs	r2, #18
 800703e:	6839      	ldr	r1, [r7, #0]
 8007040:	6838      	ldr	r0, [r7, #0]
 8007042:	f7fe fe37 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f383 8811 	msr	BASEPRI, r3
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	2001444c 	.word	0x2001444c

08007058 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800705e:	f3ef 8311 	mrs	r3, BASEPRI
 8007062:	f04f 0120 	mov.w	r1, #32
 8007066:	f381 8811 	msr	BASEPRI, r1
 800706a:	607b      	str	r3, [r7, #4]
 800706c:	4807      	ldr	r0, [pc, #28]	; (800708c <SEGGER_SYSVIEW_OnIdle+0x34>)
 800706e:	f7fe fd32 	bl	8005ad6 <_PreparePacket>
 8007072:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8007074:	2211      	movs	r2, #17
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6838      	ldr	r0, [r7, #0]
 800707a:	f7fe fe1b 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f383 8811 	msr	BASEPRI, r3
}
 8007084:	bf00      	nop
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	2001444c 	.word	0x2001444c

08007090 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8007090:	b580      	push	{r7, lr}
 8007092:	b088      	sub	sp, #32
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007098:	f3ef 8311 	mrs	r3, BASEPRI
 800709c:	f04f 0120 	mov.w	r1, #32
 80070a0:	f381 8811 	msr	BASEPRI, r1
 80070a4:	617b      	str	r3, [r7, #20]
 80070a6:	4819      	ldr	r0, [pc, #100]	; (800710c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80070a8:	f7fe fd15 	bl	8005ad6 <_PreparePacket>
 80070ac:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80070b2:	4b17      	ldr	r3, [pc, #92]	; (8007110 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	1ad3      	subs	r3, r2, r3
 80070ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	61fb      	str	r3, [r7, #28]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	61bb      	str	r3, [r7, #24]
 80070c4:	e00b      	b.n	80070de <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	b2da      	uxtb	r2, r3
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	1c59      	adds	r1, r3, #1
 80070ce:	61f9      	str	r1, [r7, #28]
 80070d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070d4:	b2d2      	uxtb	r2, r2
 80070d6:	701a      	strb	r2, [r3, #0]
 80070d8:	69bb      	ldr	r3, [r7, #24]
 80070da:	09db      	lsrs	r3, r3, #7
 80070dc:	61bb      	str	r3, [r7, #24]
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	2b7f      	cmp	r3, #127	; 0x7f
 80070e2:	d8f0      	bhi.n	80070c6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80070e4:	69fb      	ldr	r3, [r7, #28]
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	61fa      	str	r2, [r7, #28]
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	b2d2      	uxtb	r2, r2
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80070f4:	2208      	movs	r2, #8
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	6938      	ldr	r0, [r7, #16]
 80070fa:	f7fe fddb 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	f383 8811 	msr	BASEPRI, r3
}
 8007104:	bf00      	nop
 8007106:	3720      	adds	r7, #32
 8007108:	46bd      	mov	sp, r7
 800710a:	bd80      	pop	{r7, pc}
 800710c:	2001444c 	.word	0x2001444c
 8007110:	2001441c 	.word	0x2001441c

08007114 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007114:	b580      	push	{r7, lr}
 8007116:	b088      	sub	sp, #32
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800711c:	f3ef 8311 	mrs	r3, BASEPRI
 8007120:	f04f 0120 	mov.w	r1, #32
 8007124:	f381 8811 	msr	BASEPRI, r1
 8007128:	617b      	str	r3, [r7, #20]
 800712a:	4819      	ldr	r0, [pc, #100]	; (8007190 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800712c:	f7fe fcd3 	bl	8005ad6 <_PreparePacket>
 8007130:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007136:	4b17      	ldr	r3, [pc, #92]	; (8007194 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8007138:	691b      	ldr	r3, [r3, #16]
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	1ad3      	subs	r3, r2, r3
 800713e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	61fb      	str	r3, [r7, #28]
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e00b      	b.n	8007162 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	b2da      	uxtb	r2, r3
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	1c59      	adds	r1, r3, #1
 8007152:	61f9      	str	r1, [r7, #28]
 8007154:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007158:	b2d2      	uxtb	r2, r2
 800715a:	701a      	strb	r2, [r3, #0]
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	09db      	lsrs	r3, r3, #7
 8007160:	61bb      	str	r3, [r7, #24]
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	2b7f      	cmp	r3, #127	; 0x7f
 8007166:	d8f0      	bhi.n	800714a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8007168:	69fb      	ldr	r3, [r7, #28]
 800716a:	1c5a      	adds	r2, r3, #1
 800716c:	61fa      	str	r2, [r7, #28]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	b2d2      	uxtb	r2, r2
 8007172:	701a      	strb	r2, [r3, #0]
 8007174:	69fb      	ldr	r3, [r7, #28]
 8007176:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8007178:	2204      	movs	r2, #4
 800717a:	68f9      	ldr	r1, [r7, #12]
 800717c:	6938      	ldr	r0, [r7, #16]
 800717e:	f7fe fd99 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8007182:	697b      	ldr	r3, [r7, #20]
 8007184:	f383 8811 	msr	BASEPRI, r3
}
 8007188:	bf00      	nop
 800718a:	3720      	adds	r7, #32
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}
 8007190:	2001444c 	.word	0x2001444c
 8007194:	2001441c 	.word	0x2001441c

08007198 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8007198:	b580      	push	{r7, lr}
 800719a:	b088      	sub	sp, #32
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071a0:	f3ef 8311 	mrs	r3, BASEPRI
 80071a4:	f04f 0120 	mov.w	r1, #32
 80071a8:	f381 8811 	msr	BASEPRI, r1
 80071ac:	617b      	str	r3, [r7, #20]
 80071ae:	4819      	ldr	r0, [pc, #100]	; (8007214 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80071b0:	f7fe fc91 	bl	8005ad6 <_PreparePacket>
 80071b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80071ba:	4b17      	ldr	r3, [pc, #92]	; (8007218 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	1ad3      	subs	r3, r2, r3
 80071c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	61fb      	str	r3, [r7, #28]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	e00b      	b.n	80071e6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	b2da      	uxtb	r2, r3
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	1c59      	adds	r1, r3, #1
 80071d6:	61f9      	str	r1, [r7, #28]
 80071d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80071dc:	b2d2      	uxtb	r2, r2
 80071de:	701a      	strb	r2, [r3, #0]
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	09db      	lsrs	r3, r3, #7
 80071e4:	61bb      	str	r3, [r7, #24]
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	2b7f      	cmp	r3, #127	; 0x7f
 80071ea:	d8f0      	bhi.n	80071ce <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	1c5a      	adds	r2, r3, #1
 80071f0:	61fa      	str	r2, [r7, #28]
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	b2d2      	uxtb	r2, r2
 80071f6:	701a      	strb	r2, [r3, #0]
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80071fc:	2206      	movs	r2, #6
 80071fe:	68f9      	ldr	r1, [r7, #12]
 8007200:	6938      	ldr	r0, [r7, #16]
 8007202:	f7fe fd57 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f383 8811 	msr	BASEPRI, r3
}
 800720c:	bf00      	nop
 800720e:	3720      	adds	r7, #32
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	2001444c 	.word	0x2001444c
 8007218:	2001441c 	.word	0x2001441c

0800721c <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b08a      	sub	sp, #40	; 0x28
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8007226:	f3ef 8311 	mrs	r3, BASEPRI
 800722a:	f04f 0120 	mov.w	r1, #32
 800722e:	f381 8811 	msr	BASEPRI, r1
 8007232:	617b      	str	r3, [r7, #20]
 8007234:	4827      	ldr	r0, [pc, #156]	; (80072d4 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 8007236:	f7fe fc4e 	bl	8005ad6 <_PreparePacket>
 800723a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007240:	4b25      	ldr	r3, [pc, #148]	; (80072d8 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 8007242:	691b      	ldr	r3, [r3, #16]
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	627b      	str	r3, [r7, #36]	; 0x24
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	623b      	str	r3, [r7, #32]
 8007252:	e00b      	b.n	800726c <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 8007254:	6a3b      	ldr	r3, [r7, #32]
 8007256:	b2da      	uxtb	r2, r3
 8007258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800725a:	1c59      	adds	r1, r3, #1
 800725c:	6279      	str	r1, [r7, #36]	; 0x24
 800725e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	09db      	lsrs	r3, r3, #7
 800726a:	623b      	str	r3, [r7, #32]
 800726c:	6a3b      	ldr	r3, [r7, #32]
 800726e:	2b7f      	cmp	r3, #127	; 0x7f
 8007270:	d8f0      	bhi.n	8007254 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	1c5a      	adds	r2, r3, #1
 8007276:	627a      	str	r2, [r7, #36]	; 0x24
 8007278:	6a3a      	ldr	r2, [r7, #32]
 800727a:	b2d2      	uxtb	r2, r2
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007280:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	61fb      	str	r3, [r7, #28]
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	61bb      	str	r3, [r7, #24]
 800728a:	e00b      	b.n	80072a4 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	1c59      	adds	r1, r3, #1
 8007294:	61f9      	str	r1, [r7, #28]
 8007296:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800729a:	b2d2      	uxtb	r2, r2
 800729c:	701a      	strb	r2, [r3, #0]
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	09db      	lsrs	r3, r3, #7
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	69bb      	ldr	r3, [r7, #24]
 80072a6:	2b7f      	cmp	r3, #127	; 0x7f
 80072a8:	d8f0      	bhi.n	800728c <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	1c5a      	adds	r2, r3, #1
 80072ae:	61fa      	str	r2, [r7, #28]
 80072b0:	69ba      	ldr	r2, [r7, #24]
 80072b2:	b2d2      	uxtb	r2, r2
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80072ba:	2207      	movs	r2, #7
 80072bc:	68f9      	ldr	r1, [r7, #12]
 80072be:	6938      	ldr	r0, [r7, #16]
 80072c0:	f7fe fcf8 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	f383 8811 	msr	BASEPRI, r3
}
 80072ca:	bf00      	nop
 80072cc:	3728      	adds	r7, #40	; 0x28
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	2001444c 	.word	0x2001444c
 80072d8:	2001441c 	.word	0x2001441c

080072dc <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80072e4:	4b04      	ldr	r3, [pc, #16]	; (80072f8 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80072e6:	691b      	ldr	r3, [r3, #16]
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	1ad3      	subs	r3, r2, r3
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	2001441c 	.word	0x2001441c

080072fc <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08c      	sub	sp, #48	; 0x30
 8007300:	af00      	add	r7, sp, #0
 8007302:	4603      	mov	r3, r0
 8007304:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8007306:	4b3b      	ldr	r3, [pc, #236]	; (80073f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d06d      	beq.n	80073ea <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800730e:	4b39      	ldr	r3, [pc, #228]	; (80073f4 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8007314:	2300      	movs	r3, #0
 8007316:	62bb      	str	r3, [r7, #40]	; 0x28
 8007318:	e008      	b.n	800732c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	691b      	ldr	r3, [r3, #16]
 800731e:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8007320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007322:	2b00      	cmp	r3, #0
 8007324:	d007      	beq.n	8007336 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8007326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007328:	3301      	adds	r3, #1
 800732a:	62bb      	str	r3, [r7, #40]	; 0x28
 800732c:	79fb      	ldrb	r3, [r7, #7]
 800732e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007330:	429a      	cmp	r2, r3
 8007332:	d3f2      	bcc.n	800731a <SEGGER_SYSVIEW_SendModule+0x1e>
 8007334:	e000      	b.n	8007338 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8007336:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8007338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733a:	2b00      	cmp	r3, #0
 800733c:	d055      	beq.n	80073ea <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800733e:	f3ef 8311 	mrs	r3, BASEPRI
 8007342:	f04f 0120 	mov.w	r1, #32
 8007346:	f381 8811 	msr	BASEPRI, r1
 800734a:	617b      	str	r3, [r7, #20]
 800734c:	482a      	ldr	r0, [pc, #168]	; (80073f8 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800734e:	f7fe fbc2 	bl	8005ad6 <_PreparePacket>
 8007352:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	627b      	str	r3, [r7, #36]	; 0x24
 800735c:	79fb      	ldrb	r3, [r7, #7]
 800735e:	623b      	str	r3, [r7, #32]
 8007360:	e00b      	b.n	800737a <SEGGER_SYSVIEW_SendModule+0x7e>
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	b2da      	uxtb	r2, r3
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	1c59      	adds	r1, r3, #1
 800736a:	6279      	str	r1, [r7, #36]	; 0x24
 800736c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007370:	b2d2      	uxtb	r2, r2
 8007372:	701a      	strb	r2, [r3, #0]
 8007374:	6a3b      	ldr	r3, [r7, #32]
 8007376:	09db      	lsrs	r3, r3, #7
 8007378:	623b      	str	r3, [r7, #32]
 800737a:	6a3b      	ldr	r3, [r7, #32]
 800737c:	2b7f      	cmp	r3, #127	; 0x7f
 800737e:	d8f0      	bhi.n	8007362 <SEGGER_SYSVIEW_SendModule+0x66>
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	627a      	str	r2, [r7, #36]	; 0x24
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	b2d2      	uxtb	r2, r2
 800738a:	701a      	strb	r2, [r3, #0]
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	61fb      	str	r3, [r7, #28]
 8007394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007396:	689b      	ldr	r3, [r3, #8]
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	e00b      	b.n	80073b4 <SEGGER_SYSVIEW_SendModule+0xb8>
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	1c59      	adds	r1, r3, #1
 80073a4:	61f9      	str	r1, [r7, #28]
 80073a6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	09db      	lsrs	r3, r3, #7
 80073b2:	61bb      	str	r3, [r7, #24]
 80073b4:	69bb      	ldr	r3, [r7, #24]
 80073b6:	2b7f      	cmp	r3, #127	; 0x7f
 80073b8:	d8f0      	bhi.n	800739c <SEGGER_SYSVIEW_SendModule+0xa0>
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	61fa      	str	r2, [r7, #28]
 80073c0:	69ba      	ldr	r2, [r7, #24]
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80073ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2280      	movs	r2, #128	; 0x80
 80073d0:	4619      	mov	r1, r3
 80073d2:	68f8      	ldr	r0, [r7, #12]
 80073d4:	f7fe fb32 	bl	8005a3c <_EncodeStr>
 80073d8:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80073da:	2216      	movs	r2, #22
 80073dc:	68f9      	ldr	r1, [r7, #12]
 80073de:	6938      	ldr	r0, [r7, #16]
 80073e0:	f7fe fc68 	bl	8005cb4 <_SendPacket>
      RECORD_END();
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 80073ea:	bf00      	nop
 80073ec:	3730      	adds	r7, #48	; 0x30
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}
 80073f2:	bf00      	nop
 80073f4:	20014444 	.word	0x20014444
 80073f8:	2001444c 	.word	0x2001444c

080073fc <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b082      	sub	sp, #8
 8007400:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8007402:	4b0c      	ldr	r3, [pc, #48]	; (8007434 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00f      	beq.n	800742a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800740a:	4b0a      	ldr	r3, [pc, #40]	; (8007434 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	68db      	ldr	r3, [r3, #12]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68db      	ldr	r3, [r3, #12]
 800741c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1f2      	bne.n	8007410 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800742a:	bf00      	nop
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	20014444 	.word	0x20014444

08007438 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8007438:	b580      	push	{r7, lr}
 800743a:	b086      	sub	sp, #24
 800743c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800743e:	f3ef 8311 	mrs	r3, BASEPRI
 8007442:	f04f 0120 	mov.w	r1, #32
 8007446:	f381 8811 	msr	BASEPRI, r1
 800744a:	60fb      	str	r3, [r7, #12]
 800744c:	4817      	ldr	r0, [pc, #92]	; (80074ac <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800744e:	f7fe fb42 	bl	8005ad6 <_PreparePacket>
 8007452:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	4b14      	ldr	r3, [pc, #80]	; (80074b0 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	613b      	str	r3, [r7, #16]
 8007462:	e00b      	b.n	800747c <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	b2da      	uxtb	r2, r3
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	1c59      	adds	r1, r3, #1
 800746c:	6179      	str	r1, [r7, #20]
 800746e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007472:	b2d2      	uxtb	r2, r2
 8007474:	701a      	strb	r2, [r3, #0]
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	09db      	lsrs	r3, r3, #7
 800747a:	613b      	str	r3, [r7, #16]
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	2b7f      	cmp	r3, #127	; 0x7f
 8007480:	d8f0      	bhi.n	8007464 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	1c5a      	adds	r2, r3, #1
 8007486:	617a      	str	r2, [r7, #20]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007492:	221b      	movs	r2, #27
 8007494:	6879      	ldr	r1, [r7, #4]
 8007496:	68b8      	ldr	r0, [r7, #8]
 8007498:	f7fe fc0c 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	f383 8811 	msr	BASEPRI, r3
}
 80074a2:	bf00      	nop
 80074a4:	3718      	adds	r7, #24
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	2001444c 	.word	0x2001444c
 80074b0:	20014448 	.word	0x20014448

080074b4 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 80074b4:	b40f      	push	{r0, r1, r2, r3}
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b082      	sub	sp, #8
 80074ba:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 80074bc:	f107 0314 	add.w	r3, r7, #20
 80074c0:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 80074c2:	1d3b      	adds	r3, r7, #4
 80074c4:	461a      	mov	r2, r3
 80074c6:	2100      	movs	r1, #0
 80074c8:	6938      	ldr	r0, [r7, #16]
 80074ca:	f7fe fe7b 	bl	80061c4 <_VPrintTarget>
  va_end(ParamList);
}
 80074ce:	bf00      	nop
 80074d0:	3708      	adds	r7, #8
 80074d2:	46bd      	mov	sp, r7
 80074d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074d8:	b004      	add	sp, #16
 80074da:	4770      	bx	lr

080074dc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80074dc:	b580      	push	{r7, lr}
 80074de:	b08a      	sub	sp, #40	; 0x28
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074e4:	f3ef 8311 	mrs	r3, BASEPRI
 80074e8:	f04f 0120 	mov.w	r1, #32
 80074ec:	f381 8811 	msr	BASEPRI, r1
 80074f0:	617b      	str	r3, [r7, #20]
 80074f2:	4827      	ldr	r0, [pc, #156]	; (8007590 <SEGGER_SYSVIEW_Warn+0xb4>)
 80074f4:	f7fe faef 	bl	8005ad6 <_PreparePacket>
 80074f8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074fa:	2280      	movs	r2, #128	; 0x80
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	6938      	ldr	r0, [r7, #16]
 8007500:	f7fe fa9c 	bl	8005a3c <_EncodeStr>
 8007504:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	627b      	str	r3, [r7, #36]	; 0x24
 800750a:	2301      	movs	r3, #1
 800750c:	623b      	str	r3, [r7, #32]
 800750e:	e00b      	b.n	8007528 <SEGGER_SYSVIEW_Warn+0x4c>
 8007510:	6a3b      	ldr	r3, [r7, #32]
 8007512:	b2da      	uxtb	r2, r3
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	6279      	str	r1, [r7, #36]	; 0x24
 800751a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800751e:	b2d2      	uxtb	r2, r2
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	09db      	lsrs	r3, r3, #7
 8007526:	623b      	str	r3, [r7, #32]
 8007528:	6a3b      	ldr	r3, [r7, #32]
 800752a:	2b7f      	cmp	r3, #127	; 0x7f
 800752c:	d8f0      	bhi.n	8007510 <SEGGER_SYSVIEW_Warn+0x34>
 800752e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	627a      	str	r2, [r7, #36]	; 0x24
 8007534:	6a3a      	ldr	r2, [r7, #32]
 8007536:	b2d2      	uxtb	r2, r2
 8007538:	701a      	strb	r2, [r3, #0]
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	61fb      	str	r3, [r7, #28]
 8007542:	2300      	movs	r3, #0
 8007544:	61bb      	str	r3, [r7, #24]
 8007546:	e00b      	b.n	8007560 <SEGGER_SYSVIEW_Warn+0x84>
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	b2da      	uxtb	r2, r3
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	1c59      	adds	r1, r3, #1
 8007550:	61f9      	str	r1, [r7, #28]
 8007552:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007556:	b2d2      	uxtb	r2, r2
 8007558:	701a      	strb	r2, [r3, #0]
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	09db      	lsrs	r3, r3, #7
 800755e:	61bb      	str	r3, [r7, #24]
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	2b7f      	cmp	r3, #127	; 0x7f
 8007564:	d8f0      	bhi.n	8007548 <SEGGER_SYSVIEW_Warn+0x6c>
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	61fa      	str	r2, [r7, #28]
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	b2d2      	uxtb	r2, r2
 8007570:	701a      	strb	r2, [r3, #0]
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8007576:	221a      	movs	r2, #26
 8007578:	68f9      	ldr	r1, [r7, #12]
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f7fe fb9a 	bl	8005cb4 <_SendPacket>
  RECORD_END();
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f383 8811 	msr	BASEPRI, r3
}
 8007586:	bf00      	nop
 8007588:	3728      	adds	r7, #40	; 0x28
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	2001444c 	.word	0x2001444c

08007594 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007594:	b580      	push	{r7, lr}
 8007596:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8007598:	4b13      	ldr	r3, [pc, #76]	; (80075e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 800759a:	7e1b      	ldrb	r3, [r3, #24]
 800759c:	4619      	mov	r1, r3
 800759e:	4a13      	ldr	r2, [pc, #76]	; (80075ec <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075a0:	460b      	mov	r3, r1
 80075a2:	005b      	lsls	r3, r3, #1
 80075a4:	440b      	add	r3, r1
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4413      	add	r3, r2
 80075aa:	336c      	adds	r3, #108	; 0x6c
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075b0:	7e1b      	ldrb	r3, [r3, #24]
 80075b2:	4618      	mov	r0, r3
 80075b4:	490d      	ldr	r1, [pc, #52]	; (80075ec <SEGGER_SYSVIEW_IsStarted+0x58>)
 80075b6:	4603      	mov	r3, r0
 80075b8:	005b      	lsls	r3, r3, #1
 80075ba:	4403      	add	r3, r0
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	440b      	add	r3, r1
 80075c0:	3370      	adds	r3, #112	; 0x70
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d00b      	beq.n	80075e0 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80075c8:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075ca:	789b      	ldrb	r3, [r3, #2]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d107      	bne.n	80075e0 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80075d0:	4b05      	ldr	r3, [pc, #20]	; (80075e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075d2:	2201      	movs	r2, #1
 80075d4:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80075d6:	f7fe fa8b 	bl	8005af0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80075da:	4b03      	ldr	r3, [pc, #12]	; (80075e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075dc:	2200      	movs	r2, #0
 80075de:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 80075e0:	4b01      	ldr	r3, [pc, #4]	; (80075e8 <SEGGER_SYSVIEW_IsStarted+0x54>)
 80075e2:	781b      	ldrb	r3, [r3, #0]
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	2001441c 	.word	0x2001441c
 80075ec:	20012f5c 	.word	0x20012f5c

080075f0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80075f4:	4803      	ldr	r0, [pc, #12]	; (8007604 <_cbSendSystemDesc+0x14>)
 80075f6:	f7ff fc5f 	bl	8006eb8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80075fa:	4803      	ldr	r0, [pc, #12]	; (8007608 <_cbSendSystemDesc+0x18>)
 80075fc:	f7ff fc5c 	bl	8006eb8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8007600:	bf00      	nop
 8007602:	bd80      	pop	{r7, pc}
 8007604:	0800867c 	.word	0x0800867c
 8007608:	080086b8 	.word	0x080086b8

0800760c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800760c:	b580      	push	{r7, lr}
 800760e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8007610:	4b06      	ldr	r3, [pc, #24]	; (800762c <SEGGER_SYSVIEW_Conf+0x20>)
 8007612:	6818      	ldr	r0, [r3, #0]
 8007614:	4b05      	ldr	r3, [pc, #20]	; (800762c <SEGGER_SYSVIEW_Conf+0x20>)
 8007616:	6819      	ldr	r1, [r3, #0]
 8007618:	4b05      	ldr	r3, [pc, #20]	; (8007630 <SEGGER_SYSVIEW_Conf+0x24>)
 800761a:	4a06      	ldr	r2, [pc, #24]	; (8007634 <SEGGER_SYSVIEW_Conf+0x28>)
 800761c:	f7fe ffca 	bl	80065b4 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8007620:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8007624:	f7ff f80a 	bl	800663c <SEGGER_SYSVIEW_SetRAMBase>
}
 8007628:	bf00      	nop
 800762a:	bd80      	pop	{r7, pc}
 800762c:	20000000 	.word	0x20000000
 8007630:	080075f1 	.word	0x080075f1
 8007634:	080086e0 	.word	0x080086e0

08007638 <std>:
 8007638:	2300      	movs	r3, #0
 800763a:	b510      	push	{r4, lr}
 800763c:	4604      	mov	r4, r0
 800763e:	e9c0 3300 	strd	r3, r3, [r0]
 8007642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007646:	6083      	str	r3, [r0, #8]
 8007648:	8181      	strh	r1, [r0, #12]
 800764a:	6643      	str	r3, [r0, #100]	; 0x64
 800764c:	81c2      	strh	r2, [r0, #14]
 800764e:	6183      	str	r3, [r0, #24]
 8007650:	4619      	mov	r1, r3
 8007652:	2208      	movs	r2, #8
 8007654:	305c      	adds	r0, #92	; 0x5c
 8007656:	f000 f904 	bl	8007862 <memset>
 800765a:	4b05      	ldr	r3, [pc, #20]	; (8007670 <std+0x38>)
 800765c:	6263      	str	r3, [r4, #36]	; 0x24
 800765e:	4b05      	ldr	r3, [pc, #20]	; (8007674 <std+0x3c>)
 8007660:	62a3      	str	r3, [r4, #40]	; 0x28
 8007662:	4b05      	ldr	r3, [pc, #20]	; (8007678 <std+0x40>)
 8007664:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007666:	4b05      	ldr	r3, [pc, #20]	; (800767c <std+0x44>)
 8007668:	6224      	str	r4, [r4, #32]
 800766a:	6323      	str	r3, [r4, #48]	; 0x30
 800766c:	bd10      	pop	{r4, pc}
 800766e:	bf00      	nop
 8007670:	080077bd 	.word	0x080077bd
 8007674:	080077df 	.word	0x080077df
 8007678:	08007817 	.word	0x08007817
 800767c:	0800783b 	.word	0x0800783b

08007680 <stdio_exit_handler>:
 8007680:	4a02      	ldr	r2, [pc, #8]	; (800768c <stdio_exit_handler+0xc>)
 8007682:	4903      	ldr	r1, [pc, #12]	; (8007690 <stdio_exit_handler+0x10>)
 8007684:	4803      	ldr	r0, [pc, #12]	; (8007694 <stdio_exit_handler+0x14>)
 8007686:	f000 b869 	b.w	800775c <_fwalk_sglue>
 800768a:	bf00      	nop
 800768c:	2000001c 	.word	0x2000001c
 8007690:	0800820d 	.word	0x0800820d
 8007694:	20000028 	.word	0x20000028

08007698 <cleanup_stdio>:
 8007698:	6841      	ldr	r1, [r0, #4]
 800769a:	4b0c      	ldr	r3, [pc, #48]	; (80076cc <cleanup_stdio+0x34>)
 800769c:	4299      	cmp	r1, r3
 800769e:	b510      	push	{r4, lr}
 80076a0:	4604      	mov	r4, r0
 80076a2:	d001      	beq.n	80076a8 <cleanup_stdio+0x10>
 80076a4:	f000 fdb2 	bl	800820c <_fflush_r>
 80076a8:	68a1      	ldr	r1, [r4, #8]
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <cleanup_stdio+0x38>)
 80076ac:	4299      	cmp	r1, r3
 80076ae:	d002      	beq.n	80076b6 <cleanup_stdio+0x1e>
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 fdab 	bl	800820c <_fflush_r>
 80076b6:	68e1      	ldr	r1, [r4, #12]
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <cleanup_stdio+0x3c>)
 80076ba:	4299      	cmp	r1, r3
 80076bc:	d004      	beq.n	80076c8 <cleanup_stdio+0x30>
 80076be:	4620      	mov	r0, r4
 80076c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076c4:	f000 bda2 	b.w	800820c <_fflush_r>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	bf00      	nop
 80076cc:	20014530 	.word	0x20014530
 80076d0:	20014598 	.word	0x20014598
 80076d4:	20014600 	.word	0x20014600

080076d8 <global_stdio_init.part.0>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4b0b      	ldr	r3, [pc, #44]	; (8007708 <global_stdio_init.part.0+0x30>)
 80076dc:	4c0b      	ldr	r4, [pc, #44]	; (800770c <global_stdio_init.part.0+0x34>)
 80076de:	4a0c      	ldr	r2, [pc, #48]	; (8007710 <global_stdio_init.part.0+0x38>)
 80076e0:	601a      	str	r2, [r3, #0]
 80076e2:	4620      	mov	r0, r4
 80076e4:	2200      	movs	r2, #0
 80076e6:	2104      	movs	r1, #4
 80076e8:	f7ff ffa6 	bl	8007638 <std>
 80076ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80076f0:	2201      	movs	r2, #1
 80076f2:	2109      	movs	r1, #9
 80076f4:	f7ff ffa0 	bl	8007638 <std>
 80076f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80076fc:	2202      	movs	r2, #2
 80076fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007702:	2112      	movs	r1, #18
 8007704:	f7ff bf98 	b.w	8007638 <std>
 8007708:	20014668 	.word	0x20014668
 800770c:	20014530 	.word	0x20014530
 8007710:	08007681 	.word	0x08007681

08007714 <__sfp_lock_acquire>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__sfp_lock_acquire+0x8>)
 8007716:	f000 b917 	b.w	8007948 <__retarget_lock_acquire_recursive>
 800771a:	bf00      	nop
 800771c:	20014671 	.word	0x20014671

08007720 <__sfp_lock_release>:
 8007720:	4801      	ldr	r0, [pc, #4]	; (8007728 <__sfp_lock_release+0x8>)
 8007722:	f000 b912 	b.w	800794a <__retarget_lock_release_recursive>
 8007726:	bf00      	nop
 8007728:	20014671 	.word	0x20014671

0800772c <__sinit>:
 800772c:	b510      	push	{r4, lr}
 800772e:	4604      	mov	r4, r0
 8007730:	f7ff fff0 	bl	8007714 <__sfp_lock_acquire>
 8007734:	6a23      	ldr	r3, [r4, #32]
 8007736:	b11b      	cbz	r3, 8007740 <__sinit+0x14>
 8007738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800773c:	f7ff bff0 	b.w	8007720 <__sfp_lock_release>
 8007740:	4b04      	ldr	r3, [pc, #16]	; (8007754 <__sinit+0x28>)
 8007742:	6223      	str	r3, [r4, #32]
 8007744:	4b04      	ldr	r3, [pc, #16]	; (8007758 <__sinit+0x2c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f5      	bne.n	8007738 <__sinit+0xc>
 800774c:	f7ff ffc4 	bl	80076d8 <global_stdio_init.part.0>
 8007750:	e7f2      	b.n	8007738 <__sinit+0xc>
 8007752:	bf00      	nop
 8007754:	08007699 	.word	0x08007699
 8007758:	20014668 	.word	0x20014668

0800775c <_fwalk_sglue>:
 800775c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007760:	4607      	mov	r7, r0
 8007762:	4688      	mov	r8, r1
 8007764:	4614      	mov	r4, r2
 8007766:	2600      	movs	r6, #0
 8007768:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800776c:	f1b9 0901 	subs.w	r9, r9, #1
 8007770:	d505      	bpl.n	800777e <_fwalk_sglue+0x22>
 8007772:	6824      	ldr	r4, [r4, #0]
 8007774:	2c00      	cmp	r4, #0
 8007776:	d1f7      	bne.n	8007768 <_fwalk_sglue+0xc>
 8007778:	4630      	mov	r0, r6
 800777a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800777e:	89ab      	ldrh	r3, [r5, #12]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d907      	bls.n	8007794 <_fwalk_sglue+0x38>
 8007784:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007788:	3301      	adds	r3, #1
 800778a:	d003      	beq.n	8007794 <_fwalk_sglue+0x38>
 800778c:	4629      	mov	r1, r5
 800778e:	4638      	mov	r0, r7
 8007790:	47c0      	blx	r8
 8007792:	4306      	orrs	r6, r0
 8007794:	3568      	adds	r5, #104	; 0x68
 8007796:	e7e9      	b.n	800776c <_fwalk_sglue+0x10>

08007798 <iprintf>:
 8007798:	b40f      	push	{r0, r1, r2, r3}
 800779a:	b507      	push	{r0, r1, r2, lr}
 800779c:	4906      	ldr	r1, [pc, #24]	; (80077b8 <iprintf+0x20>)
 800779e:	ab04      	add	r3, sp, #16
 80077a0:	6808      	ldr	r0, [r1, #0]
 80077a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80077a6:	6881      	ldr	r1, [r0, #8]
 80077a8:	9301      	str	r3, [sp, #4]
 80077aa:	f000 f9ff 	bl	8007bac <_vfiprintf_r>
 80077ae:	b003      	add	sp, #12
 80077b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80077b4:	b004      	add	sp, #16
 80077b6:	4770      	bx	lr
 80077b8:	20000074 	.word	0x20000074

080077bc <__sread>:
 80077bc:	b510      	push	{r4, lr}
 80077be:	460c      	mov	r4, r1
 80077c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c4:	f000 f878 	bl	80078b8 <_read_r>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	bfab      	itete	ge
 80077cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ce:	89a3      	ldrhlt	r3, [r4, #12]
 80077d0:	181b      	addge	r3, r3, r0
 80077d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077d6:	bfac      	ite	ge
 80077d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80077da:	81a3      	strhlt	r3, [r4, #12]
 80077dc:	bd10      	pop	{r4, pc}

080077de <__swrite>:
 80077de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077e2:	461f      	mov	r7, r3
 80077e4:	898b      	ldrh	r3, [r1, #12]
 80077e6:	05db      	lsls	r3, r3, #23
 80077e8:	4605      	mov	r5, r0
 80077ea:	460c      	mov	r4, r1
 80077ec:	4616      	mov	r6, r2
 80077ee:	d505      	bpl.n	80077fc <__swrite+0x1e>
 80077f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077f4:	2302      	movs	r3, #2
 80077f6:	2200      	movs	r2, #0
 80077f8:	f000 f84c 	bl	8007894 <_lseek_r>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007802:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	4632      	mov	r2, r6
 800780a:	463b      	mov	r3, r7
 800780c:	4628      	mov	r0, r5
 800780e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007812:	f000 b863 	b.w	80078dc <_write_r>

08007816 <__sseek>:
 8007816:	b510      	push	{r4, lr}
 8007818:	460c      	mov	r4, r1
 800781a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781e:	f000 f839 	bl	8007894 <_lseek_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	89a3      	ldrh	r3, [r4, #12]
 8007826:	bf15      	itete	ne
 8007828:	6560      	strne	r0, [r4, #84]	; 0x54
 800782a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800782e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007832:	81a3      	strheq	r3, [r4, #12]
 8007834:	bf18      	it	ne
 8007836:	81a3      	strhne	r3, [r4, #12]
 8007838:	bd10      	pop	{r4, pc}

0800783a <__sclose>:
 800783a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800783e:	f000 b819 	b.w	8007874 <_close_r>

08007842 <memcmp>:
 8007842:	b510      	push	{r4, lr}
 8007844:	3901      	subs	r1, #1
 8007846:	4402      	add	r2, r0
 8007848:	4290      	cmp	r0, r2
 800784a:	d101      	bne.n	8007850 <memcmp+0xe>
 800784c:	2000      	movs	r0, #0
 800784e:	e005      	b.n	800785c <memcmp+0x1a>
 8007850:	7803      	ldrb	r3, [r0, #0]
 8007852:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007856:	42a3      	cmp	r3, r4
 8007858:	d001      	beq.n	800785e <memcmp+0x1c>
 800785a:	1b18      	subs	r0, r3, r4
 800785c:	bd10      	pop	{r4, pc}
 800785e:	3001      	adds	r0, #1
 8007860:	e7f2      	b.n	8007848 <memcmp+0x6>

08007862 <memset>:
 8007862:	4402      	add	r2, r0
 8007864:	4603      	mov	r3, r0
 8007866:	4293      	cmp	r3, r2
 8007868:	d100      	bne.n	800786c <memset+0xa>
 800786a:	4770      	bx	lr
 800786c:	f803 1b01 	strb.w	r1, [r3], #1
 8007870:	e7f9      	b.n	8007866 <memset+0x4>
	...

08007874 <_close_r>:
 8007874:	b538      	push	{r3, r4, r5, lr}
 8007876:	4d06      	ldr	r5, [pc, #24]	; (8007890 <_close_r+0x1c>)
 8007878:	2300      	movs	r3, #0
 800787a:	4604      	mov	r4, r0
 800787c:	4608      	mov	r0, r1
 800787e:	602b      	str	r3, [r5, #0]
 8007880:	f7f9 fb19 	bl	8000eb6 <_close>
 8007884:	1c43      	adds	r3, r0, #1
 8007886:	d102      	bne.n	800788e <_close_r+0x1a>
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	b103      	cbz	r3, 800788e <_close_r+0x1a>
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	bd38      	pop	{r3, r4, r5, pc}
 8007890:	2001466c 	.word	0x2001466c

08007894 <_lseek_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d07      	ldr	r5, [pc, #28]	; (80078b4 <_lseek_r+0x20>)
 8007898:	4604      	mov	r4, r0
 800789a:	4608      	mov	r0, r1
 800789c:	4611      	mov	r1, r2
 800789e:	2200      	movs	r2, #0
 80078a0:	602a      	str	r2, [r5, #0]
 80078a2:	461a      	mov	r2, r3
 80078a4:	f7f9 fb2e 	bl	8000f04 <_lseek>
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	d102      	bne.n	80078b2 <_lseek_r+0x1e>
 80078ac:	682b      	ldr	r3, [r5, #0]
 80078ae:	b103      	cbz	r3, 80078b2 <_lseek_r+0x1e>
 80078b0:	6023      	str	r3, [r4, #0]
 80078b2:	bd38      	pop	{r3, r4, r5, pc}
 80078b4:	2001466c 	.word	0x2001466c

080078b8 <_read_r>:
 80078b8:	b538      	push	{r3, r4, r5, lr}
 80078ba:	4d07      	ldr	r5, [pc, #28]	; (80078d8 <_read_r+0x20>)
 80078bc:	4604      	mov	r4, r0
 80078be:	4608      	mov	r0, r1
 80078c0:	4611      	mov	r1, r2
 80078c2:	2200      	movs	r2, #0
 80078c4:	602a      	str	r2, [r5, #0]
 80078c6:	461a      	mov	r2, r3
 80078c8:	f7f9 fabc 	bl	8000e44 <_read>
 80078cc:	1c43      	adds	r3, r0, #1
 80078ce:	d102      	bne.n	80078d6 <_read_r+0x1e>
 80078d0:	682b      	ldr	r3, [r5, #0]
 80078d2:	b103      	cbz	r3, 80078d6 <_read_r+0x1e>
 80078d4:	6023      	str	r3, [r4, #0]
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	2001466c 	.word	0x2001466c

080078dc <_write_r>:
 80078dc:	b538      	push	{r3, r4, r5, lr}
 80078de:	4d07      	ldr	r5, [pc, #28]	; (80078fc <_write_r+0x20>)
 80078e0:	4604      	mov	r4, r0
 80078e2:	4608      	mov	r0, r1
 80078e4:	4611      	mov	r1, r2
 80078e6:	2200      	movs	r2, #0
 80078e8:	602a      	str	r2, [r5, #0]
 80078ea:	461a      	mov	r2, r3
 80078ec:	f7f9 fac7 	bl	8000e7e <_write>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_write_r+0x1e>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_write_r+0x1e>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	2001466c 	.word	0x2001466c

08007900 <__libc_init_array>:
 8007900:	b570      	push	{r4, r5, r6, lr}
 8007902:	4d0d      	ldr	r5, [pc, #52]	; (8007938 <__libc_init_array+0x38>)
 8007904:	4c0d      	ldr	r4, [pc, #52]	; (800793c <__libc_init_array+0x3c>)
 8007906:	1b64      	subs	r4, r4, r5
 8007908:	10a4      	asrs	r4, r4, #2
 800790a:	2600      	movs	r6, #0
 800790c:	42a6      	cmp	r6, r4
 800790e:	d109      	bne.n	8007924 <__libc_init_array+0x24>
 8007910:	4d0b      	ldr	r5, [pc, #44]	; (8007940 <__libc_init_array+0x40>)
 8007912:	4c0c      	ldr	r4, [pc, #48]	; (8007944 <__libc_init_array+0x44>)
 8007914:	f000 fdda 	bl	80084cc <_init>
 8007918:	1b64      	subs	r4, r4, r5
 800791a:	10a4      	asrs	r4, r4, #2
 800791c:	2600      	movs	r6, #0
 800791e:	42a6      	cmp	r6, r4
 8007920:	d105      	bne.n	800792e <__libc_init_array+0x2e>
 8007922:	bd70      	pop	{r4, r5, r6, pc}
 8007924:	f855 3b04 	ldr.w	r3, [r5], #4
 8007928:	4798      	blx	r3
 800792a:	3601      	adds	r6, #1
 800792c:	e7ee      	b.n	800790c <__libc_init_array+0xc>
 800792e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007932:	4798      	blx	r3
 8007934:	3601      	adds	r6, #1
 8007936:	e7f2      	b.n	800791e <__libc_init_array+0x1e>
 8007938:	08008744 	.word	0x08008744
 800793c:	08008744 	.word	0x08008744
 8007940:	08008744 	.word	0x08008744
 8007944:	08008748 	.word	0x08008748

08007948 <__retarget_lock_acquire_recursive>:
 8007948:	4770      	bx	lr

0800794a <__retarget_lock_release_recursive>:
 800794a:	4770      	bx	lr

0800794c <memcpy>:
 800794c:	440a      	add	r2, r1
 800794e:	4291      	cmp	r1, r2
 8007950:	f100 33ff 	add.w	r3, r0, #4294967295
 8007954:	d100      	bne.n	8007958 <memcpy+0xc>
 8007956:	4770      	bx	lr
 8007958:	b510      	push	{r4, lr}
 800795a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800795e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007962:	4291      	cmp	r1, r2
 8007964:	d1f9      	bne.n	800795a <memcpy+0xe>
 8007966:	bd10      	pop	{r4, pc}

08007968 <_free_r>:
 8007968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800796a:	2900      	cmp	r1, #0
 800796c:	d044      	beq.n	80079f8 <_free_r+0x90>
 800796e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007972:	9001      	str	r0, [sp, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	f1a1 0404 	sub.w	r4, r1, #4
 800797a:	bfb8      	it	lt
 800797c:	18e4      	addlt	r4, r4, r3
 800797e:	f000 f8df 	bl	8007b40 <__malloc_lock>
 8007982:	4a1e      	ldr	r2, [pc, #120]	; (80079fc <_free_r+0x94>)
 8007984:	9801      	ldr	r0, [sp, #4]
 8007986:	6813      	ldr	r3, [r2, #0]
 8007988:	b933      	cbnz	r3, 8007998 <_free_r+0x30>
 800798a:	6063      	str	r3, [r4, #4]
 800798c:	6014      	str	r4, [r2, #0]
 800798e:	b003      	add	sp, #12
 8007990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007994:	f000 b8da 	b.w	8007b4c <__malloc_unlock>
 8007998:	42a3      	cmp	r3, r4
 800799a:	d908      	bls.n	80079ae <_free_r+0x46>
 800799c:	6825      	ldr	r5, [r4, #0]
 800799e:	1961      	adds	r1, r4, r5
 80079a0:	428b      	cmp	r3, r1
 80079a2:	bf01      	itttt	eq
 80079a4:	6819      	ldreq	r1, [r3, #0]
 80079a6:	685b      	ldreq	r3, [r3, #4]
 80079a8:	1949      	addeq	r1, r1, r5
 80079aa:	6021      	streq	r1, [r4, #0]
 80079ac:	e7ed      	b.n	800798a <_free_r+0x22>
 80079ae:	461a      	mov	r2, r3
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	b10b      	cbz	r3, 80079b8 <_free_r+0x50>
 80079b4:	42a3      	cmp	r3, r4
 80079b6:	d9fa      	bls.n	80079ae <_free_r+0x46>
 80079b8:	6811      	ldr	r1, [r2, #0]
 80079ba:	1855      	adds	r5, r2, r1
 80079bc:	42a5      	cmp	r5, r4
 80079be:	d10b      	bne.n	80079d8 <_free_r+0x70>
 80079c0:	6824      	ldr	r4, [r4, #0]
 80079c2:	4421      	add	r1, r4
 80079c4:	1854      	adds	r4, r2, r1
 80079c6:	42a3      	cmp	r3, r4
 80079c8:	6011      	str	r1, [r2, #0]
 80079ca:	d1e0      	bne.n	800798e <_free_r+0x26>
 80079cc:	681c      	ldr	r4, [r3, #0]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	6053      	str	r3, [r2, #4]
 80079d2:	440c      	add	r4, r1
 80079d4:	6014      	str	r4, [r2, #0]
 80079d6:	e7da      	b.n	800798e <_free_r+0x26>
 80079d8:	d902      	bls.n	80079e0 <_free_r+0x78>
 80079da:	230c      	movs	r3, #12
 80079dc:	6003      	str	r3, [r0, #0]
 80079de:	e7d6      	b.n	800798e <_free_r+0x26>
 80079e0:	6825      	ldr	r5, [r4, #0]
 80079e2:	1961      	adds	r1, r4, r5
 80079e4:	428b      	cmp	r3, r1
 80079e6:	bf04      	itt	eq
 80079e8:	6819      	ldreq	r1, [r3, #0]
 80079ea:	685b      	ldreq	r3, [r3, #4]
 80079ec:	6063      	str	r3, [r4, #4]
 80079ee:	bf04      	itt	eq
 80079f0:	1949      	addeq	r1, r1, r5
 80079f2:	6021      	streq	r1, [r4, #0]
 80079f4:	6054      	str	r4, [r2, #4]
 80079f6:	e7ca      	b.n	800798e <_free_r+0x26>
 80079f8:	b003      	add	sp, #12
 80079fa:	bd30      	pop	{r4, r5, pc}
 80079fc:	20014674 	.word	0x20014674

08007a00 <sbrk_aligned>:
 8007a00:	b570      	push	{r4, r5, r6, lr}
 8007a02:	4e0e      	ldr	r6, [pc, #56]	; (8007a3c <sbrk_aligned+0x3c>)
 8007a04:	460c      	mov	r4, r1
 8007a06:	6831      	ldr	r1, [r6, #0]
 8007a08:	4605      	mov	r5, r0
 8007a0a:	b911      	cbnz	r1, 8007a12 <sbrk_aligned+0x12>
 8007a0c:	f000 fcbc 	bl	8008388 <_sbrk_r>
 8007a10:	6030      	str	r0, [r6, #0]
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 fcb7 	bl	8008388 <_sbrk_r>
 8007a1a:	1c43      	adds	r3, r0, #1
 8007a1c:	d00a      	beq.n	8007a34 <sbrk_aligned+0x34>
 8007a1e:	1cc4      	adds	r4, r0, #3
 8007a20:	f024 0403 	bic.w	r4, r4, #3
 8007a24:	42a0      	cmp	r0, r4
 8007a26:	d007      	beq.n	8007a38 <sbrk_aligned+0x38>
 8007a28:	1a21      	subs	r1, r4, r0
 8007a2a:	4628      	mov	r0, r5
 8007a2c:	f000 fcac 	bl	8008388 <_sbrk_r>
 8007a30:	3001      	adds	r0, #1
 8007a32:	d101      	bne.n	8007a38 <sbrk_aligned+0x38>
 8007a34:	f04f 34ff 	mov.w	r4, #4294967295
 8007a38:	4620      	mov	r0, r4
 8007a3a:	bd70      	pop	{r4, r5, r6, pc}
 8007a3c:	20014678 	.word	0x20014678

08007a40 <_malloc_r>:
 8007a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a44:	1ccd      	adds	r5, r1, #3
 8007a46:	f025 0503 	bic.w	r5, r5, #3
 8007a4a:	3508      	adds	r5, #8
 8007a4c:	2d0c      	cmp	r5, #12
 8007a4e:	bf38      	it	cc
 8007a50:	250c      	movcc	r5, #12
 8007a52:	2d00      	cmp	r5, #0
 8007a54:	4607      	mov	r7, r0
 8007a56:	db01      	blt.n	8007a5c <_malloc_r+0x1c>
 8007a58:	42a9      	cmp	r1, r5
 8007a5a:	d905      	bls.n	8007a68 <_malloc_r+0x28>
 8007a5c:	230c      	movs	r3, #12
 8007a5e:	603b      	str	r3, [r7, #0]
 8007a60:	2600      	movs	r6, #0
 8007a62:	4630      	mov	r0, r6
 8007a64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a68:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007b3c <_malloc_r+0xfc>
 8007a6c:	f000 f868 	bl	8007b40 <__malloc_lock>
 8007a70:	f8d8 3000 	ldr.w	r3, [r8]
 8007a74:	461c      	mov	r4, r3
 8007a76:	bb5c      	cbnz	r4, 8007ad0 <_malloc_r+0x90>
 8007a78:	4629      	mov	r1, r5
 8007a7a:	4638      	mov	r0, r7
 8007a7c:	f7ff ffc0 	bl	8007a00 <sbrk_aligned>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	4604      	mov	r4, r0
 8007a84:	d155      	bne.n	8007b32 <_malloc_r+0xf2>
 8007a86:	f8d8 4000 	ldr.w	r4, [r8]
 8007a8a:	4626      	mov	r6, r4
 8007a8c:	2e00      	cmp	r6, #0
 8007a8e:	d145      	bne.n	8007b1c <_malloc_r+0xdc>
 8007a90:	2c00      	cmp	r4, #0
 8007a92:	d048      	beq.n	8007b26 <_malloc_r+0xe6>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	4631      	mov	r1, r6
 8007a98:	4638      	mov	r0, r7
 8007a9a:	eb04 0903 	add.w	r9, r4, r3
 8007a9e:	f000 fc73 	bl	8008388 <_sbrk_r>
 8007aa2:	4581      	cmp	r9, r0
 8007aa4:	d13f      	bne.n	8007b26 <_malloc_r+0xe6>
 8007aa6:	6821      	ldr	r1, [r4, #0]
 8007aa8:	1a6d      	subs	r5, r5, r1
 8007aaa:	4629      	mov	r1, r5
 8007aac:	4638      	mov	r0, r7
 8007aae:	f7ff ffa7 	bl	8007a00 <sbrk_aligned>
 8007ab2:	3001      	adds	r0, #1
 8007ab4:	d037      	beq.n	8007b26 <_malloc_r+0xe6>
 8007ab6:	6823      	ldr	r3, [r4, #0]
 8007ab8:	442b      	add	r3, r5
 8007aba:	6023      	str	r3, [r4, #0]
 8007abc:	f8d8 3000 	ldr.w	r3, [r8]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d038      	beq.n	8007b36 <_malloc_r+0xf6>
 8007ac4:	685a      	ldr	r2, [r3, #4]
 8007ac6:	42a2      	cmp	r2, r4
 8007ac8:	d12b      	bne.n	8007b22 <_malloc_r+0xe2>
 8007aca:	2200      	movs	r2, #0
 8007acc:	605a      	str	r2, [r3, #4]
 8007ace:	e00f      	b.n	8007af0 <_malloc_r+0xb0>
 8007ad0:	6822      	ldr	r2, [r4, #0]
 8007ad2:	1b52      	subs	r2, r2, r5
 8007ad4:	d41f      	bmi.n	8007b16 <_malloc_r+0xd6>
 8007ad6:	2a0b      	cmp	r2, #11
 8007ad8:	d917      	bls.n	8007b0a <_malloc_r+0xca>
 8007ada:	1961      	adds	r1, r4, r5
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	6025      	str	r5, [r4, #0]
 8007ae0:	bf18      	it	ne
 8007ae2:	6059      	strne	r1, [r3, #4]
 8007ae4:	6863      	ldr	r3, [r4, #4]
 8007ae6:	bf08      	it	eq
 8007ae8:	f8c8 1000 	streq.w	r1, [r8]
 8007aec:	5162      	str	r2, [r4, r5]
 8007aee:	604b      	str	r3, [r1, #4]
 8007af0:	4638      	mov	r0, r7
 8007af2:	f104 060b 	add.w	r6, r4, #11
 8007af6:	f000 f829 	bl	8007b4c <__malloc_unlock>
 8007afa:	f026 0607 	bic.w	r6, r6, #7
 8007afe:	1d23      	adds	r3, r4, #4
 8007b00:	1af2      	subs	r2, r6, r3
 8007b02:	d0ae      	beq.n	8007a62 <_malloc_r+0x22>
 8007b04:	1b9b      	subs	r3, r3, r6
 8007b06:	50a3      	str	r3, [r4, r2]
 8007b08:	e7ab      	b.n	8007a62 <_malloc_r+0x22>
 8007b0a:	42a3      	cmp	r3, r4
 8007b0c:	6862      	ldr	r2, [r4, #4]
 8007b0e:	d1dd      	bne.n	8007acc <_malloc_r+0x8c>
 8007b10:	f8c8 2000 	str.w	r2, [r8]
 8007b14:	e7ec      	b.n	8007af0 <_malloc_r+0xb0>
 8007b16:	4623      	mov	r3, r4
 8007b18:	6864      	ldr	r4, [r4, #4]
 8007b1a:	e7ac      	b.n	8007a76 <_malloc_r+0x36>
 8007b1c:	4634      	mov	r4, r6
 8007b1e:	6876      	ldr	r6, [r6, #4]
 8007b20:	e7b4      	b.n	8007a8c <_malloc_r+0x4c>
 8007b22:	4613      	mov	r3, r2
 8007b24:	e7cc      	b.n	8007ac0 <_malloc_r+0x80>
 8007b26:	230c      	movs	r3, #12
 8007b28:	603b      	str	r3, [r7, #0]
 8007b2a:	4638      	mov	r0, r7
 8007b2c:	f000 f80e 	bl	8007b4c <__malloc_unlock>
 8007b30:	e797      	b.n	8007a62 <_malloc_r+0x22>
 8007b32:	6025      	str	r5, [r4, #0]
 8007b34:	e7dc      	b.n	8007af0 <_malloc_r+0xb0>
 8007b36:	605b      	str	r3, [r3, #4]
 8007b38:	deff      	udf	#255	; 0xff
 8007b3a:	bf00      	nop
 8007b3c:	20014674 	.word	0x20014674

08007b40 <__malloc_lock>:
 8007b40:	4801      	ldr	r0, [pc, #4]	; (8007b48 <__malloc_lock+0x8>)
 8007b42:	f7ff bf01 	b.w	8007948 <__retarget_lock_acquire_recursive>
 8007b46:	bf00      	nop
 8007b48:	20014670 	.word	0x20014670

08007b4c <__malloc_unlock>:
 8007b4c:	4801      	ldr	r0, [pc, #4]	; (8007b54 <__malloc_unlock+0x8>)
 8007b4e:	f7ff befc 	b.w	800794a <__retarget_lock_release_recursive>
 8007b52:	bf00      	nop
 8007b54:	20014670 	.word	0x20014670

08007b58 <__sfputc_r>:
 8007b58:	6893      	ldr	r3, [r2, #8]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	b410      	push	{r4}
 8007b60:	6093      	str	r3, [r2, #8]
 8007b62:	da08      	bge.n	8007b76 <__sfputc_r+0x1e>
 8007b64:	6994      	ldr	r4, [r2, #24]
 8007b66:	42a3      	cmp	r3, r4
 8007b68:	db01      	blt.n	8007b6e <__sfputc_r+0x16>
 8007b6a:	290a      	cmp	r1, #10
 8007b6c:	d103      	bne.n	8007b76 <__sfputc_r+0x1e>
 8007b6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b72:	f000 bb73 	b.w	800825c <__swbuf_r>
 8007b76:	6813      	ldr	r3, [r2, #0]
 8007b78:	1c58      	adds	r0, r3, #1
 8007b7a:	6010      	str	r0, [r2, #0]
 8007b7c:	7019      	strb	r1, [r3, #0]
 8007b7e:	4608      	mov	r0, r1
 8007b80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <__sfputs_r>:
 8007b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b88:	4606      	mov	r6, r0
 8007b8a:	460f      	mov	r7, r1
 8007b8c:	4614      	mov	r4, r2
 8007b8e:	18d5      	adds	r5, r2, r3
 8007b90:	42ac      	cmp	r4, r5
 8007b92:	d101      	bne.n	8007b98 <__sfputs_r+0x12>
 8007b94:	2000      	movs	r0, #0
 8007b96:	e007      	b.n	8007ba8 <__sfputs_r+0x22>
 8007b98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b9c:	463a      	mov	r2, r7
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f7ff ffda 	bl	8007b58 <__sfputc_r>
 8007ba4:	1c43      	adds	r3, r0, #1
 8007ba6:	d1f3      	bne.n	8007b90 <__sfputs_r+0xa>
 8007ba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bac <_vfiprintf_r>:
 8007bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bb0:	460d      	mov	r5, r1
 8007bb2:	b09d      	sub	sp, #116	; 0x74
 8007bb4:	4614      	mov	r4, r2
 8007bb6:	4698      	mov	r8, r3
 8007bb8:	4606      	mov	r6, r0
 8007bba:	b118      	cbz	r0, 8007bc4 <_vfiprintf_r+0x18>
 8007bbc:	6a03      	ldr	r3, [r0, #32]
 8007bbe:	b90b      	cbnz	r3, 8007bc4 <_vfiprintf_r+0x18>
 8007bc0:	f7ff fdb4 	bl	800772c <__sinit>
 8007bc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bc6:	07d9      	lsls	r1, r3, #31
 8007bc8:	d405      	bmi.n	8007bd6 <_vfiprintf_r+0x2a>
 8007bca:	89ab      	ldrh	r3, [r5, #12]
 8007bcc:	059a      	lsls	r2, r3, #22
 8007bce:	d402      	bmi.n	8007bd6 <_vfiprintf_r+0x2a>
 8007bd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bd2:	f7ff feb9 	bl	8007948 <__retarget_lock_acquire_recursive>
 8007bd6:	89ab      	ldrh	r3, [r5, #12]
 8007bd8:	071b      	lsls	r3, r3, #28
 8007bda:	d501      	bpl.n	8007be0 <_vfiprintf_r+0x34>
 8007bdc:	692b      	ldr	r3, [r5, #16]
 8007bde:	b99b      	cbnz	r3, 8007c08 <_vfiprintf_r+0x5c>
 8007be0:	4629      	mov	r1, r5
 8007be2:	4630      	mov	r0, r6
 8007be4:	f000 fb78 	bl	80082d8 <__swsetup_r>
 8007be8:	b170      	cbz	r0, 8007c08 <_vfiprintf_r+0x5c>
 8007bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007bec:	07dc      	lsls	r4, r3, #31
 8007bee:	d504      	bpl.n	8007bfa <_vfiprintf_r+0x4e>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	b01d      	add	sp, #116	; 0x74
 8007bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bfa:	89ab      	ldrh	r3, [r5, #12]
 8007bfc:	0598      	lsls	r0, r3, #22
 8007bfe:	d4f7      	bmi.n	8007bf0 <_vfiprintf_r+0x44>
 8007c00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c02:	f7ff fea2 	bl	800794a <__retarget_lock_release_recursive>
 8007c06:	e7f3      	b.n	8007bf0 <_vfiprintf_r+0x44>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	9309      	str	r3, [sp, #36]	; 0x24
 8007c0c:	2320      	movs	r3, #32
 8007c0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c16:	2330      	movs	r3, #48	; 0x30
 8007c18:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007dcc <_vfiprintf_r+0x220>
 8007c1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c20:	f04f 0901 	mov.w	r9, #1
 8007c24:	4623      	mov	r3, r4
 8007c26:	469a      	mov	sl, r3
 8007c28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c2c:	b10a      	cbz	r2, 8007c32 <_vfiprintf_r+0x86>
 8007c2e:	2a25      	cmp	r2, #37	; 0x25
 8007c30:	d1f9      	bne.n	8007c26 <_vfiprintf_r+0x7a>
 8007c32:	ebba 0b04 	subs.w	fp, sl, r4
 8007c36:	d00b      	beq.n	8007c50 <_vfiprintf_r+0xa4>
 8007c38:	465b      	mov	r3, fp
 8007c3a:	4622      	mov	r2, r4
 8007c3c:	4629      	mov	r1, r5
 8007c3e:	4630      	mov	r0, r6
 8007c40:	f7ff ffa1 	bl	8007b86 <__sfputs_r>
 8007c44:	3001      	adds	r0, #1
 8007c46:	f000 80a9 	beq.w	8007d9c <_vfiprintf_r+0x1f0>
 8007c4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c4c:	445a      	add	r2, fp
 8007c4e:	9209      	str	r2, [sp, #36]	; 0x24
 8007c50:	f89a 3000 	ldrb.w	r3, [sl]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	f000 80a1 	beq.w	8007d9c <_vfiprintf_r+0x1f0>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f04f 32ff 	mov.w	r2, #4294967295
 8007c60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c64:	f10a 0a01 	add.w	sl, sl, #1
 8007c68:	9304      	str	r3, [sp, #16]
 8007c6a:	9307      	str	r3, [sp, #28]
 8007c6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007c70:	931a      	str	r3, [sp, #104]	; 0x68
 8007c72:	4654      	mov	r4, sl
 8007c74:	2205      	movs	r2, #5
 8007c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c7a:	4854      	ldr	r0, [pc, #336]	; (8007dcc <_vfiprintf_r+0x220>)
 8007c7c:	f7f8 faf8 	bl	8000270 <memchr>
 8007c80:	9a04      	ldr	r2, [sp, #16]
 8007c82:	b9d8      	cbnz	r0, 8007cbc <_vfiprintf_r+0x110>
 8007c84:	06d1      	lsls	r1, r2, #27
 8007c86:	bf44      	itt	mi
 8007c88:	2320      	movmi	r3, #32
 8007c8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c8e:	0713      	lsls	r3, r2, #28
 8007c90:	bf44      	itt	mi
 8007c92:	232b      	movmi	r3, #43	; 0x2b
 8007c94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c98:	f89a 3000 	ldrb.w	r3, [sl]
 8007c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8007c9e:	d015      	beq.n	8007ccc <_vfiprintf_r+0x120>
 8007ca0:	9a07      	ldr	r2, [sp, #28]
 8007ca2:	4654      	mov	r4, sl
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	f04f 0c0a 	mov.w	ip, #10
 8007caa:	4621      	mov	r1, r4
 8007cac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007cb0:	3b30      	subs	r3, #48	; 0x30
 8007cb2:	2b09      	cmp	r3, #9
 8007cb4:	d94d      	bls.n	8007d52 <_vfiprintf_r+0x1a6>
 8007cb6:	b1b0      	cbz	r0, 8007ce6 <_vfiprintf_r+0x13a>
 8007cb8:	9207      	str	r2, [sp, #28]
 8007cba:	e014      	b.n	8007ce6 <_vfiprintf_r+0x13a>
 8007cbc:	eba0 0308 	sub.w	r3, r0, r8
 8007cc0:	fa09 f303 	lsl.w	r3, r9, r3
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	9304      	str	r3, [sp, #16]
 8007cc8:	46a2      	mov	sl, r4
 8007cca:	e7d2      	b.n	8007c72 <_vfiprintf_r+0xc6>
 8007ccc:	9b03      	ldr	r3, [sp, #12]
 8007cce:	1d19      	adds	r1, r3, #4
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	9103      	str	r1, [sp, #12]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	bfbb      	ittet	lt
 8007cd8:	425b      	neglt	r3, r3
 8007cda:	f042 0202 	orrlt.w	r2, r2, #2
 8007cde:	9307      	strge	r3, [sp, #28]
 8007ce0:	9307      	strlt	r3, [sp, #28]
 8007ce2:	bfb8      	it	lt
 8007ce4:	9204      	strlt	r2, [sp, #16]
 8007ce6:	7823      	ldrb	r3, [r4, #0]
 8007ce8:	2b2e      	cmp	r3, #46	; 0x2e
 8007cea:	d10c      	bne.n	8007d06 <_vfiprintf_r+0x15a>
 8007cec:	7863      	ldrb	r3, [r4, #1]
 8007cee:	2b2a      	cmp	r3, #42	; 0x2a
 8007cf0:	d134      	bne.n	8007d5c <_vfiprintf_r+0x1b0>
 8007cf2:	9b03      	ldr	r3, [sp, #12]
 8007cf4:	1d1a      	adds	r2, r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	9203      	str	r2, [sp, #12]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	bfb8      	it	lt
 8007cfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8007d02:	3402      	adds	r4, #2
 8007d04:	9305      	str	r3, [sp, #20]
 8007d06:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007ddc <_vfiprintf_r+0x230>
 8007d0a:	7821      	ldrb	r1, [r4, #0]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	4650      	mov	r0, sl
 8007d10:	f7f8 faae 	bl	8000270 <memchr>
 8007d14:	b138      	cbz	r0, 8007d26 <_vfiprintf_r+0x17a>
 8007d16:	9b04      	ldr	r3, [sp, #16]
 8007d18:	eba0 000a 	sub.w	r0, r0, sl
 8007d1c:	2240      	movs	r2, #64	; 0x40
 8007d1e:	4082      	lsls	r2, r0
 8007d20:	4313      	orrs	r3, r2
 8007d22:	3401      	adds	r4, #1
 8007d24:	9304      	str	r3, [sp, #16]
 8007d26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d2a:	4829      	ldr	r0, [pc, #164]	; (8007dd0 <_vfiprintf_r+0x224>)
 8007d2c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d30:	2206      	movs	r2, #6
 8007d32:	f7f8 fa9d 	bl	8000270 <memchr>
 8007d36:	2800      	cmp	r0, #0
 8007d38:	d03f      	beq.n	8007dba <_vfiprintf_r+0x20e>
 8007d3a:	4b26      	ldr	r3, [pc, #152]	; (8007dd4 <_vfiprintf_r+0x228>)
 8007d3c:	bb1b      	cbnz	r3, 8007d86 <_vfiprintf_r+0x1da>
 8007d3e:	9b03      	ldr	r3, [sp, #12]
 8007d40:	3307      	adds	r3, #7
 8007d42:	f023 0307 	bic.w	r3, r3, #7
 8007d46:	3308      	adds	r3, #8
 8007d48:	9303      	str	r3, [sp, #12]
 8007d4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d4c:	443b      	add	r3, r7
 8007d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d50:	e768      	b.n	8007c24 <_vfiprintf_r+0x78>
 8007d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d56:	460c      	mov	r4, r1
 8007d58:	2001      	movs	r0, #1
 8007d5a:	e7a6      	b.n	8007caa <_vfiprintf_r+0xfe>
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	3401      	adds	r4, #1
 8007d60:	9305      	str	r3, [sp, #20]
 8007d62:	4619      	mov	r1, r3
 8007d64:	f04f 0c0a 	mov.w	ip, #10
 8007d68:	4620      	mov	r0, r4
 8007d6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d6e:	3a30      	subs	r2, #48	; 0x30
 8007d70:	2a09      	cmp	r2, #9
 8007d72:	d903      	bls.n	8007d7c <_vfiprintf_r+0x1d0>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0c6      	beq.n	8007d06 <_vfiprintf_r+0x15a>
 8007d78:	9105      	str	r1, [sp, #20]
 8007d7a:	e7c4      	b.n	8007d06 <_vfiprintf_r+0x15a>
 8007d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d80:	4604      	mov	r4, r0
 8007d82:	2301      	movs	r3, #1
 8007d84:	e7f0      	b.n	8007d68 <_vfiprintf_r+0x1bc>
 8007d86:	ab03      	add	r3, sp, #12
 8007d88:	9300      	str	r3, [sp, #0]
 8007d8a:	462a      	mov	r2, r5
 8007d8c:	4b12      	ldr	r3, [pc, #72]	; (8007dd8 <_vfiprintf_r+0x22c>)
 8007d8e:	a904      	add	r1, sp, #16
 8007d90:	4630      	mov	r0, r6
 8007d92:	f3af 8000 	nop.w
 8007d96:	4607      	mov	r7, r0
 8007d98:	1c78      	adds	r0, r7, #1
 8007d9a:	d1d6      	bne.n	8007d4a <_vfiprintf_r+0x19e>
 8007d9c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d9e:	07d9      	lsls	r1, r3, #31
 8007da0:	d405      	bmi.n	8007dae <_vfiprintf_r+0x202>
 8007da2:	89ab      	ldrh	r3, [r5, #12]
 8007da4:	059a      	lsls	r2, r3, #22
 8007da6:	d402      	bmi.n	8007dae <_vfiprintf_r+0x202>
 8007da8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007daa:	f7ff fdce 	bl	800794a <__retarget_lock_release_recursive>
 8007dae:	89ab      	ldrh	r3, [r5, #12]
 8007db0:	065b      	lsls	r3, r3, #25
 8007db2:	f53f af1d 	bmi.w	8007bf0 <_vfiprintf_r+0x44>
 8007db6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007db8:	e71c      	b.n	8007bf4 <_vfiprintf_r+0x48>
 8007dba:	ab03      	add	r3, sp, #12
 8007dbc:	9300      	str	r3, [sp, #0]
 8007dbe:	462a      	mov	r2, r5
 8007dc0:	4b05      	ldr	r3, [pc, #20]	; (8007dd8 <_vfiprintf_r+0x22c>)
 8007dc2:	a904      	add	r1, sp, #16
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f000 f879 	bl	8007ebc <_printf_i>
 8007dca:	e7e4      	b.n	8007d96 <_vfiprintf_r+0x1ea>
 8007dcc:	08008708 	.word	0x08008708
 8007dd0:	08008712 	.word	0x08008712
 8007dd4:	00000000 	.word	0x00000000
 8007dd8:	08007b87 	.word	0x08007b87
 8007ddc:	0800870e 	.word	0x0800870e

08007de0 <_printf_common>:
 8007de0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007de4:	4616      	mov	r6, r2
 8007de6:	4699      	mov	r9, r3
 8007de8:	688a      	ldr	r2, [r1, #8]
 8007dea:	690b      	ldr	r3, [r1, #16]
 8007dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007df0:	4293      	cmp	r3, r2
 8007df2:	bfb8      	it	lt
 8007df4:	4613      	movlt	r3, r2
 8007df6:	6033      	str	r3, [r6, #0]
 8007df8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007dfc:	4607      	mov	r7, r0
 8007dfe:	460c      	mov	r4, r1
 8007e00:	b10a      	cbz	r2, 8007e06 <_printf_common+0x26>
 8007e02:	3301      	adds	r3, #1
 8007e04:	6033      	str	r3, [r6, #0]
 8007e06:	6823      	ldr	r3, [r4, #0]
 8007e08:	0699      	lsls	r1, r3, #26
 8007e0a:	bf42      	ittt	mi
 8007e0c:	6833      	ldrmi	r3, [r6, #0]
 8007e0e:	3302      	addmi	r3, #2
 8007e10:	6033      	strmi	r3, [r6, #0]
 8007e12:	6825      	ldr	r5, [r4, #0]
 8007e14:	f015 0506 	ands.w	r5, r5, #6
 8007e18:	d106      	bne.n	8007e28 <_printf_common+0x48>
 8007e1a:	f104 0a19 	add.w	sl, r4, #25
 8007e1e:	68e3      	ldr	r3, [r4, #12]
 8007e20:	6832      	ldr	r2, [r6, #0]
 8007e22:	1a9b      	subs	r3, r3, r2
 8007e24:	42ab      	cmp	r3, r5
 8007e26:	dc26      	bgt.n	8007e76 <_printf_common+0x96>
 8007e28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e2c:	1e13      	subs	r3, r2, #0
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	bf18      	it	ne
 8007e32:	2301      	movne	r3, #1
 8007e34:	0692      	lsls	r2, r2, #26
 8007e36:	d42b      	bmi.n	8007e90 <_printf_common+0xb0>
 8007e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e3c:	4649      	mov	r1, r9
 8007e3e:	4638      	mov	r0, r7
 8007e40:	47c0      	blx	r8
 8007e42:	3001      	adds	r0, #1
 8007e44:	d01e      	beq.n	8007e84 <_printf_common+0xa4>
 8007e46:	6823      	ldr	r3, [r4, #0]
 8007e48:	6922      	ldr	r2, [r4, #16]
 8007e4a:	f003 0306 	and.w	r3, r3, #6
 8007e4e:	2b04      	cmp	r3, #4
 8007e50:	bf02      	ittt	eq
 8007e52:	68e5      	ldreq	r5, [r4, #12]
 8007e54:	6833      	ldreq	r3, [r6, #0]
 8007e56:	1aed      	subeq	r5, r5, r3
 8007e58:	68a3      	ldr	r3, [r4, #8]
 8007e5a:	bf0c      	ite	eq
 8007e5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e60:	2500      	movne	r5, #0
 8007e62:	4293      	cmp	r3, r2
 8007e64:	bfc4      	itt	gt
 8007e66:	1a9b      	subgt	r3, r3, r2
 8007e68:	18ed      	addgt	r5, r5, r3
 8007e6a:	2600      	movs	r6, #0
 8007e6c:	341a      	adds	r4, #26
 8007e6e:	42b5      	cmp	r5, r6
 8007e70:	d11a      	bne.n	8007ea8 <_printf_common+0xc8>
 8007e72:	2000      	movs	r0, #0
 8007e74:	e008      	b.n	8007e88 <_printf_common+0xa8>
 8007e76:	2301      	movs	r3, #1
 8007e78:	4652      	mov	r2, sl
 8007e7a:	4649      	mov	r1, r9
 8007e7c:	4638      	mov	r0, r7
 8007e7e:	47c0      	blx	r8
 8007e80:	3001      	adds	r0, #1
 8007e82:	d103      	bne.n	8007e8c <_printf_common+0xac>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295
 8007e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e8c:	3501      	adds	r5, #1
 8007e8e:	e7c6      	b.n	8007e1e <_printf_common+0x3e>
 8007e90:	18e1      	adds	r1, r4, r3
 8007e92:	1c5a      	adds	r2, r3, #1
 8007e94:	2030      	movs	r0, #48	; 0x30
 8007e96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e9a:	4422      	add	r2, r4
 8007e9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ea0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ea4:	3302      	adds	r3, #2
 8007ea6:	e7c7      	b.n	8007e38 <_printf_common+0x58>
 8007ea8:	2301      	movs	r3, #1
 8007eaa:	4622      	mov	r2, r4
 8007eac:	4649      	mov	r1, r9
 8007eae:	4638      	mov	r0, r7
 8007eb0:	47c0      	blx	r8
 8007eb2:	3001      	adds	r0, #1
 8007eb4:	d0e6      	beq.n	8007e84 <_printf_common+0xa4>
 8007eb6:	3601      	adds	r6, #1
 8007eb8:	e7d9      	b.n	8007e6e <_printf_common+0x8e>
	...

08007ebc <_printf_i>:
 8007ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ec0:	7e0f      	ldrb	r7, [r1, #24]
 8007ec2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ec4:	2f78      	cmp	r7, #120	; 0x78
 8007ec6:	4691      	mov	r9, r2
 8007ec8:	4680      	mov	r8, r0
 8007eca:	460c      	mov	r4, r1
 8007ecc:	469a      	mov	sl, r3
 8007ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007ed2:	d807      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ed4:	2f62      	cmp	r7, #98	; 0x62
 8007ed6:	d80a      	bhi.n	8007eee <_printf_i+0x32>
 8007ed8:	2f00      	cmp	r7, #0
 8007eda:	f000 80d4 	beq.w	8008086 <_printf_i+0x1ca>
 8007ede:	2f58      	cmp	r7, #88	; 0x58
 8007ee0:	f000 80c0 	beq.w	8008064 <_printf_i+0x1a8>
 8007ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007eec:	e03a      	b.n	8007f64 <_printf_i+0xa8>
 8007eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ef2:	2b15      	cmp	r3, #21
 8007ef4:	d8f6      	bhi.n	8007ee4 <_printf_i+0x28>
 8007ef6:	a101      	add	r1, pc, #4	; (adr r1, 8007efc <_printf_i+0x40>)
 8007ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007efc:	08007f55 	.word	0x08007f55
 8007f00:	08007f69 	.word	0x08007f69
 8007f04:	08007ee5 	.word	0x08007ee5
 8007f08:	08007ee5 	.word	0x08007ee5
 8007f0c:	08007ee5 	.word	0x08007ee5
 8007f10:	08007ee5 	.word	0x08007ee5
 8007f14:	08007f69 	.word	0x08007f69
 8007f18:	08007ee5 	.word	0x08007ee5
 8007f1c:	08007ee5 	.word	0x08007ee5
 8007f20:	08007ee5 	.word	0x08007ee5
 8007f24:	08007ee5 	.word	0x08007ee5
 8007f28:	0800806d 	.word	0x0800806d
 8007f2c:	08007f95 	.word	0x08007f95
 8007f30:	08008027 	.word	0x08008027
 8007f34:	08007ee5 	.word	0x08007ee5
 8007f38:	08007ee5 	.word	0x08007ee5
 8007f3c:	0800808f 	.word	0x0800808f
 8007f40:	08007ee5 	.word	0x08007ee5
 8007f44:	08007f95 	.word	0x08007f95
 8007f48:	08007ee5 	.word	0x08007ee5
 8007f4c:	08007ee5 	.word	0x08007ee5
 8007f50:	0800802f 	.word	0x0800802f
 8007f54:	682b      	ldr	r3, [r5, #0]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	602a      	str	r2, [r5, #0]
 8007f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007f64:	2301      	movs	r3, #1
 8007f66:	e09f      	b.n	80080a8 <_printf_i+0x1ec>
 8007f68:	6820      	ldr	r0, [r4, #0]
 8007f6a:	682b      	ldr	r3, [r5, #0]
 8007f6c:	0607      	lsls	r7, r0, #24
 8007f6e:	f103 0104 	add.w	r1, r3, #4
 8007f72:	6029      	str	r1, [r5, #0]
 8007f74:	d501      	bpl.n	8007f7a <_printf_i+0xbe>
 8007f76:	681e      	ldr	r6, [r3, #0]
 8007f78:	e003      	b.n	8007f82 <_printf_i+0xc6>
 8007f7a:	0646      	lsls	r6, r0, #25
 8007f7c:	d5fb      	bpl.n	8007f76 <_printf_i+0xba>
 8007f7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f82:	2e00      	cmp	r6, #0
 8007f84:	da03      	bge.n	8007f8e <_printf_i+0xd2>
 8007f86:	232d      	movs	r3, #45	; 0x2d
 8007f88:	4276      	negs	r6, r6
 8007f8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f8e:	485a      	ldr	r0, [pc, #360]	; (80080f8 <_printf_i+0x23c>)
 8007f90:	230a      	movs	r3, #10
 8007f92:	e012      	b.n	8007fba <_printf_i+0xfe>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	6820      	ldr	r0, [r4, #0]
 8007f98:	1d19      	adds	r1, r3, #4
 8007f9a:	6029      	str	r1, [r5, #0]
 8007f9c:	0605      	lsls	r5, r0, #24
 8007f9e:	d501      	bpl.n	8007fa4 <_printf_i+0xe8>
 8007fa0:	681e      	ldr	r6, [r3, #0]
 8007fa2:	e002      	b.n	8007faa <_printf_i+0xee>
 8007fa4:	0641      	lsls	r1, r0, #25
 8007fa6:	d5fb      	bpl.n	8007fa0 <_printf_i+0xe4>
 8007fa8:	881e      	ldrh	r6, [r3, #0]
 8007faa:	4853      	ldr	r0, [pc, #332]	; (80080f8 <_printf_i+0x23c>)
 8007fac:	2f6f      	cmp	r7, #111	; 0x6f
 8007fae:	bf0c      	ite	eq
 8007fb0:	2308      	moveq	r3, #8
 8007fb2:	230a      	movne	r3, #10
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007fba:	6865      	ldr	r5, [r4, #4]
 8007fbc:	60a5      	str	r5, [r4, #8]
 8007fbe:	2d00      	cmp	r5, #0
 8007fc0:	bfa2      	ittt	ge
 8007fc2:	6821      	ldrge	r1, [r4, #0]
 8007fc4:	f021 0104 	bicge.w	r1, r1, #4
 8007fc8:	6021      	strge	r1, [r4, #0]
 8007fca:	b90e      	cbnz	r6, 8007fd0 <_printf_i+0x114>
 8007fcc:	2d00      	cmp	r5, #0
 8007fce:	d04b      	beq.n	8008068 <_printf_i+0x1ac>
 8007fd0:	4615      	mov	r5, r2
 8007fd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007fd6:	fb03 6711 	mls	r7, r3, r1, r6
 8007fda:	5dc7      	ldrb	r7, [r0, r7]
 8007fdc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	42bb      	cmp	r3, r7
 8007fe4:	460e      	mov	r6, r1
 8007fe6:	d9f4      	bls.n	8007fd2 <_printf_i+0x116>
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d10b      	bne.n	8008004 <_printf_i+0x148>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	07de      	lsls	r6, r3, #31
 8007ff0:	d508      	bpl.n	8008004 <_printf_i+0x148>
 8007ff2:	6923      	ldr	r3, [r4, #16]
 8007ff4:	6861      	ldr	r1, [r4, #4]
 8007ff6:	4299      	cmp	r1, r3
 8007ff8:	bfde      	ittt	le
 8007ffa:	2330      	movle	r3, #48	; 0x30
 8007ffc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008000:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008004:	1b52      	subs	r2, r2, r5
 8008006:	6122      	str	r2, [r4, #16]
 8008008:	f8cd a000 	str.w	sl, [sp]
 800800c:	464b      	mov	r3, r9
 800800e:	aa03      	add	r2, sp, #12
 8008010:	4621      	mov	r1, r4
 8008012:	4640      	mov	r0, r8
 8008014:	f7ff fee4 	bl	8007de0 <_printf_common>
 8008018:	3001      	adds	r0, #1
 800801a:	d14a      	bne.n	80080b2 <_printf_i+0x1f6>
 800801c:	f04f 30ff 	mov.w	r0, #4294967295
 8008020:	b004      	add	sp, #16
 8008022:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008026:	6823      	ldr	r3, [r4, #0]
 8008028:	f043 0320 	orr.w	r3, r3, #32
 800802c:	6023      	str	r3, [r4, #0]
 800802e:	4833      	ldr	r0, [pc, #204]	; (80080fc <_printf_i+0x240>)
 8008030:	2778      	movs	r7, #120	; 0x78
 8008032:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008036:	6823      	ldr	r3, [r4, #0]
 8008038:	6829      	ldr	r1, [r5, #0]
 800803a:	061f      	lsls	r7, r3, #24
 800803c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008040:	d402      	bmi.n	8008048 <_printf_i+0x18c>
 8008042:	065f      	lsls	r7, r3, #25
 8008044:	bf48      	it	mi
 8008046:	b2b6      	uxthmi	r6, r6
 8008048:	07df      	lsls	r7, r3, #31
 800804a:	bf48      	it	mi
 800804c:	f043 0320 	orrmi.w	r3, r3, #32
 8008050:	6029      	str	r1, [r5, #0]
 8008052:	bf48      	it	mi
 8008054:	6023      	strmi	r3, [r4, #0]
 8008056:	b91e      	cbnz	r6, 8008060 <_printf_i+0x1a4>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	f023 0320 	bic.w	r3, r3, #32
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	2310      	movs	r3, #16
 8008062:	e7a7      	b.n	8007fb4 <_printf_i+0xf8>
 8008064:	4824      	ldr	r0, [pc, #144]	; (80080f8 <_printf_i+0x23c>)
 8008066:	e7e4      	b.n	8008032 <_printf_i+0x176>
 8008068:	4615      	mov	r5, r2
 800806a:	e7bd      	b.n	8007fe8 <_printf_i+0x12c>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	6826      	ldr	r6, [r4, #0]
 8008070:	6961      	ldr	r1, [r4, #20]
 8008072:	1d18      	adds	r0, r3, #4
 8008074:	6028      	str	r0, [r5, #0]
 8008076:	0635      	lsls	r5, r6, #24
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	d501      	bpl.n	8008080 <_printf_i+0x1c4>
 800807c:	6019      	str	r1, [r3, #0]
 800807e:	e002      	b.n	8008086 <_printf_i+0x1ca>
 8008080:	0670      	lsls	r0, r6, #25
 8008082:	d5fb      	bpl.n	800807c <_printf_i+0x1c0>
 8008084:	8019      	strh	r1, [r3, #0]
 8008086:	2300      	movs	r3, #0
 8008088:	6123      	str	r3, [r4, #16]
 800808a:	4615      	mov	r5, r2
 800808c:	e7bc      	b.n	8008008 <_printf_i+0x14c>
 800808e:	682b      	ldr	r3, [r5, #0]
 8008090:	1d1a      	adds	r2, r3, #4
 8008092:	602a      	str	r2, [r5, #0]
 8008094:	681d      	ldr	r5, [r3, #0]
 8008096:	6862      	ldr	r2, [r4, #4]
 8008098:	2100      	movs	r1, #0
 800809a:	4628      	mov	r0, r5
 800809c:	f7f8 f8e8 	bl	8000270 <memchr>
 80080a0:	b108      	cbz	r0, 80080a6 <_printf_i+0x1ea>
 80080a2:	1b40      	subs	r0, r0, r5
 80080a4:	6060      	str	r0, [r4, #4]
 80080a6:	6863      	ldr	r3, [r4, #4]
 80080a8:	6123      	str	r3, [r4, #16]
 80080aa:	2300      	movs	r3, #0
 80080ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080b0:	e7aa      	b.n	8008008 <_printf_i+0x14c>
 80080b2:	6923      	ldr	r3, [r4, #16]
 80080b4:	462a      	mov	r2, r5
 80080b6:	4649      	mov	r1, r9
 80080b8:	4640      	mov	r0, r8
 80080ba:	47d0      	blx	sl
 80080bc:	3001      	adds	r0, #1
 80080be:	d0ad      	beq.n	800801c <_printf_i+0x160>
 80080c0:	6823      	ldr	r3, [r4, #0]
 80080c2:	079b      	lsls	r3, r3, #30
 80080c4:	d413      	bmi.n	80080ee <_printf_i+0x232>
 80080c6:	68e0      	ldr	r0, [r4, #12]
 80080c8:	9b03      	ldr	r3, [sp, #12]
 80080ca:	4298      	cmp	r0, r3
 80080cc:	bfb8      	it	lt
 80080ce:	4618      	movlt	r0, r3
 80080d0:	e7a6      	b.n	8008020 <_printf_i+0x164>
 80080d2:	2301      	movs	r3, #1
 80080d4:	4632      	mov	r2, r6
 80080d6:	4649      	mov	r1, r9
 80080d8:	4640      	mov	r0, r8
 80080da:	47d0      	blx	sl
 80080dc:	3001      	adds	r0, #1
 80080de:	d09d      	beq.n	800801c <_printf_i+0x160>
 80080e0:	3501      	adds	r5, #1
 80080e2:	68e3      	ldr	r3, [r4, #12]
 80080e4:	9903      	ldr	r1, [sp, #12]
 80080e6:	1a5b      	subs	r3, r3, r1
 80080e8:	42ab      	cmp	r3, r5
 80080ea:	dcf2      	bgt.n	80080d2 <_printf_i+0x216>
 80080ec:	e7eb      	b.n	80080c6 <_printf_i+0x20a>
 80080ee:	2500      	movs	r5, #0
 80080f0:	f104 0619 	add.w	r6, r4, #25
 80080f4:	e7f5      	b.n	80080e2 <_printf_i+0x226>
 80080f6:	bf00      	nop
 80080f8:	08008719 	.word	0x08008719
 80080fc:	0800872a 	.word	0x0800872a

08008100 <__sflush_r>:
 8008100:	898a      	ldrh	r2, [r1, #12]
 8008102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008106:	4605      	mov	r5, r0
 8008108:	0710      	lsls	r0, r2, #28
 800810a:	460c      	mov	r4, r1
 800810c:	d458      	bmi.n	80081c0 <__sflush_r+0xc0>
 800810e:	684b      	ldr	r3, [r1, #4]
 8008110:	2b00      	cmp	r3, #0
 8008112:	dc05      	bgt.n	8008120 <__sflush_r+0x20>
 8008114:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008116:	2b00      	cmp	r3, #0
 8008118:	dc02      	bgt.n	8008120 <__sflush_r+0x20>
 800811a:	2000      	movs	r0, #0
 800811c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008120:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008122:	2e00      	cmp	r6, #0
 8008124:	d0f9      	beq.n	800811a <__sflush_r+0x1a>
 8008126:	2300      	movs	r3, #0
 8008128:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800812c:	682f      	ldr	r7, [r5, #0]
 800812e:	6a21      	ldr	r1, [r4, #32]
 8008130:	602b      	str	r3, [r5, #0]
 8008132:	d032      	beq.n	800819a <__sflush_r+0x9a>
 8008134:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008136:	89a3      	ldrh	r3, [r4, #12]
 8008138:	075a      	lsls	r2, r3, #29
 800813a:	d505      	bpl.n	8008148 <__sflush_r+0x48>
 800813c:	6863      	ldr	r3, [r4, #4]
 800813e:	1ac0      	subs	r0, r0, r3
 8008140:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008142:	b10b      	cbz	r3, 8008148 <__sflush_r+0x48>
 8008144:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008146:	1ac0      	subs	r0, r0, r3
 8008148:	2300      	movs	r3, #0
 800814a:	4602      	mov	r2, r0
 800814c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800814e:	6a21      	ldr	r1, [r4, #32]
 8008150:	4628      	mov	r0, r5
 8008152:	47b0      	blx	r6
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	89a3      	ldrh	r3, [r4, #12]
 8008158:	d106      	bne.n	8008168 <__sflush_r+0x68>
 800815a:	6829      	ldr	r1, [r5, #0]
 800815c:	291d      	cmp	r1, #29
 800815e:	d82b      	bhi.n	80081b8 <__sflush_r+0xb8>
 8008160:	4a29      	ldr	r2, [pc, #164]	; (8008208 <__sflush_r+0x108>)
 8008162:	410a      	asrs	r2, r1
 8008164:	07d6      	lsls	r6, r2, #31
 8008166:	d427      	bmi.n	80081b8 <__sflush_r+0xb8>
 8008168:	2200      	movs	r2, #0
 800816a:	6062      	str	r2, [r4, #4]
 800816c:	04d9      	lsls	r1, r3, #19
 800816e:	6922      	ldr	r2, [r4, #16]
 8008170:	6022      	str	r2, [r4, #0]
 8008172:	d504      	bpl.n	800817e <__sflush_r+0x7e>
 8008174:	1c42      	adds	r2, r0, #1
 8008176:	d101      	bne.n	800817c <__sflush_r+0x7c>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b903      	cbnz	r3, 800817e <__sflush_r+0x7e>
 800817c:	6560      	str	r0, [r4, #84]	; 0x54
 800817e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008180:	602f      	str	r7, [r5, #0]
 8008182:	2900      	cmp	r1, #0
 8008184:	d0c9      	beq.n	800811a <__sflush_r+0x1a>
 8008186:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800818a:	4299      	cmp	r1, r3
 800818c:	d002      	beq.n	8008194 <__sflush_r+0x94>
 800818e:	4628      	mov	r0, r5
 8008190:	f7ff fbea 	bl	8007968 <_free_r>
 8008194:	2000      	movs	r0, #0
 8008196:	6360      	str	r0, [r4, #52]	; 0x34
 8008198:	e7c0      	b.n	800811c <__sflush_r+0x1c>
 800819a:	2301      	movs	r3, #1
 800819c:	4628      	mov	r0, r5
 800819e:	47b0      	blx	r6
 80081a0:	1c41      	adds	r1, r0, #1
 80081a2:	d1c8      	bne.n	8008136 <__sflush_r+0x36>
 80081a4:	682b      	ldr	r3, [r5, #0]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d0c5      	beq.n	8008136 <__sflush_r+0x36>
 80081aa:	2b1d      	cmp	r3, #29
 80081ac:	d001      	beq.n	80081b2 <__sflush_r+0xb2>
 80081ae:	2b16      	cmp	r3, #22
 80081b0:	d101      	bne.n	80081b6 <__sflush_r+0xb6>
 80081b2:	602f      	str	r7, [r5, #0]
 80081b4:	e7b1      	b.n	800811a <__sflush_r+0x1a>
 80081b6:	89a3      	ldrh	r3, [r4, #12]
 80081b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081bc:	81a3      	strh	r3, [r4, #12]
 80081be:	e7ad      	b.n	800811c <__sflush_r+0x1c>
 80081c0:	690f      	ldr	r7, [r1, #16]
 80081c2:	2f00      	cmp	r7, #0
 80081c4:	d0a9      	beq.n	800811a <__sflush_r+0x1a>
 80081c6:	0793      	lsls	r3, r2, #30
 80081c8:	680e      	ldr	r6, [r1, #0]
 80081ca:	bf08      	it	eq
 80081cc:	694b      	ldreq	r3, [r1, #20]
 80081ce:	600f      	str	r7, [r1, #0]
 80081d0:	bf18      	it	ne
 80081d2:	2300      	movne	r3, #0
 80081d4:	eba6 0807 	sub.w	r8, r6, r7
 80081d8:	608b      	str	r3, [r1, #8]
 80081da:	f1b8 0f00 	cmp.w	r8, #0
 80081de:	dd9c      	ble.n	800811a <__sflush_r+0x1a>
 80081e0:	6a21      	ldr	r1, [r4, #32]
 80081e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80081e4:	4643      	mov	r3, r8
 80081e6:	463a      	mov	r2, r7
 80081e8:	4628      	mov	r0, r5
 80081ea:	47b0      	blx	r6
 80081ec:	2800      	cmp	r0, #0
 80081ee:	dc06      	bgt.n	80081fe <__sflush_r+0xfe>
 80081f0:	89a3      	ldrh	r3, [r4, #12]
 80081f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f6:	81a3      	strh	r3, [r4, #12]
 80081f8:	f04f 30ff 	mov.w	r0, #4294967295
 80081fc:	e78e      	b.n	800811c <__sflush_r+0x1c>
 80081fe:	4407      	add	r7, r0
 8008200:	eba8 0800 	sub.w	r8, r8, r0
 8008204:	e7e9      	b.n	80081da <__sflush_r+0xda>
 8008206:	bf00      	nop
 8008208:	dfbffffe 	.word	0xdfbffffe

0800820c <_fflush_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	690b      	ldr	r3, [r1, #16]
 8008210:	4605      	mov	r5, r0
 8008212:	460c      	mov	r4, r1
 8008214:	b913      	cbnz	r3, 800821c <_fflush_r+0x10>
 8008216:	2500      	movs	r5, #0
 8008218:	4628      	mov	r0, r5
 800821a:	bd38      	pop	{r3, r4, r5, pc}
 800821c:	b118      	cbz	r0, 8008226 <_fflush_r+0x1a>
 800821e:	6a03      	ldr	r3, [r0, #32]
 8008220:	b90b      	cbnz	r3, 8008226 <_fflush_r+0x1a>
 8008222:	f7ff fa83 	bl	800772c <__sinit>
 8008226:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d0f3      	beq.n	8008216 <_fflush_r+0xa>
 800822e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008230:	07d0      	lsls	r0, r2, #31
 8008232:	d404      	bmi.n	800823e <_fflush_r+0x32>
 8008234:	0599      	lsls	r1, r3, #22
 8008236:	d402      	bmi.n	800823e <_fflush_r+0x32>
 8008238:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800823a:	f7ff fb85 	bl	8007948 <__retarget_lock_acquire_recursive>
 800823e:	4628      	mov	r0, r5
 8008240:	4621      	mov	r1, r4
 8008242:	f7ff ff5d 	bl	8008100 <__sflush_r>
 8008246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008248:	07da      	lsls	r2, r3, #31
 800824a:	4605      	mov	r5, r0
 800824c:	d4e4      	bmi.n	8008218 <_fflush_r+0xc>
 800824e:	89a3      	ldrh	r3, [r4, #12]
 8008250:	059b      	lsls	r3, r3, #22
 8008252:	d4e1      	bmi.n	8008218 <_fflush_r+0xc>
 8008254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008256:	f7ff fb78 	bl	800794a <__retarget_lock_release_recursive>
 800825a:	e7dd      	b.n	8008218 <_fflush_r+0xc>

0800825c <__swbuf_r>:
 800825c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825e:	460e      	mov	r6, r1
 8008260:	4614      	mov	r4, r2
 8008262:	4605      	mov	r5, r0
 8008264:	b118      	cbz	r0, 800826e <__swbuf_r+0x12>
 8008266:	6a03      	ldr	r3, [r0, #32]
 8008268:	b90b      	cbnz	r3, 800826e <__swbuf_r+0x12>
 800826a:	f7ff fa5f 	bl	800772c <__sinit>
 800826e:	69a3      	ldr	r3, [r4, #24]
 8008270:	60a3      	str	r3, [r4, #8]
 8008272:	89a3      	ldrh	r3, [r4, #12]
 8008274:	071a      	lsls	r2, r3, #28
 8008276:	d525      	bpl.n	80082c4 <__swbuf_r+0x68>
 8008278:	6923      	ldr	r3, [r4, #16]
 800827a:	b31b      	cbz	r3, 80082c4 <__swbuf_r+0x68>
 800827c:	6823      	ldr	r3, [r4, #0]
 800827e:	6922      	ldr	r2, [r4, #16]
 8008280:	1a98      	subs	r0, r3, r2
 8008282:	6963      	ldr	r3, [r4, #20]
 8008284:	b2f6      	uxtb	r6, r6
 8008286:	4283      	cmp	r3, r0
 8008288:	4637      	mov	r7, r6
 800828a:	dc04      	bgt.n	8008296 <__swbuf_r+0x3a>
 800828c:	4621      	mov	r1, r4
 800828e:	4628      	mov	r0, r5
 8008290:	f7ff ffbc 	bl	800820c <_fflush_r>
 8008294:	b9e0      	cbnz	r0, 80082d0 <__swbuf_r+0x74>
 8008296:	68a3      	ldr	r3, [r4, #8]
 8008298:	3b01      	subs	r3, #1
 800829a:	60a3      	str	r3, [r4, #8]
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	1c5a      	adds	r2, r3, #1
 80082a0:	6022      	str	r2, [r4, #0]
 80082a2:	701e      	strb	r6, [r3, #0]
 80082a4:	6962      	ldr	r2, [r4, #20]
 80082a6:	1c43      	adds	r3, r0, #1
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d004      	beq.n	80082b6 <__swbuf_r+0x5a>
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	07db      	lsls	r3, r3, #31
 80082b0:	d506      	bpl.n	80082c0 <__swbuf_r+0x64>
 80082b2:	2e0a      	cmp	r6, #10
 80082b4:	d104      	bne.n	80082c0 <__swbuf_r+0x64>
 80082b6:	4621      	mov	r1, r4
 80082b8:	4628      	mov	r0, r5
 80082ba:	f7ff ffa7 	bl	800820c <_fflush_r>
 80082be:	b938      	cbnz	r0, 80082d0 <__swbuf_r+0x74>
 80082c0:	4638      	mov	r0, r7
 80082c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082c4:	4621      	mov	r1, r4
 80082c6:	4628      	mov	r0, r5
 80082c8:	f000 f806 	bl	80082d8 <__swsetup_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	d0d5      	beq.n	800827c <__swbuf_r+0x20>
 80082d0:	f04f 37ff 	mov.w	r7, #4294967295
 80082d4:	e7f4      	b.n	80082c0 <__swbuf_r+0x64>
	...

080082d8 <__swsetup_r>:
 80082d8:	b538      	push	{r3, r4, r5, lr}
 80082da:	4b2a      	ldr	r3, [pc, #168]	; (8008384 <__swsetup_r+0xac>)
 80082dc:	4605      	mov	r5, r0
 80082de:	6818      	ldr	r0, [r3, #0]
 80082e0:	460c      	mov	r4, r1
 80082e2:	b118      	cbz	r0, 80082ec <__swsetup_r+0x14>
 80082e4:	6a03      	ldr	r3, [r0, #32]
 80082e6:	b90b      	cbnz	r3, 80082ec <__swsetup_r+0x14>
 80082e8:	f7ff fa20 	bl	800772c <__sinit>
 80082ec:	89a3      	ldrh	r3, [r4, #12]
 80082ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082f2:	0718      	lsls	r0, r3, #28
 80082f4:	d422      	bmi.n	800833c <__swsetup_r+0x64>
 80082f6:	06d9      	lsls	r1, r3, #27
 80082f8:	d407      	bmi.n	800830a <__swsetup_r+0x32>
 80082fa:	2309      	movs	r3, #9
 80082fc:	602b      	str	r3, [r5, #0]
 80082fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008302:	81a3      	strh	r3, [r4, #12]
 8008304:	f04f 30ff 	mov.w	r0, #4294967295
 8008308:	e034      	b.n	8008374 <__swsetup_r+0x9c>
 800830a:	0758      	lsls	r0, r3, #29
 800830c:	d512      	bpl.n	8008334 <__swsetup_r+0x5c>
 800830e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008310:	b141      	cbz	r1, 8008324 <__swsetup_r+0x4c>
 8008312:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008316:	4299      	cmp	r1, r3
 8008318:	d002      	beq.n	8008320 <__swsetup_r+0x48>
 800831a:	4628      	mov	r0, r5
 800831c:	f7ff fb24 	bl	8007968 <_free_r>
 8008320:	2300      	movs	r3, #0
 8008322:	6363      	str	r3, [r4, #52]	; 0x34
 8008324:	89a3      	ldrh	r3, [r4, #12]
 8008326:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800832a:	81a3      	strh	r3, [r4, #12]
 800832c:	2300      	movs	r3, #0
 800832e:	6063      	str	r3, [r4, #4]
 8008330:	6923      	ldr	r3, [r4, #16]
 8008332:	6023      	str	r3, [r4, #0]
 8008334:	89a3      	ldrh	r3, [r4, #12]
 8008336:	f043 0308 	orr.w	r3, r3, #8
 800833a:	81a3      	strh	r3, [r4, #12]
 800833c:	6923      	ldr	r3, [r4, #16]
 800833e:	b94b      	cbnz	r3, 8008354 <__swsetup_r+0x7c>
 8008340:	89a3      	ldrh	r3, [r4, #12]
 8008342:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800834a:	d003      	beq.n	8008354 <__swsetup_r+0x7c>
 800834c:	4621      	mov	r1, r4
 800834e:	4628      	mov	r0, r5
 8008350:	f000 f850 	bl	80083f4 <__smakebuf_r>
 8008354:	89a0      	ldrh	r0, [r4, #12]
 8008356:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800835a:	f010 0301 	ands.w	r3, r0, #1
 800835e:	d00a      	beq.n	8008376 <__swsetup_r+0x9e>
 8008360:	2300      	movs	r3, #0
 8008362:	60a3      	str	r3, [r4, #8]
 8008364:	6963      	ldr	r3, [r4, #20]
 8008366:	425b      	negs	r3, r3
 8008368:	61a3      	str	r3, [r4, #24]
 800836a:	6923      	ldr	r3, [r4, #16]
 800836c:	b943      	cbnz	r3, 8008380 <__swsetup_r+0xa8>
 800836e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008372:	d1c4      	bne.n	80082fe <__swsetup_r+0x26>
 8008374:	bd38      	pop	{r3, r4, r5, pc}
 8008376:	0781      	lsls	r1, r0, #30
 8008378:	bf58      	it	pl
 800837a:	6963      	ldrpl	r3, [r4, #20]
 800837c:	60a3      	str	r3, [r4, #8]
 800837e:	e7f4      	b.n	800836a <__swsetup_r+0x92>
 8008380:	2000      	movs	r0, #0
 8008382:	e7f7      	b.n	8008374 <__swsetup_r+0x9c>
 8008384:	20000074 	.word	0x20000074

08008388 <_sbrk_r>:
 8008388:	b538      	push	{r3, r4, r5, lr}
 800838a:	4d06      	ldr	r5, [pc, #24]	; (80083a4 <_sbrk_r+0x1c>)
 800838c:	2300      	movs	r3, #0
 800838e:	4604      	mov	r4, r0
 8008390:	4608      	mov	r0, r1
 8008392:	602b      	str	r3, [r5, #0]
 8008394:	f000 f88c 	bl	80084b0 <_sbrk>
 8008398:	1c43      	adds	r3, r0, #1
 800839a:	d102      	bne.n	80083a2 <_sbrk_r+0x1a>
 800839c:	682b      	ldr	r3, [r5, #0]
 800839e:	b103      	cbz	r3, 80083a2 <_sbrk_r+0x1a>
 80083a0:	6023      	str	r3, [r4, #0]
 80083a2:	bd38      	pop	{r3, r4, r5, pc}
 80083a4:	2001466c 	.word	0x2001466c

080083a8 <__swhatbuf_r>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	460c      	mov	r4, r1
 80083ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b0:	2900      	cmp	r1, #0
 80083b2:	b096      	sub	sp, #88	; 0x58
 80083b4:	4615      	mov	r5, r2
 80083b6:	461e      	mov	r6, r3
 80083b8:	da0d      	bge.n	80083d6 <__swhatbuf_r+0x2e>
 80083ba:	89a3      	ldrh	r3, [r4, #12]
 80083bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80083c0:	f04f 0100 	mov.w	r1, #0
 80083c4:	bf0c      	ite	eq
 80083c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80083ca:	2340      	movne	r3, #64	; 0x40
 80083cc:	2000      	movs	r0, #0
 80083ce:	6031      	str	r1, [r6, #0]
 80083d0:	602b      	str	r3, [r5, #0]
 80083d2:	b016      	add	sp, #88	; 0x58
 80083d4:	bd70      	pop	{r4, r5, r6, pc}
 80083d6:	466a      	mov	r2, sp
 80083d8:	f000 f848 	bl	800846c <_fstat_r>
 80083dc:	2800      	cmp	r0, #0
 80083de:	dbec      	blt.n	80083ba <__swhatbuf_r+0x12>
 80083e0:	9901      	ldr	r1, [sp, #4]
 80083e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80083e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80083ea:	4259      	negs	r1, r3
 80083ec:	4159      	adcs	r1, r3
 80083ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083f2:	e7eb      	b.n	80083cc <__swhatbuf_r+0x24>

080083f4 <__smakebuf_r>:
 80083f4:	898b      	ldrh	r3, [r1, #12]
 80083f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80083f8:	079d      	lsls	r5, r3, #30
 80083fa:	4606      	mov	r6, r0
 80083fc:	460c      	mov	r4, r1
 80083fe:	d507      	bpl.n	8008410 <__smakebuf_r+0x1c>
 8008400:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008404:	6023      	str	r3, [r4, #0]
 8008406:	6123      	str	r3, [r4, #16]
 8008408:	2301      	movs	r3, #1
 800840a:	6163      	str	r3, [r4, #20]
 800840c:	b002      	add	sp, #8
 800840e:	bd70      	pop	{r4, r5, r6, pc}
 8008410:	ab01      	add	r3, sp, #4
 8008412:	466a      	mov	r2, sp
 8008414:	f7ff ffc8 	bl	80083a8 <__swhatbuf_r>
 8008418:	9900      	ldr	r1, [sp, #0]
 800841a:	4605      	mov	r5, r0
 800841c:	4630      	mov	r0, r6
 800841e:	f7ff fb0f 	bl	8007a40 <_malloc_r>
 8008422:	b948      	cbnz	r0, 8008438 <__smakebuf_r+0x44>
 8008424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008428:	059a      	lsls	r2, r3, #22
 800842a:	d4ef      	bmi.n	800840c <__smakebuf_r+0x18>
 800842c:	f023 0303 	bic.w	r3, r3, #3
 8008430:	f043 0302 	orr.w	r3, r3, #2
 8008434:	81a3      	strh	r3, [r4, #12]
 8008436:	e7e3      	b.n	8008400 <__smakebuf_r+0xc>
 8008438:	89a3      	ldrh	r3, [r4, #12]
 800843a:	6020      	str	r0, [r4, #0]
 800843c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008440:	81a3      	strh	r3, [r4, #12]
 8008442:	9b00      	ldr	r3, [sp, #0]
 8008444:	6163      	str	r3, [r4, #20]
 8008446:	9b01      	ldr	r3, [sp, #4]
 8008448:	6120      	str	r0, [r4, #16]
 800844a:	b15b      	cbz	r3, 8008464 <__smakebuf_r+0x70>
 800844c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008450:	4630      	mov	r0, r6
 8008452:	f000 f81d 	bl	8008490 <_isatty_r>
 8008456:	b128      	cbz	r0, 8008464 <__smakebuf_r+0x70>
 8008458:	89a3      	ldrh	r3, [r4, #12]
 800845a:	f023 0303 	bic.w	r3, r3, #3
 800845e:	f043 0301 	orr.w	r3, r3, #1
 8008462:	81a3      	strh	r3, [r4, #12]
 8008464:	89a3      	ldrh	r3, [r4, #12]
 8008466:	431d      	orrs	r5, r3
 8008468:	81a5      	strh	r5, [r4, #12]
 800846a:	e7cf      	b.n	800840c <__smakebuf_r+0x18>

0800846c <_fstat_r>:
 800846c:	b538      	push	{r3, r4, r5, lr}
 800846e:	4d07      	ldr	r5, [pc, #28]	; (800848c <_fstat_r+0x20>)
 8008470:	2300      	movs	r3, #0
 8008472:	4604      	mov	r4, r0
 8008474:	4608      	mov	r0, r1
 8008476:	4611      	mov	r1, r2
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	f7f8 fd28 	bl	8000ece <_fstat>
 800847e:	1c43      	adds	r3, r0, #1
 8008480:	d102      	bne.n	8008488 <_fstat_r+0x1c>
 8008482:	682b      	ldr	r3, [r5, #0]
 8008484:	b103      	cbz	r3, 8008488 <_fstat_r+0x1c>
 8008486:	6023      	str	r3, [r4, #0]
 8008488:	bd38      	pop	{r3, r4, r5, pc}
 800848a:	bf00      	nop
 800848c:	2001466c 	.word	0x2001466c

08008490 <_isatty_r>:
 8008490:	b538      	push	{r3, r4, r5, lr}
 8008492:	4d06      	ldr	r5, [pc, #24]	; (80084ac <_isatty_r+0x1c>)
 8008494:	2300      	movs	r3, #0
 8008496:	4604      	mov	r4, r0
 8008498:	4608      	mov	r0, r1
 800849a:	602b      	str	r3, [r5, #0]
 800849c:	f7f8 fd27 	bl	8000eee <_isatty>
 80084a0:	1c43      	adds	r3, r0, #1
 80084a2:	d102      	bne.n	80084aa <_isatty_r+0x1a>
 80084a4:	682b      	ldr	r3, [r5, #0]
 80084a6:	b103      	cbz	r3, 80084aa <_isatty_r+0x1a>
 80084a8:	6023      	str	r3, [r4, #0]
 80084aa:	bd38      	pop	{r3, r4, r5, pc}
 80084ac:	2001466c 	.word	0x2001466c

080084b0 <_sbrk>:
 80084b0:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <_sbrk+0x14>)
 80084b2:	6811      	ldr	r1, [r2, #0]
 80084b4:	4603      	mov	r3, r0
 80084b6:	b909      	cbnz	r1, 80084bc <_sbrk+0xc>
 80084b8:	4903      	ldr	r1, [pc, #12]	; (80084c8 <_sbrk+0x18>)
 80084ba:	6011      	str	r1, [r2, #0]
 80084bc:	6810      	ldr	r0, [r2, #0]
 80084be:	4403      	add	r3, r0
 80084c0:	6013      	str	r3, [r2, #0]
 80084c2:	4770      	bx	lr
 80084c4:	2001467c 	.word	0x2001467c
 80084c8:	20014680 	.word	0x20014680

080084cc <_init>:
 80084cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ce:	bf00      	nop
 80084d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084d2:	bc08      	pop	{r3}
 80084d4:	469e      	mov	lr, r3
 80084d6:	4770      	bx	lr

080084d8 <_fini>:
 80084d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084da:	bf00      	nop
 80084dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084de:	bc08      	pop	{r3}
 80084e0:	469e      	mov	lr, r3
 80084e2:	4770      	bx	lr
