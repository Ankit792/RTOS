
FreeRTOS6Task_isr.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000024c  08008688  08008688  00018688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088d4  080088d4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080088d4  080088d4  000188d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088dc  080088dc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088dc  080088dc  000188dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088e0  080088e0  000188e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080088e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00014604  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2001467c  2001467c  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001497b  00000000  00000000  000200eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003367  00000000  00000000  00034a66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001420  00000000  00000000  00037dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f6b  00000000  00000000  000391f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002475e  00000000  00000000  0003a15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016cf2  00000000  00000000  0005e8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d9cc7  00000000  00000000  000755ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b68  00000000  00000000  0014f274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000d0  00000000  00000000  00154ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008670 	.word	0x08008670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008670 	.word	0x08008670

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	; 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20012f58 	.word	0x20012f58
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b970 	b.w	8000608 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9e08      	ldr	r6, [sp, #32]
 8000346:	460d      	mov	r5, r1
 8000348:	4604      	mov	r4, r0
 800034a:	460f      	mov	r7, r1
 800034c:	2b00      	cmp	r3, #0
 800034e:	d14a      	bne.n	80003e6 <__udivmoddi4+0xa6>
 8000350:	428a      	cmp	r2, r1
 8000352:	4694      	mov	ip, r2
 8000354:	d965      	bls.n	8000422 <__udivmoddi4+0xe2>
 8000356:	fab2 f382 	clz	r3, r2
 800035a:	b143      	cbz	r3, 800036e <__udivmoddi4+0x2e>
 800035c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000360:	f1c3 0220 	rsb	r2, r3, #32
 8000364:	409f      	lsls	r7, r3
 8000366:	fa20 f202 	lsr.w	r2, r0, r2
 800036a:	4317      	orrs	r7, r2
 800036c:	409c      	lsls	r4, r3
 800036e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000372:	fa1f f58c 	uxth.w	r5, ip
 8000376:	fbb7 f1fe 	udiv	r1, r7, lr
 800037a:	0c22      	lsrs	r2, r4, #16
 800037c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000380:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000384:	fb01 f005 	mul.w	r0, r1, r5
 8000388:	4290      	cmp	r0, r2
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x62>
 800038c:	eb1c 0202 	adds.w	r2, ip, r2
 8000390:	f101 37ff 	add.w	r7, r1, #4294967295
 8000394:	f080 811c 	bcs.w	80005d0 <__udivmoddi4+0x290>
 8000398:	4290      	cmp	r0, r2
 800039a:	f240 8119 	bls.w	80005d0 <__udivmoddi4+0x290>
 800039e:	3902      	subs	r1, #2
 80003a0:	4462      	add	r2, ip
 80003a2:	1a12      	subs	r2, r2, r0
 80003a4:	b2a4      	uxth	r4, r4
 80003a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80003ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b2:	fb00 f505 	mul.w	r5, r0, r5
 80003b6:	42a5      	cmp	r5, r4
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x90>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c2:	f080 8107 	bcs.w	80005d4 <__udivmoddi4+0x294>
 80003c6:	42a5      	cmp	r5, r4
 80003c8:	f240 8104 	bls.w	80005d4 <__udivmoddi4+0x294>
 80003cc:	4464      	add	r4, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11e      	cbz	r6, 80003e2 <__udivmoddi4+0xa2>
 80003da:	40dc      	lsrs	r4, r3
 80003dc:	2300      	movs	r3, #0
 80003de:	e9c6 4300 	strd	r4, r3, [r6]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0xbc>
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	f000 80ed 	beq.w	80005ca <__udivmoddi4+0x28a>
 80003f0:	2100      	movs	r1, #0
 80003f2:	e9c6 0500 	strd	r0, r5, [r6]
 80003f6:	4608      	mov	r0, r1
 80003f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fc:	fab3 f183 	clz	r1, r3
 8000400:	2900      	cmp	r1, #0
 8000402:	d149      	bne.n	8000498 <__udivmoddi4+0x158>
 8000404:	42ab      	cmp	r3, r5
 8000406:	d302      	bcc.n	800040e <__udivmoddi4+0xce>
 8000408:	4282      	cmp	r2, r0
 800040a:	f200 80f8 	bhi.w	80005fe <__udivmoddi4+0x2be>
 800040e:	1a84      	subs	r4, r0, r2
 8000410:	eb65 0203 	sbc.w	r2, r5, r3
 8000414:	2001      	movs	r0, #1
 8000416:	4617      	mov	r7, r2
 8000418:	2e00      	cmp	r6, #0
 800041a:	d0e2      	beq.n	80003e2 <__udivmoddi4+0xa2>
 800041c:	e9c6 4700 	strd	r4, r7, [r6]
 8000420:	e7df      	b.n	80003e2 <__udivmoddi4+0xa2>
 8000422:	b902      	cbnz	r2, 8000426 <__udivmoddi4+0xe6>
 8000424:	deff      	udf	#255	; 0xff
 8000426:	fab2 f382 	clz	r3, r2
 800042a:	2b00      	cmp	r3, #0
 800042c:	f040 8090 	bne.w	8000550 <__udivmoddi4+0x210>
 8000430:	1a8a      	subs	r2, r1, r2
 8000432:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000436:	fa1f fe8c 	uxth.w	lr, ip
 800043a:	2101      	movs	r1, #1
 800043c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000440:	fb07 2015 	mls	r0, r7, r5, r2
 8000444:	0c22      	lsrs	r2, r4, #16
 8000446:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800044a:	fb0e f005 	mul.w	r0, lr, r5
 800044e:	4290      	cmp	r0, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x124>
 8000452:	eb1c 0202 	adds.w	r2, ip, r2
 8000456:	f105 38ff 	add.w	r8, r5, #4294967295
 800045a:	d202      	bcs.n	8000462 <__udivmoddi4+0x122>
 800045c:	4290      	cmp	r0, r2
 800045e:	f200 80cb 	bhi.w	80005f8 <__udivmoddi4+0x2b8>
 8000462:	4645      	mov	r5, r8
 8000464:	1a12      	subs	r2, r2, r0
 8000466:	b2a4      	uxth	r4, r4
 8000468:	fbb2 f0f7 	udiv	r0, r2, r7
 800046c:	fb07 2210 	mls	r2, r7, r0, r2
 8000470:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000474:	fb0e fe00 	mul.w	lr, lr, r0
 8000478:	45a6      	cmp	lr, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x14e>
 800047c:	eb1c 0404 	adds.w	r4, ip, r4
 8000480:	f100 32ff 	add.w	r2, r0, #4294967295
 8000484:	d202      	bcs.n	800048c <__udivmoddi4+0x14c>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f200 80bb 	bhi.w	8000602 <__udivmoddi4+0x2c2>
 800048c:	4610      	mov	r0, r2
 800048e:	eba4 040e 	sub.w	r4, r4, lr
 8000492:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000496:	e79f      	b.n	80003d8 <__udivmoddi4+0x98>
 8000498:	f1c1 0720 	rsb	r7, r1, #32
 800049c:	408b      	lsls	r3, r1
 800049e:	fa22 fc07 	lsr.w	ip, r2, r7
 80004a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004a6:	fa05 f401 	lsl.w	r4, r5, r1
 80004aa:	fa20 f307 	lsr.w	r3, r0, r7
 80004ae:	40fd      	lsrs	r5, r7
 80004b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004b4:	4323      	orrs	r3, r4
 80004b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ba:	fa1f fe8c 	uxth.w	lr, ip
 80004be:	fb09 5518 	mls	r5, r9, r8, r5
 80004c2:	0c1c      	lsrs	r4, r3, #16
 80004c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004c8:	fb08 f50e 	mul.w	r5, r8, lr
 80004cc:	42a5      	cmp	r5, r4
 80004ce:	fa02 f201 	lsl.w	r2, r2, r1
 80004d2:	fa00 f001 	lsl.w	r0, r0, r1
 80004d6:	d90b      	bls.n	80004f0 <__udivmoddi4+0x1b0>
 80004d8:	eb1c 0404 	adds.w	r4, ip, r4
 80004dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e0:	f080 8088 	bcs.w	80005f4 <__udivmoddi4+0x2b4>
 80004e4:	42a5      	cmp	r5, r4
 80004e6:	f240 8085 	bls.w	80005f4 <__udivmoddi4+0x2b4>
 80004ea:	f1a8 0802 	sub.w	r8, r8, #2
 80004ee:	4464      	add	r4, ip
 80004f0:	1b64      	subs	r4, r4, r5
 80004f2:	b29d      	uxth	r5, r3
 80004f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004f8:	fb09 4413 	mls	r4, r9, r3, r4
 80004fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000500:	fb03 fe0e 	mul.w	lr, r3, lr
 8000504:	45a6      	cmp	lr, r4
 8000506:	d908      	bls.n	800051a <__udivmoddi4+0x1da>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000510:	d26c      	bcs.n	80005ec <__udivmoddi4+0x2ac>
 8000512:	45a6      	cmp	lr, r4
 8000514:	d96a      	bls.n	80005ec <__udivmoddi4+0x2ac>
 8000516:	3b02      	subs	r3, #2
 8000518:	4464      	add	r4, ip
 800051a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800051e:	fba3 9502 	umull	r9, r5, r3, r2
 8000522:	eba4 040e 	sub.w	r4, r4, lr
 8000526:	42ac      	cmp	r4, r5
 8000528:	46c8      	mov	r8, r9
 800052a:	46ae      	mov	lr, r5
 800052c:	d356      	bcc.n	80005dc <__udivmoddi4+0x29c>
 800052e:	d053      	beq.n	80005d8 <__udivmoddi4+0x298>
 8000530:	b156      	cbz	r6, 8000548 <__udivmoddi4+0x208>
 8000532:	ebb0 0208 	subs.w	r2, r0, r8
 8000536:	eb64 040e 	sbc.w	r4, r4, lr
 800053a:	fa04 f707 	lsl.w	r7, r4, r7
 800053e:	40ca      	lsrs	r2, r1
 8000540:	40cc      	lsrs	r4, r1
 8000542:	4317      	orrs	r7, r2
 8000544:	e9c6 7400 	strd	r7, r4, [r6]
 8000548:	4618      	mov	r0, r3
 800054a:	2100      	movs	r1, #0
 800054c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000550:	f1c3 0120 	rsb	r1, r3, #32
 8000554:	fa02 fc03 	lsl.w	ip, r2, r3
 8000558:	fa20 f201 	lsr.w	r2, r0, r1
 800055c:	fa25 f101 	lsr.w	r1, r5, r1
 8000560:	409d      	lsls	r5, r3
 8000562:	432a      	orrs	r2, r5
 8000564:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000568:	fa1f fe8c 	uxth.w	lr, ip
 800056c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000570:	fb07 1510 	mls	r5, r7, r0, r1
 8000574:	0c11      	lsrs	r1, r2, #16
 8000576:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800057a:	fb00 f50e 	mul.w	r5, r0, lr
 800057e:	428d      	cmp	r5, r1
 8000580:	fa04 f403 	lsl.w	r4, r4, r3
 8000584:	d908      	bls.n	8000598 <__udivmoddi4+0x258>
 8000586:	eb1c 0101 	adds.w	r1, ip, r1
 800058a:	f100 38ff 	add.w	r8, r0, #4294967295
 800058e:	d22f      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 8000590:	428d      	cmp	r5, r1
 8000592:	d92d      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 8000594:	3802      	subs	r0, #2
 8000596:	4461      	add	r1, ip
 8000598:	1b49      	subs	r1, r1, r5
 800059a:	b292      	uxth	r2, r2
 800059c:	fbb1 f5f7 	udiv	r5, r1, r7
 80005a0:	fb07 1115 	mls	r1, r7, r5, r1
 80005a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005a8:	fb05 f10e 	mul.w	r1, r5, lr
 80005ac:	4291      	cmp	r1, r2
 80005ae:	d908      	bls.n	80005c2 <__udivmoddi4+0x282>
 80005b0:	eb1c 0202 	adds.w	r2, ip, r2
 80005b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80005b8:	d216      	bcs.n	80005e8 <__udivmoddi4+0x2a8>
 80005ba:	4291      	cmp	r1, r2
 80005bc:	d914      	bls.n	80005e8 <__udivmoddi4+0x2a8>
 80005be:	3d02      	subs	r5, #2
 80005c0:	4462      	add	r2, ip
 80005c2:	1a52      	subs	r2, r2, r1
 80005c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005c8:	e738      	b.n	800043c <__udivmoddi4+0xfc>
 80005ca:	4631      	mov	r1, r6
 80005cc:	4630      	mov	r0, r6
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xa2>
 80005d0:	4639      	mov	r1, r7
 80005d2:	e6e6      	b.n	80003a2 <__udivmoddi4+0x62>
 80005d4:	4610      	mov	r0, r2
 80005d6:	e6fb      	b.n	80003d0 <__udivmoddi4+0x90>
 80005d8:	4548      	cmp	r0, r9
 80005da:	d2a9      	bcs.n	8000530 <__udivmoddi4+0x1f0>
 80005dc:	ebb9 0802 	subs.w	r8, r9, r2
 80005e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005e4:	3b01      	subs	r3, #1
 80005e6:	e7a3      	b.n	8000530 <__udivmoddi4+0x1f0>
 80005e8:	4645      	mov	r5, r8
 80005ea:	e7ea      	b.n	80005c2 <__udivmoddi4+0x282>
 80005ec:	462b      	mov	r3, r5
 80005ee:	e794      	b.n	800051a <__udivmoddi4+0x1da>
 80005f0:	4640      	mov	r0, r8
 80005f2:	e7d1      	b.n	8000598 <__udivmoddi4+0x258>
 80005f4:	46d0      	mov	r8, sl
 80005f6:	e77b      	b.n	80004f0 <__udivmoddi4+0x1b0>
 80005f8:	3d02      	subs	r5, #2
 80005fa:	4462      	add	r2, ip
 80005fc:	e732      	b.n	8000464 <__udivmoddi4+0x124>
 80005fe:	4608      	mov	r0, r1
 8000600:	e70a      	b.n	8000418 <__udivmoddi4+0xd8>
 8000602:	4464      	add	r4, ip
 8000604:	3802      	subs	r0, #2
 8000606:	e742      	b.n	800048e <__udivmoddi4+0x14e>

08000608 <__aeabi_idiv0>:
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fc07 	bl	8000e24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f89b 	bl	8000750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f903 	bl	8000824 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_UART_init(500000);
 800061e:	483c      	ldr	r0, [pc, #240]	; (8000710 <main+0x104>)
 8000620:	f004 fe24 	bl	800526c <SEGGER_UART_init>

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 8000624:	4b3b      	ldr	r3, [pc, #236]	; (8000714 <main+0x108>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a3a      	ldr	r2, [pc, #232]	; (8000714 <main+0x108>)
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 8000630:	f007 f8be 	bl	80077b0 <SEGGER_SYSVIEW_Conf>
  printf("in main loop");
 8000634:	4838      	ldr	r0, [pc, #224]	; (8000718 <main+0x10c>)
 8000636:	f007 f981 	bl	800793c <iprintf>
  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 4, &ledg_task_handle);
 800063a:	4b38      	ldr	r3, [pc, #224]	; (800071c <main+0x110>)
 800063c:	9301      	str	r3, [sp, #4]
 800063e:	2304      	movs	r3, #4
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	22c8      	movs	r2, #200	; 0xc8
 8000646:	4936      	ldr	r1, [pc, #216]	; (8000720 <main+0x114>)
 8000648:	4836      	ldr	r0, [pc, #216]	; (8000724 <main+0x118>)
 800064a:	f002 fa0b 	bl	8002a64 <xTaskCreate>
 800064e:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000650:	697b      	ldr	r3, [r7, #20]
 8000652:	2b01      	cmp	r3, #1
 8000654:	d00a      	beq.n	800066c <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800065a:	f383 8811 	msr	BASEPRI, r3
 800065e:	f3bf 8f6f 	isb	sy
 8000662:	f3bf 8f4f 	dsb	sy
 8000666:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000668:	bf00      	nop
 800066a:	e7fe      	b.n	800066a <main+0x5e>

  next_task_handle = ledg_task_handle;
 800066c:	4b2b      	ldr	r3, [pc, #172]	; (800071c <main+0x110>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a2d      	ldr	r2, [pc, #180]	; (8000728 <main+0x11c>)
 8000672:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 3, &ledr_task_handle);
 8000674:	4b2d      	ldr	r3, [pc, #180]	; (800072c <main+0x120>)
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	2303      	movs	r3, #3
 800067a:	9300      	str	r3, [sp, #0]
 800067c:	2300      	movs	r3, #0
 800067e:	22c8      	movs	r2, #200	; 0xc8
 8000680:	492b      	ldr	r1, [pc, #172]	; (8000730 <main+0x124>)
 8000682:	482c      	ldr	r0, [pc, #176]	; (8000734 <main+0x128>)
 8000684:	f002 f9ee 	bl	8002a64 <xTaskCreate>
 8000688:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800068a:	697b      	ldr	r3, [r7, #20]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d00a      	beq.n	80006a6 <main+0x9a>
        __asm volatile
 8000690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000694:	f383 8811 	msr	BASEPRI, r3
 8000698:	f3bf 8f6f 	isb	sy
 800069c:	f3bf 8f4f 	dsb	sy
 80006a0:	60fb      	str	r3, [r7, #12]
    }
 80006a2:	bf00      	nop
 80006a4:	e7fe      	b.n	80006a4 <main+0x98>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &ledo_task_handle);
 80006a6:	4b24      	ldr	r3, [pc, #144]	; (8000738 <main+0x12c>)
 80006a8:	9301      	str	r3, [sp, #4]
 80006aa:	2302      	movs	r3, #2
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	22c8      	movs	r2, #200	; 0xc8
 80006b2:	4922      	ldr	r1, [pc, #136]	; (800073c <main+0x130>)
 80006b4:	4822      	ldr	r0, [pc, #136]	; (8000740 <main+0x134>)
 80006b6:	f002 f9d5 	bl	8002a64 <xTaskCreate>
 80006ba:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d00a      	beq.n	80006d8 <main+0xcc>
        __asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	60bb      	str	r3, [r7, #8]
    }
 80006d4:	bf00      	nop
 80006d6:	e7fe      	b.n	80006d6 <main+0xca>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 1, &ledb_task_handle);
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <main+0x138>)
 80006da:	9301      	str	r3, [sp, #4]
 80006dc:	2301      	movs	r3, #1
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2300      	movs	r3, #0
 80006e2:	22c8      	movs	r2, #200	; 0xc8
 80006e4:	4918      	ldr	r1, [pc, #96]	; (8000748 <main+0x13c>)
 80006e6:	4819      	ldr	r0, [pc, #100]	; (800074c <main+0x140>)
 80006e8:	f002 f9bc 	bl	8002a64 <xTaskCreate>
 80006ec:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d00a      	beq.n	800070a <main+0xfe>
        __asm volatile
 80006f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80006f8:	f383 8811 	msr	BASEPRI, r3
 80006fc:	f3bf 8f6f 	isb	sy
 8000700:	f3bf 8f4f 	dsb	sy
 8000704:	607b      	str	r3, [r7, #4]
    }
 8000706:	bf00      	nop
 8000708:	e7fe      	b.n	8000708 <main+0xfc>


  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800070a:	f002 fbe1 	bl	8002ed0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070e:	e7fe      	b.n	800070e <main+0x102>
 8000710:	0007a120 	.word	0x0007a120
 8000714:	e0001000 	.word	0xe0001000
 8000718:	08008688 	.word	0x08008688
 800071c:	20000094 	.word	0x20000094
 8000720:	08008698 	.word	0x08008698
 8000724:	08000949 	.word	0x08000949
 8000728:	200000a4 	.word	0x200000a4
 800072c:	20000098 	.word	0x20000098
 8000730:	080086a8 	.word	0x080086a8
 8000734:	08000a29 	.word	0x08000a29
 8000738:	2000009c 	.word	0x2000009c
 800073c:	080086b8 	.word	0x080086b8
 8000740:	080009b9 	.word	0x080009b9
 8000744:	200000a0 	.word	0x200000a0
 8000748:	080086c8 	.word	0x080086c8
 800074c:	08000a99 	.word	0x08000a99

08000750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b094      	sub	sp, #80	; 0x50
 8000754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	2230      	movs	r2, #48	; 0x30
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f007 f951 	bl	8007a06 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
 800076e:	609a      	str	r2, [r3, #8]
 8000770:	60da      	str	r2, [r3, #12]
 8000772:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000774:	2300      	movs	r3, #0
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	4b28      	ldr	r3, [pc, #160]	; (800081c <SystemClock_Config+0xcc>)
 800077a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077c:	4a27      	ldr	r2, [pc, #156]	; (800081c <SystemClock_Config+0xcc>)
 800077e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000782:	6413      	str	r3, [r2, #64]	; 0x40
 8000784:	4b25      	ldr	r3, [pc, #148]	; (800081c <SystemClock_Config+0xcc>)
 8000786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000788:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000790:	2300      	movs	r3, #0
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	4b22      	ldr	r3, [pc, #136]	; (8000820 <SystemClock_Config+0xd0>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a21      	ldr	r2, [pc, #132]	; (8000820 <SystemClock_Config+0xd0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800079e:	6013      	str	r3, [r2, #0]
 80007a0:	4b1f      	ldr	r3, [pc, #124]	; (8000820 <SystemClock_Config+0xd0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ac:	2302      	movs	r3, #2
 80007ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b0:	2301      	movs	r3, #1
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007b4:	2310      	movs	r3, #16
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b8:	2302      	movs	r3, #2
 80007ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007bc:	2300      	movs	r3, #0
 80007be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80007c0:	2308      	movs	r3, #8
 80007c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007c4:	23a8      	movs	r3, #168	; 0xa8
 80007c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007c8:	2302      	movs	r3, #2
 80007ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007cc:	2304      	movs	r3, #4
 80007ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 fe3d 	bl	8001454 <HAL_RCC_OscConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007e0:	f000 f9a2 	bl	8000b28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007e4:	230f      	movs	r3, #15
 80007e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007e8:	2302      	movs	r3, #2
 80007ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2105      	movs	r1, #5
 8000802:	4618      	mov	r0, r3
 8000804:	f001 f89e 	bl	8001944 <HAL_RCC_ClockConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800080e:	f000 f98b 	bl	8000b28 <Error_Handler>
  }
}
 8000812:	bf00      	nop
 8000814:	3750      	adds	r7, #80	; 0x50
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800
 8000820:	40007000 	.word	0x40007000

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b088      	sub	sp, #32
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60bb      	str	r3, [r7, #8]
 800083e:	4b2b      	ldr	r3, [pc, #172]	; (80008ec <MX_GPIO_Init+0xc8>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a2a      	ldr	r2, [pc, #168]	; (80008ec <MX_GPIO_Init+0xc8>)
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b28      	ldr	r3, [pc, #160]	; (80008ec <MX_GPIO_Init+0xc8>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_GPIO_Init+0xc8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a23      	ldr	r2, [pc, #140]	; (80008ec <MX_GPIO_Init+0xc8>)
 8000860:	f043 0301 	orr.w	r3, r3, #1
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b21      	ldr	r3, [pc, #132]	; (80008ec <MX_GPIO_Init+0xc8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0301 	and.w	r3, r3, #1
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	603b      	str	r3, [r7, #0]
 8000876:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <MX_GPIO_Init+0xc8>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a1c      	ldr	r2, [pc, #112]	; (80008ec <MX_GPIO_Init+0xc8>)
 800087c:	f043 0308 	orr.w	r3, r3, #8
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_GPIO_Init+0xc8>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0308 	and.w	r3, r3, #8
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800088e:	2200      	movs	r2, #0
 8000890:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000894:	4816      	ldr	r0, [pc, #88]	; (80008f0 <MX_GPIO_Init+0xcc>)
 8000896:	f000 fd85 	bl	80013a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800089a:	2301      	movs	r3, #1
 800089c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800089e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4811      	ldr	r0, [pc, #68]	; (80008f4 <MX_GPIO_Init+0xd0>)
 80008b0:	f000 fbdc 	bl	800106c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80008b4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80008b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c6:	f107 030c 	add.w	r3, r7, #12
 80008ca:	4619      	mov	r1, r3
 80008cc:	4808      	ldr	r0, [pc, #32]	; (80008f0 <MX_GPIO_Init+0xcc>)
 80008ce:	f000 fbcd 	bl	800106c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2106      	movs	r1, #6
 80008d6:	2006      	movs	r0, #6
 80008d8:	f000 fb9e 	bl	8001018 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80008dc:	2006      	movs	r0, #6
 80008de:	f000 fbb7 	bl	8001050 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40023800 	.word	0x40023800
 80008f0:	40020c00 	.word	0x40020c00
 80008f4:	40020000 	.word	0x40020000

080008f8 <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af02      	add	r7, sp, #8
	BaseType_t pxHigherPriorityTaskWoken;

	pxHigherPriorityTaskWoken = pdFALSE;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]


	traceISR_ENTER();
 8000902:	f006 fc61 	bl	80071c8 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle,0,eNoAction,&pxHigherPriorityTaskWoken);
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <button_interrupt_handler+0x48>)
 8000908:	6818      	ldr	r0, [r3, #0]
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	2300      	movs	r3, #0
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2300      	movs	r3, #0
 8000914:	2200      	movs	r2, #0
 8000916:	2100      	movs	r1, #0
 8000918:	f003 f914 	bl	8003b44 <xTaskGenericNotifyFromISR>

	/* once the ISR exits, the below macro makes higher priority task which got unblocked to resume on the CPU */
	portYIELD_FROM_ISR(pxHigherPriorityTaskWoken);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d007      	beq.n	8000932 <button_interrupt_handler+0x3a>
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <button_interrupt_handler+0x4c>)
 8000924:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	f3bf 8f4f 	dsb	sy
 800092e:	f3bf 8f6f 	isb	sy

	traceISR_EXIT();
 8000932:	f006 fc8b 	bl	800724c <SEGGER_SYSVIEW_RecordExitISR>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	200000a4 	.word	0x200000a4
 8000944:	e000ed04 	.word	0xe000ed04

08000948 <led_green_handler>:

static void led_green_handler(void* parameters)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af02      	add	r7, sp, #8
 800094e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;
	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000950:	4814      	ldr	r0, [pc, #80]	; (80009a4 <led_green_handler+0x5c>)
 8000952:	f006 fe81 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000956:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800095a:	4813      	ldr	r0, [pc, #76]	; (80009a8 <led_green_handler+0x60>)
 800095c:	f000 fd3b 	bl	80013d6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000960:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000964:	9300      	str	r3, [sp, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	2200      	movs	r2, #0
 800096a:	2100      	movs	r1, #0
 800096c:	2000      	movs	r0, #0
 800096e:	f003 f861 	bl	8003a34 <xTaskGenericNotifyWait>
 8000972:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	2b01      	cmp	r3, #1
 8000978:	d1ea      	bne.n	8000950 <led_green_handler+0x8>
			portENTER_CRITICAL();
 800097a:	f003 ff03 	bl	8004784 <vPortEnterCritical>
			next_task_handle = ledo_task_handle;
 800097e:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <led_green_handler+0x64>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <led_green_handler+0x68>)
 8000984:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12,GPIO_PIN_SET);
 8000986:	2201      	movs	r2, #1
 8000988:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800098c:	4806      	ldr	r0, [pc, #24]	; (80009a8 <led_green_handler+0x60>)
 800098e:	f000 fd09 	bl	80013a4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 8000992:	4808      	ldr	r0, [pc, #32]	; (80009b4 <led_green_handler+0x6c>)
 8000994:	f006 fe60 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000998:	f003 ff24 	bl	80047e4 <vPortExitCritical>
			vTaskDelete(NULL);
 800099c:	2000      	movs	r0, #0
 800099e:	f002 f9e9 	bl	8002d74 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009a2:	e7d5      	b.n	8000950 <led_green_handler+0x8>
 80009a4:	080086d8 	.word	0x080086d8
 80009a8:	40020c00 	.word	0x40020c00
 80009ac:	2000009c 	.word	0x2000009c
 80009b0:	200000a4 	.word	0x200000a4
 80009b4:	080086ec 	.word	0x080086ec

080009b8 <led_orange_handler>:
		}
	}
}

static void led_orange_handler(void* parameters)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b086      	sub	sp, #24
 80009bc:	af02      	add	r7, sp, #8
 80009be:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 80009c0:	4814      	ldr	r0, [pc, #80]	; (8000a14 <led_orange_handler+0x5c>)
 80009c2:	f006 fe49 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13 );
 80009c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ca:	4813      	ldr	r0, [pc, #76]	; (8000a18 <led_orange_handler+0x60>)
 80009cc:	f000 fd03 	bl	80013d6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80009d0:	f44f 7348 	mov.w	r3, #800	; 0x320
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	2300      	movs	r3, #0
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2000      	movs	r0, #0
 80009de:	f003 f829 	bl	8003a34 <xTaskGenericNotifyWait>
 80009e2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d1ea      	bne.n	80009c0 <led_orange_handler+0x8>
			portENTER_CRITICAL();
 80009ea:	f003 fecb 	bl	8004784 <vPortEnterCritical>
			next_task_handle = ledr_task_handle;
 80009ee:	4b0b      	ldr	r3, [pc, #44]	; (8000a1c <led_orange_handler+0x64>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <led_orange_handler+0x68>)
 80009f4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13,GPIO_PIN_SET);
 80009f6:	2201      	movs	r2, #1
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <led_orange_handler+0x60>)
 80009fe:	f000 fcd1 	bl	80013a4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete orange LED task");
 8000a02:	4808      	ldr	r0, [pc, #32]	; (8000a24 <led_orange_handler+0x6c>)
 8000a04:	f006 fe28 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a08:	f003 feec 	bl	80047e4 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a0c:	2000      	movs	r0, #0
 8000a0e:	f002 f9b1 	bl	8002d74 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling orange LED");
 8000a12:	e7d5      	b.n	80009c0 <led_orange_handler+0x8>
 8000a14:	08008704 	.word	0x08008704
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	20000098 	.word	0x20000098
 8000a20:	200000a4 	.word	0x200000a4
 8000a24:	08008718 	.word	0x08008718

08000a28 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b086      	sub	sp, #24
 8000a2c:	af02      	add	r7, sp, #8
 8000a2e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a30:	4814      	ldr	r0, [pc, #80]	; (8000a84 <led_red_handler+0x5c>)
 8000a32:	f006 fe11 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000a36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a3a:	4813      	ldr	r0, [pc, #76]	; (8000a88 <led_red_handler+0x60>)
 8000a3c:	f000 fccb 	bl	80013d6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(600));
 8000a40:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a44:	9300      	str	r3, [sp, #0]
 8000a46:	2300      	movs	r3, #0
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	f002 fff1 	bl	8003a34 <xTaskGenericNotifyWait>
 8000a52:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d1ea      	bne.n	8000a30 <led_red_handler+0x8>
			portENTER_CRITICAL();
 8000a5a:	f003 fe93 	bl	8004784 <vPortEnterCritical>
			next_task_handle = ledb_task_handle;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <led_red_handler+0x64>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a0b      	ldr	r2, [pc, #44]	; (8000a90 <led_red_handler+0x68>)
 8000a64:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14,GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <led_red_handler+0x60>)
 8000a6e:	f000 fc99 	bl	80013a4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000a72:	4808      	ldr	r0, [pc, #32]	; (8000a94 <led_red_handler+0x6c>)
 8000a74:	f006 fdf0 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a78:	f003 feb4 	bl	80047e4 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a7c:	2000      	movs	r0, #0
 8000a7e:	f002 f979 	bl	8002d74 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a82:	e7d5      	b.n	8000a30 <led_red_handler+0x8>
 8000a84:	08008730 	.word	0x08008730
 8000a88:	40020c00 	.word	0x40020c00
 8000a8c:	200000a0 	.word	0x200000a0
 8000a90:	200000a4 	.word	0x200000a4
 8000a94:	08008744 	.word	0x08008744

08000a98 <led_blue_handler>:
	}
}


static void led_blue_handler(void* parameters)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b086      	sub	sp, #24
 8000a9c:	af02      	add	r7, sp, #8
 8000a9e:	6078      	str	r0, [r7, #4]
	BaseType_t  status;

	while(1)
	{
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000aa0:	4814      	ldr	r0, [pc, #80]	; (8000af4 <led_blue_handler+0x5c>)
 8000aa2:	f006 fdd9 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aaa:	4813      	ldr	r0, [pc, #76]	; (8000af8 <led_blue_handler+0x60>)
 8000aac:	f000 fc93 	bl	80013d6 <HAL_GPIO_TogglePin>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000ab0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000ab4:	9300      	str	r3, [sp, #0]
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2100      	movs	r1, #0
 8000abc:	2000      	movs	r0, #0
 8000abe:	f002 ffb9 	bl	8003a34 <xTaskGenericNotifyWait>
 8000ac2:	60f8      	str	r0, [r7, #12]
		if(status == pdTRUE){
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d1ea      	bne.n	8000aa0 <led_blue_handler+0x8>
			portENTER_CRITICAL();
 8000aca:	f003 fe5b 	bl	8004784 <vPortEnterCritical>
			next_task_handle = NULL;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <led_blue_handler+0x64>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15,GPIO_PIN_SET);
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ada:	4807      	ldr	r0, [pc, #28]	; (8000af8 <led_blue_handler+0x60>)
 8000adc:	f000 fc62 	bl	80013a4 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue LED task");
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <led_blue_handler+0x68>)
 8000ae2:	f006 fdb9 	bl	8007658 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000ae6:	f003 fe7d 	bl	80047e4 <vPortExitCritical>
			vTaskDelete(NULL);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f002 f942 	bl	8002d74 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000af0:	e7d6      	b.n	8000aa0 <led_blue_handler+0x8>
 8000af2:	bf00      	nop
 8000af4:	08008758 	.word	0x08008758
 8000af8:	40020c00 	.word	0x40020c00
 8000afc:	200000a4 	.word	0x200000a4
 8000b00:	0800876c 	.word	0x0800876c

08000b04 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d101      	bne.n	8000b1a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b16:	f000 f9a7 	bl	8000e68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40001000 	.word	0x40001000

08000b28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2c:	b672      	cpsid	i
}
 8000b2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b30:	e7fe      	b.n	8000b30 <Error_Handler+0x8>
	...

08000b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b42:	4a0f      	ldr	r2, [pc, #60]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6453      	str	r3, [r2, #68]	; 0x44
 8000b4a:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	4b09      	ldr	r3, [pc, #36]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	4a08      	ldr	r2, [pc, #32]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b64:	6413      	str	r3, [r2, #64]	; 0x40
 8000b66:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <HAL_MspInit+0x4c>)
 8000b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	603b      	str	r3, [r7, #0]
 8000b70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b72:	f003 fd89 	bl	8004688 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800

08000b84 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08e      	sub	sp, #56	; 0x38
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b94:	2300      	movs	r3, #0
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	4b33      	ldr	r3, [pc, #204]	; (8000c68 <HAL_InitTick+0xe4>)
 8000b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9c:	4a32      	ldr	r2, [pc, #200]	; (8000c68 <HAL_InitTick+0xe4>)
 8000b9e:	f043 0310 	orr.w	r3, r3, #16
 8000ba2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <HAL_InitTick+0xe4>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	f003 0310 	and.w	r3, r3, #16
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000bb0:	f107 0210 	add.w	r2, r7, #16
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4611      	mov	r1, r2
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 f88e 	bl	8001cdc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bc0:	6a3b      	ldr	r3, [r7, #32]
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d103      	bne.n	8000bd2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bca:	f001 f873 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8000bce:	6378      	str	r0, [r7, #52]	; 0x34
 8000bd0:	e004      	b.n	8000bdc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000bd2:	f001 f86f 	bl	8001cb4 <HAL_RCC_GetPCLK1Freq>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bde:	4a23      	ldr	r2, [pc, #140]	; (8000c6c <HAL_InitTick+0xe8>)
 8000be0:	fba2 2303 	umull	r2, r3, r2, r3
 8000be4:	0c9b      	lsrs	r3, r3, #18
 8000be6:	3b01      	subs	r3, #1
 8000be8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bea:	4b21      	ldr	r3, [pc, #132]	; (8000c70 <HAL_InitTick+0xec>)
 8000bec:	4a21      	ldr	r2, [pc, #132]	; (8000c74 <HAL_InitTick+0xf0>)
 8000bee:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bf0:	4b1f      	ldr	r3, [pc, #124]	; (8000c70 <HAL_InitTick+0xec>)
 8000bf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bf6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bf8:	4a1d      	ldr	r2, [pc, #116]	; (8000c70 <HAL_InitTick+0xec>)
 8000bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_InitTick+0xec>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_InitTick+0xec>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c0a:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_InitTick+0xec>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c10:	4817      	ldr	r0, [pc, #92]	; (8000c70 <HAL_InitTick+0xec>)
 8000c12:	f001 f895 	bl	8001d40 <HAL_TIM_Base_Init>
 8000c16:	4603      	mov	r3, r0
 8000c18:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d11b      	bne.n	8000c5c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c24:	4812      	ldr	r0, [pc, #72]	; (8000c70 <HAL_InitTick+0xec>)
 8000c26:	f001 f8e5 	bl	8001df4 <HAL_TIM_Base_Start_IT>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c30:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d111      	bne.n	8000c5c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c38:	2036      	movs	r0, #54	; 0x36
 8000c3a:	f000 fa09 	bl	8001050 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d808      	bhi.n	8000c56 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	2036      	movs	r0, #54	; 0x36
 8000c4a:	f000 f9e5 	bl	8001018 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c4e:	4a0a      	ldr	r2, [pc, #40]	; (8000c78 <HAL_InitTick+0xf4>)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6013      	str	r3, [r2, #0]
 8000c54:	e002      	b.n	8000c5c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c5c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000c60:	4618      	mov	r0, r3
 8000c62:	3738      	adds	r7, #56	; 0x38
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	40023800 	.word	0x40023800
 8000c6c:	431bde83 	.word	0x431bde83
 8000c70:	200000a8 	.word	0x200000a8
 8000c74:	40001000 	.word	0x40001000
 8000c78:	20000004 	.word	0x20000004

08000c7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c80:	e7fe      	b.n	8000c80 <NMI_Handler+0x4>

08000c82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c82:	b480      	push	{r7}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c86:	e7fe      	b.n	8000c86 <HardFault_Handler+0x4>

08000c88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c8c:	e7fe      	b.n	8000c8c <MemManage_Handler+0x4>

08000c8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8e:	b480      	push	{r7}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c92:	e7fe      	b.n	8000c92 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c9e:	bf00      	nop
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	button_interrupt_handler();
 8000cac:	f7ff fe24 	bl	80008f8 <button_interrupt_handler>

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	f000 fbab 	bl	800140c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000cc0:	4802      	ldr	r0, [pc, #8]	; (8000ccc <TIM6_DAC_IRQHandler+0x10>)
 8000cc2:	f001 f907 	bl	8001ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200000a8 	.word	0x200000a8

08000cd0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cdc:	2300      	movs	r3, #0
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	e00a      	b.n	8000cf8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ce2:	f3af 8000 	nop.w
 8000ce6:	4601      	mov	r1, r0
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	1c5a      	adds	r2, r3, #1
 8000cec:	60ba      	str	r2, [r7, #8]
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	697a      	ldr	r2, [r7, #20]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	429a      	cmp	r2, r3
 8000cfe:	dbf0      	blt.n	8000ce2 <_read+0x12>
  }

  return len;
 8000d00:	687b      	ldr	r3, [r7, #4]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3718      	adds	r7, #24
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
 8000d1a:	e009      	b.n	8000d30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	1c5a      	adds	r2, r3, #1
 8000d20:	60ba      	str	r2, [r7, #8]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	697a      	ldr	r2, [r7, #20]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	dbf1      	blt.n	8000d1c <_write+0x12>
  }
  return len;
 8000d38:	687b      	ldr	r3, [r7, #4]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <_close>:

int _close(int file)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d4a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	370c      	adds	r7, #12
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr

08000d5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
 8000d62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000d6c:	2300      	movs	r3, #0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <_isatty>:

int _isatty(int file)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b083      	sub	sp, #12
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d82:	2301      	movs	r3, #1
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	370c      	adds	r7, #12
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d9c:	2300      	movs	r3, #0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
	...

08000dac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db0:	4b06      	ldr	r3, [pc, #24]	; (8000dcc <SystemInit+0x20>)
 8000db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000db6:	4a05      	ldr	r2, [pc, #20]	; (8000dcc <SystemInit+0x20>)
 8000db8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dd4:	480d      	ldr	r0, [pc, #52]	; (8000e0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000dd6:	490e      	ldr	r1, [pc, #56]	; (8000e10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000dd8:	4a0e      	ldr	r2, [pc, #56]	; (8000e14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0b      	ldr	r2, [pc, #44]	; (8000e18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dec:	4c0b      	ldr	r4, [pc, #44]	; (8000e1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dfa:	f7ff ffd7 	bl	8000dac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfe:	f006 fe51 	bl	8007aa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e02:	f7ff fc03 	bl	800060c <main>
  bx  lr    
 8000e06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e10:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000e14:	080088e4 	.word	0x080088e4
  ldr r2, =_sbss
 8000e18:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000e1c:	2001467c 	.word	0x2001467c

08000e20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e20:	e7fe      	b.n	8000e20 <ADC_IRQHandler>
	...

08000e24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e28:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_Init+0x40>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0d      	ldr	r2, [pc, #52]	; (8000e64 <HAL_Init+0x40>)
 8000e2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e34:	4b0b      	ldr	r3, [pc, #44]	; (8000e64 <HAL_Init+0x40>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a0a      	ldr	r2, [pc, #40]	; (8000e64 <HAL_Init+0x40>)
 8000e3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <HAL_Init+0x40>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a07      	ldr	r2, [pc, #28]	; (8000e64 <HAL_Init+0x40>)
 8000e46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e4c:	2003      	movs	r0, #3
 8000e4e:	f000 f8d8 	bl	8001002 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e52:	200f      	movs	r0, #15
 8000e54:	f7ff fe96 	bl	8000b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e58:	f7ff fe6c 	bl	8000b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e5c:	2300      	movs	r3, #0
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023c00 	.word	0x40023c00

08000e68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <HAL_IncTick+0x20>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <HAL_IncTick+0x24>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	4a04      	ldr	r2, [pc, #16]	; (8000e8c <HAL_IncTick+0x24>)
 8000e7a:	6013      	str	r3, [r2, #0]
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20000008 	.word	0x20000008
 8000e8c:	200000f0 	.word	0x200000f0

08000e90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  return uwTick;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_GetTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	200000f0 	.word	0x200000f0

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4907      	ldr	r1, [pc, #28]	; (8000f44 <__NVIC_EnableIRQ+0x38>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	e000e100 	.word	0xe000e100

08000f48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	6039      	str	r1, [r7, #0]
 8000f52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	db0a      	blt.n	8000f72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	490c      	ldr	r1, [pc, #48]	; (8000f94 <__NVIC_SetPriority+0x4c>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	0112      	lsls	r2, r2, #4
 8000f68:	b2d2      	uxtb	r2, r2
 8000f6a:	440b      	add	r3, r1
 8000f6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f70:	e00a      	b.n	8000f88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	b2da      	uxtb	r2, r3
 8000f76:	4908      	ldr	r1, [pc, #32]	; (8000f98 <__NVIC_SetPriority+0x50>)
 8000f78:	79fb      	ldrb	r3, [r7, #7]
 8000f7a:	f003 030f 	and.w	r3, r3, #15
 8000f7e:	3b04      	subs	r3, #4
 8000f80:	0112      	lsls	r2, r2, #4
 8000f82:	b2d2      	uxtb	r2, r2
 8000f84:	440b      	add	r3, r1
 8000f86:	761a      	strb	r2, [r3, #24]
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b089      	sub	sp, #36	; 0x24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	60f8      	str	r0, [r7, #12]
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	f1c3 0307 	rsb	r3, r3, #7
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	bf28      	it	cs
 8000fba:	2304      	movcs	r3, #4
 8000fbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	2b06      	cmp	r3, #6
 8000fc4:	d902      	bls.n	8000fcc <NVIC_EncodePriority+0x30>
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3b03      	subs	r3, #3
 8000fca:	e000      	b.n	8000fce <NVIC_EncodePriority+0x32>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	401a      	ands	r2, r3
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	fa01 f303 	lsl.w	r3, r1, r3
 8000fee:	43d9      	mvns	r1, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff4:	4313      	orrs	r3, r2
         );
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3724      	adds	r7, #36	; 0x24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b082      	sub	sp, #8
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff ff4c 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 8001010:	bf00      	nop
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800102a:	f7ff ff61 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800102e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	68b9      	ldr	r1, [r7, #8]
 8001034:	6978      	ldr	r0, [r7, #20]
 8001036:	f7ff ffb1 	bl	8000f9c <NVIC_EncodePriority>
 800103a:	4602      	mov	r2, r0
 800103c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001040:	4611      	mov	r1, r2
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff80 	bl	8000f48 <__NVIC_SetPriority>
}
 8001048:	bf00      	nop
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff ff54 	bl	8000f0c <__NVIC_EnableIRQ>
}
 8001064:	bf00      	nop
 8001066:	3708      	adds	r7, #8
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
 8001086:	e16b      	b.n	8001360 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001088:	2201      	movs	r2, #1
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	4013      	ands	r3, r2
 800109a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	697b      	ldr	r3, [r7, #20]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 815a 	bne.w	800135a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f003 0303 	and.w	r3, r3, #3
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d130      	bne.n	8001120 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	2203      	movs	r2, #3
 80010ca:	fa02 f303 	lsl.w	r3, r2, r3
 80010ce:	43db      	mvns	r3, r3
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	4013      	ands	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	68da      	ldr	r2, [r3, #12]
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	005b      	lsls	r3, r3, #1
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	69ba      	ldr	r2, [r7, #24]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	69ba      	ldr	r2, [r7, #24]
 80010ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f4:	2201      	movs	r2, #1
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	69ba      	ldr	r2, [r7, #24]
 8001100:	4013      	ands	r3, r2
 8001102:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	091b      	lsrs	r3, r3, #4
 800110a:	f003 0201 	and.w	r2, r3, #1
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b03      	cmp	r3, #3
 800112a:	d017      	beq.n	800115c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	2203      	movs	r2, #3
 8001138:	fa02 f303 	lsl.w	r3, r2, r3
 800113c:	43db      	mvns	r3, r3
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4013      	ands	r3, r2
 8001142:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	689a      	ldr	r2, [r3, #8]
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69ba      	ldr	r2, [r7, #24]
 800115a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	2b02      	cmp	r3, #2
 8001166:	d123      	bne.n	80011b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	08da      	lsrs	r2, r3, #3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	3208      	adds	r2, #8
 8001170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001174:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001176:	69fb      	ldr	r3, [r7, #28]
 8001178:	f003 0307 	and.w	r3, r3, #7
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	220f      	movs	r2, #15
 8001180:	fa02 f303 	lsl.w	r3, r2, r3
 8001184:	43db      	mvns	r3, r3
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4013      	ands	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	691a      	ldr	r2, [r3, #16]
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	08da      	lsrs	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3208      	adds	r2, #8
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	005b      	lsls	r3, r3, #1
 80011ba:	2203      	movs	r2, #3
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f003 0203 	and.w	r2, r3, #3
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	005b      	lsls	r3, r3, #1
 80011d4:	fa02 f303 	lsl.w	r3, r2, r3
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	4313      	orrs	r3, r2
 80011dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	f000 80b4 	beq.w	800135a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b60      	ldr	r3, [pc, #384]	; (8001378 <HAL_GPIO_Init+0x30c>)
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	4a5f      	ldr	r2, [pc, #380]	; (8001378 <HAL_GPIO_Init+0x30c>)
 80011fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001200:	6453      	str	r3, [r2, #68]	; 0x44
 8001202:	4b5d      	ldr	r3, [pc, #372]	; (8001378 <HAL_GPIO_Init+0x30c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800120e:	4a5b      	ldr	r2, [pc, #364]	; (800137c <HAL_GPIO_Init+0x310>)
 8001210:	69fb      	ldr	r3, [r7, #28]
 8001212:	089b      	lsrs	r3, r3, #2
 8001214:	3302      	adds	r3, #2
 8001216:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	220f      	movs	r2, #15
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	4013      	ands	r3, r2
 8001230:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a52      	ldr	r2, [pc, #328]	; (8001380 <HAL_GPIO_Init+0x314>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d02b      	beq.n	8001292 <HAL_GPIO_Init+0x226>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a51      	ldr	r2, [pc, #324]	; (8001384 <HAL_GPIO_Init+0x318>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d025      	beq.n	800128e <HAL_GPIO_Init+0x222>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a50      	ldr	r2, [pc, #320]	; (8001388 <HAL_GPIO_Init+0x31c>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d01f      	beq.n	800128a <HAL_GPIO_Init+0x21e>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4a4f      	ldr	r2, [pc, #316]	; (800138c <HAL_GPIO_Init+0x320>)
 800124e:	4293      	cmp	r3, r2
 8001250:	d019      	beq.n	8001286 <HAL_GPIO_Init+0x21a>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	4a4e      	ldr	r2, [pc, #312]	; (8001390 <HAL_GPIO_Init+0x324>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d013      	beq.n	8001282 <HAL_GPIO_Init+0x216>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4a4d      	ldr	r2, [pc, #308]	; (8001394 <HAL_GPIO_Init+0x328>)
 800125e:	4293      	cmp	r3, r2
 8001260:	d00d      	beq.n	800127e <HAL_GPIO_Init+0x212>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4a4c      	ldr	r2, [pc, #304]	; (8001398 <HAL_GPIO_Init+0x32c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d007      	beq.n	800127a <HAL_GPIO_Init+0x20e>
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a4b      	ldr	r2, [pc, #300]	; (800139c <HAL_GPIO_Init+0x330>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d101      	bne.n	8001276 <HAL_GPIO_Init+0x20a>
 8001272:	2307      	movs	r3, #7
 8001274:	e00e      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001276:	2308      	movs	r3, #8
 8001278:	e00c      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127a:	2306      	movs	r3, #6
 800127c:	e00a      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800127e:	2305      	movs	r3, #5
 8001280:	e008      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001282:	2304      	movs	r3, #4
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001286:	2303      	movs	r3, #3
 8001288:	e004      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128a:	2302      	movs	r3, #2
 800128c:	e002      	b.n	8001294 <HAL_GPIO_Init+0x228>
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_GPIO_Init+0x228>
 8001292:	2300      	movs	r3, #0
 8001294:	69fa      	ldr	r2, [r7, #28]
 8001296:	f002 0203 	and.w	r2, r2, #3
 800129a:	0092      	lsls	r2, r2, #2
 800129c:	4093      	lsls	r3, r2
 800129e:	69ba      	ldr	r2, [r7, #24]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012a4:	4935      	ldr	r1, [pc, #212]	; (800137c <HAL_GPIO_Init+0x310>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	089b      	lsrs	r3, r3, #2
 80012aa:	3302      	adds	r3, #2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012b2:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_GPIO_Init+0x334>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	43db      	mvns	r3, r3
 80012bc:	69ba      	ldr	r2, [r7, #24]
 80012be:	4013      	ands	r3, r2
 80012c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d003      	beq.n	80012d6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80012ce:	69ba      	ldr	r2, [r7, #24]
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d6:	4a32      	ldr	r2, [pc, #200]	; (80013a0 <HAL_GPIO_Init+0x334>)
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012dc:	4b30      	ldr	r3, [pc, #192]	; (80013a0 <HAL_GPIO_Init+0x334>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	43db      	mvns	r3, r3
 80012e6:	69ba      	ldr	r2, [r7, #24]
 80012e8:	4013      	ands	r3, r2
 80012ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d003      	beq.n	8001300 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001306:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	43db      	mvns	r3, r3
 8001310:	69ba      	ldr	r2, [r7, #24]
 8001312:	4013      	ands	r3, r2
 8001314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001322:	69ba      	ldr	r2, [r7, #24]
 8001324:	693b      	ldr	r3, [r7, #16]
 8001326:	4313      	orrs	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800132a:	4a1d      	ldr	r2, [pc, #116]	; (80013a0 <HAL_GPIO_Init+0x334>)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001330:	4b1b      	ldr	r3, [pc, #108]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	43db      	mvns	r3, r3
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	4013      	ands	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4313      	orrs	r3, r2
 8001352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001354:	4a12      	ldr	r2, [pc, #72]	; (80013a0 <HAL_GPIO_Init+0x334>)
 8001356:	69bb      	ldr	r3, [r7, #24]
 8001358:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3301      	adds	r3, #1
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	2b0f      	cmp	r3, #15
 8001364:	f67f ae90 	bls.w	8001088 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	3724      	adds	r7, #36	; 0x24
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40023800 	.word	0x40023800
 800137c:	40013800 	.word	0x40013800
 8001380:	40020000 	.word	0x40020000
 8001384:	40020400 	.word	0x40020400
 8001388:	40020800 	.word	0x40020800
 800138c:	40020c00 	.word	0x40020c00
 8001390:	40021000 	.word	0x40021000
 8001394:	40021400 	.word	0x40021400
 8001398:	40021800 	.word	0x40021800
 800139c:	40021c00 	.word	0x40021c00
 80013a0:	40013c00 	.word	0x40013c00

080013a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
 80013b0:	4613      	mov	r3, r2
 80013b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013b4:	787b      	ldrb	r3, [r7, #1]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d003      	beq.n	80013c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ba:	887a      	ldrh	r2, [r7, #2]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80013c0:	e003      	b.n	80013ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80013c2:	887b      	ldrh	r3, [r7, #2]
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b085      	sub	sp, #20
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	460b      	mov	r3, r1
 80013e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4013      	ands	r3, r2
 80013ee:	041a      	lsls	r2, r3, #16
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	887b      	ldrh	r3, [r7, #2]
 80013f6:	400b      	ands	r3, r1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	619a      	str	r2, [r3, #24]
}
 80013fe:	bf00      	nop
 8001400:	3714      	adds	r7, #20
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
	...

0800140c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	4603      	mov	r3, r0
 8001414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001416:	4b08      	ldr	r3, [pc, #32]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001418:	695a      	ldr	r2, [r3, #20]
 800141a:	88fb      	ldrh	r3, [r7, #6]
 800141c:	4013      	ands	r3, r2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d006      	beq.n	8001430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001422:	4a05      	ldr	r2, [pc, #20]	; (8001438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001428:	88fb      	ldrh	r3, [r7, #6]
 800142a:	4618      	mov	r0, r3
 800142c:	f000 f806 	bl	800143c <HAL_GPIO_EXTI_Callback>
  }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40013c00 	.word	0x40013c00

0800143c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
 8001442:	4603      	mov	r3, r0
 8001444:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e267      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	2b00      	cmp	r3, #0
 8001470:	d075      	beq.n	800155e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001472:	4b88      	ldr	r3, [pc, #544]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	f003 030c 	and.w	r3, r3, #12
 800147a:	2b04      	cmp	r3, #4
 800147c:	d00c      	beq.n	8001498 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800147e:	4b85      	ldr	r3, [pc, #532]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001486:	2b08      	cmp	r3, #8
 8001488:	d112      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800148a:	4b82      	ldr	r3, [pc, #520]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 800148c:	685b      	ldr	r3, [r3, #4]
 800148e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001492:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001496:	d10b      	bne.n	80014b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001498:	4b7e      	ldr	r3, [pc, #504]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d05b      	beq.n	800155c <HAL_RCC_OscConfig+0x108>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d157      	bne.n	800155c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80014ac:	2301      	movs	r3, #1
 80014ae:	e242      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b8:	d106      	bne.n	80014c8 <HAL_RCC_OscConfig+0x74>
 80014ba:	4b76      	ldr	r3, [pc, #472]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a75      	ldr	r2, [pc, #468]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	e01d      	b.n	8001504 <HAL_RCC_OscConfig+0xb0>
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014d0:	d10c      	bne.n	80014ec <HAL_RCC_OscConfig+0x98>
 80014d2:	4b70      	ldr	r3, [pc, #448]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a6f      	ldr	r2, [pc, #444]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	4b6d      	ldr	r3, [pc, #436]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6c      	ldr	r2, [pc, #432]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	e00b      	b.n	8001504 <HAL_RCC_OscConfig+0xb0>
 80014ec:	4b69      	ldr	r3, [pc, #420]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a68      	ldr	r2, [pc, #416]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f6:	6013      	str	r3, [r2, #0]
 80014f8:	4b66      	ldr	r3, [pc, #408]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a65      	ldr	r2, [pc, #404]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80014fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001502:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d013      	beq.n	8001534 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800150c:	f7ff fcc0 	bl	8000e90 <HAL_GetTick>
 8001510:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001512:	e008      	b.n	8001526 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001514:	f7ff fcbc 	bl	8000e90 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b64      	cmp	r3, #100	; 0x64
 8001520:	d901      	bls.n	8001526 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001522:	2303      	movs	r3, #3
 8001524:	e207      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001526:	4b5b      	ldr	r3, [pc, #364]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d0f0      	beq.n	8001514 <HAL_RCC_OscConfig+0xc0>
 8001532:	e014      	b.n	800155e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001534:	f7ff fcac 	bl	8000e90 <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fca8 	bl	8000e90 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e1f3      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800154e:	4b51      	ldr	r3, [pc, #324]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d1f0      	bne.n	800153c <HAL_RCC_OscConfig+0xe8>
 800155a:	e000      	b.n	800155e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f003 0302 	and.w	r3, r3, #2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d063      	beq.n	8001632 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800156a:	4b4a      	ldr	r3, [pc, #296]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
 8001572:	2b00      	cmp	r3, #0
 8001574:	d00b      	beq.n	800158e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001576:	4b47      	ldr	r3, [pc, #284]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800157e:	2b08      	cmp	r3, #8
 8001580:	d11c      	bne.n	80015bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001582:	4b44      	ldr	r3, [pc, #272]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800158a:	2b00      	cmp	r3, #0
 800158c:	d116      	bne.n	80015bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <HAL_RCC_OscConfig+0x152>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d001      	beq.n	80015a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e1c7      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a6:	4b3b      	ldr	r3, [pc, #236]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	00db      	lsls	r3, r3, #3
 80015b4:	4937      	ldr	r1, [pc, #220]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ba:	e03a      	b.n	8001632 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d020      	beq.n	8001606 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015c4:	4b34      	ldr	r3, [pc, #208]	; (8001698 <HAL_RCC_OscConfig+0x244>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ca:	f7ff fc61 	bl	8000e90 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015d2:	f7ff fc5d 	bl	8000e90 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b02      	cmp	r3, #2
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e1a8      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015e4:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	691b      	ldr	r3, [r3, #16]
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4925      	ldr	r1, [pc, #148]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001600:	4313      	orrs	r3, r2
 8001602:	600b      	str	r3, [r1, #0]
 8001604:	e015      	b.n	8001632 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001606:	4b24      	ldr	r3, [pc, #144]	; (8001698 <HAL_RCC_OscConfig+0x244>)
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fc40 	bl	8000e90 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001614:	f7ff fc3c 	bl	8000e90 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e187      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001626:	4b1b      	ldr	r3, [pc, #108]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0302 	and.w	r3, r3, #2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	2b00      	cmp	r3, #0
 800163c:	d036      	beq.n	80016ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d016      	beq.n	8001674 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001646:	4b15      	ldr	r3, [pc, #84]	; (800169c <HAL_RCC_OscConfig+0x248>)
 8001648:	2201      	movs	r2, #1
 800164a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800164c:	f7ff fc20 	bl	8000e90 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001654:	f7ff fc1c 	bl	8000e90 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e167      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001666:	4b0b      	ldr	r3, [pc, #44]	; (8001694 <HAL_RCC_OscConfig+0x240>)
 8001668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0f0      	beq.n	8001654 <HAL_RCC_OscConfig+0x200>
 8001672:	e01b      	b.n	80016ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001674:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_RCC_OscConfig+0x248>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800167a:	f7ff fc09 	bl	8000e90 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001680:	e00e      	b.n	80016a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001682:	f7ff fc05 	bl	8000e90 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d907      	bls.n	80016a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e150      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
 8001694:	40023800 	.word	0x40023800
 8001698:	42470000 	.word	0x42470000
 800169c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016a0:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d1ea      	bne.n	8001682 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 0304 	and.w	r3, r3, #4
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	f000 8097 	beq.w	80017e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016be:	4b81      	ldr	r3, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10f      	bne.n	80016ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016ca:	2300      	movs	r3, #0
 80016cc:	60bb      	str	r3, [r7, #8]
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d2:	4a7c      	ldr	r2, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016d8:	6413      	str	r3, [r2, #64]	; 0x40
 80016da:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ea:	4b77      	ldr	r3, [pc, #476]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d118      	bne.n	8001728 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016f6:	4b74      	ldr	r3, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a73      	ldr	r2, [pc, #460]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 80016fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001702:	f7ff fbc5 	bl	8000e90 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800170a:	f7ff fbc1 	bl	8000e90 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e10c      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800171c:	4b6a      	ldr	r3, [pc, #424]	; (80018c8 <HAL_RCC_OscConfig+0x474>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d106      	bne.n	800173e <HAL_RCC_OscConfig+0x2ea>
 8001730:	4b64      	ldr	r3, [pc, #400]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001734:	4a63      	ldr	r2, [pc, #396]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6713      	str	r3, [r2, #112]	; 0x70
 800173c:	e01c      	b.n	8001778 <HAL_RCC_OscConfig+0x324>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	2b05      	cmp	r3, #5
 8001744:	d10c      	bne.n	8001760 <HAL_RCC_OscConfig+0x30c>
 8001746:	4b5f      	ldr	r3, [pc, #380]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800174a:	4a5e      	ldr	r2, [pc, #376]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 800174c:	f043 0304 	orr.w	r3, r3, #4
 8001750:	6713      	str	r3, [r2, #112]	; 0x70
 8001752:	4b5c      	ldr	r3, [pc, #368]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001756:	4a5b      	ldr	r2, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6713      	str	r3, [r2, #112]	; 0x70
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0x324>
 8001760:	4b58      	ldr	r3, [pc, #352]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001764:	4a57      	ldr	r2, [pc, #348]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6713      	str	r3, [r2, #112]	; 0x70
 800176c:	4b55      	ldr	r3, [pc, #340]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 800176e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001770:	4a54      	ldr	r2, [pc, #336]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001772:	f023 0304 	bic.w	r3, r3, #4
 8001776:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d015      	beq.n	80017ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001780:	f7ff fb86 	bl	8000e90 <HAL_GetTick>
 8001784:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001786:	e00a      	b.n	800179e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001788:	f7ff fb82 	bl	8000e90 <HAL_GetTick>
 800178c:	4602      	mov	r2, r0
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	f241 3288 	movw	r2, #5000	; 0x1388
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e0cb      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800179e:	4b49      	ldr	r3, [pc, #292]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d0ee      	beq.n	8001788 <HAL_RCC_OscConfig+0x334>
 80017aa:	e014      	b.n	80017d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017ac:	f7ff fb70 	bl	8000e90 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017b4:	f7ff fb6c 	bl	8000e90 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e0b5      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ca:	4b3e      	ldr	r3, [pc, #248]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ee      	bne.n	80017b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017d6:	7dfb      	ldrb	r3, [r7, #23]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d105      	bne.n	80017e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017dc:	4b39      	ldr	r3, [pc, #228]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	4a38      	ldr	r2, [pc, #224]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a1 	beq.w	8001934 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017f2:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b08      	cmp	r3, #8
 80017fc:	d05c      	beq.n	80018b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	2b02      	cmp	r3, #2
 8001804:	d141      	bne.n	800188a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001806:	4b31      	ldr	r3, [pc, #196]	; (80018cc <HAL_RCC_OscConfig+0x478>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800180c:	f7ff fb40 	bl	8000e90 <HAL_GetTick>
 8001810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001812:	e008      	b.n	8001826 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001814:	f7ff fb3c 	bl	8000e90 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d901      	bls.n	8001826 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e087      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001826:	4b27      	ldr	r3, [pc, #156]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1f0      	bne.n	8001814 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	69da      	ldr	r2, [r3, #28]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6a1b      	ldr	r3, [r3, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	019b      	lsls	r3, r3, #6
 8001842:	431a      	orrs	r2, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	085b      	lsrs	r3, r3, #1
 800184a:	3b01      	subs	r3, #1
 800184c:	041b      	lsls	r3, r3, #16
 800184e:	431a      	orrs	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	491b      	ldr	r1, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800185c:	4b1b      	ldr	r3, [pc, #108]	; (80018cc <HAL_RCC_OscConfig+0x478>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001862:	f7ff fb15 	bl	8000e90 <HAL_GetTick>
 8001866:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001868:	e008      	b.n	800187c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800186a:	f7ff fb11 	bl	8000e90 <HAL_GetTick>
 800186e:	4602      	mov	r2, r0
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	1ad3      	subs	r3, r2, r3
 8001874:	2b02      	cmp	r3, #2
 8001876:	d901      	bls.n	800187c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001878:	2303      	movs	r3, #3
 800187a:	e05c      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0f0      	beq.n	800186a <HAL_RCC_OscConfig+0x416>
 8001888:	e054      	b.n	8001934 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <HAL_RCC_OscConfig+0x478>)
 800188c:	2200      	movs	r2, #0
 800188e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fafe 	bl	8000e90 <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff fafa 	bl	8000e90 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e045      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <HAL_RCC_OscConfig+0x470>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d1f0      	bne.n	8001898 <HAL_RCC_OscConfig+0x444>
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d107      	bne.n	80018d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e038      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	40007000 	.word	0x40007000
 80018cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80018d0:	4b1b      	ldr	r3, [pc, #108]	; (8001940 <HAL_RCC_OscConfig+0x4ec>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d028      	beq.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d121      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d11a      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001900:	4013      	ands	r3, r2
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001906:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001908:	4293      	cmp	r3, r2
 800190a:	d111      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001916:	085b      	lsrs	r3, r3, #1
 8001918:	3b01      	subs	r3, #1
 800191a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800191c:	429a      	cmp	r2, r3
 800191e:	d107      	bne.n	8001930 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800192a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d001      	beq.n	8001934 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3718      	adds	r7, #24
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800

08001944 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d101      	bne.n	8001958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cc      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001958:	4b68      	ldr	r3, [pc, #416]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0307 	and.w	r3, r3, #7
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d90c      	bls.n	8001980 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001966:	4b65      	ldr	r3, [pc, #404]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001968:	683a      	ldr	r2, [r7, #0]
 800196a:	b2d2      	uxtb	r2, r2
 800196c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800196e:	4b63      	ldr	r3, [pc, #396]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d001      	beq.n	8001980 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0b8      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 0302 	and.w	r3, r3, #2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d020      	beq.n	80019ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001998:	4b59      	ldr	r3, [pc, #356]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4a58      	ldr	r2, [pc, #352]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80019a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0308 	and.w	r3, r3, #8
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b0:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	4a52      	ldr	r2, [pc, #328]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80019ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019bc:	4b50      	ldr	r3, [pc, #320]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	494d      	ldr	r1, [pc, #308]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d044      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d107      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d119      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e07f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80019fe:	2b03      	cmp	r3, #3
 8001a00:	d107      	bne.n	8001a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a02:	4b3f      	ldr	r3, [pc, #252]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d109      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e06f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a12:	4b3b      	ldr	r3, [pc, #236]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e067      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a22:	4b37      	ldr	r3, [pc, #220]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f023 0203 	bic.w	r2, r3, #3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	4934      	ldr	r1, [pc, #208]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a34:	f7ff fa2c 	bl	8000e90 <HAL_GetTick>
 8001a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3a:	e00a      	b.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a3c:	f7ff fa28 	bl	8000e90 <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e04f      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a52:	4b2b      	ldr	r3, [pc, #172]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a54:	689b      	ldr	r3, [r3, #8]
 8001a56:	f003 020c 	and.w	r2, r3, #12
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d1eb      	bne.n	8001a3c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a64:	4b25      	ldr	r3, [pc, #148]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d20c      	bcs.n	8001a8c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a72:	4b22      	ldr	r3, [pc, #136]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_RCC_ClockConfig+0x1b8>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	683a      	ldr	r2, [r7, #0]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d001      	beq.n	8001a8c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e032      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0304 	and.w	r3, r3, #4
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	4916      	ldr	r1, [pc, #88]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab6:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	691b      	ldr	r3, [r3, #16]
 8001ac2:	00db      	lsls	r3, r3, #3
 8001ac4:	490e      	ldr	r1, [pc, #56]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001aca:	f000 f821 	bl	8001b10 <HAL_RCC_GetSysClockFreq>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_ClockConfig+0x1bc>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	091b      	lsrs	r3, r3, #4
 8001ad6:	f003 030f 	and.w	r3, r3, #15
 8001ada:	490a      	ldr	r1, [pc, #40]	; (8001b04 <HAL_RCC_ClockConfig+0x1c0>)
 8001adc:	5ccb      	ldrb	r3, [r1, r3]
 8001ade:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <HAL_RCC_ClockConfig+0x1c4>)
 8001ae4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ae6:	4b09      	ldr	r3, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1c8>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff f84a 	bl	8000b84 <HAL_InitTick>

  return HAL_OK;
 8001af0:	2300      	movs	r3, #0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	40023c00 	.word	0x40023c00
 8001b00:	40023800 	.word	0x40023800
 8001b04:	08008860 	.word	0x08008860
 8001b08:	20000000 	.word	0x20000000
 8001b0c:	20000004 	.word	0x20000004

08001b10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b14:	b090      	sub	sp, #64	; 0x40
 8001b16:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b20:	2300      	movs	r3, #0
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001b24:	2300      	movs	r3, #0
 8001b26:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b28:	4b59      	ldr	r3, [pc, #356]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d00d      	beq.n	8001b50 <HAL_RCC_GetSysClockFreq+0x40>
 8001b34:	2b08      	cmp	r3, #8
 8001b36:	f200 80a1 	bhi.w	8001c7c <HAL_RCC_GetSysClockFreq+0x16c>
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x3a>
 8001b42:	e09b      	b.n	8001c7c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001b44:	4b53      	ldr	r3, [pc, #332]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b46:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001b48:	e09b      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001b4a:	4b53      	ldr	r3, [pc, #332]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001b4e:	e098      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b50:	4b4f      	ldr	r3, [pc, #316]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b58:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b5a:	4b4d      	ldr	r3, [pc, #308]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d028      	beq.n	8001bb8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b66:	4b4a      	ldr	r3, [pc, #296]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	099b      	lsrs	r3, r3, #6
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	623b      	str	r3, [r7, #32]
 8001b70:	627a      	str	r2, [r7, #36]	; 0x24
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4b47      	ldr	r3, [pc, #284]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b7c:	fb03 f201 	mul.w	r2, r3, r1
 8001b80:	2300      	movs	r3, #0
 8001b82:	fb00 f303 	mul.w	r3, r0, r3
 8001b86:	4413      	add	r3, r2
 8001b88:	4a43      	ldr	r2, [pc, #268]	; (8001c98 <HAL_RCC_GetSysClockFreq+0x188>)
 8001b8a:	fba0 1202 	umull	r1, r2, r0, r2
 8001b8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b90:	460a      	mov	r2, r1
 8001b92:	62ba      	str	r2, [r7, #40]	; 0x28
 8001b94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b96:	4413      	add	r3, r2
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
 8001ba0:	61fa      	str	r2, [r7, #28]
 8001ba2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ba6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001baa:	f7fe fbb1 	bl	8000310 <__aeabi_uldivmod>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bb6:	e053      	b.n	8001c60 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bb8:	4b35      	ldr	r3, [pc, #212]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	099b      	lsrs	r3, r3, #6
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	613b      	str	r3, [r7, #16]
 8001bc2:	617a      	str	r2, [r7, #20]
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001bca:	f04f 0b00 	mov.w	fp, #0
 8001bce:	4652      	mov	r2, sl
 8001bd0:	465b      	mov	r3, fp
 8001bd2:	f04f 0000 	mov.w	r0, #0
 8001bd6:	f04f 0100 	mov.w	r1, #0
 8001bda:	0159      	lsls	r1, r3, #5
 8001bdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001be0:	0150      	lsls	r0, r2, #5
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	ebb2 080a 	subs.w	r8, r2, sl
 8001bea:	eb63 090b 	sbc.w	r9, r3, fp
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	f04f 0300 	mov.w	r3, #0
 8001bf6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001bfa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001bfe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001c02:	ebb2 0408 	subs.w	r4, r2, r8
 8001c06:	eb63 0509 	sbc.w	r5, r3, r9
 8001c0a:	f04f 0200 	mov.w	r2, #0
 8001c0e:	f04f 0300 	mov.w	r3, #0
 8001c12:	00eb      	lsls	r3, r5, #3
 8001c14:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c18:	00e2      	lsls	r2, r4, #3
 8001c1a:	4614      	mov	r4, r2
 8001c1c:	461d      	mov	r5, r3
 8001c1e:	eb14 030a 	adds.w	r3, r4, sl
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	eb45 030b 	adc.w	r3, r5, fp
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001c36:	4629      	mov	r1, r5
 8001c38:	028b      	lsls	r3, r1, #10
 8001c3a:	4621      	mov	r1, r4
 8001c3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001c40:	4621      	mov	r1, r4
 8001c42:	028a      	lsls	r2, r1, #10
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	60bb      	str	r3, [r7, #8]
 8001c4e:	60fa      	str	r2, [r7, #12]
 8001c50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001c54:	f7fe fb5c 	bl	8000310 <__aeabi_uldivmod>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	460b      	mov	r3, r1
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c60:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <HAL_RCC_GetSysClockFreq+0x180>)
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	f003 0303 	and.w	r3, r3, #3
 8001c6a:	3301      	adds	r3, #1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001c70:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c78:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c7a:	e002      	b.n	8001c82 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_RCC_GetSysClockFreq+0x184>)
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001c80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3740      	adds	r7, #64	; 0x40
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c8e:	bf00      	nop
 8001c90:	40023800 	.word	0x40023800
 8001c94:	00f42400 	.word	0x00f42400
 8001c98:	017d7840 	.word	0x017d7840

08001c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000000 	.word	0x20000000

08001cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cb8:	f7ff fff0 	bl	8001c9c <HAL_RCC_GetHCLKFreq>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	0a9b      	lsrs	r3, r3, #10
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	4903      	ldr	r1, [pc, #12]	; (8001cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cca:	5ccb      	ldrb	r3, [r1, r3]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	08008870 	.word	0x08008870

08001cdc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	220f      	movs	r2, #15
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	f003 0203 	and.w	r2, r3, #3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001d04:	4b0c      	ldr	r3, [pc, #48]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001d06:	689b      	ldr	r3, [r3, #8]
 8001d08:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_GetClockConfig+0x5c>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	08db      	lsrs	r3, r3, #3
 8001d16:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <HAL_RCC_GetClockConfig+0x60>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 0207 	and.w	r2, r3, #7
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	601a      	str	r2, [r3, #0]
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40023c00 	.word	0x40023c00

08001d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b082      	sub	sp, #8
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d101      	bne.n	8001d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e041      	b.n	8001dd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d106      	bne.n	8001d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f839 	bl	8001dde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f000 f9d8 	bl	8002134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2201      	movs	r2, #1
 8001d88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dde:	b480      	push	{r7}
 8001de0:	b083      	sub	sp, #12
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001de6:	bf00      	nop
 8001de8:	370c      	adds	r7, #12
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
	...

08001df4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e04e      	b.n	8001eaa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2202      	movs	r2, #2
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d022      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e36:	d01d      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1f      	ldr	r2, [pc, #124]	; (8001ebc <HAL_TIM_Base_Start_IT+0xc8>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d018      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1e      	ldr	r2, [pc, #120]	; (8001ec0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d013      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d00e      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1b      	ldr	r2, [pc, #108]	; (8001ec8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a19      	ldr	r2, [pc, #100]	; (8001ecc <HAL_TIM_Base_Start_IT+0xd8>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_Base_Start_IT+0x80>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a18      	ldr	r2, [pc, #96]	; (8001ed0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b06      	cmp	r3, #6
 8001e84:	d010      	beq.n	8001ea8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0201 	orr.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e96:	e007      	b.n	8001ea8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40010000 	.word	0x40010000
 8001ebc:	40000400 	.word	0x40000400
 8001ec0:	40000800 	.word	0x40000800
 8001ec4:	40000c00 	.word	0x40000c00
 8001ec8:	40010400 	.word	0x40010400
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40001800 	.word	0x40001800

08001ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d122      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0202 	mvn.w	r2, #2
 8001f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f8ee 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8e0 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8f1 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	f003 0304 	and.w	r3, r3, #4
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	d122      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d11b      	bne.n	8001f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f06f 0204 	mvn.w	r2, #4
 8001f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2202      	movs	r2, #2
 8001f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f8c4 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001f70:	e005      	b.n	8001f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f8b6 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f8c7 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f003 0308 	and.w	r3, r3, #8
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d122      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b08      	cmp	r3, #8
 8001f9e:	d11b      	bne.n	8001fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0208 	mvn.w	r2, #8
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2204      	movs	r2, #4
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 0303 	and.w	r3, r3, #3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f89a 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f88c 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f89d 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b10      	cmp	r3, #16
 8001fe4:	d122      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b10      	cmp	r3, #16
 8001ff2:	d11b      	bne.n	800202c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f06f 0210 	mvn.w	r2, #16
 8001ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2208      	movs	r2, #8
 8002002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	69db      	ldr	r3, [r3, #28]
 800200a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f870 	bl	80020f8 <HAL_TIM_IC_CaptureCallback>
 8002018:	e005      	b.n	8002026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f862 	bl	80020e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f000 f873 	bl	800210c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b01      	cmp	r3, #1
 8002038:	d10e      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0301 	and.w	r3, r3, #1
 8002044:	2b01      	cmp	r3, #1
 8002046:	d107      	bne.n	8002058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f06f 0201 	mvn.w	r2, #1
 8002050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7fe fd56 	bl	8000b04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002062:	2b80      	cmp	r3, #128	; 0x80
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d107      	bne.n	8002084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800207c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207e:	6878      	ldr	r0, [r7, #4]
 8002080:	f000 f902 	bl	8002288 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208e:	2b40      	cmp	r3, #64	; 0x40
 8002090:	d10e      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800209c:	2b40      	cmp	r3, #64	; 0x40
 800209e:	d107      	bne.n	80020b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f838 	bl	8002120 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b20      	cmp	r3, #32
 80020bc:	d10e      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b20      	cmp	r3, #32
 80020ca:	d107      	bne.n	80020dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f06f 0220 	mvn.w	r2, #32
 80020d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f8cc 	bl	8002274 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020dc:	bf00      	nop
 80020de:	3708      	adds	r7, #8
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}

080020e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020ec:	bf00      	nop
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr

080020f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b083      	sub	sp, #12
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002100:	bf00      	nop
 8002102:	370c      	adds	r7, #12
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	4a40      	ldr	r2, [pc, #256]	; (8002248 <TIM_Base_SetConfig+0x114>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d013      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002152:	d00f      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a3d      	ldr	r2, [pc, #244]	; (800224c <TIM_Base_SetConfig+0x118>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d00b      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3c      	ldr	r2, [pc, #240]	; (8002250 <TIM_Base_SetConfig+0x11c>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d007      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3b      	ldr	r2, [pc, #236]	; (8002254 <TIM_Base_SetConfig+0x120>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d003      	beq.n	8002174 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3a      	ldr	r2, [pc, #232]	; (8002258 <TIM_Base_SetConfig+0x124>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d108      	bne.n	8002186 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800217a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68fa      	ldr	r2, [r7, #12]
 8002182:	4313      	orrs	r3, r2
 8002184:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a2f      	ldr	r2, [pc, #188]	; (8002248 <TIM_Base_SetConfig+0x114>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d02b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d027      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a2c      	ldr	r2, [pc, #176]	; (800224c <TIM_Base_SetConfig+0x118>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d023      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a2b      	ldr	r2, [pc, #172]	; (8002250 <TIM_Base_SetConfig+0x11c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d01f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2a      	ldr	r2, [pc, #168]	; (8002254 <TIM_Base_SetConfig+0x120>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d01b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a29      	ldr	r2, [pc, #164]	; (8002258 <TIM_Base_SetConfig+0x124>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d017      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a28      	ldr	r2, [pc, #160]	; (800225c <TIM_Base_SetConfig+0x128>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d013      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a27      	ldr	r2, [pc, #156]	; (8002260 <TIM_Base_SetConfig+0x12c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00f      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a26      	ldr	r2, [pc, #152]	; (8002264 <TIM_Base_SetConfig+0x130>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d00b      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a25      	ldr	r2, [pc, #148]	; (8002268 <TIM_Base_SetConfig+0x134>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d007      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a24      	ldr	r2, [pc, #144]	; (800226c <TIM_Base_SetConfig+0x138>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d003      	beq.n	80021e6 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <TIM_Base_SetConfig+0x13c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d108      	bne.n	80021f8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	695b      	ldr	r3, [r3, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68fa      	ldr	r2, [r7, #12]
 800220a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	689a      	ldr	r2, [r3, #8]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <TIM_Base_SetConfig+0x114>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0xf8>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0c      	ldr	r2, [pc, #48]	; (8002258 <TIM_Base_SetConfig+0x124>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2201      	movs	r2, #1
 8002238:	615a      	str	r2, [r3, #20]
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40010000 	.word	0x40010000
 800224c:	40000400 	.word	0x40000400
 8002250:	40000800 	.word	0x40000800
 8002254:	40000c00 	.word	0x40000c00
 8002258:	40010400 	.word	0x40010400
 800225c:	40014000 	.word	0x40014000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800
 8002268:	40001800 	.word	0x40001800
 800226c:	40001c00 	.word	0x40001c00
 8002270:	40002000 	.word	0x40002000

08002274 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	f103 0208 	add.w	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f04f 32ff 	mov.w	r2, #4294967295
 80022b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f103 0208 	add.w	r2, r3, #8
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f103 0208 	add.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80022ea:	bf00      	nop
 80022ec:	370c      	adds	r7, #12
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80022f6:	b480      	push	{r7}
 80022f8:	b085      	sub	sp, #20
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	689a      	ldr	r2, [r3, #8]
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	1c5a      	adds	r2, r3, #1
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	601a      	str	r2, [r3, #0]
}
 8002332:	bf00      	nop
 8002334:	3714      	adds	r7, #20
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr

0800233e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800233e:	b480      	push	{r7}
 8002340:	b085      	sub	sp, #20
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
 8002346:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002354:	d103      	bne.n	800235e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	e00c      	b.n	8002378 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	3308      	adds	r3, #8
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <vListInsert+0x2e>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	60fb      	str	r3, [r7, #12]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	429a      	cmp	r2, r3
 8002376:	d2f6      	bcs.n	8002366 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	68fa      	ldr	r2, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	1c5a      	adds	r2, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	601a      	str	r2, [r3, #0]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80023b0:	b480      	push	{r7}
 80023b2:	b085      	sub	sp, #20
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6892      	ldr	r2, [r2, #8]
 80023c6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	6852      	ldr	r2, [r2, #4]
 80023d0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d103      	bne.n	80023e4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3714      	adds	r7, #20
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b086      	sub	sp, #24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <xQueueGenericReset+0x2e>
        __asm volatile
 800241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002420:	f383 8811 	msr	BASEPRI, r3
 8002424:	f3bf 8f6f 	isb	sy
 8002428:	f3bf 8f4f 	dsb	sy
 800242c:	60fb      	str	r3, [r7, #12]
    }
 800242e:	bf00      	nop
 8002430:	e7fe      	b.n	8002430 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d05d      	beq.n	80024f4 <xQueueGenericReset+0xf0>
        ( pxQueue->uxLength >= 1U ) &&
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 800243c:	2b00      	cmp	r3, #0
 800243e:	d059      	beq.n	80024f4 <xQueueGenericReset+0xf0>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002448:	2100      	movs	r1, #0
 800244a:	fba3 2302 	umull	r2, r3, r3, r2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d000      	beq.n	8002454 <xQueueGenericReset+0x50>
 8002452:	2101      	movs	r1, #1
 8002454:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d14c      	bne.n	80024f4 <xQueueGenericReset+0xf0>
    {
        taskENTER_CRITICAL();
 800245a:	f002 f993 	bl	8004784 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002466:	6939      	ldr	r1, [r7, #16]
 8002468:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	441a      	add	r2, r3
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	2200      	movs	r2, #0
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800248a:	3b01      	subs	r3, #1
 800248c:	6939      	ldr	r1, [r7, #16]
 800248e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002490:	fb01 f303 	mul.w	r3, r1, r3
 8002494:	441a      	add	r2, r3
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	22ff      	movs	r2, #255	; 0xff
 800249e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	22ff      	movs	r2, #255	; 0xff
 80024a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

            if( xNewQueue == pdFALSE )
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d114      	bne.n	80024da <xQueueGenericReset+0xd6>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01a      	beq.n	80024ee <xQueueGenericReset+0xea>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	3310      	adds	r3, #16
 80024bc:	4618      	mov	r0, r3
 80024be:	f001 f889 	bl	80035d4 <xTaskRemoveFromEventList>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d012      	beq.n	80024ee <xQueueGenericReset+0xea>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024c8:	4b15      	ldr	r3, [pc, #84]	; (8002520 <xQueueGenericReset+0x11c>)
 80024ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	f3bf 8f4f 	dsb	sy
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	e009      	b.n	80024ee <xQueueGenericReset+0xea>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	3310      	adds	r3, #16
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fedc 	bl	800229c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	3324      	adds	r3, #36	; 0x24
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff fed7 	bl	800229c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80024ee:	f002 f979 	bl	80047e4 <vPortExitCritical>
 80024f2:	e001      	b.n	80024f8 <xQueueGenericReset+0xf4>
    }
    else
    {
        xReturn = pdFAIL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d10a      	bne.n	8002514 <xQueueGenericReset+0x110>
        __asm volatile
 80024fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002502:	f383 8811 	msr	BASEPRI, r3
 8002506:	f3bf 8f6f 	isb	sy
 800250a:	f3bf 8f4f 	dsb	sy
 800250e:	60bb      	str	r3, [r7, #8]
    }
 8002510:	bf00      	nop
 8002512:	e7fe      	b.n	8002512 <xQueueGenericReset+0x10e>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002514:	697b      	ldr	r3, [r7, #20]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	e000ed04 	.word	0xe000ed04

08002524 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002524:	b580      	push	{r7, lr}
 8002526:	b08a      	sub	sp, #40	; 0x28
 8002528:	af02      	add	r7, sp, #8
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	4613      	mov	r3, r2
 8002530:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002532:	2300      	movs	r3, #0
 8002534:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d02e      	beq.n	800259a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800253c:	2100      	movs	r1, #0
 800253e:	68ba      	ldr	r2, [r7, #8]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	fba3 2302 	umull	r2, r3, r3, r2
 8002546:	2b00      	cmp	r3, #0
 8002548:	d000      	beq.n	800254c <xQueueGenericCreate+0x28>
 800254a:	2101      	movs	r1, #1
 800254c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	d123      	bne.n	800259a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	68ba      	ldr	r2, [r7, #8]
 8002556:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800255a:	f113 0f51 	cmn.w	r3, #81	; 0x51
 800255e:	d81c      	bhi.n	800259a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	fb02 f303 	mul.w	r3, r2, r3
 8002568:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	3350      	adds	r3, #80	; 0x50
 800256e:	4618      	mov	r0, r3
 8002570:	f002 fa34 	bl	80049dc <pvPortMalloc>
 8002574:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d01c      	beq.n	80025b6 <xQueueGenericCreate+0x92>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	3350      	adds	r3, #80	; 0x50
 8002584:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002586:	79fa      	ldrb	r2, [r7, #7]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	4613      	mov	r3, r2
 800258e:	697a      	ldr	r2, [r7, #20]
 8002590:	68b9      	ldr	r1, [r7, #8]
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 f814 	bl	80025c0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002598:	e00d      	b.n	80025b6 <xQueueGenericCreate+0x92>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10a      	bne.n	80025b6 <xQueueGenericCreate+0x92>
        __asm volatile
 80025a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025a4:	f383 8811 	msr	BASEPRI, r3
 80025a8:	f3bf 8f6f 	isb	sy
 80025ac:	f3bf 8f4f 	dsb	sy
 80025b0:	613b      	str	r3, [r7, #16]
    }
 80025b2:	bf00      	nop
 80025b4:	e7fe      	b.n	80025b4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80025b6:	69fb      	ldr	r3, [r7, #28]
    }
 80025b8:	4618      	mov	r0, r3
 80025ba:	3720      	adds	r7, #32
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d103      	bne.n	80025dc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e002      	b.n	80025e2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80025ee:	2101      	movs	r1, #1
 80025f0:	69b8      	ldr	r0, [r7, #24]
 80025f2:	f7ff ff07 	bl	8002404 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025fe:	78fb      	ldrb	r3, [r7, #3]
 8002600:	68ba      	ldr	r2, [r7, #8]
 8002602:	68f9      	ldr	r1, [r7, #12]
 8002604:	2073      	movs	r0, #115	; 0x73
 8002606:	f004 f961 	bl	80068cc <SEGGER_SYSVIEW_RecordU32x3>
}
 800260a:	bf00      	nop
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
	...

08002614 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002614:	b590      	push	{r4, r7, lr}
 8002616:	b08f      	sub	sp, #60	; 0x3c
 8002618:	af02      	add	r7, sp, #8
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002620:	2300      	movs	r3, #0
 8002622:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10a      	bne.n	8002644 <xQueueReceive+0x30>
        __asm volatile
 800262e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002632:	f383 8811 	msr	BASEPRI, r3
 8002636:	f3bf 8f6f 	isb	sy
 800263a:	f3bf 8f4f 	dsb	sy
 800263e:	623b      	str	r3, [r7, #32]
    }
 8002640:	bf00      	nop
 8002642:	e7fe      	b.n	8002642 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d103      	bne.n	8002652 <xQueueReceive+0x3e>
 800264a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <xQueueReceive+0x42>
 8002652:	2301      	movs	r3, #1
 8002654:	e000      	b.n	8002658 <xQueueReceive+0x44>
 8002656:	2300      	movs	r3, #0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <xQueueReceive+0x5e>
        __asm volatile
 800265c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002660:	f383 8811 	msr	BASEPRI, r3
 8002664:	f3bf 8f6f 	isb	sy
 8002668:	f3bf 8f4f 	dsb	sy
 800266c:	61fb      	str	r3, [r7, #28]
    }
 800266e:	bf00      	nop
 8002670:	e7fe      	b.n	8002670 <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002672:	f001 f9c1 	bl	80039f8 <xTaskGetSchedulerState>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d102      	bne.n	8002682 <xQueueReceive+0x6e>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <xQueueReceive+0x72>
 8002682:	2301      	movs	r3, #1
 8002684:	e000      	b.n	8002688 <xQueueReceive+0x74>
 8002686:	2300      	movs	r3, #0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d10a      	bne.n	80026a2 <xQueueReceive+0x8e>
        __asm volatile
 800268c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002690:	f383 8811 	msr	BASEPRI, r3
 8002694:	f3bf 8f6f 	isb	sy
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	61bb      	str	r3, [r7, #24]
    }
 800269e:	bf00      	nop
 80026a0:	e7fe      	b.n	80026a0 <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80026a2:	f002 f86f 	bl	8004784 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80026a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d02f      	beq.n	8002712 <xQueueReceive+0xfe>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80026b6:	f000 f8bd 	bl	8002834 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80026ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026bc:	4618      	mov	r0, r3
 80026be:	f004 fedf 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 80026c2:	4604      	mov	r4, r0
 80026c4:	2000      	movs	r0, #0
 80026c6:	f004 fedb 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 80026ca:	4602      	mov	r2, r0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2101      	movs	r1, #1
 80026d0:	9100      	str	r1, [sp, #0]
 80026d2:	4621      	mov	r1, r4
 80026d4:	205c      	movs	r0, #92	; 0x5c
 80026d6:	f004 f96f 	bl	80069b8 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	1e5a      	subs	r2, r3, #1
 80026de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e0:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00f      	beq.n	800270a <xQueueReceive+0xf6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ec:	3310      	adds	r3, #16
 80026ee:	4618      	mov	r0, r3
 80026f0:	f000 ff70 	bl	80035d4 <xTaskRemoveFromEventList>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d007      	beq.n	800270a <xQueueReceive+0xf6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026fa:	4b4d      	ldr	r3, [pc, #308]	; (8002830 <xQueueReceive+0x21c>)
 80026fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002700:	601a      	str	r2, [r3, #0]
 8002702:	f3bf 8f4f 	dsb	sy
 8002706:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800270a:	f002 f86b 	bl	80047e4 <vPortExitCritical>
                return pdPASS;
 800270e:	2301      	movs	r3, #1
 8002710:	e08a      	b.n	8002828 <xQueueReceive+0x214>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d113      	bne.n	8002740 <xQueueReceive+0x12c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002718:	f002 f864 	bl	80047e4 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800271c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800271e:	4618      	mov	r0, r3
 8002720:	f004 feae 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 8002724:	4604      	mov	r4, r0
 8002726:	2000      	movs	r0, #0
 8002728:	f004 feaa 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 800272c:	4602      	mov	r2, r0
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2101      	movs	r1, #1
 8002732:	9100      	str	r1, [sp, #0]
 8002734:	4621      	mov	r1, r4
 8002736:	205c      	movs	r0, #92	; 0x5c
 8002738:	f004 f93e 	bl	80069b8 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800273c:	2300      	movs	r3, #0
 800273e:	e073      	b.n	8002828 <xQueueReceive+0x214>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	2b00      	cmp	r3, #0
 8002744:	d106      	bne.n	8002754 <xQueueReceive+0x140>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002746:	f107 0310 	add.w	r3, r7, #16
 800274a:	4618      	mov	r0, r3
 800274c:	f001 f81a 	bl	8003784 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002750:	2301      	movs	r3, #1
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002754:	f002 f846 	bl	80047e4 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002758:	f000 fc1c 	bl	8002f94 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800275c:	f002 f812 	bl	8004784 <vPortEnterCritical>
 8002760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002762:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002766:	b25b      	sxtb	r3, r3
 8002768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276c:	d103      	bne.n	8002776 <xQueueReceive+0x162>
 800276e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002778:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800277c:	b25b      	sxtb	r3, r3
 800277e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002782:	d103      	bne.n	800278c <xQueueReceive+0x178>
 8002784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800278c:	f002 f82a 	bl	80047e4 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002790:	1d3a      	adds	r2, r7, #4
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4611      	mov	r1, r2
 8002798:	4618      	mov	r0, r3
 800279a:	f001 f809 	bl	80037b0 <xTaskCheckForTimeOut>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d124      	bne.n	80027ee <xQueueReceive+0x1da>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027a6:	f000 f8bd 	bl	8002924 <prvIsQueueEmpty>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d018      	beq.n	80027e2 <xQueueReceive+0x1ce>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80027b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b2:	3324      	adds	r3, #36	; 0x24
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fe9f 	bl	80034fc <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80027be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027c0:	f000 f85e 	bl	8002880 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80027c4:	f000 fbf4 	bl	8002fb0 <xTaskResumeAll>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f47f af69 	bne.w	80026a2 <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 80027d0:	4b17      	ldr	r3, [pc, #92]	; (8002830 <xQueueReceive+0x21c>)
 80027d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	e75f      	b.n	80026a2 <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80027e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027e4:	f000 f84c 	bl	8002880 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80027e8:	f000 fbe2 	bl	8002fb0 <xTaskResumeAll>
 80027ec:	e759      	b.n	80026a2 <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80027ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027f0:	f000 f846 	bl	8002880 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027f4:	f000 fbdc 	bl	8002fb0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027fa:	f000 f893 	bl	8002924 <prvIsQueueEmpty>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	f43f af4e 	beq.w	80026a2 <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	4618      	mov	r0, r3
 800280a:	f004 fe39 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 800280e:	4604      	mov	r4, r0
 8002810:	2000      	movs	r0, #0
 8002812:	f004 fe35 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 8002816:	4602      	mov	r2, r0
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2101      	movs	r1, #1
 800281c:	9100      	str	r1, [sp, #0]
 800281e:	4621      	mov	r1, r4
 8002820:	205c      	movs	r0, #92	; 0x5c
 8002822:	f004 f8c9 	bl	80069b8 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002826:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002828:	4618      	mov	r0, r3
 800282a:	3734      	adds	r7, #52	; 0x34
 800282c:	46bd      	mov	sp, r7
 800282e:	bd90      	pop	{r4, r7, pc}
 8002830:	e000ed04 	.word	0xe000ed04

08002834 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d018      	beq.n	8002878 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	441a      	add	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68da      	ldr	r2, [r3, #12]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	429a      	cmp	r2, r3
 800285e:	d303      	bcc.n	8002868 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68d9      	ldr	r1, [r3, #12]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002870:	461a      	mov	r2, r3
 8002872:	6838      	ldr	r0, [r7, #0]
 8002874:	f005 f93c 	bl	8007af0 <memcpy>
    }
}
 8002878:	bf00      	nop
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b084      	sub	sp, #16
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002888:	f001 ff7c 	bl	8004784 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002892:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002894:	e011      	b.n	80028ba <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	2b00      	cmp	r3, #0
 800289c:	d012      	beq.n	80028c4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	3324      	adds	r3, #36	; 0x24
 80028a2:	4618      	mov	r0, r3
 80028a4:	f000 fe96 	bl	80035d4 <xTaskRemoveFromEventList>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80028ae:	f000 ffe5 	bl	800387c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80028b2:	7bfb      	ldrb	r3, [r7, #15]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80028ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	dce9      	bgt.n	8002896 <prvUnlockQueue+0x16>
 80028c2:	e000      	b.n	80028c6 <prvUnlockQueue+0x46>
                    break;
 80028c4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	22ff      	movs	r2, #255	; 0xff
 80028ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 80028ce:	f001 ff89 	bl	80047e4 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80028d2:	f001 ff57 	bl	8004784 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028dc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028de:	e011      	b.n	8002904 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	691b      	ldr	r3, [r3, #16]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d012      	beq.n	800290e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3310      	adds	r3, #16
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fe71 	bl	80035d4 <xTaskRemoveFromEventList>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028f8:	f000 ffc0 	bl	800387c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
 80028fe:	3b01      	subs	r3, #1
 8002900:	b2db      	uxtb	r3, r3
 8002902:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002904:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002908:	2b00      	cmp	r3, #0
 800290a:	dce9      	bgt.n	80028e0 <prvUnlockQueue+0x60>
 800290c:	e000      	b.n	8002910 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800290e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	22ff      	movs	r2, #255	; 0xff
 8002914:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 8002918:	f001 ff64 	bl	80047e4 <vPortExitCritical>
}
 800291c:	bf00      	nop
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800292c:	f001 ff2a 	bl	8004784 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	2b00      	cmp	r3, #0
 8002936:	d102      	bne.n	800293e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002938:	2301      	movs	r3, #1
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	e001      	b.n	8002942 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002942:	f001 ff4f 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8002946:	68fb      	ldr	r3, [r7, #12]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}

08002950 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10a      	bne.n	800297a <vQueueAddToRegistry+0x2a>
        __asm volatile
 8002964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002968:	f383 8811 	msr	BASEPRI, r3
 800296c:	f3bf 8f6f 	isb	sy
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	60fb      	str	r3, [r7, #12]
    }
 8002976:	bf00      	nop
 8002978:	e7fe      	b.n	8002978 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d024      	beq.n	80029ca <vQueueAddToRegistry+0x7a>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002980:	2300      	movs	r3, #0
 8002982:	617b      	str	r3, [r7, #20]
 8002984:	e01e      	b.n	80029c4 <vQueueAddToRegistry+0x74>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <vQueueAddToRegistry+0xa8>)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4413      	add	r3, r2
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	687a      	ldr	r2, [r7, #4]
 8002992:	429a      	cmp	r2, r3
 8002994:	d105      	bne.n	80029a2 <vQueueAddToRegistry+0x52>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	00db      	lsls	r3, r3, #3
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <vQueueAddToRegistry+0xa8>)
 800299c:	4413      	add	r3, r2
 800299e:	613b      	str	r3, [r7, #16]
                    break;
 80029a0:	e013      	b.n	80029ca <vQueueAddToRegistry+0x7a>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10a      	bne.n	80029be <vQueueAddToRegistry+0x6e>
 80029a8:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <vQueueAddToRegistry+0xa8>)
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d104      	bne.n	80029be <vQueueAddToRegistry+0x6e>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	4a0f      	ldr	r2, [pc, #60]	; (80029f8 <vQueueAddToRegistry+0xa8>)
 80029ba:	4413      	add	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	3301      	adds	r3, #1
 80029c2:	617b      	str	r3, [r7, #20]
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	2b07      	cmp	r3, #7
 80029c8:	d9dd      	bls.n	8002986 <vQueueAddToRegistry+0x36>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00f      	beq.n	80029f0 <vQueueAddToRegistry+0xa0>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4618      	mov	r0, r3
 80029e0:	f004 fd4e 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 80029e4:	4601      	mov	r1, r0
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	2071      	movs	r0, #113	; 0x71
 80029ec:	f003 ff14 	bl	8006818 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80029f0:	bf00      	nop
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	200000f4 	.word	0x200000f4

080029fc <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002a0c:	f001 feba 	bl	8004784 <vPortEnterCritical>
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a16:	b25b      	sxtb	r3, r3
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a1c:	d103      	bne.n	8002a26 <vQueueWaitForMessageRestricted+0x2a>
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a2c:	b25b      	sxtb	r3, r3
 8002a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a32:	d103      	bne.n	8002a3c <vQueueWaitForMessageRestricted+0x40>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a3c:	f001 fed2 	bl	80047e4 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d106      	bne.n	8002a56 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	3324      	adds	r3, #36	; 0x24
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68b9      	ldr	r1, [r7, #8]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f000 fd77 	bl	8003544 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a56:	6978      	ldr	r0, [r7, #20]
 8002a58:	f7ff ff12 	bl	8002880 <prvUnlockQueue>
    }
 8002a5c:	bf00      	nop
 8002a5e:	3718      	adds	r7, #24
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b08c      	sub	sp, #48	; 0x30
 8002a68:	af04      	add	r7, sp, #16
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	4613      	mov	r3, r2
 8002a72:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a74:	88fb      	ldrh	r3, [r7, #6]
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f001 ffaf 	bl	80049dc <pvPortMalloc>
 8002a7e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d013      	beq.n	8002aae <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a86:	2058      	movs	r0, #88	; 0x58
 8002a88:	f001 ffa8 	bl	80049dc <pvPortMalloc>
 8002a8c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d008      	beq.n	8002aa6 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a94:	2258      	movs	r2, #88	; 0x58
 8002a96:	2100      	movs	r1, #0
 8002a98:	69f8      	ldr	r0, [r7, #28]
 8002a9a:	f004 ffb4 	bl	8007a06 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	631a      	str	r2, [r3, #48]	; 0x30
 8002aa4:	e005      	b.n	8002ab2 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002aa6:	6978      	ldr	r0, [r7, #20]
 8002aa8:	f002 f852 	bl	8004b50 <vPortFree>
 8002aac:	e001      	b.n	8002ab2 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002ab2:	69fb      	ldr	r3, [r7, #28]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d013      	beq.n	8002ae0 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002ab8:	88fa      	ldrh	r2, [r7, #6]
 8002aba:	2300      	movs	r3, #0
 8002abc:	9303      	str	r3, [sp, #12]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	9302      	str	r3, [sp, #8]
 8002ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac4:	9301      	str	r3, [sp, #4]
 8002ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac8:	9300      	str	r3, [sp, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	68b9      	ldr	r1, [r7, #8]
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	f000 f80e 	bl	8002af0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002ad4:	69f8      	ldr	r0, [r7, #28]
 8002ad6:	f000 f899 	bl	8002c0c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002ada:	2301      	movs	r3, #1
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	e002      	b.n	8002ae6 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8002ae4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002ae6:	69bb      	ldr	r3, [r7, #24]
    }
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b088      	sub	sp, #32
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	60f8      	str	r0, [r7, #12]
 8002af8:	60b9      	str	r1, [r7, #8]
 8002afa:	607a      	str	r2, [r7, #4]
 8002afc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b00:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	461a      	mov	r2, r3
 8002b08:	21a5      	movs	r1, #165	; 0xa5
 8002b0a:	f004 ff7c 	bl	8007a06 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002b20:	69bb      	ldr	r3, [r7, #24]
 8002b22:	f023 0307 	bic.w	r3, r3, #7
 8002b26:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 0307 	and.w	r3, r3, #7
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00a      	beq.n	8002b48 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	f383 8811 	msr	BASEPRI, r3
 8002b3a:	f3bf 8f6f 	isb	sy
 8002b3e:	f3bf 8f4f 	dsb	sy
 8002b42:	617b      	str	r3, [r7, #20]
    }
 8002b44:	bf00      	nop
 8002b46:	e7fe      	b.n	8002b46 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01e      	beq.n	8002b8c <prvInitialiseNewTask+0x9c>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61fb      	str	r3, [r7, #28]
 8002b52:	e012      	b.n	8002b7a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b54:	68ba      	ldr	r2, [r7, #8]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	4413      	add	r3, r2
 8002b5a:	7819      	ldrb	r1, [r3, #0]
 8002b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	4413      	add	r3, r2
 8002b62:	3334      	adds	r3, #52	; 0x34
 8002b64:	460a      	mov	r2, r1
 8002b66:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	69fb      	ldr	r3, [r7, #28]
 8002b6c:	4413      	add	r3, r2
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	3301      	adds	r3, #1
 8002b78:	61fb      	str	r3, [r7, #28]
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	2b09      	cmp	r3, #9
 8002b7e:	d9e9      	bls.n	8002b54 <prvInitialiseNewTask+0x64>
 8002b80:	e000      	b.n	8002b84 <prvInitialiseNewTask+0x94>
            {
                break;
 8002b82:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d90a      	bls.n	8002ba8 <prvInitialiseNewTask+0xb8>
        __asm volatile
 8002b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b96:	f383 8811 	msr	BASEPRI, r3
 8002b9a:	f3bf 8f6f 	isb	sy
 8002b9e:	f3bf 8f4f 	dsb	sy
 8002ba2:	613b      	str	r3, [r7, #16]
    }
 8002ba4:	bf00      	nop
 8002ba6:	e7fe      	b.n	8002ba6 <prvInitialiseNewTask+0xb6>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d901      	bls.n	8002bb2 <prvInitialiseNewTask+0xc2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002bae:	2305      	movs	r3, #5
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bb6:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bbc:	649a      	str	r2, [r3, #72]	; 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fb8a 	bl	80022dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bca:	3318      	adds	r3, #24
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fb85 	bl	80022dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002bd6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	f1c3 0206 	rsb	r2, r3, #6
 8002bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002be6:	625a      	str	r2, [r3, #36]	; 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	68f9      	ldr	r1, [r7, #12]
 8002bec:	69b8      	ldr	r0, [r7, #24]
 8002bee:	f001 fc1b 	bl	8004428 <pxPortInitialiseStack>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c02:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c04:	bf00      	nop
 8002c06:	3720      	adds	r7, #32
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002c0c:	b5b0      	push	{r4, r5, r7, lr}
 8002c0e:	b086      	sub	sp, #24
 8002c10:	af02      	add	r7, sp, #8
 8002c12:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002c14:	f001 fdb6 	bl	8004784 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002c18:	4b4f      	ldr	r3, [pc, #316]	; (8002d58 <prvAddNewTaskToReadyList+0x14c>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	4a4e      	ldr	r2, [pc, #312]	; (8002d58 <prvAddNewTaskToReadyList+0x14c>)
 8002c20:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002c22:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <prvAddNewTaskToReadyList+0x150>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d109      	bne.n	8002c3e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002c2a:	4a4c      	ldr	r2, [pc, #304]	; (8002d5c <prvAddNewTaskToReadyList+0x150>)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002c30:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <prvAddNewTaskToReadyList+0x14c>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d110      	bne.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002c38:	f000 fe44 	bl	80038c4 <prvInitialiseTaskLists>
 8002c3c:	e00d      	b.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002c3e:	4b48      	ldr	r3, [pc, #288]	; (8002d60 <prvAddNewTaskToReadyList+0x154>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002c46:	4b45      	ldr	r3, [pc, #276]	; (8002d5c <prvAddNewTaskToReadyList+0x150>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d802      	bhi.n	8002c5a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c54:	4a41      	ldr	r2, [pc, #260]	; (8002d5c <prvAddNewTaskToReadyList+0x150>)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c5a:	4b42      	ldr	r3, [pc, #264]	; (8002d64 <prvAddNewTaskToReadyList+0x158>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	4a40      	ldr	r2, [pc, #256]	; (8002d64 <prvAddNewTaskToReadyList+0x158>)
 8002c62:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c64:	4b3f      	ldr	r3, [pc, #252]	; (8002d64 <prvAddNewTaskToReadyList+0x158>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d016      	beq.n	8002ca0 <prvAddNewTaskToReadyList+0x94>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f004 fb3d 	bl	80072f4 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8a:	461d      	mov	r5, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	461c      	mov	r4, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c96:	1ae3      	subs	r3, r4, r3
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	462b      	mov	r3, r5
 8002c9c:	f002 f8f6 	bl	8004e8c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f004 fbaa 	bl	80073fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cac:	2201      	movs	r2, #1
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	4b2d      	ldr	r3, [pc, #180]	; (8002d68 <prvAddNewTaskToReadyList+0x15c>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	4a2c      	ldr	r2, [pc, #176]	; (8002d68 <prvAddNewTaskToReadyList+0x15c>)
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cbe:	492b      	ldr	r1, [pc, #172]	; (8002d6c <prvAddNewTaskToReadyList+0x160>)
 8002cc0:	4613      	mov	r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	4413      	add	r3, r2
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	440b      	add	r3, r1
 8002cca:	3304      	adds	r3, #4
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	609a      	str	r2, [r3, #8]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	60da      	str	r2, [r3, #12]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	3204      	adds	r2, #4
 8002ce6:	605a      	str	r2, [r3, #4]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	1d1a      	adds	r2, r3, #4
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	4413      	add	r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	4a1b      	ldr	r2, [pc, #108]	; (8002d6c <prvAddNewTaskToReadyList+0x160>)
 8002cfe:	441a      	add	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	615a      	str	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d08:	4918      	ldr	r1, [pc, #96]	; (8002d6c <prvAddNewTaskToReadyList+0x160>)
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	4413      	add	r3, r2
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	440b      	add	r3, r1
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	1c59      	adds	r1, r3, #1
 8002d18:	4814      	ldr	r0, [pc, #80]	; (8002d6c <prvAddNewTaskToReadyList+0x160>)
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	009b      	lsls	r3, r3, #2
 8002d22:	4403      	add	r3, r0
 8002d24:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002d26:	f001 fd5d 	bl	80047e4 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002d2a:	4b0d      	ldr	r3, [pc, #52]	; (8002d60 <prvAddNewTaskToReadyList+0x154>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00e      	beq.n	8002d50 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002d32:	4b0a      	ldr	r3, [pc, #40]	; (8002d5c <prvAddNewTaskToReadyList+0x150>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d207      	bcs.n	8002d50 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002d40:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <prvAddNewTaskToReadyList+0x164>)
 8002d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d50:	bf00      	nop
 8002d52:	3710      	adds	r7, #16
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bdb0      	pop	{r4, r5, r7, pc}
 8002d58:	20000220 	.word	0x20000220
 8002d5c:	20000134 	.word	0x20000134
 8002d60:	2000022c 	.word	0x2000022c
 8002d64:	2000023c 	.word	0x2000023c
 8002d68:	20000228 	.word	0x20000228
 8002d6c:	20000138 	.word	0x20000138
 8002d70:	e000ed04 	.word	0xe000ed04

08002d74 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d7c:	f001 fd02 	bl	8004784 <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <vTaskDelete+0x18>
 8002d86:	4b48      	ldr	r3, [pc, #288]	; (8002ea8 <vTaskDelete+0x134>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	e000      	b.n	8002d8e <vTaskDelete+0x1a>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	3304      	adds	r3, #4
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fb0b 	bl	80023b0 <uxListRemove>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d115      	bne.n	8002dcc <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da4:	4941      	ldr	r1, [pc, #260]	; (8002eac <vTaskDelete+0x138>)
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10a      	bne.n	8002dcc <vTaskDelete+0x58>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dba:	2201      	movs	r2, #1
 8002dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc0:	43da      	mvns	r2, r3
 8002dc2:	4b3b      	ldr	r3, [pc, #236]	; (8002eb0 <vTaskDelete+0x13c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	4a39      	ldr	r2, [pc, #228]	; (8002eb0 <vTaskDelete+0x13c>)
 8002dca:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	3318      	adds	r3, #24
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fae9 	bl	80023b0 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002dde:	4b35      	ldr	r3, [pc, #212]	; (8002eb4 <vTaskDelete+0x140>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3301      	adds	r3, #1
 8002de4:	4a33      	ldr	r2, [pc, #204]	; (8002eb4 <vTaskDelete+0x140>)
 8002de6:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002de8:	4b2f      	ldr	r3, [pc, #188]	; (8002ea8 <vTaskDelete+0x134>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d118      	bne.n	8002e24 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	3304      	adds	r3, #4
 8002df6:	4619      	mov	r1, r3
 8002df8:	482f      	ldr	r0, [pc, #188]	; (8002eb8 <vTaskDelete+0x144>)
 8002dfa:	f7ff fa7c 	bl	80022f6 <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002dfe:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <vTaskDelete+0x148>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a2d      	ldr	r2, [pc, #180]	; (8002ebc <vTaskDelete+0x148>)
 8002e06:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f004 fb38 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 8002e10:	4603      	mov	r3, r0
 8002e12:	4619      	mov	r1, r3
 8002e14:	2022      	movs	r0, #34	; 0x22
 8002e16:	f003 fcc3 	bl	80067a0 <SEGGER_SYSVIEW_RecordU32>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f002 f89d 	bl	8004f5c <SYSVIEW_DeleteTask>
 8002e22:	e013      	b.n	8002e4c <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002e24:	4b26      	ldr	r3, [pc, #152]	; (8002ec0 <vTaskDelete+0x14c>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <vTaskDelete+0x14c>)
 8002e2c:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f004 fb25 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 8002e36:	4603      	mov	r3, r0
 8002e38:	4619      	mov	r1, r3
 8002e3a:	2022      	movs	r0, #34	; 0x22
 8002e3c:	f003 fcb0 	bl	80067a0 <SEGGER_SYSVIEW_RecordU32>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f002 f88a 	bl	8004f5c <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002e48:	f000 fdba 	bl	80039c0 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002e4c:	f001 fcca 	bl	80047e4 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002e50:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <vTaskDelete+0x134>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d002      	beq.n	8002e60 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f000 fda0 	bl	80039a0 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002e60:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <vTaskDelete+0x150>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d01b      	beq.n	8002ea0 <vTaskDelete+0x12c>
        {
            if( pxTCB == pxCurrentTCB )
 8002e68:	4b0f      	ldr	r3, [pc, #60]	; (8002ea8 <vTaskDelete+0x134>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d116      	bne.n	8002ea0 <vTaskDelete+0x12c>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <vTaskDelete+0x154>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d00a      	beq.n	8002e90 <vTaskDelete+0x11c>
        __asm volatile
 8002e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e7e:	f383 8811 	msr	BASEPRI, r3
 8002e82:	f3bf 8f6f 	isb	sy
 8002e86:	f3bf 8f4f 	dsb	sy
 8002e8a:	60bb      	str	r3, [r7, #8]
    }
 8002e8c:	bf00      	nop
 8002e8e:	e7fe      	b.n	8002e8e <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002e90:	4b0e      	ldr	r3, [pc, #56]	; (8002ecc <vTaskDelete+0x158>)
 8002e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e96:	601a      	str	r2, [r3, #0]
 8002e98:	f3bf 8f4f 	dsb	sy
 8002e9c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	20000134 	.word	0x20000134
 8002eac:	20000138 	.word	0x20000138
 8002eb0:	20000228 	.word	0x20000228
 8002eb4:	2000023c 	.word	0x2000023c
 8002eb8:	200001f4 	.word	0x200001f4
 8002ebc:	20000208 	.word	0x20000208
 8002ec0:	20000220 	.word	0x20000220
 8002ec4:	2000022c 	.word	0x2000022c
 8002ec8:	20000248 	.word	0x20000248
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002ed6:	4b27      	ldr	r3, [pc, #156]	; (8002f74 <vTaskStartScheduler+0xa4>)
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	2300      	movs	r3, #0
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2282      	movs	r2, #130	; 0x82
 8002ee2:	4925      	ldr	r1, [pc, #148]	; (8002f78 <vTaskStartScheduler+0xa8>)
 8002ee4:	4825      	ldr	r0, [pc, #148]	; (8002f7c <vTaskStartScheduler+0xac>)
 8002ee6:	f7ff fdbd 	bl	8002a64 <xTaskCreate>
 8002eea:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d102      	bne.n	8002ef8 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002ef2:	f001 f815 	bl	8003f20 <xTimerCreateTimerTask>
 8002ef6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d124      	bne.n	8002f48 <vTaskStartScheduler+0x78>
        __asm volatile
 8002efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f02:	f383 8811 	msr	BASEPRI, r3
 8002f06:	f3bf 8f6f 	isb	sy
 8002f0a:	f3bf 8f4f 	dsb	sy
 8002f0e:	60bb      	str	r3, [r7, #8]
    }
 8002f10:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <vTaskStartScheduler+0xb0>)
 8002f14:	f04f 32ff 	mov.w	r2, #4294967295
 8002f18:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f1a:	4b1a      	ldr	r3, [pc, #104]	; (8002f84 <vTaskStartScheduler+0xb4>)
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <vTaskStartScheduler+0xb8>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f26:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <vTaskStartScheduler+0xbc>)
 8002f28:	681a      	ldr	r2, [r3, #0]
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <vTaskStartScheduler+0xa4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d102      	bne.n	8002f38 <vTaskStartScheduler+0x68>
 8002f32:	f004 f9c3 	bl	80072bc <SEGGER_SYSVIEW_OnIdle>
 8002f36:	e004      	b.n	8002f42 <vTaskStartScheduler+0x72>
 8002f38:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <vTaskStartScheduler+0xbc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f004 fa1b 	bl	8007378 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002f42:	f001 faff 	bl	8004544 <xPortStartScheduler>
 8002f46:	e00e      	b.n	8002f66 <vTaskStartScheduler+0x96>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4e:	d10a      	bne.n	8002f66 <vTaskStartScheduler+0x96>
        __asm volatile
 8002f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f54:	f383 8811 	msr	BASEPRI, r3
 8002f58:	f3bf 8f6f 	isb	sy
 8002f5c:	f3bf 8f4f 	dsb	sy
 8002f60:	607b      	str	r3, [r7, #4]
    }
 8002f62:	bf00      	nop
 8002f64:	e7fe      	b.n	8002f64 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f66:	4b0a      	ldr	r3, [pc, #40]	; (8002f90 <vTaskStartScheduler+0xc0>)
 8002f68:	681b      	ldr	r3, [r3, #0]
}
 8002f6a:	bf00      	nop
 8002f6c:	3710      	adds	r7, #16
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	20000244 	.word	0x20000244
 8002f78:	08008784 	.word	0x08008784
 8002f7c:	08003895 	.word	0x08003895
 8002f80:	20000240 	.word	0x20000240
 8002f84:	2000022c 	.word	0x2000022c
 8002f88:	20000224 	.word	0x20000224
 8002f8c:	20000134 	.word	0x20000134
 8002f90:	2000000c 	.word	0x2000000c

08002f94 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <vTaskSuspendAll+0x18>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	4a03      	ldr	r2, [pc, #12]	; (8002fac <vTaskSuspendAll+0x18>)
 8002fa0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	20000248 	.word	0x20000248

08002fb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b088      	sub	sp, #32
 8002fb4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fbe:	4b73      	ldr	r3, [pc, #460]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <xTaskResumeAll+0x2c>
        __asm volatile
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	607b      	str	r3, [r7, #4]
    }
 8002fd8:	bf00      	nop
 8002fda:	e7fe      	b.n	8002fda <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002fdc:	f001 fbd2 	bl	8004784 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002fe0:	4b6a      	ldr	r3, [pc, #424]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	4a69      	ldr	r2, [pc, #420]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fe8:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002fea:	4b68      	ldr	r3, [pc, #416]	; (800318c <xTaskResumeAll+0x1dc>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f040 80c4 	bne.w	800317c <xTaskResumeAll+0x1cc>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002ff4:	4b66      	ldr	r3, [pc, #408]	; (8003190 <xTaskResumeAll+0x1e0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 80bf 	beq.w	800317c <xTaskResumeAll+0x1cc>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ffe:	e08e      	b.n	800311e <xTaskResumeAll+0x16e>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003000:	4b64      	ldr	r3, [pc, #400]	; (8003194 <xTaskResumeAll+0x1e4>)
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003008:	69fb      	ldr	r3, [r7, #28]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	69fa      	ldr	r2, [r7, #28]
 8003014:	6a12      	ldr	r2, [r2, #32]
 8003016:	609a      	str	r2, [r3, #8]
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	69d2      	ldr	r2, [r2, #28]
 8003020:	605a      	str	r2, [r3, #4]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	685a      	ldr	r2, [r3, #4]
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3318      	adds	r3, #24
 800302a:	429a      	cmp	r2, r3
 800302c:	d103      	bne.n	8003036 <xTaskResumeAll+0x86>
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	6a1a      	ldr	r2, [r3, #32]
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	605a      	str	r2, [r3, #4]
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	2200      	movs	r2, #0
 800303a:	629a      	str	r2, [r3, #40]	; 0x28
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1e5a      	subs	r2, r3, #1
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	68d2      	ldr	r2, [r2, #12]
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	6892      	ldr	r2, [r2, #8]
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	3304      	adds	r3, #4
 8003068:	429a      	cmp	r2, r3
 800306a:	d103      	bne.n	8003074 <xTaskResumeAll+0xc4>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	605a      	str	r2, [r3, #4]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	2200      	movs	r2, #0
 8003078:	615a      	str	r2, [r3, #20]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	1e5a      	subs	r2, r3, #1
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	4618      	mov	r0, r3
 8003088:	f004 f9b8 	bl	80073fc <SEGGER_SYSVIEW_OnTaskStartReady>
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	2201      	movs	r2, #1
 8003092:	409a      	lsls	r2, r3
 8003094:	4b40      	ldr	r3, [pc, #256]	; (8003198 <xTaskResumeAll+0x1e8>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4313      	orrs	r3, r2
 800309a:	4a3f      	ldr	r2, [pc, #252]	; (8003198 <xTaskResumeAll+0x1e8>)
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a2:	493e      	ldr	r1, [pc, #248]	; (800319c <xTaskResumeAll+0x1ec>)
 80030a4:	4613      	mov	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	3304      	adds	r3, #4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	609a      	str	r2, [r3, #8]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	60da      	str	r2, [r3, #12]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	3204      	adds	r2, #4
 80030ca:	605a      	str	r2, [r3, #4]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	1d1a      	adds	r2, r3, #4
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	609a      	str	r2, [r3, #8]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d8:	4613      	mov	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	4413      	add	r3, r2
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	4a2e      	ldr	r2, [pc, #184]	; (800319c <xTaskResumeAll+0x1ec>)
 80030e2:	441a      	add	r2, r3
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	615a      	str	r2, [r3, #20]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ec:	492b      	ldr	r1, [pc, #172]	; (800319c <xTaskResumeAll+0x1ec>)
 80030ee:	4613      	mov	r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	440b      	add	r3, r1
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	1c59      	adds	r1, r3, #1
 80030fc:	4827      	ldr	r0, [pc, #156]	; (800319c <xTaskResumeAll+0x1ec>)
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	4403      	add	r3, r0
 8003108:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800310e:	4b24      	ldr	r3, [pc, #144]	; (80031a0 <xTaskResumeAll+0x1f0>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003114:	429a      	cmp	r2, r3
 8003116:	d302      	bcc.n	800311e <xTaskResumeAll+0x16e>
                    {
                        xYieldPending = pdTRUE;
 8003118:	4b22      	ldr	r3, [pc, #136]	; (80031a4 <xTaskResumeAll+0x1f4>)
 800311a:	2201      	movs	r2, #1
 800311c:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <xTaskResumeAll+0x1e4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2b00      	cmp	r3, #0
 8003124:	f47f af6c 	bne.w	8003000 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <xTaskResumeAll+0x182>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800312e:	f000 fc47 	bl	80039c0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003132:	4b1d      	ldr	r3, [pc, #116]	; (80031a8 <xTaskResumeAll+0x1f8>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <xTaskResumeAll+0x1b0>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800313e:	f000 f859 	bl	80031f4 <xTaskIncrementTick>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <xTaskResumeAll+0x19e>
                            {
                                xYieldPending = pdTRUE;
 8003148:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <xTaskResumeAll+0x1f4>)
 800314a:	2201      	movs	r2, #1
 800314c:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3b01      	subs	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d1f1      	bne.n	800313e <xTaskResumeAll+0x18e>

                        xPendedTicks = 0;
 800315a:	4b13      	ldr	r3, [pc, #76]	; (80031a8 <xTaskResumeAll+0x1f8>)
 800315c:	2200      	movs	r2, #0
 800315e:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003160:	4b10      	ldr	r3, [pc, #64]	; (80031a4 <xTaskResumeAll+0x1f4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d009      	beq.n	800317c <xTaskResumeAll+0x1cc>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003168:	2301      	movs	r3, #1
 800316a:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800316c:	4b0f      	ldr	r3, [pc, #60]	; (80031ac <xTaskResumeAll+0x1fc>)
 800316e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003172:	601a      	str	r2, [r3, #0]
 8003174:	f3bf 8f4f 	dsb	sy
 8003178:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 800317c:	f001 fb32 	bl	80047e4 <vPortExitCritical>

    return xAlreadyYielded;
 8003180:	69bb      	ldr	r3, [r7, #24]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3720      	adds	r7, #32
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	20000248 	.word	0x20000248
 8003190:	20000220 	.word	0x20000220
 8003194:	200001e0 	.word	0x200001e0
 8003198:	20000228 	.word	0x20000228
 800319c:	20000138 	.word	0x20000138
 80031a0:	20000134 	.word	0x20000134
 80031a4:	20000234 	.word	0x20000234
 80031a8:	20000230 	.word	0x20000230
 80031ac:	e000ed04 	.word	0xe000ed04

080031b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <xTaskGetTickCount+0x1c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031bc:	687b      	ldr	r3, [r7, #4]
}
 80031be:	4618      	mov	r0, r3
 80031c0:	370c      	adds	r7, #12
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000224 	.word	0x20000224

080031d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031d6:	f001 fbc1 	bl	800495c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80031da:	2300      	movs	r3, #0
 80031dc:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80031de:	4b04      	ldr	r3, [pc, #16]	; (80031f0 <xTaskGetTickCountFromISR+0x20>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80031e4:	683b      	ldr	r3, [r7, #0]
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	20000224 	.word	0x20000224

080031f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b08a      	sub	sp, #40	; 0x28
 80031f8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80031fa:	2300      	movs	r3, #0
 80031fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80031fe:	4b7f      	ldr	r3, [pc, #508]	; (80033fc <xTaskIncrementTick+0x208>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 80f0 	bne.w	80033e8 <xTaskIncrementTick+0x1f4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003208:	4b7d      	ldr	r3, [pc, #500]	; (8003400 <xTaskIncrementTick+0x20c>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	3301      	adds	r3, #1
 800320e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003210:	4a7b      	ldr	r2, [pc, #492]	; (8003400 <xTaskIncrementTick+0x20c>)
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003216:	6a3b      	ldr	r3, [r7, #32]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d120      	bne.n	800325e <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800321c:	4b79      	ldr	r3, [pc, #484]	; (8003404 <xTaskIncrementTick+0x210>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <xTaskIncrementTick+0x48>
        __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	607b      	str	r3, [r7, #4]
    }
 8003238:	bf00      	nop
 800323a:	e7fe      	b.n	800323a <xTaskIncrementTick+0x46>
 800323c:	4b71      	ldr	r3, [pc, #452]	; (8003404 <xTaskIncrementTick+0x210>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	4b71      	ldr	r3, [pc, #452]	; (8003408 <xTaskIncrementTick+0x214>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a6f      	ldr	r2, [pc, #444]	; (8003404 <xTaskIncrementTick+0x210>)
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	4a6f      	ldr	r2, [pc, #444]	; (8003408 <xTaskIncrementTick+0x214>)
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6e      	ldr	r3, [pc, #440]	; (800340c <xTaskIncrementTick+0x218>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	3301      	adds	r3, #1
 8003256:	4a6d      	ldr	r2, [pc, #436]	; (800340c <xTaskIncrementTick+0x218>)
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	f000 fbb1 	bl	80039c0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800325e:	4b6c      	ldr	r3, [pc, #432]	; (8003410 <xTaskIncrementTick+0x21c>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	6a3a      	ldr	r2, [r7, #32]
 8003264:	429a      	cmp	r2, r3
 8003266:	f0c0 80aa 	bcc.w	80033be <xTaskIncrementTick+0x1ca>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800326a:	4b66      	ldr	r3, [pc, #408]	; (8003404 <xTaskIncrementTick+0x210>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003274:	4b66      	ldr	r3, [pc, #408]	; (8003410 <xTaskIncrementTick+0x21c>)
 8003276:	f04f 32ff 	mov.w	r2, #4294967295
 800327a:	601a      	str	r2, [r3, #0]
                    break;
 800327c:	e09f      	b.n	80033be <xTaskIncrementTick+0x1ca>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <xTaskIncrementTick+0x210>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 800328e:	6a3a      	ldr	r2, [r7, #32]
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	429a      	cmp	r2, r3
 8003294:	d203      	bcs.n	800329e <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003296:	4a5e      	ldr	r2, [pc, #376]	; (8003410 <xTaskIncrementTick+0x21c>)
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 800329c:	e08f      	b.n	80033be <xTaskIncrementTick+0x1ca>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	695b      	ldr	r3, [r3, #20]
 80032a2:	613b      	str	r3, [r7, #16]
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	68d2      	ldr	r2, [r2, #12]
 80032ac:	609a      	str	r2, [r3, #8]
 80032ae:	69bb      	ldr	r3, [r7, #24]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	6892      	ldr	r2, [r2, #8]
 80032b6:	605a      	str	r2, [r3, #4]
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	685a      	ldr	r2, [r3, #4]
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	3304      	adds	r3, #4
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d103      	bne.n	80032cc <xTaskIncrementTick+0xd8>
 80032c4:	69bb      	ldr	r3, [r7, #24]
 80032c6:	68da      	ldr	r2, [r3, #12]
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2200      	movs	r2, #0
 80032d0:	615a      	str	r2, [r3, #20]
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	1e5a      	subs	r2, r3, #1
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01e      	beq.n	8003322 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80032e4:	69bb      	ldr	r3, [r7, #24]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	6a12      	ldr	r2, [r2, #32]
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	6a1b      	ldr	r3, [r3, #32]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	69d2      	ldr	r2, [r2, #28]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	3318      	adds	r3, #24
 8003306:	429a      	cmp	r2, r3
 8003308:	d103      	bne.n	8003312 <xTaskIncrementTick+0x11e>
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	6a1a      	ldr	r2, [r3, #32]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	605a      	str	r2, [r3, #4]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2200      	movs	r2, #0
 8003316:	629a      	str	r2, [r3, #40]	; 0x28
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	1e5a      	subs	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	4618      	mov	r0, r3
 8003326:	f004 f869 	bl	80073fc <SEGGER_SYSVIEW_OnTaskStartReady>
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332e:	2201      	movs	r2, #1
 8003330:	409a      	lsls	r2, r3
 8003332:	4b38      	ldr	r3, [pc, #224]	; (8003414 <xTaskIncrementTick+0x220>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4313      	orrs	r3, r2
 8003338:	4a36      	ldr	r2, [pc, #216]	; (8003414 <xTaskIncrementTick+0x220>)
 800333a:	6013      	str	r3, [r2, #0]
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4935      	ldr	r1, [pc, #212]	; (8003418 <xTaskIncrementTick+0x224>)
 8003342:	4613      	mov	r3, r2
 8003344:	009b      	lsls	r3, r3, #2
 8003346:	4413      	add	r3, r2
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	440b      	add	r3, r1
 800334c:	3304      	adds	r3, #4
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	60bb      	str	r3, [r7, #8]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	689a      	ldr	r2, [r3, #8]
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	60da      	str	r2, [r3, #12]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	69ba      	ldr	r2, [r7, #24]
 8003366:	3204      	adds	r2, #4
 8003368:	605a      	str	r2, [r3, #4]
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	1d1a      	adds	r2, r3, #4
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003376:	4613      	mov	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	4413      	add	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4a26      	ldr	r2, [pc, #152]	; (8003418 <xTaskIncrementTick+0x224>)
 8003380:	441a      	add	r2, r3
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	615a      	str	r2, [r3, #20]
 8003386:	69bb      	ldr	r3, [r7, #24]
 8003388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800338a:	4923      	ldr	r1, [pc, #140]	; (8003418 <xTaskIncrementTick+0x224>)
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	1c59      	adds	r1, r3, #1
 800339a:	481f      	ldr	r0, [pc, #124]	; (8003418 <xTaskIncrementTick+0x224>)
 800339c:	4613      	mov	r3, r2
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4403      	add	r3, r0
 80033a6:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033ac:	4b1b      	ldr	r3, [pc, #108]	; (800341c <xTaskIncrementTick+0x228>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b2:	429a      	cmp	r2, r3
 80033b4:	f67f af59 	bls.w	800326a <xTaskIncrementTick+0x76>
                        {
                            xSwitchRequired = pdTRUE;
 80033b8:	2301      	movs	r3, #1
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033bc:	e755      	b.n	800326a <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033be:	4b17      	ldr	r3, [pc, #92]	; (800341c <xTaskIncrementTick+0x228>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033c4:	4914      	ldr	r1, [pc, #80]	; (8003418 <xTaskIncrementTick+0x224>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d901      	bls.n	80033da <xTaskIncrementTick+0x1e6>
            {
                xSwitchRequired = pdTRUE;
 80033d6:	2301      	movs	r3, #1
 80033d8:	627b      	str	r3, [r7, #36]	; 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 80033da:	4b11      	ldr	r3, [pc, #68]	; (8003420 <xTaskIncrementTick+0x22c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d007      	beq.n	80033f2 <xTaskIncrementTick+0x1fe>
            {
                xSwitchRequired = pdTRUE;
 80033e2:	2301      	movs	r3, #1
 80033e4:	627b      	str	r3, [r7, #36]	; 0x24
 80033e6:	e004      	b.n	80033f2 <xTaskIncrementTick+0x1fe>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80033e8:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <xTaskIncrementTick+0x230>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	3301      	adds	r3, #1
 80033ee:	4a0d      	ldr	r2, [pc, #52]	; (8003424 <xTaskIncrementTick+0x230>)
 80033f0:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3728      	adds	r7, #40	; 0x28
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	20000248 	.word	0x20000248
 8003400:	20000224 	.word	0x20000224
 8003404:	200001d8 	.word	0x200001d8
 8003408:	200001dc 	.word	0x200001dc
 800340c:	20000238 	.word	0x20000238
 8003410:	20000240 	.word	0x20000240
 8003414:	20000228 	.word	0x20000228
 8003418:	20000138 	.word	0x20000138
 800341c:	20000134 	.word	0x20000134
 8003420:	20000234 	.word	0x20000234
 8003424:	20000230 	.word	0x20000230

08003428 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800342e:	4b2d      	ldr	r3, [pc, #180]	; (80034e4 <vTaskSwitchContext+0xbc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003436:	4b2c      	ldr	r3, [pc, #176]	; (80034e8 <vTaskSwitchContext+0xc0>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 800343c:	e04d      	b.n	80034da <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 800343e:	4b2a      	ldr	r3, [pc, #168]	; (80034e8 <vTaskSwitchContext+0xc0>)
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003444:	4b29      	ldr	r3, [pc, #164]	; (80034ec <vTaskSwitchContext+0xc4>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003452:	7afb      	ldrb	r3, [r7, #11]
 8003454:	f1c3 031f 	rsb	r3, r3, #31
 8003458:	617b      	str	r3, [r7, #20]
 800345a:	4925      	ldr	r1, [pc, #148]	; (80034f0 <vTaskSwitchContext+0xc8>)
 800345c:	697a      	ldr	r2, [r7, #20]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10a      	bne.n	8003484 <vTaskSwitchContext+0x5c>
        __asm volatile
 800346e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003472:	f383 8811 	msr	BASEPRI, r3
 8003476:	f3bf 8f6f 	isb	sy
 800347a:	f3bf 8f4f 	dsb	sy
 800347e:	607b      	str	r3, [r7, #4]
    }
 8003480:	bf00      	nop
 8003482:	e7fe      	b.n	8003482 <vTaskSwitchContext+0x5a>
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4613      	mov	r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <vTaskSwitchContext+0xc8>)
 8003490:	4413      	add	r3, r2
 8003492:	613b      	str	r3, [r7, #16]
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	685a      	ldr	r2, [r3, #4]
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	605a      	str	r2, [r3, #4]
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	3308      	adds	r3, #8
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d104      	bne.n	80034b4 <vTaskSwitchContext+0x8c>
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	605a      	str	r2, [r3, #4]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	4a0e      	ldr	r2, [pc, #56]	; (80034f4 <vTaskSwitchContext+0xcc>)
 80034bc:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034be:	4b0d      	ldr	r3, [pc, #52]	; (80034f4 <vTaskSwitchContext+0xcc>)
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b0d      	ldr	r3, [pc, #52]	; (80034f8 <vTaskSwitchContext+0xd0>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d102      	bne.n	80034d0 <vTaskSwitchContext+0xa8>
 80034ca:	f003 fef7 	bl	80072bc <SEGGER_SYSVIEW_OnIdle>
}
 80034ce:	e004      	b.n	80034da <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 80034d0:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <vTaskSwitchContext+0xcc>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 ff4f 	bl	8007378 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000248 	.word	0x20000248
 80034e8:	20000234 	.word	0x20000234
 80034ec:	20000228 	.word	0x20000228
 80034f0:	20000138 	.word	0x20000138
 80034f4:	20000134 	.word	0x20000134
 80034f8:	20000244 	.word	0x20000244

080034fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10a      	bne.n	8003522 <vTaskPlaceOnEventList+0x26>
        __asm volatile
 800350c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003510:	f383 8811 	msr	BASEPRI, r3
 8003514:	f3bf 8f6f 	isb	sy
 8003518:	f3bf 8f4f 	dsb	sy
 800351c:	60fb      	str	r3, [r7, #12]
    }
 800351e:	bf00      	nop
 8003520:	e7fe      	b.n	8003520 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003522:	4b07      	ldr	r3, [pc, #28]	; (8003540 <vTaskPlaceOnEventList+0x44>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3318      	adds	r3, #24
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe ff07 	bl	800233e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003530:	2101      	movs	r1, #1
 8003532:	6838      	ldr	r0, [r7, #0]
 8003534:	f000 fc74 	bl	8003e20 <prvAddCurrentTaskToDelayedList>
}
 8003538:	bf00      	nop
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	20000134 	.word	0x20000134

08003544 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10a      	bne.n	800356c <vTaskPlaceOnEventListRestricted+0x28>
        __asm volatile
 8003556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355a:	f383 8811 	msr	BASEPRI, r3
 800355e:	f3bf 8f6f 	isb	sy
 8003562:	f3bf 8f4f 	dsb	sy
 8003566:	613b      	str	r3, [r7, #16]
    }
 8003568:	bf00      	nop
 800356a:	e7fe      	b.n	800356a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	617b      	str	r3, [r7, #20]
 8003572:	4b17      	ldr	r3, [pc, #92]	; (80035d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	697a      	ldr	r2, [r7, #20]
 8003578:	61da      	str	r2, [r3, #28]
 800357a:	4b15      	ldr	r3, [pc, #84]	; (80035d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	697a      	ldr	r2, [r7, #20]
 8003580:	6892      	ldr	r2, [r2, #8]
 8003582:	621a      	str	r2, [r3, #32]
 8003584:	4b12      	ldr	r3, [pc, #72]	; (80035d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	3218      	adds	r2, #24
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f103 0218 	add.w	r2, r3, #24
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	609a      	str	r2, [r3, #8]
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <vTaskPlaceOnEventListRestricted+0x8c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	629a      	str	r2, [r3, #40]	; 0x28
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d002      	beq.n	80035ba <vTaskPlaceOnEventListRestricted+0x76>
        {
            xTicksToWait = portMAX_DELAY;
 80035b4:	f04f 33ff 	mov.w	r3, #4294967295
 80035b8:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035ba:	2024      	movs	r0, #36	; 0x24
 80035bc:	f003 f8d2 	bl	8006764 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035c0:	6879      	ldr	r1, [r7, #4]
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f000 fc2c 	bl	8003e20 <prvAddCurrentTaskToDelayedList>
    }
 80035c8:	bf00      	nop
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000134 	.word	0x20000134

080035d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b08a      	sub	sp, #40	; 0x28
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10a      	bne.n	8003600 <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80035ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ee:	f383 8811 	msr	BASEPRI, r3
 80035f2:	f3bf 8f6f 	isb	sy
 80035f6:	f3bf 8f4f 	dsb	sy
 80035fa:	60fb      	str	r3, [r7, #12]
    }
 80035fc:	bf00      	nop
 80035fe:	e7fe      	b.n	80035fe <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003600:	6a3b      	ldr	r3, [r7, #32]
 8003602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	6a3b      	ldr	r3, [r7, #32]
 8003608:	69db      	ldr	r3, [r3, #28]
 800360a:	6a3a      	ldr	r2, [r7, #32]
 800360c:	6a12      	ldr	r2, [r2, #32]
 800360e:	609a      	str	r2, [r3, #8]
 8003610:	6a3b      	ldr	r3, [r7, #32]
 8003612:	6a1b      	ldr	r3, [r3, #32]
 8003614:	6a3a      	ldr	r2, [r7, #32]
 8003616:	69d2      	ldr	r2, [r2, #28]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	6a3b      	ldr	r3, [r7, #32]
 8003620:	3318      	adds	r3, #24
 8003622:	429a      	cmp	r2, r3
 8003624:	d103      	bne.n	800362e <xTaskRemoveFromEventList+0x5a>
 8003626:	6a3b      	ldr	r3, [r7, #32]
 8003628:	6a1a      	ldr	r2, [r3, #32]
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	605a      	str	r2, [r3, #4]
 800362e:	6a3b      	ldr	r3, [r7, #32]
 8003630:	2200      	movs	r2, #0
 8003632:	629a      	str	r2, [r3, #40]	; 0x28
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	1e5a      	subs	r2, r3, #1
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800363e:	4b4b      	ldr	r3, [pc, #300]	; (800376c <xTaskRemoveFromEventList+0x198>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d162      	bne.n	800370c <xTaskRemoveFromEventList+0x138>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	6a3a      	ldr	r2, [r7, #32]
 8003652:	68d2      	ldr	r2, [r2, #12]
 8003654:	609a      	str	r2, [r3, #8]
 8003656:	6a3b      	ldr	r3, [r7, #32]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	6a3a      	ldr	r2, [r7, #32]
 800365c:	6892      	ldr	r2, [r2, #8]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	3304      	adds	r3, #4
 8003668:	429a      	cmp	r2, r3
 800366a:	d103      	bne.n	8003674 <xTaskRemoveFromEventList+0xa0>
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	68da      	ldr	r2, [r3, #12]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	2200      	movs	r2, #0
 8003678:	615a      	str	r2, [r3, #20]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1e5a      	subs	r2, r3, #1
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	4618      	mov	r0, r3
 8003688:	f003 feb8 	bl	80073fc <SEGGER_SYSVIEW_OnTaskStartReady>
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	2201      	movs	r2, #1
 8003692:	409a      	lsls	r2, r3
 8003694:	4b36      	ldr	r3, [pc, #216]	; (8003770 <xTaskRemoveFromEventList+0x19c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4313      	orrs	r3, r2
 800369a:	4a35      	ldr	r2, [pc, #212]	; (8003770 <xTaskRemoveFromEventList+0x19c>)
 800369c:	6013      	str	r3, [r2, #0]
 800369e:	6a3b      	ldr	r3, [r7, #32]
 80036a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036a2:	4934      	ldr	r1, [pc, #208]	; (8003774 <xTaskRemoveFromEventList+0x1a0>)
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3304      	adds	r3, #4
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
 80036b6:	693a      	ldr	r2, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	689a      	ldr	r2, [r3, #8]
 80036be:	6a3b      	ldr	r3, [r7, #32]
 80036c0:	60da      	str	r2, [r3, #12]
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	6a3a      	ldr	r2, [r7, #32]
 80036c8:	3204      	adds	r2, #4
 80036ca:	605a      	str	r2, [r3, #4]
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	1d1a      	adds	r2, r3, #4
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	6a3b      	ldr	r3, [r7, #32]
 80036d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4a24      	ldr	r2, [pc, #144]	; (8003774 <xTaskRemoveFromEventList+0x1a0>)
 80036e2:	441a      	add	r2, r3
 80036e4:	6a3b      	ldr	r3, [r7, #32]
 80036e6:	615a      	str	r2, [r3, #20]
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4921      	ldr	r1, [pc, #132]	; (8003774 <xTaskRemoveFromEventList+0x1a0>)
 80036ee:	4613      	mov	r3, r2
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	4413      	add	r3, r2
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	440b      	add	r3, r1
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	1c59      	adds	r1, r3, #1
 80036fc:	481d      	ldr	r0, [pc, #116]	; (8003774 <xTaskRemoveFromEventList+0x1a0>)
 80036fe:	4613      	mov	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4413      	add	r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	4403      	add	r3, r0
 8003708:	6019      	str	r1, [r3, #0]
 800370a:	e01b      	b.n	8003744 <xTaskRemoveFromEventList+0x170>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800370c:	4b1a      	ldr	r3, [pc, #104]	; (8003778 <xTaskRemoveFromEventList+0x1a4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	61bb      	str	r3, [r7, #24]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	61da      	str	r2, [r3, #28]
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	689a      	ldr	r2, [r3, #8]
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	621a      	str	r2, [r3, #32]
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	6a3a      	ldr	r2, [r7, #32]
 8003726:	3218      	adds	r2, #24
 8003728:	605a      	str	r2, [r3, #4]
 800372a:	6a3b      	ldr	r3, [r7, #32]
 800372c:	f103 0218 	add.w	r2, r3, #24
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	609a      	str	r2, [r3, #8]
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	4a10      	ldr	r2, [pc, #64]	; (8003778 <xTaskRemoveFromEventList+0x1a4>)
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <xTaskRemoveFromEventList+0x1a4>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	3301      	adds	r3, #1
 8003740:	4a0d      	ldr	r2, [pc, #52]	; (8003778 <xTaskRemoveFromEventList+0x1a4>)
 8003742:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003744:	6a3b      	ldr	r3, [r7, #32]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4b0c      	ldr	r3, [pc, #48]	; (800377c <xTaskRemoveFromEventList+0x1a8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374e:	429a      	cmp	r2, r3
 8003750:	d905      	bls.n	800375e <xTaskRemoveFromEventList+0x18a>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003752:	2301      	movs	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	; 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003756:	4b0a      	ldr	r3, [pc, #40]	; (8003780 <xTaskRemoveFromEventList+0x1ac>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	e001      	b.n	8003762 <xTaskRemoveFromEventList+0x18e>
    }
    else
    {
        xReturn = pdFALSE;
 800375e:	2300      	movs	r3, #0
 8003760:	627b      	str	r3, [r7, #36]	; 0x24
    }

    return xReturn;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003764:	4618      	mov	r0, r3
 8003766:	3728      	adds	r7, #40	; 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000248 	.word	0x20000248
 8003770:	20000228 	.word	0x20000228
 8003774:	20000138 	.word	0x20000138
 8003778:	200001e0 	.word	0x200001e0
 800377c:	20000134 	.word	0x20000134
 8003780:	20000234 	.word	0x20000234

08003784 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800378c:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <vTaskInternalSetTimeOutState+0x24>)
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003794:	4b05      	ldr	r3, [pc, #20]	; (80037ac <vTaskInternalSetTimeOutState+0x28>)
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	605a      	str	r2, [r3, #4]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	20000238 	.word	0x20000238
 80037ac:	20000224 	.word	0x20000224

080037b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b088      	sub	sp, #32
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 80037c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	613b      	str	r3, [r7, #16]
    }
 80037d2:	bf00      	nop
 80037d4:	e7fe      	b.n	80037d4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d10a      	bne.n	80037f2 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 80037dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037e0:	f383 8811 	msr	BASEPRI, r3
 80037e4:	f3bf 8f6f 	isb	sy
 80037e8:	f3bf 8f4f 	dsb	sy
 80037ec:	60fb      	str	r3, [r7, #12]
    }
 80037ee:	bf00      	nop
 80037f0:	e7fe      	b.n	80037f0 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 80037f2:	f000 ffc7 	bl	8004784 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80037f6:	4b1f      	ldr	r3, [pc, #124]	; (8003874 <xTaskCheckForTimeOut+0xc4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	1ad3      	subs	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800380e:	d102      	bne.n	8003816 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003810:	2300      	movs	r3, #0
 8003812:	61fb      	str	r3, [r7, #28]
 8003814:	e026      	b.n	8003864 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	4b17      	ldr	r3, [pc, #92]	; (8003878 <xTaskCheckForTimeOut+0xc8>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	429a      	cmp	r2, r3
 8003820:	d00a      	beq.n	8003838 <xTaskCheckForTimeOut+0x88>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	429a      	cmp	r2, r3
 800382a:	d305      	bcc.n	8003838 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800382c:	2301      	movs	r3, #1
 800382e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	e015      	b.n	8003864 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	429a      	cmp	r2, r3
 8003840:	d20b      	bcs.n	800385a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	1ad2      	subs	r2, r2, r3
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f7ff ff98 	bl	8003784 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e004      	b.n	8003864 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003860:	2301      	movs	r3, #1
 8003862:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003864:	f000 ffbe 	bl	80047e4 <vPortExitCritical>

    return xReturn;
 8003868:	69fb      	ldr	r3, [r7, #28]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3720      	adds	r7, #32
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	20000224 	.word	0x20000224
 8003878:	20000238 	.word	0x20000238

0800387c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003880:	4b03      	ldr	r3, [pc, #12]	; (8003890 <vTaskMissedYield+0x14>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
}
 8003886:	bf00      	nop
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr
 8003890:	20000234 	.word	0x20000234

08003894 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800389c:	f000 f852 	bl	8003944 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <prvIdleTask+0x28>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d9f9      	bls.n	800389c <prvIdleTask+0x8>
            {
                taskYIELD();
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <prvIdleTask+0x2c>)
 80038aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f3bf 8f4f 	dsb	sy
 80038b4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038b8:	e7f0      	b.n	800389c <prvIdleTask+0x8>
 80038ba:	bf00      	nop
 80038bc:	20000138 	.word	0x20000138
 80038c0:	e000ed04 	.word	0xe000ed04

080038c4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	e00c      	b.n	80038ea <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4a12      	ldr	r2, [pc, #72]	; (8003924 <prvInitialiseTaskLists+0x60>)
 80038dc:	4413      	add	r3, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f7fe fcdc 	bl	800229c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3301      	adds	r3, #1
 80038e8:	607b      	str	r3, [r7, #4]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b05      	cmp	r3, #5
 80038ee:	d9ef      	bls.n	80038d0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80038f0:	480d      	ldr	r0, [pc, #52]	; (8003928 <prvInitialiseTaskLists+0x64>)
 80038f2:	f7fe fcd3 	bl	800229c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80038f6:	480d      	ldr	r0, [pc, #52]	; (800392c <prvInitialiseTaskLists+0x68>)
 80038f8:	f7fe fcd0 	bl	800229c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80038fc:	480c      	ldr	r0, [pc, #48]	; (8003930 <prvInitialiseTaskLists+0x6c>)
 80038fe:	f7fe fccd 	bl	800229c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003902:	480c      	ldr	r0, [pc, #48]	; (8003934 <prvInitialiseTaskLists+0x70>)
 8003904:	f7fe fcca 	bl	800229c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003908:	480b      	ldr	r0, [pc, #44]	; (8003938 <prvInitialiseTaskLists+0x74>)
 800390a:	f7fe fcc7 	bl	800229c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800390e:	4b0b      	ldr	r3, [pc, #44]	; (800393c <prvInitialiseTaskLists+0x78>)
 8003910:	4a05      	ldr	r2, [pc, #20]	; (8003928 <prvInitialiseTaskLists+0x64>)
 8003912:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003914:	4b0a      	ldr	r3, [pc, #40]	; (8003940 <prvInitialiseTaskLists+0x7c>)
 8003916:	4a05      	ldr	r2, [pc, #20]	; (800392c <prvInitialiseTaskLists+0x68>)
 8003918:	601a      	str	r2, [r3, #0]
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	20000138 	.word	0x20000138
 8003928:	200001b0 	.word	0x200001b0
 800392c:	200001c4 	.word	0x200001c4
 8003930:	200001e0 	.word	0x200001e0
 8003934:	200001f4 	.word	0x200001f4
 8003938:	2000020c 	.word	0x2000020c
 800393c:	200001d8 	.word	0x200001d8
 8003940:	200001dc 	.word	0x200001dc

08003944 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800394a:	e019      	b.n	8003980 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 800394c:	f000 ff1a 	bl	8004784 <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003950:	4b10      	ldr	r3, [pc, #64]	; (8003994 <prvCheckTasksWaitingTermination+0x50>)
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3304      	adds	r3, #4
 800395c:	4618      	mov	r0, r3
 800395e:	f7fe fd27 	bl	80023b0 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <prvCheckTasksWaitingTermination+0x54>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3b01      	subs	r3, #1
 8003968:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <prvCheckTasksWaitingTermination+0x54>)
 800396a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <prvCheckTasksWaitingTermination+0x58>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3b01      	subs	r3, #1
 8003972:	4a0a      	ldr	r2, [pc, #40]	; (800399c <prvCheckTasksWaitingTermination+0x58>)
 8003974:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003976:	f000 ff35 	bl	80047e4 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f810 	bl	80039a0 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003980:	4b06      	ldr	r3, [pc, #24]	; (800399c <prvCheckTasksWaitingTermination+0x58>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e1      	bne.n	800394c <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	200001f4 	.word	0x200001f4
 8003998:	20000220 	.word	0x20000220
 800399c:	20000208 	.word	0x20000208

080039a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ac:	4618      	mov	r0, r3
 80039ae:	f001 f8cf 	bl	8004b50 <vPortFree>
            vPortFree( pxTCB );
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f001 f8cc 	bl	8004b50 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039c4:	4b0a      	ldr	r3, [pc, #40]	; (80039f0 <prvResetNextTaskUnblockTime+0x30>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d104      	bne.n	80039d8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80039ce:	4b09      	ldr	r3, [pc, #36]	; (80039f4 <prvResetNextTaskUnblockTime+0x34>)
 80039d0:	f04f 32ff 	mov.w	r2, #4294967295
 80039d4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80039d6:	e005      	b.n	80039e4 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80039d8:	4b05      	ldr	r3, [pc, #20]	; (80039f0 <prvResetNextTaskUnblockTime+0x30>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a04      	ldr	r2, [pc, #16]	; (80039f4 <prvResetNextTaskUnblockTime+0x34>)
 80039e2:	6013      	str	r3, [r2, #0]
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	200001d8 	.word	0x200001d8
 80039f4:	20000240 	.word	0x20000240

080039f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <xTaskGetSchedulerState+0x34>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d102      	bne.n	8003a0c <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a06:	2301      	movs	r3, #1
 8003a08:	607b      	str	r3, [r7, #4]
 8003a0a:	e008      	b.n	8003a1e <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a0c:	4b08      	ldr	r3, [pc, #32]	; (8003a30 <xTaskGetSchedulerState+0x38>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d102      	bne.n	8003a1a <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a14:	2302      	movs	r3, #2
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	e001      	b.n	8003a1e <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a1e:	687b      	ldr	r3, [r7, #4]
    }
 8003a20:	4618      	mov	r0, r3
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr
 8003a2c:	2000022c 	.word	0x2000022c
 8003a30:	20000248 	.word	0x20000248

08003a34 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <xTaskGenericNotifyWait+0x2a>
        __asm volatile
 8003a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a4c:	f383 8811 	msr	BASEPRI, r3
 8003a50:	f3bf 8f6f 	isb	sy
 8003a54:	f3bf 8f4f 	dsb	sy
 8003a58:	613b      	str	r3, [r7, #16]
    }
 8003a5a:	bf00      	nop
 8003a5c:	e7fe      	b.n	8003a5c <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003a5e:	f000 fe91 	bl	8004784 <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003a62:	4b36      	ldr	r3, [pc, #216]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	3354      	adds	r3, #84	; 0x54
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b02      	cmp	r3, #2
 8003a72:	d022      	beq.n	8003aba <xTaskGenericNotifyWait+0x86>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003a74:	4b31      	ldr	r3, [pc, #196]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	3214      	adds	r2, #20
 8003a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	43d2      	mvns	r2, r2
 8003a84:	4011      	ands	r1, r2
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	3214      	adds	r2, #20
 8003a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003a8e:	4b2b      	ldr	r3, [pc, #172]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	4413      	add	r3, r2
 8003a96:	3354      	adds	r3, #84	; 0x54
 8003a98:	2201      	movs	r2, #1
 8003a9a:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003a9c:	6a3b      	ldr	r3, [r7, #32]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <xTaskGenericNotifyWait+0x86>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003aa2:	2101      	movs	r1, #1
 8003aa4:	6a38      	ldr	r0, [r7, #32]
 8003aa6:	f000 f9bb 	bl	8003e20 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003aaa:	4b25      	ldr	r3, [pc, #148]	; (8003b40 <xTaskGenericNotifyWait+0x10c>)
 8003aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab0:	601a      	str	r2, [r3, #0]
 8003ab2:	f3bf 8f4f 	dsb	sy
 8003ab6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003aba:	f000 fe93 	bl	80047e4 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003abe:	f000 fe61 	bl	8004784 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	6a3b      	ldr	r3, [r7, #32]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	4613      	mov	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	68b9      	ldr	r1, [r7, #8]
 8003ace:	2040      	movs	r0, #64	; 0x40
 8003ad0:	f002 ff72 	bl	80069b8 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d007      	beq.n	8003aea <xTaskGenericNotifyWait+0xb6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003ada:	4b18      	ldr	r3, [pc, #96]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	3214      	adds	r2, #20
 8003ae2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003aea:	4b14      	ldr	r3, [pc, #80]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	4413      	add	r3, r2
 8003af2:	3354      	adds	r3, #84	; 0x54
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b02      	cmp	r3, #2
 8003afa:	d002      	beq.n	8003b02 <xTaskGenericNotifyWait+0xce>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	e00e      	b.n	8003b20 <xTaskGenericNotifyWait+0xec>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003b02:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	3214      	adds	r2, #20
 8003b0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	43d2      	mvns	r2, r2
 8003b12:	4011      	ands	r1, r2
 8003b14:	68fa      	ldr	r2, [r7, #12]
 8003b16:	3214      	adds	r2, #20
 8003b18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003b20:	4b06      	ldr	r3, [pc, #24]	; (8003b3c <xTaskGenericNotifyWait+0x108>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	3354      	adds	r3, #84	; 0x54
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003b2e:	f000 fe59 	bl	80047e4 <vPortExitCritical>

        return xReturn;
 8003b32:	697b      	ldr	r3, [r7, #20]
    }
 8003b34:	4618      	mov	r0, r3
 8003b36:	3718      	adds	r7, #24
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd80      	pop	{r7, pc}
 8003b3c:	20000134 	.word	0x20000134
 8003b40:	e000ed04 	.word	0xe000ed04

08003b44 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b094      	sub	sp, #80	; 0x50
 8003b48:	af02      	add	r7, sp, #8
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003b52:	2301      	movs	r3, #1
 8003b54:	647b      	str	r3, [r7, #68]	; 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d10a      	bne.n	8003b72 <xTaskGenericNotifyFromISR+0x2e>
        __asm volatile
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8003b6e:	bf00      	nop
 8003b70:	e7fe      	b.n	8003b70 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00a      	beq.n	8003b8e <xTaskGenericNotifyFromISR+0x4a>
        __asm volatile
 8003b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7c:	f383 8811 	msr	BASEPRI, r3
 8003b80:	f3bf 8f6f 	isb	sy
 8003b84:	f3bf 8f4f 	dsb	sy
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8003b8a:	bf00      	nop
 8003b8c:	e7fe      	b.n	8003b8c <xTaskGenericNotifyFromISR+0x48>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003b8e:	f000 fee5 	bl	800495c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	643b      	str	r3, [r7, #64]	; 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003b96:	f3ef 8211 	mrs	r2, BASEPRI
 8003b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b9e:	f383 8811 	msr	BASEPRI, r3
 8003ba2:	f3bf 8f6f 	isb	sy
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	623a      	str	r2, [r7, #32]
 8003bac:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003bae:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003bb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d006      	beq.n	8003bc6 <xTaskGenericNotifyFromISR+0x82>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bba:	68ba      	ldr	r2, [r7, #8]
 8003bbc:	3214      	adds	r2, #20
 8003bbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bc4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003bc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	4413      	add	r3, r2
 8003bcc:	3354      	adds	r3, #84	; 0x54
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	4413      	add	r3, r2
 8003bda:	3354      	adds	r3, #84	; 0x54
 8003bdc:	2202      	movs	r2, #2
 8003bde:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003be0:	78fb      	ldrb	r3, [r7, #3]
 8003be2:	2b04      	cmp	r3, #4
 8003be4:	d83b      	bhi.n	8003c5e <xTaskGenericNotifyFromISR+0x11a>
 8003be6:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <xTaskGenericNotifyFromISR+0xa8>)
 8003be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bec:	08003c7d 	.word	0x08003c7d
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c1d 	.word	0x08003c1d
 8003bf8:	08003c35 	.word	0x08003c35
 8003bfc:	08003c43 	.word	0x08003c43
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003c00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	3214      	adds	r2, #20
 8003c06:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	ea42 0103 	orr.w	r1, r2, r3
 8003c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	3214      	adds	r2, #20
 8003c16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c1a:	e032      	b.n	8003c82 <xTaskGenericNotifyFromISR+0x13e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003c1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	3214      	adds	r2, #20
 8003c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	68ba      	ldr	r2, [r7, #8]
 8003c2c:	3214      	adds	r2, #20
 8003c2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c32:	e026      	b.n	8003c82 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c36:	68ba      	ldr	r2, [r7, #8]
 8003c38:	3214      	adds	r2, #20
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c40:	e01f      	b.n	8003c82 <xTaskGenericNotifyFromISR+0x13e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c42:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d006      	beq.n	8003c58 <xTaskGenericNotifyFromISR+0x114>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	3214      	adds	r2, #20
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003c56:	e014      	b.n	8003c82 <xTaskGenericNotifyFromISR+0x13e>
                        xReturn = pdFAIL;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	647b      	str	r3, [r7, #68]	; 0x44
                    break;
 8003c5c:	e011      	b.n	8003c82 <xTaskGenericNotifyFromISR+0x13e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003c5e:	4b69      	ldr	r3, [pc, #420]	; (8003e04 <xTaskGenericNotifyFromISR+0x2c0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00c      	beq.n	8003c80 <xTaskGenericNotifyFromISR+0x13c>
        __asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
 8003c76:	61bb      	str	r3, [r7, #24]
    }
 8003c78:	bf00      	nop
 8003c7a:	e7fe      	b.n	8003c7a <xTaskGenericNotifyFromISR+0x136>
                    break;
 8003c7c:	bf00      	nop
 8003c7e:	e000      	b.n	8003c82 <xTaskGenericNotifyFromISR+0x13e>
                    break;
 8003c80:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003c82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c84:	4618      	mov	r0, r3
 8003c86:	f003 fbfb 	bl	8007480 <SEGGER_SYSVIEW_ShrinkId>
 8003c8a:	78f9      	ldrb	r1, [r7, #3]
 8003c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003c90:	9201      	str	r2, [sp, #4]
 8003c92:	9300      	str	r3, [sp, #0]
 8003c94:	460b      	mov	r3, r1
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4601      	mov	r1, r0
 8003c9a:	203f      	movs	r0, #63	; 0x3f
 8003c9c:	f002 ff1e 	bl	8006adc <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003ca0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 80a2 	bne.w	8003dee <xTaskGenericNotifyFromISR+0x2aa>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003caa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <xTaskGenericNotifyFromISR+0x184>
        __asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	617b      	str	r3, [r7, #20]
    }
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <xTaskGenericNotifyFromISR+0x182>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc8:	4b4f      	ldr	r3, [pc, #316]	; (8003e08 <xTaskGenericNotifyFromISR+0x2c4>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d162      	bne.n	8003d96 <xTaskGenericNotifyFromISR+0x252>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003cdc:	68d2      	ldr	r2, [r2, #12]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ce2:	68db      	ldr	r3, [r3, #12]
 8003ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ce6:	6892      	ldr	r2, [r2, #8]
 8003ce8:	605a      	str	r2, [r3, #4]
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf0:	3304      	adds	r3, #4
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d103      	bne.n	8003cfe <xTaskGenericNotifyFromISR+0x1ba>
 8003cf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfc:	605a      	str	r2, [r3, #4]
 8003cfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d00:	2200      	movs	r2, #0
 8003d02:	615a      	str	r2, [r3, #20]
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1e5a      	subs	r2, r3, #1
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d10:	4618      	mov	r0, r3
 8003d12:	f003 fb73 	bl	80073fc <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	409a      	lsls	r2, r3
 8003d1e:	4b3b      	ldr	r3, [pc, #236]	; (8003e0c <xTaskGenericNotifyFromISR+0x2c8>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	4a39      	ldr	r2, [pc, #228]	; (8003e0c <xTaskGenericNotifyFromISR+0x2c8>)
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d2c:	4938      	ldr	r1, [pc, #224]	; (8003e10 <xTaskGenericNotifyFromISR+0x2cc>)
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	3304      	adds	r3, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d42:	609a      	str	r2, [r3, #8]
 8003d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4a:	60da      	str	r2, [r3, #12]
 8003d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d52:	3204      	adds	r2, #4
 8003d54:	605a      	str	r2, [r3, #4]
 8003d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d58:	1d1a      	adds	r2, r3, #4
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	609a      	str	r2, [r3, #8]
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4a29      	ldr	r2, [pc, #164]	; (8003e10 <xTaskGenericNotifyFromISR+0x2cc>)
 8003d6c:	441a      	add	r2, r3
 8003d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d70:	615a      	str	r2, [r3, #20]
 8003d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d76:	4926      	ldr	r1, [pc, #152]	; (8003e10 <xTaskGenericNotifyFromISR+0x2cc>)
 8003d78:	4613      	mov	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	4413      	add	r3, r2
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	440b      	add	r3, r1
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	1c59      	adds	r1, r3, #1
 8003d86:	4822      	ldr	r0, [pc, #136]	; (8003e10 <xTaskGenericNotifyFromISR+0x2cc>)
 8003d88:	4613      	mov	r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4403      	add	r3, r0
 8003d92:	6019      	str	r1, [r3, #0]
 8003d94:	e01b      	b.n	8003dce <xTaskGenericNotifyFromISR+0x28a>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <xTaskGenericNotifyFromISR+0x2d0>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8003d9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003da0:	61da      	str	r2, [r3, #28]
 8003da2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da8:	621a      	str	r2, [r3, #32]
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003db0:	3218      	adds	r2, #24
 8003db2:	605a      	str	r2, [r3, #4]
 8003db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db6:	f103 0218 	add.w	r2, r3, #24
 8003dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dbc:	609a      	str	r2, [r3, #8]
 8003dbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <xTaskGenericNotifyFromISR+0x2d0>)
 8003dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8003dc4:	4b13      	ldr	r3, [pc, #76]	; (8003e14 <xTaskGenericNotifyFromISR+0x2d0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	3301      	adds	r3, #1
 8003dca:	4a12      	ldr	r2, [pc, #72]	; (8003e14 <xTaskGenericNotifyFromISR+0x2d0>)
 8003dcc:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd2:	4b11      	ldr	r3, [pc, #68]	; (8003e18 <xTaskGenericNotifyFromISR+0x2d4>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	429a      	cmp	r2, r3
 8003dda:	d908      	bls.n	8003dee <xTaskGenericNotifyFromISR+0x2aa>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003ddc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <xTaskGenericNotifyFromISR+0x2a4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <xTaskGenericNotifyFromISR+0x2d8>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003df0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003df8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003dfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    }
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3748      	adds	r7, #72	; 0x48
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	20000224 	.word	0x20000224
 8003e08:	20000248 	.word	0x20000248
 8003e0c:	20000228 	.word	0x20000228
 8003e10:	20000138 	.word	0x20000138
 8003e14:	200001e0 	.word	0x200001e0
 8003e18:	20000134 	.word	0x20000134
 8003e1c:	20000234 	.word	0x20000234

08003e20 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e2a:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e30:	4b35      	ldr	r3, [pc, #212]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe faba 	bl	80023b0 <uxListRemove>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10b      	bne.n	8003e5a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e42:	4b31      	ldr	r3, [pc, #196]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	2201      	movs	r2, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	43da      	mvns	r2, r3
 8003e50:	4b2e      	ldr	r3, [pc, #184]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xec>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4013      	ands	r3, r2
 8003e56:	4a2d      	ldr	r2, [pc, #180]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xec>)
 8003e58:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d124      	bne.n	8003eac <prvAddCurrentTaskToDelayedList+0x8c>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d021      	beq.n	8003eac <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e68:	4b29      	ldr	r3, [pc, #164]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	609a      	str	r2, [r3, #8]
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	693a      	ldr	r2, [r7, #16]
 8003e7c:	6892      	ldr	r2, [r2, #8]
 8003e7e:	60da      	str	r2, [r3, #12]
 8003e80:	4b21      	ldr	r3, [pc, #132]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	3204      	adds	r2, #4
 8003e8a:	605a      	str	r2, [r3, #4]
 8003e8c:	4b1e      	ldr	r3, [pc, #120]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	1d1a      	adds	r2, r3, #4
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	4b1c      	ldr	r3, [pc, #112]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1d      	ldr	r2, [pc, #116]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e9c:	615a      	str	r2, [r3, #20]
 8003e9e:	4b1c      	ldr	r3, [pc, #112]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	4a1a      	ldr	r2, [pc, #104]	; (8003f10 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003ea6:	6013      	str	r3, [r2, #0]
 8003ea8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003eaa:	e026      	b.n	8003efa <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68fa      	ldr	r2, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d209      	bcs.n	8003ed8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec4:	4b13      	ldr	r3, [pc, #76]	; (8003f14 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4610      	mov	r0, r2
 8003ed2:	f7fe fa34 	bl	800233e <vListInsert>
}
 8003ed6:	e010      	b.n	8003efa <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed8:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	3304      	adds	r3, #4
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4610      	mov	r0, r2
 8003ee6:	f7fe fa2a 	bl	800233e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003eea:	4b0c      	ldr	r3, [pc, #48]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d202      	bcs.n	8003efa <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ef4:	4a09      	ldr	r2, [pc, #36]	; (8003f1c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6013      	str	r3, [r2, #0]
}
 8003efa:	bf00      	nop
 8003efc:	3718      	adds	r7, #24
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	20000224 	.word	0x20000224
 8003f08:	20000134 	.word	0x20000134
 8003f0c:	20000228 	.word	0x20000228
 8003f10:	2000020c 	.word	0x2000020c
 8003f14:	200001dc 	.word	0x200001dc
 8003f18:	200001d8 	.word	0x200001d8
 8003f1c:	20000240 	.word	0x20000240

08003f20 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b084      	sub	sp, #16
 8003f24:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f2a:	f000 fa47 	bl	80043bc <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f2e:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <xTimerCreateTimerTask+0x54>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00b      	beq.n	8003f4e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f36:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <xTimerCreateTimerTask+0x58>)
 8003f38:	9301      	str	r3, [sp, #4]
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003f44:	490d      	ldr	r1, [pc, #52]	; (8003f7c <xTimerCreateTimerTask+0x5c>)
 8003f46:	480e      	ldr	r0, [pc, #56]	; (8003f80 <xTimerCreateTimerTask+0x60>)
 8003f48:	f7fe fd8c 	bl	8002a64 <xTaskCreate>
 8003f4c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d10a      	bne.n	8003f6a <xTimerCreateTimerTask+0x4a>
        __asm volatile
 8003f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f58:	f383 8811 	msr	BASEPRI, r3
 8003f5c:	f3bf 8f6f 	isb	sy
 8003f60:	f3bf 8f4f 	dsb	sy
 8003f64:	603b      	str	r3, [r7, #0]
    }
 8003f66:	bf00      	nop
 8003f68:	e7fe      	b.n	8003f68 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f6a:	687b      	ldr	r3, [r7, #4]
    }
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3708      	adds	r7, #8
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}
 8003f74:	2000027c 	.word	0x2000027c
 8003f78:	20000280 	.word	0x20000280
 8003f7c:	0800878c 	.word	0x0800878c
 8003f80:	08004029 	.word	0x08004029

08003f84 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b084      	sub	sp, #16
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f90:	e008      	b.n	8003fa4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4413      	add	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	699a      	ldr	r2, [r3, #24]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	18d1      	adds	r1, r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f8dd 	bl	8004170 <prvInsertTimerInActiveList>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1ea      	bne.n	8003f92 <prvReloadTimer+0xe>
        }
    }
 8003fbc:	bf00      	nop
 8003fbe:	bf00      	nop
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b084      	sub	sp, #16
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <prvProcessExpiredTimer+0x5c>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fe f9e5 	bl	80023b0 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f7ff ffc3 	bl	8003f84 <prvReloadTimer>
 8003ffe:	e008      	b.n	8004012 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004006:	f023 0301 	bic.w	r3, r3, #1
 800400a:	b2da      	uxtb	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	68f8      	ldr	r0, [r7, #12]
 8004018:	4798      	blx	r3
    }
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000274 	.word	0x20000274

08004028 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004030:	f107 0308 	add.w	r3, r7, #8
 8004034:	4618      	mov	r0, r3
 8004036:	f000 f857 	bl	80040e8 <prvGetNextExpireTime>
 800403a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	4619      	mov	r1, r3
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f803 	bl	800404c <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004046:	f000 f8d5 	bl	80041f4 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800404a:	e7f1      	b.n	8004030 <prvTimerTask+0x8>

0800404c <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8004056:	f7fe ff9d 	bl	8002f94 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800405a:	f107 0308 	add.w	r3, r7, #8
 800405e:	4618      	mov	r0, r3
 8004060:	f000 f866 	bl	8004130 <prvSampleTimeNow>
 8004064:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d130      	bne.n	80040ce <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10a      	bne.n	8004088 <prvProcessTimerOrBlockTask+0x3c>
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	429a      	cmp	r2, r3
 8004078:	d806      	bhi.n	8004088 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800407a:	f7fe ff99 	bl	8002fb0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ffa1 	bl	8003fc8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8004086:	e024      	b.n	80040d2 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <prvProcessTimerOrBlockTask+0x90>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <prvProcessTimerOrBlockTask+0x50>
 8004098:	2301      	movs	r3, #1
 800409a:	e000      	b.n	800409e <prvProcessTimerOrBlockTask+0x52>
 800409c:	2300      	movs	r3, #0
 800409e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040a0:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <prvProcessTimerOrBlockTask+0x94>)
 80040a2:	6818      	ldr	r0, [r3, #0]
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad3      	subs	r3, r2, r3
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	4619      	mov	r1, r3
 80040ae:	f7fe fca5 	bl	80029fc <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 80040b2:	f7fe ff7d 	bl	8002fb0 <xTaskResumeAll>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10a      	bne.n	80040d2 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040bc:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <prvProcessTimerOrBlockTask+0x98>)
 80040be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c2:	601a      	str	r2, [r3, #0]
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
    }
 80040cc:	e001      	b.n	80040d2 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040ce:	f7fe ff6f 	bl	8002fb0 <xTaskResumeAll>
    }
 80040d2:	bf00      	nop
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000278 	.word	0x20000278
 80040e0:	2000027c 	.word	0x2000027c
 80040e4:	e000ed04 	.word	0xe000ed04

080040e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040e8:	b480      	push	{r7}
 80040ea:	b085      	sub	sp, #20
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040f0:	4b0e      	ldr	r3, [pc, #56]	; (800412c <prvGetNextExpireTime+0x44>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d101      	bne.n	80040fe <prvGetNextExpireTime+0x16>
 80040fa:	2201      	movs	r2, #1
 80040fc:	e000      	b.n	8004100 <prvGetNextExpireTime+0x18>
 80040fe:	2200      	movs	r2, #0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d105      	bne.n	8004118 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <prvGetNextExpireTime+0x44>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	e001      	b.n	800411c <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004118:	2300      	movs	r3, #0
 800411a:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 800411c:	68fb      	ldr	r3, [r7, #12]
    }
 800411e:	4618      	mov	r0, r3
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	20000274 	.word	0x20000274

08004130 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004130:	b580      	push	{r7, lr}
 8004132:	b084      	sub	sp, #16
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004138:	f7ff f83a 	bl	80031b0 <xTaskGetTickCount>
 800413c:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <prvSampleTimeNow+0x3c>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	429a      	cmp	r2, r3
 8004146:	d205      	bcs.n	8004154 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004148:	f000 f912 	bl	8004370 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	601a      	str	r2, [r3, #0]
 8004152:	e002      	b.n	800415a <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800415a:	4a04      	ldr	r2, [pc, #16]	; (800416c <prvSampleTimeNow+0x3c>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004160:	68fb      	ldr	r3, [r7, #12]
    }
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20000284 	.word	0x20000284

08004170 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 800417e:	2300      	movs	r3, #0
 8004180:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	429a      	cmp	r2, r3
 8004194:	d812      	bhi.n	80041bc <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	1ad2      	subs	r2, r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80041a4:	2301      	movs	r3, #1
 80041a6:	617b      	str	r3, [r7, #20]
 80041a8:	e01b      	b.n	80041e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041aa:	4b10      	ldr	r3, [pc, #64]	; (80041ec <prvInsertTimerInActiveList+0x7c>)
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	3304      	adds	r3, #4
 80041b2:	4619      	mov	r1, r3
 80041b4:	4610      	mov	r0, r2
 80041b6:	f7fe f8c2 	bl	800233e <vListInsert>
 80041ba:	e012      	b.n	80041e2 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041bc:	687a      	ldr	r2, [r7, #4]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d206      	bcs.n	80041d2 <prvInsertTimerInActiveList+0x62>
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041cc:	2301      	movs	r3, #1
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e007      	b.n	80041e2 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041d2:	4b07      	ldr	r3, [pc, #28]	; (80041f0 <prvInsertTimerInActiveList+0x80>)
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3304      	adds	r3, #4
 80041da:	4619      	mov	r1, r3
 80041dc:	4610      	mov	r0, r2
 80041de:	f7fe f8ae 	bl	800233e <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041e2:	697b      	ldr	r3, [r7, #20]
    }
 80041e4:	4618      	mov	r0, r3
 80041e6:	3718      	adds	r7, #24
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	20000278 	.word	0x20000278
 80041f0:	20000274 	.word	0x20000274

080041f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041fa:	e0a6      	b.n	800434a <prvProcessReceivedCommands+0x156>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	f2c0 80a3 	blt.w	800434a <prvProcessReceivedCommands+0x156>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	3304      	adds	r3, #4
 8004214:	4618      	mov	r0, r3
 8004216:	f7fe f8cb 	bl	80023b0 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800421a:	1d3b      	adds	r3, r7, #4
 800421c:	4618      	mov	r0, r3
 800421e:	f7ff ff87 	bl	8004130 <prvSampleTimeNow>
 8004222:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	3b01      	subs	r3, #1
 8004228:	2b08      	cmp	r3, #8
 800422a:	f200 808d 	bhi.w	8004348 <prvProcessReceivedCommands+0x154>
 800422e:	a201      	add	r2, pc, #4	; (adr r2, 8004234 <prvProcessReceivedCommands+0x40>)
 8004230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004234:	08004259 	.word	0x08004259
 8004238:	08004259 	.word	0x08004259
 800423c:	080042c1 	.word	0x080042c1
 8004240:	080042d5 	.word	0x080042d5
 8004244:	0800431f 	.word	0x0800431f
 8004248:	08004259 	.word	0x08004259
 800424c:	08004259 	.word	0x08004259
 8004250:	080042c1 	.word	0x080042c1
 8004254:	080042d5 	.word	0x080042d5
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800425e:	f043 0301 	orr.w	r3, r3, #1
 8004262:	b2da      	uxtb	r2, r3
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	699b      	ldr	r3, [r3, #24]
 8004270:	18d1      	adds	r1, r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	69ba      	ldr	r2, [r7, #24]
 8004276:	69f8      	ldr	r0, [r7, #28]
 8004278:	f7ff ff7a 	bl	8004170 <prvInsertTimerInActiveList>
 800427c:	4603      	mov	r3, r0
 800427e:	2b00      	cmp	r3, #0
 8004280:	d063      	beq.n	800434a <prvProcessReceivedCommands+0x156>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b00      	cmp	r3, #0
 800428e:	d009      	beq.n	80042a4 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	4413      	add	r3, r2
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4619      	mov	r1, r3
 800429c:	69f8      	ldr	r0, [r7, #28]
 800429e:	f7ff fe71 	bl	8003f84 <prvReloadTimer>
 80042a2:	e008      	b.n	80042b6 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	69f8      	ldr	r0, [r7, #28]
 80042bc:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80042be:	e044      	b.n	800434a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c6:	f023 0301 	bic.w	r3, r3, #1
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        break;
 80042d2:	e03a      	b.n	800434a <prvProcessReceivedCommands+0x156>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042da:	f043 0301 	orr.w	r3, r3, #1
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d10a      	bne.n	800430a <prvProcessReceivedCommands+0x116>
        __asm volatile
 80042f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f8:	f383 8811 	msr	BASEPRI, r3
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	f3bf 8f4f 	dsb	sy
 8004304:	617b      	str	r3, [r7, #20]
    }
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	18d1      	adds	r1, r2, r3
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	69f8      	ldr	r0, [r7, #28]
 8004318:	f7ff ff2a 	bl	8004170 <prvInsertTimerInActiveList>
                        break;
 800431c:	e015      	b.n	800434a <prvProcessReceivedCommands+0x156>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <prvProcessReceivedCommands+0x140>
                            {
                                vPortFree( pxTimer );
 800432c:	69f8      	ldr	r0, [r7, #28]
 800432e:	f000 fc0f 	bl	8004b50 <vPortFree>
 8004332:	e00a      	b.n	800434a <prvProcessReceivedCommands+0x156>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004346:	e000      	b.n	800434a <prvProcessReceivedCommands+0x156>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004348:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <prvProcessReceivedCommands+0x178>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f107 0108 	add.w	r1, r7, #8
 8004352:	2200      	movs	r2, #0
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe f95d 	bl	8002614 <xQueueReceive>
 800435a:	4603      	mov	r3, r0
 800435c:	2b00      	cmp	r3, #0
 800435e:	f47f af4d 	bne.w	80041fc <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	3720      	adds	r7, #32
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	2000027c 	.word	0x2000027c

08004370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004376:	e009      	b.n	800438c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004378:	4b0e      	ldr	r3, [pc, #56]	; (80043b4 <prvSwitchTimerLists+0x44>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004382:	f04f 31ff 	mov.w	r1, #4294967295
 8004386:	6838      	ldr	r0, [r7, #0]
 8004388:	f7ff fe1e 	bl	8003fc8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <prvSwitchTimerLists+0x44>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <prvSwitchTimerLists+0x44>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800439c:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <prvSwitchTimerLists+0x48>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a04      	ldr	r2, [pc, #16]	; (80043b4 <prvSwitchTimerLists+0x44>)
 80043a2:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 80043a4:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <prvSwitchTimerLists+0x48>)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6013      	str	r3, [r2, #0]
    }
 80043aa:	bf00      	nop
 80043ac:	3708      	adds	r7, #8
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}
 80043b2:	bf00      	nop
 80043b4:	20000274 	.word	0x20000274
 80043b8:	20000278 	.word	0x20000278

080043bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043bc:	b580      	push	{r7, lr}
 80043be:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043c0:	f000 f9e0 	bl	8004784 <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d11d      	bne.n	8004408 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043cc:	4811      	ldr	r0, [pc, #68]	; (8004414 <prvCheckForValidListAndQueue+0x58>)
 80043ce:	f7fd ff65 	bl	800229c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043d2:	4811      	ldr	r0, [pc, #68]	; (8004418 <prvCheckForValidListAndQueue+0x5c>)
 80043d4:	f7fd ff62 	bl	800229c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043d8:	4b10      	ldr	r3, [pc, #64]	; (800441c <prvCheckForValidListAndQueue+0x60>)
 80043da:	4a0e      	ldr	r2, [pc, #56]	; (8004414 <prvCheckForValidListAndQueue+0x58>)
 80043dc:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <prvCheckForValidListAndQueue+0x64>)
 80043e0:	4a0d      	ldr	r2, [pc, #52]	; (8004418 <prvCheckForValidListAndQueue+0x5c>)
 80043e2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80043e4:	2200      	movs	r2, #0
 80043e6:	210c      	movs	r1, #12
 80043e8:	200a      	movs	r0, #10
 80043ea:	f7fe f89b 	bl	8002524 <xQueueGenericCreate>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4a07      	ldr	r2, [pc, #28]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043f2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80043f4:	4b06      	ldr	r3, [pc, #24]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d005      	beq.n	8004408 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043fc:	4b04      	ldr	r3, [pc, #16]	; (8004410 <prvCheckForValidListAndQueue+0x54>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4908      	ldr	r1, [pc, #32]	; (8004424 <prvCheckForValidListAndQueue+0x68>)
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe faa4 	bl	8002950 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004408:	f000 f9ec 	bl	80047e4 <vPortExitCritical>
    }
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}
 8004410:	2000027c 	.word	0x2000027c
 8004414:	2000024c 	.word	0x2000024c
 8004418:	20000260 	.word	0x20000260
 800441c:	20000274 	.word	0x20000274
 8004420:	20000278 	.word	0x20000278
 8004424:	08008794 	.word	0x08008794

08004428 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004428:	b480      	push	{r7}
 800442a:	b085      	sub	sp, #20
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	3b04      	subs	r3, #4
 8004438:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004440:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	3b04      	subs	r3, #4
 8004446:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	f023 0201 	bic.w	r2, r3, #1
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	3b04      	subs	r3, #4
 8004456:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004458:	4a0c      	ldr	r2, [pc, #48]	; (800448c <pxPortInitialiseStack+0x64>)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	3b14      	subs	r3, #20
 8004462:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3b04      	subs	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f06f 0202 	mvn.w	r2, #2
 8004476:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3b20      	subs	r3, #32
 800447c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3714      	adds	r7, #20
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr
 800448c:	08004491 	.word	0x08004491

08004490 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004496:	2300      	movs	r3, #0
 8004498:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800449a:	4b12      	ldr	r3, [pc, #72]	; (80044e4 <prvTaskExitError+0x54>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044a2:	d00a      	beq.n	80044ba <prvTaskExitError+0x2a>
        __asm volatile
 80044a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	60fb      	str	r3, [r7, #12]
    }
 80044b6:	bf00      	nop
 80044b8:	e7fe      	b.n	80044b8 <prvTaskExitError+0x28>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
    }
 80044cc:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044ce:	bf00      	nop
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d0fc      	beq.n	80044d0 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044d6:	bf00      	nop
 80044d8:	bf00      	nop
 80044da:	3714      	adds	r7, #20
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	20000010 	.word	0x20000010
	...

080044f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044f0:	4b07      	ldr	r3, [pc, #28]	; (8004510 <pxCurrentTCBConst2>)
 80044f2:	6819      	ldr	r1, [r3, #0]
 80044f4:	6808      	ldr	r0, [r1, #0]
 80044f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	f380 8809 	msr	PSP, r0
 80044fe:	f3bf 8f6f 	isb	sy
 8004502:	f04f 0000 	mov.w	r0, #0
 8004506:	f380 8811 	msr	BASEPRI, r0
 800450a:	4770      	bx	lr
 800450c:	f3af 8000 	nop.w

08004510 <pxCurrentTCBConst2>:
 8004510:	20000134 	.word	0x20000134
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop

08004518 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004518:	4808      	ldr	r0, [pc, #32]	; (800453c <prvPortStartFirstTask+0x24>)
 800451a:	6800      	ldr	r0, [r0, #0]
 800451c:	6800      	ldr	r0, [r0, #0]
 800451e:	f380 8808 	msr	MSP, r0
 8004522:	f04f 0000 	mov.w	r0, #0
 8004526:	f380 8814 	msr	CONTROL, r0
 800452a:	b662      	cpsie	i
 800452c:	b661      	cpsie	f
 800452e:	f3bf 8f4f 	dsb	sy
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	df00      	svc	0
 8004538:	bf00      	nop
 800453a:	0000      	.short	0x0000
 800453c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004540:	bf00      	nop
 8004542:	bf00      	nop

08004544 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b086      	sub	sp, #24
 8004548:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800454a:	4b46      	ldr	r3, [pc, #280]	; (8004664 <xPortStartScheduler+0x120>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a46      	ldr	r2, [pc, #280]	; (8004668 <xPortStartScheduler+0x124>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d10a      	bne.n	800456a <xPortStartScheduler+0x26>
        __asm volatile
 8004554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	613b      	str	r3, [r7, #16]
    }
 8004566:	bf00      	nop
 8004568:	e7fe      	b.n	8004568 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800456a:	4b3e      	ldr	r3, [pc, #248]	; (8004664 <xPortStartScheduler+0x120>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a3f      	ldr	r2, [pc, #252]	; (800466c <xPortStartScheduler+0x128>)
 8004570:	4293      	cmp	r3, r2
 8004572:	d10a      	bne.n	800458a <xPortStartScheduler+0x46>
        __asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	60fb      	str	r3, [r7, #12]
    }
 8004586:	bf00      	nop
 8004588:	e7fe      	b.n	8004588 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800458a:	4b39      	ldr	r3, [pc, #228]	; (8004670 <xPortStartScheduler+0x12c>)
 800458c:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	b2db      	uxtb	r3, r3
 8004594:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	22ff      	movs	r2, #255	; 0xff
 800459a:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	781b      	ldrb	r3, [r3, #0]
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045a4:	78fb      	ldrb	r3, [r7, #3]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	4b31      	ldr	r3, [pc, #196]	; (8004674 <xPortStartScheduler+0x130>)
 80045b0:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045b2:	4b31      	ldr	r3, [pc, #196]	; (8004678 <xPortStartScheduler+0x134>)
 80045b4:	2207      	movs	r2, #7
 80045b6:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045b8:	e009      	b.n	80045ce <xPortStartScheduler+0x8a>
        {
            ulMaxPRIGROUPValue--;
 80045ba:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <xPortStartScheduler+0x134>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	3b01      	subs	r3, #1
 80045c0:	4a2d      	ldr	r2, [pc, #180]	; (8004678 <xPortStartScheduler+0x134>)
 80045c2:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	005b      	lsls	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ce:	78fb      	ldrb	r3, [r7, #3]
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d6:	2b80      	cmp	r3, #128	; 0x80
 80045d8:	d0ef      	beq.n	80045ba <xPortStartScheduler+0x76>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045da:	4b27      	ldr	r3, [pc, #156]	; (8004678 <xPortStartScheduler+0x134>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f1c3 0307 	rsb	r3, r3, #7
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d00a      	beq.n	80045fc <xPortStartScheduler+0xb8>
        __asm volatile
 80045e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	60bb      	str	r3, [r7, #8]
    }
 80045f8:	bf00      	nop
 80045fa:	e7fe      	b.n	80045fa <xPortStartScheduler+0xb6>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045fc:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <xPortStartScheduler+0x134>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	021b      	lsls	r3, r3, #8
 8004602:	4a1d      	ldr	r2, [pc, #116]	; (8004678 <xPortStartScheduler+0x134>)
 8004604:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004606:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <xPortStartScheduler+0x134>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800460e:	4a1a      	ldr	r2, [pc, #104]	; (8004678 <xPortStartScheduler+0x134>)
 8004610:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	b2da      	uxtb	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 800461a:	4b18      	ldr	r3, [pc, #96]	; (800467c <xPortStartScheduler+0x138>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a17      	ldr	r2, [pc, #92]	; (800467c <xPortStartScheduler+0x138>)
 8004620:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004624:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004626:	4b15      	ldr	r3, [pc, #84]	; (800467c <xPortStartScheduler+0x138>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a14      	ldr	r2, [pc, #80]	; (800467c <xPortStartScheduler+0x138>)
 800462c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004630:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004632:	f000 f963 	bl	80048fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8004636:	4b12      	ldr	r3, [pc, #72]	; (8004680 <xPortStartScheduler+0x13c>)
 8004638:	2200      	movs	r2, #0
 800463a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 800463c:	f000 f982 	bl	8004944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004640:	4b10      	ldr	r3, [pc, #64]	; (8004684 <xPortStartScheduler+0x140>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a0f      	ldr	r2, [pc, #60]	; (8004684 <xPortStartScheduler+0x140>)
 8004646:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800464a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800464c:	f7ff ff64 	bl	8004518 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004650:	f7fe feea 	bl	8003428 <vTaskSwitchContext>
    prvTaskExitError();
 8004654:	f7ff ff1c 	bl	8004490 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3718      	adds	r7, #24
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	e000ed00 	.word	0xe000ed00
 8004668:	410fc271 	.word	0x410fc271
 800466c:	410fc270 	.word	0x410fc270
 8004670:	e000e400 	.word	0xe000e400
 8004674:	20000288 	.word	0x20000288
 8004678:	2000028c 	.word	0x2000028c
 800467c:	e000ed20 	.word	0xe000ed20
 8004680:	20000010 	.word	0x20000010
 8004684:	e000ef34 	.word	0xe000ef34

08004688 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8004688:	b480      	push	{r7}
 800468a:	b087      	sub	sp, #28
 800468c:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800468e:	4b37      	ldr	r3, [pc, #220]	; (800476c <vInitPrioGroupValue+0xe4>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a37      	ldr	r2, [pc, #220]	; (8004770 <vInitPrioGroupValue+0xe8>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10a      	bne.n	80046ae <vInitPrioGroupValue+0x26>
        __asm volatile
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	613b      	str	r3, [r7, #16]
    }
 80046aa:	bf00      	nop
 80046ac:	e7fe      	b.n	80046ac <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046ae:	4b2f      	ldr	r3, [pc, #188]	; (800476c <vInitPrioGroupValue+0xe4>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a30      	ldr	r2, [pc, #192]	; (8004774 <vInitPrioGroupValue+0xec>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10a      	bne.n	80046ce <vInitPrioGroupValue+0x46>
        __asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
    }
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ce:	4b2a      	ldr	r3, [pc, #168]	; (8004778 <vInitPrioGroupValue+0xf0>)
 80046d0:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	22ff      	movs	r2, #255	; 0xff
 80046de:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	781b      	ldrb	r3, [r3, #0]
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <vInitPrioGroupValue+0xf4>)
 80046f4:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046f6:	4b22      	ldr	r3, [pc, #136]	; (8004780 <vInitPrioGroupValue+0xf8>)
 80046f8:	2207      	movs	r2, #7
 80046fa:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046fc:	e009      	b.n	8004712 <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	3b01      	subs	r3, #1
 8004704:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004706:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	b2db      	uxtb	r3, r3
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	b2db      	uxtb	r3, r3
 8004716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800471a:	2b80      	cmp	r3, #128	; 0x80
 800471c:	d0ef      	beq.n	80046fe <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800471e:	4b18      	ldr	r3, [pc, #96]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f1c3 0307 	rsb	r3, r3, #7
 8004726:	2b04      	cmp	r3, #4
 8004728:	d00a      	beq.n	8004740 <vInitPrioGroupValue+0xb8>
        __asm volatile
 800472a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472e:	f383 8811 	msr	BASEPRI, r3
 8004732:	f3bf 8f6f 	isb	sy
 8004736:	f3bf 8f4f 	dsb	sy
 800473a:	60bb      	str	r3, [r7, #8]
    }
 800473c:	bf00      	nop
 800473e:	e7fe      	b.n	800473e <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004740:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	021b      	lsls	r3, r3, #8
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004748:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800474a:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <vInitPrioGroupValue+0xf8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004752:	4a0b      	ldr	r2, [pc, #44]	; (8004780 <vInitPrioGroupValue+0xf8>)
 8004754:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	b2da      	uxtb	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 800475e:	bf00      	nop
 8004760:	371c      	adds	r7, #28
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	e000ed00 	.word	0xe000ed00
 8004770:	410fc271 	.word	0x410fc271
 8004774:	410fc270 	.word	0x410fc270
 8004778:	e000e400 	.word	0xe000e400
 800477c:	20000288 	.word	0x20000288
 8004780:	2000028c 	.word	0x2000028c

08004784 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
        __asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	607b      	str	r3, [r7, #4]
    }
 800479c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <vPortEnterCritical+0x58>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3301      	adds	r3, #1
 80047a4:	4a0d      	ldr	r2, [pc, #52]	; (80047dc <vPortEnterCritical+0x58>)
 80047a6:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047a8:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <vPortEnterCritical+0x58>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d10f      	bne.n	80047d0 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b0:	4b0b      	ldr	r3, [pc, #44]	; (80047e0 <vPortEnterCritical+0x5c>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <vPortEnterCritical+0x4c>
        __asm volatile
 80047ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047be:	f383 8811 	msr	BASEPRI, r3
 80047c2:	f3bf 8f6f 	isb	sy
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	603b      	str	r3, [r7, #0]
    }
 80047cc:	bf00      	nop
 80047ce:	e7fe      	b.n	80047ce <vPortEnterCritical+0x4a>
    }
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	20000010 	.word	0x20000010
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047ea:	4b12      	ldr	r3, [pc, #72]	; (8004834 <vPortExitCritical+0x50>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10a      	bne.n	8004808 <vPortExitCritical+0x24>
        __asm volatile
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	607b      	str	r3, [r7, #4]
    }
 8004804:	bf00      	nop
 8004806:	e7fe      	b.n	8004806 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004808:	4b0a      	ldr	r3, [pc, #40]	; (8004834 <vPortExitCritical+0x50>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	3b01      	subs	r3, #1
 800480e:	4a09      	ldr	r2, [pc, #36]	; (8004834 <vPortExitCritical+0x50>)
 8004810:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004812:	4b08      	ldr	r3, [pc, #32]	; (8004834 <vPortExitCritical+0x50>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d105      	bne.n	8004826 <vPortExitCritical+0x42>
 800481a:	2300      	movs	r3, #0
 800481c:	603b      	str	r3, [r7, #0]
        __asm volatile
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	f383 8811 	msr	BASEPRI, r3
    }
 8004824:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004826:	bf00      	nop
 8004828:	370c      	adds	r7, #12
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
 8004832:	bf00      	nop
 8004834:	20000010 	.word	0x20000010
	...

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b15      	ldr	r3, [pc, #84]	; (80048a0 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f01e 0f10 	tst.w	lr, #16
 8004850:	bf08      	it	eq
 8004852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004860:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f7fe fdda 	bl	8003428 <vTaskSwitchContext>
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f380 8811 	msr	BASEPRI, r0
 800487c:	bc09      	pop	{r0, r3}
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004886:	f01e 0f10 	tst.w	lr, #16
 800488a:	bf08      	it	eq
 800488c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004890:	f380 8809 	msr	PSP, r0
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst>:
 80048a0:	20000134 	.word	0x20000134
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
    }
 80048c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048c2:	f002 fc81 	bl	80071c8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048c6:	f7fe fc95 	bl	80031f4 <xTaskIncrementTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048d0:	f002 fcd8 	bl	8007284 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048d4:	4b08      	ldr	r3, [pc, #32]	; (80048f8 <SysTick_Handler+0x50>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e001      	b.n	80048e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048de:	f002 fcb5 	bl	800724c <SEGGER_SYSVIEW_RecordExitISR>
 80048e2:	2300      	movs	r3, #0
 80048e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f383 8811 	msr	BASEPRI, r3
    }
 80048ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004900:	4b0b      	ldr	r3, [pc, #44]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vPortSetupTimerInterrupt+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800490c:	4b0a      	ldr	r3, [pc, #40]	; (8004938 <vPortSetupTimerInterrupt+0x3c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	; (800493c <vPortSetupTimerInterrupt+0x40>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4a09      	ldr	r2, [pc, #36]	; (8004940 <vPortSetupTimerInterrupt+0x44>)
 800491a:	3b01      	subs	r3, #1
 800491c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491e:	4b04      	ldr	r3, [pc, #16]	; (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010
 8004934:	e000e018 	.word	0xe000e018
 8004938:	20000000 	.word	0x20000000
 800493c:	10624dd3 	.word	0x10624dd3
 8004940:	e000e014 	.word	0xe000e014

08004944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004944:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004954 <vPortEnableVFP+0x10>
 8004948:	6801      	ldr	r1, [r0, #0]
 800494a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800494e:	6001      	str	r1, [r0, #0]
 8004950:	4770      	bx	lr
 8004952:	0000      	.short	0x0000
 8004954:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop

0800495c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b0f      	cmp	r3, #15
 800496c:	d914      	bls.n	8004998 <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800496e:	4a17      	ldr	r2, [pc, #92]	; (80049cc <vPortValidateInterruptPriority+0x70>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004978:	4b15      	ldr	r3, [pc, #84]	; (80049d0 <vPortValidateInterruptPriority+0x74>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	7afa      	ldrb	r2, [r7, #11]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20a      	bcs.n	8004998 <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
    }
 8004994:	bf00      	nop
 8004996:	e7fe      	b.n	8004996 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <vPortValidateInterruptPriority+0x78>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80049a0:	4b0d      	ldr	r3, [pc, #52]	; (80049d8 <vPortValidateInterruptPriority+0x7c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d90a      	bls.n	80049be <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	603b      	str	r3, [r7, #0]
    }
 80049ba:	bf00      	nop
 80049bc:	e7fe      	b.n	80049bc <vPortValidateInterruptPriority+0x60>
    }
 80049be:	bf00      	nop
 80049c0:	3714      	adds	r7, #20
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
 80049ca:	bf00      	nop
 80049cc:	e000e3f0 	.word	0xe000e3f0
 80049d0:	20000288 	.word	0x20000288
 80049d4:	e000ed0c 	.word	0xe000ed0c
 80049d8:	2000028c 	.word	0x2000028c

080049dc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b08a      	sub	sp, #40	; 0x28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80049e4:	2300      	movs	r3, #0
 80049e6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80049e8:	f7fe fad4 	bl	8002f94 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049ec:	4b53      	ldr	r3, [pc, #332]	; (8004b3c <pvPortMalloc+0x160>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049f4:	f000 f908 	bl	8004c08 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d012      	beq.n	8004a24 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80049fe:	2208      	movs	r2, #8
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	f003 0307 	and.w	r3, r3, #7
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	3308      	adds	r3, #8
 8004a0a:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d804      	bhi.n	8004a20 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	607b      	str	r3, [r7, #4]
 8004a1e:	e001      	b.n	8004a24 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a20:	2300      	movs	r3, #0
 8004a22:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	db70      	blt.n	8004b0c <pvPortMalloc+0x130>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d06d      	beq.n	8004b0c <pvPortMalloc+0x130>
 8004a30:	4b43      	ldr	r3, [pc, #268]	; (8004b40 <pvPortMalloc+0x164>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d868      	bhi.n	8004b0c <pvPortMalloc+0x130>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a3a:	4b42      	ldr	r3, [pc, #264]	; (8004b44 <pvPortMalloc+0x168>)
 8004a3c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a3e:	4b41      	ldr	r3, [pc, #260]	; (8004b44 <pvPortMalloc+0x168>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a44:	e004      	b.n	8004a50 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a48:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d903      	bls.n	8004a62 <pvPortMalloc+0x86>
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1f1      	bne.n	8004a46 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a62:	4b36      	ldr	r3, [pc, #216]	; (8004b3c <pvPortMalloc+0x160>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d04f      	beq.n	8004b0c <pvPortMalloc+0x130>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a6c:	6a3b      	ldr	r3, [r7, #32]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2208      	movs	r2, #8
 8004a72:	4413      	add	r3, r2
 8004a74:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	1ad2      	subs	r2, r2, r3
 8004a86:	2308      	movs	r3, #8
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	429a      	cmp	r2, r3
 8004a8c:	d91f      	bls.n	8004ace <pvPortMalloc+0xf2>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	4413      	add	r3, r2
 8004a94:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <pvPortMalloc+0xda>
        __asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	613b      	str	r3, [r7, #16]
    }
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	685a      	ldr	r2, [r3, #4]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	1ad2      	subs	r2, r2, r3
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ac8:	6978      	ldr	r0, [r7, #20]
 8004aca:	f000 f8f9 	bl	8004cc0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ace:	4b1c      	ldr	r3, [pc, #112]	; (8004b40 <pvPortMalloc+0x164>)
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	4a19      	ldr	r2, [pc, #100]	; (8004b40 <pvPortMalloc+0x164>)
 8004ada:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004adc:	4b18      	ldr	r3, [pc, #96]	; (8004b40 <pvPortMalloc+0x164>)
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <pvPortMalloc+0x16c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d203      	bcs.n	8004af0 <pvPortMalloc+0x114>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <pvPortMalloc+0x164>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a16      	ldr	r2, [pc, #88]	; (8004b48 <pvPortMalloc+0x16c>)
 8004aee:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	2200      	movs	r2, #0
 8004b00:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b02:	4b12      	ldr	r3, [pc, #72]	; (8004b4c <pvPortMalloc+0x170>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3301      	adds	r3, #1
 8004b08:	4a10      	ldr	r2, [pc, #64]	; (8004b4c <pvPortMalloc+0x170>)
 8004b0a:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b0c:	f7fe fa50 	bl	8002fb0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	f003 0307 	and.w	r3, r3, #7
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <pvPortMalloc+0x154>
        __asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	60fb      	str	r3, [r7, #12]
    }
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <pvPortMalloc+0x152>
    return pvReturn;
 8004b30:	69fb      	ldr	r3, [r7, #28]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3728      	adds	r7, #40	; 0x28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20012e98 	.word	0x20012e98
 8004b40:	20012e9c 	.word	0x20012e9c
 8004b44:	20012e90 	.word	0x20012e90
 8004b48:	20012ea0 	.word	0x20012ea0
 8004b4c:	20012ea4 	.word	0x20012ea4

08004b50 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d049      	beq.n	8004bf6 <vPortFree+0xa6>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b62:	2308      	movs	r3, #8
 8004b64:	425b      	negs	r3, r3
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4413      	add	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	db0a      	blt.n	8004b8e <vPortFree+0x3e>
        __asm volatile
 8004b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	60fb      	str	r3, [r7, #12]
    }
 8004b8a:	bf00      	nop
 8004b8c:	e7fe      	b.n	8004b8c <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <vPortFree+0x5c>
        __asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	60bb      	str	r3, [r7, #8]
    }
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <vPortFree+0x5a>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	0fdb      	lsrs	r3, r3, #31
 8004bb2:	f003 0301 	and.w	r3, r3, #1
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01c      	beq.n	8004bf6 <vPortFree+0xa6>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d118      	bne.n	8004bf6 <vPortFree+0xa6>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004bd0:	f7fe f9e0 	bl	8002f94 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <vPortFree+0xb0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4413      	add	r3, r2
 8004bde:	4a08      	ldr	r2, [pc, #32]	; (8004c00 <vPortFree+0xb0>)
 8004be0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004be2:	6938      	ldr	r0, [r7, #16]
 8004be4:	f000 f86c 	bl	8004cc0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004be8:	4b06      	ldr	r3, [pc, #24]	; (8004c04 <vPortFree+0xb4>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3301      	adds	r3, #1
 8004bee:	4a05      	ldr	r2, [pc, #20]	; (8004c04 <vPortFree+0xb4>)
 8004bf0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bf2:	f7fe f9dd 	bl	8002fb0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004bf6:	bf00      	nop
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20012e9c 	.word	0x20012e9c
 8004c04:	20012ea8 	.word	0x20012ea8

08004c08 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b085      	sub	sp, #20
 8004c0c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c0e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004c12:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <prvHeapInit+0xa4>)
 8004c16:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00c      	beq.n	8004c3c <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3307      	adds	r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f023 0307 	bic.w	r3, r3, #7
 8004c2e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	1ad3      	subs	r3, r2, r3
 8004c36:	4a1d      	ldr	r2, [pc, #116]	; (8004cac <prvHeapInit+0xa4>)
 8004c38:	4413      	add	r3, r2
 8004c3a:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c40:	4a1b      	ldr	r2, [pc, #108]	; (8004cb0 <prvHeapInit+0xa8>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c46:	4b1a      	ldr	r3, [pc, #104]	; (8004cb0 <prvHeapInit+0xa8>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4413      	add	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c54:	2208      	movs	r2, #8
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	1a9b      	subs	r3, r3, r2
 8004c5a:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f023 0307 	bic.w	r3, r3, #7
 8004c62:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a13      	ldr	r2, [pc, #76]	; (8004cb4 <prvHeapInit+0xac>)
 8004c68:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c6a:	4b12      	ldr	r3, [pc, #72]	; (8004cb4 <prvHeapInit+0xac>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c72:	4b10      	ldr	r3, [pc, #64]	; (8004cb4 <prvHeapInit+0xac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2200      	movs	r2, #0
 8004c78:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68fa      	ldr	r2, [r7, #12]
 8004c82:	1ad2      	subs	r2, r2, r3
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c88:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <prvHeapInit+0xac>)
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	4a08      	ldr	r2, [pc, #32]	; (8004cb8 <prvHeapInit+0xb0>)
 8004c96:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a07      	ldr	r2, [pc, #28]	; (8004cbc <prvHeapInit+0xb4>)
 8004c9e:	6013      	str	r3, [r2, #0]
}
 8004ca0:	bf00      	nop
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	20000290 	.word	0x20000290
 8004cb0:	20012e90 	.word	0x20012e90
 8004cb4:	20012e98 	.word	0x20012e98
 8004cb8:	20012ea0 	.word	0x20012ea0
 8004cbc:	20012e9c 	.word	0x20012e9c

08004cc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cc8:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <prvInsertBlockIntoFreeList+0xac>)
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	e002      	b.n	8004cd4 <prvInsertBlockIntoFreeList+0x14>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d8f7      	bhi.n	8004cce <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	4413      	add	r3, r2
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d108      	bne.n	8004d02 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	441a      	add	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	441a      	add	r2, r3
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d118      	bne.n	8004d48 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <prvInsertBlockIntoFreeList+0xb0>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d00d      	beq.n	8004d3e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	441a      	add	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e008      	b.n	8004d50 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d3e:	4b0c      	ldr	r3, [pc, #48]	; (8004d70 <prvInsertBlockIntoFreeList+0xb0>)
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	e003      	b.n	8004d50 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d002      	beq.n	8004d5e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	20012e90 	.word	0x20012e90
 8004d70:	20012e98 	.word	0x20012e98

08004d74 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d76:	b085      	sub	sp, #20
 8004d78:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	e033      	b.n	8004de8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d80:	491e      	ldr	r1, [pc, #120]	; (8004dfc <_cbSendTaskList+0x88>)
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	440b      	add	r3, r1
 8004d8e:	6818      	ldr	r0, [r3, #0]
 8004d90:	491a      	ldr	r1, [pc, #104]	; (8004dfc <_cbSendTaskList+0x88>)
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	4413      	add	r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3304      	adds	r3, #4
 8004da0:	6819      	ldr	r1, [r3, #0]
 8004da2:	4c16      	ldr	r4, [pc, #88]	; (8004dfc <_cbSendTaskList+0x88>)
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4613      	mov	r3, r2
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4423      	add	r3, r4
 8004db0:	3308      	adds	r3, #8
 8004db2:	681c      	ldr	r4, [r3, #0]
 8004db4:	4d11      	ldr	r5, [pc, #68]	; (8004dfc <_cbSendTaskList+0x88>)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	4613      	mov	r3, r2
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	4413      	add	r3, r2
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	442b      	add	r3, r5
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	681d      	ldr	r5, [r3, #0]
 8004dc6:	4e0d      	ldr	r6, [pc, #52]	; (8004dfc <_cbSendTaskList+0x88>)
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	4433      	add	r3, r6
 8004dd4:	3310      	adds	r3, #16
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	9300      	str	r3, [sp, #0]
 8004dda:	462b      	mov	r3, r5
 8004ddc:	4622      	mov	r2, r4
 8004dde:	f000 f979 	bl	80050d4 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	3301      	adds	r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	4b05      	ldr	r3, [pc, #20]	; (8004e00 <_cbSendTaskList+0x8c>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d3c6      	bcc.n	8004d80 <_cbSendTaskList+0xc>
  }
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dfc:	20012eac 	.word	0x20012eac
 8004e00:	20012f4c 	.word	0x20012f4c

08004e04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e08:	b082      	sub	sp, #8
 8004e0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e0c:	f7fe f9e0 	bl	80031d0 <xTaskGetTickCountFromISR>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2200      	movs	r2, #0
 8004e14:	469a      	mov	sl, r3
 8004e16:	4693      	mov	fp, r2
 8004e18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	f04f 0a00 	mov.w	sl, #0
 8004e28:	f04f 0b00 	mov.w	fp, #0
 8004e2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e38:	4652      	mov	r2, sl
 8004e3a:	465b      	mov	r3, fp
 8004e3c:	1a14      	subs	r4, r2, r0
 8004e3e:	eb63 0501 	sbc.w	r5, r3, r1
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	f04f 0300 	mov.w	r3, #0
 8004e4a:	00ab      	lsls	r3, r5, #2
 8004e4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e50:	00a2      	lsls	r2, r4, #2
 8004e52:	4614      	mov	r4, r2
 8004e54:	461d      	mov	r5, r3
 8004e56:	eb14 0800 	adds.w	r8, r4, r0
 8004e5a:	eb45 0901 	adc.w	r9, r5, r1
 8004e5e:	f04f 0200 	mov.w	r2, #0
 8004e62:	f04f 0300 	mov.w	r3, #0
 8004e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e72:	4690      	mov	r8, r2
 8004e74:	4699      	mov	r9, r3
 8004e76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e7e:	4610      	mov	r0, r2
 8004e80:	4619      	mov	r1, r3
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e8c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b086      	sub	sp, #24
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	607a      	str	r2, [r7, #4]
 8004e98:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e9a:	2205      	movs	r2, #5
 8004e9c:	492b      	ldr	r1, [pc, #172]	; (8004f4c <SYSVIEW_AddTask+0xc0>)
 8004e9e:	68b8      	ldr	r0, [r7, #8]
 8004ea0:	f002 fda1 	bl	80079e6 <memcmp>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d04b      	beq.n	8004f42 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004eaa:	4b29      	ldr	r3, [pc, #164]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	2b07      	cmp	r3, #7
 8004eb0:	d903      	bls.n	8004eba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004eb2:	4828      	ldr	r0, [pc, #160]	; (8004f54 <SYSVIEW_AddTask+0xc8>)
 8004eb4:	f002 fbe4 	bl	8007680 <SEGGER_SYSVIEW_Warn>
    return;
 8004eb8:	e044      	b.n	8004f44 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004eba:	4b25      	ldr	r3, [pc, #148]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	4926      	ldr	r1, [pc, #152]	; (8004f58 <SYSVIEW_AddTask+0xcc>)
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	4413      	add	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	440b      	add	r3, r1
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	4921      	ldr	r1, [pc, #132]	; (8004f58 <SYSVIEW_AddTask+0xcc>)
 8004ed4:	4613      	mov	r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	4413      	add	r3, r2
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	3304      	adds	r3, #4
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ee4:	4b1a      	ldr	r3, [pc, #104]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	491b      	ldr	r1, [pc, #108]	; (8004f58 <SYSVIEW_AddTask+0xcc>)
 8004eea:	4613      	mov	r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	009b      	lsls	r3, r3, #2
 8004ef2:	440b      	add	r3, r1
 8004ef4:	3308      	adds	r3, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004efa:	4b15      	ldr	r3, [pc, #84]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	4916      	ldr	r1, [pc, #88]	; (8004f58 <SYSVIEW_AddTask+0xcc>)
 8004f00:	4613      	mov	r3, r2
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	4413      	add	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	440b      	add	r3, r1
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f10:	4b0f      	ldr	r3, [pc, #60]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	4910      	ldr	r1, [pc, #64]	; (8004f58 <SYSVIEW_AddTask+0xcc>)
 8004f16:	4613      	mov	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3310      	adds	r3, #16
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	4a08      	ldr	r2, [pc, #32]	; (8004f50 <SYSVIEW_AddTask+0xc4>)
 8004f2e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	68b9      	ldr	r1, [r7, #8]
 8004f3a:	68f8      	ldr	r0, [r7, #12]
 8004f3c:	f000 f8ca 	bl	80050d4 <SYSVIEW_SendTaskInfo>
 8004f40:	e000      	b.n	8004f44 <SYSVIEW_AddTask+0xb8>
    return;
 8004f42:	bf00      	nop

}
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	0800879c 	.word	0x0800879c
 8004f50:	20012f4c 	.word	0x20012f4c
 8004f54:	080087a4 	.word	0x080087a4
 8004f58:	20012eac 	.word	0x20012eac

08004f5c <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b084      	sub	sp, #16
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004f64:	4b59      	ldr	r3, [pc, #356]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f000 80ab 	beq.w	80050c4 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004f6e:	2300      	movs	r3, #0
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	e00d      	b.n	8004f90 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004f74:	4956      	ldr	r1, [pc, #344]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8004f76:	68fa      	ldr	r2, [r7, #12]
 8004f78:	4613      	mov	r3, r2
 8004f7a:	009b      	lsls	r3, r3, #2
 8004f7c:	4413      	add	r3, r2
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	440b      	add	r3, r1
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	687a      	ldr	r2, [r7, #4]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d008      	beq.n	8004f9c <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	60fb      	str	r3, [r7, #12]
 8004f90:	4b4e      	ldr	r3, [pc, #312]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d3ec      	bcc.n	8004f74 <SYSVIEW_DeleteTask+0x18>
 8004f9a:	e000      	b.n	8004f9e <SYSVIEW_DeleteTask+0x42>
      break;
 8004f9c:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004f9e:	4b4b      	ldr	r3, [pc, #300]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3b01      	subs	r3, #1
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d111      	bne.n	8004fce <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	4613      	mov	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	4413      	add	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4a46      	ldr	r2, [pc, #280]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8004fb6:	4413      	add	r3, r2
 8004fb8:	2214      	movs	r2, #20
 8004fba:	2100      	movs	r1, #0
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f002 fd22 	bl	8007a06 <memset>
    _NumTasks--;
 8004fc2:	4b42      	ldr	r3, [pc, #264]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	4a40      	ldr	r2, [pc, #256]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004fca:	6013      	str	r3, [r2, #0]
 8004fcc:	e07b      	b.n	80050c6 <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004fce:	4b3f      	ldr	r3, [pc, #252]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68fa      	ldr	r2, [r7, #12]
 8004fd4:	429a      	cmp	r2, r3
 8004fd6:	d276      	bcs.n	80050c6 <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004fd8:	4b3c      	ldr	r3, [pc, #240]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	1e5a      	subs	r2, r3, #1
 8004fde:	493c      	ldr	r1, [pc, #240]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	6819      	ldr	r1, [r3, #0]
 8004fec:	4838      	ldr	r0, [pc, #224]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4613      	mov	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4403      	add	r3, r0
 8004ffa:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004ffc:	4b33      	ldr	r3, [pc, #204]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	1e5a      	subs	r2, r3, #1
 8005002:	4933      	ldr	r1, [pc, #204]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8005004:	4613      	mov	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	440b      	add	r3, r1
 800500e:	3304      	adds	r3, #4
 8005010:	6819      	ldr	r1, [r3, #0]
 8005012:	482f      	ldr	r0, [pc, #188]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8005014:	68fa      	ldr	r2, [r7, #12]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	009b      	lsls	r3, r3, #2
 800501e:	4403      	add	r3, r0
 8005020:	3304      	adds	r3, #4
 8005022:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005024:	4b29      	ldr	r3, [pc, #164]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	1e5a      	subs	r2, r3, #1
 800502a:	4929      	ldr	r1, [pc, #164]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 800502c:	4613      	mov	r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	4413      	add	r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3308      	adds	r3, #8
 8005038:	6819      	ldr	r1, [r3, #0]
 800503a:	4825      	ldr	r0, [pc, #148]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4403      	add	r3, r0
 8005048:	3308      	adds	r3, #8
 800504a:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 800504c:	4b1f      	ldr	r3, [pc, #124]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	1e5a      	subs	r2, r3, #1
 8005052:	491f      	ldr	r1, [pc, #124]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8005054:	4613      	mov	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4413      	add	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	440b      	add	r3, r1
 800505e:	330c      	adds	r3, #12
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	481b      	ldr	r0, [pc, #108]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4613      	mov	r3, r2
 8005068:	009b      	lsls	r3, r3, #2
 800506a:	4413      	add	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4403      	add	r3, r0
 8005070:	330c      	adds	r3, #12
 8005072:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8005074:	4b15      	ldr	r3, [pc, #84]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	1e5a      	subs	r2, r3, #1
 800507a:	4915      	ldr	r1, [pc, #84]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 800507c:	4613      	mov	r3, r2
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	440b      	add	r3, r1
 8005086:	3310      	adds	r3, #16
 8005088:	6819      	ldr	r1, [r3, #0]
 800508a:	4811      	ldr	r0, [pc, #68]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	4613      	mov	r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	4413      	add	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4403      	add	r3, r0
 8005098:	3310      	adds	r3, #16
 800509a:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	1e5a      	subs	r2, r3, #1
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4a09      	ldr	r2, [pc, #36]	; (80050d0 <SYSVIEW_DeleteTask+0x174>)
 80050ac:	4413      	add	r3, r2
 80050ae:	2214      	movs	r2, #20
 80050b0:	2100      	movs	r1, #0
 80050b2:	4618      	mov	r0, r3
 80050b4:	f002 fca7 	bl	8007a06 <memset>
    _NumTasks--;
 80050b8:	4b04      	ldr	r3, [pc, #16]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3b01      	subs	r3, #1
 80050be:	4a03      	ldr	r2, [pc, #12]	; (80050cc <SYSVIEW_DeleteTask+0x170>)
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e000      	b.n	80050c6 <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 80050c4:	bf00      	nop
  }
}
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20012f4c 	.word	0x20012f4c
 80050d0:	20012eac 	.word	0x20012eac

080050d4 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	; 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	2214      	movs	r2, #20
 80050e8:	2100      	movs	r1, #0
 80050ea:	4618      	mov	r0, r3
 80050ec:	f002 fc8b 	bl	8007a06 <memset>
  TaskInfo.TaskID     = TaskID;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005102:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005104:	f107 0314 	add.w	r3, r7, #20
 8005108:	4618      	mov	r0, r3
 800510a:	f001 ff0f 	bl	8006f2c <SEGGER_SYSVIEW_SendTaskInfo>
}
 800510e:	bf00      	nop
 8005110:	3728      	adds	r7, #40	; 0x28
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <__NVIC_EnableIRQ>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005126:	2b00      	cmp	r3, #0
 8005128:	db0b      	blt.n	8005142 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	f003 021f 	and.w	r2, r3, #31
 8005130:	4907      	ldr	r1, [pc, #28]	; (8005150 <__NVIC_EnableIRQ+0x38>)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	2001      	movs	r0, #1
 800513a:	fa00 f202 	lsl.w	r2, r0, r2
 800513e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
 800514e:	bf00      	nop
 8005150:	e000e100 	.word	0xe000e100

08005154 <__NVIC_SetPriority>:
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	4603      	mov	r3, r0
 800515c:	6039      	str	r1, [r7, #0]
 800515e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005164:	2b00      	cmp	r3, #0
 8005166:	db0a      	blt.n	800517e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	b2da      	uxtb	r2, r3
 800516c:	490c      	ldr	r1, [pc, #48]	; (80051a0 <__NVIC_SetPriority+0x4c>)
 800516e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005172:	0112      	lsls	r2, r2, #4
 8005174:	b2d2      	uxtb	r2, r2
 8005176:	440b      	add	r3, r1
 8005178:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800517c:	e00a      	b.n	8005194 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	4908      	ldr	r1, [pc, #32]	; (80051a4 <__NVIC_SetPriority+0x50>)
 8005184:	79fb      	ldrb	r3, [r7, #7]
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	3b04      	subs	r3, #4
 800518c:	0112      	lsls	r2, r2, #4
 800518e:	b2d2      	uxtb	r2, r2
 8005190:	440b      	add	r3, r1
 8005192:	761a      	strb	r2, [r3, #24]
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	e000e100 	.word	0xe000e100
 80051a4:	e000ed00 	.word	0xe000ed00

080051a8 <_StartSysView>:
  U8         NumBytesHelloRcvd;
  U8         NumBytesHelloSent;
  int        ChannelID;
} _SVInfo = {0,0,1};

static void _StartSysView(void) {
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
  int r;

  r = SEGGER_SYSVIEW_IsStarted();
 80051ae:	f002 fac3 	bl	8007738 <SEGGER_SYSVIEW_IsStarted>
 80051b2:	6078      	str	r0, [r7, #4]
  if (r == 0) {
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <_StartSysView+0x16>
    SEGGER_SYSVIEW_Start();
 80051ba:	f001 fd3d 	bl	8006c38 <SEGGER_SYSVIEW_Start>
  }
}
 80051be:	bf00      	nop
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
	...

080051c8 <_cbOnUARTRx>:

static void _cbOnUARTRx(U8 Data) {
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	71fb      	strb	r3, [r7, #7]
  if (_SVInfo.NumBytesHelloRcvd < _SERVER_HELLO_SIZE) {  // Not all bytes of <Hello> message received by SysView yet?
 80051d2:	4b0c      	ldr	r3, [pc, #48]	; (8005204 <_cbOnUARTRx+0x3c>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	2b03      	cmp	r3, #3
 80051d8:	d806      	bhi.n	80051e8 <_cbOnUARTRx+0x20>
    _SVInfo.NumBytesHelloRcvd++;
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <_cbOnUARTRx+0x3c>)
 80051dc:	781b      	ldrb	r3, [r3, #0]
 80051de:	3301      	adds	r3, #1
 80051e0:	b2da      	uxtb	r2, r3
 80051e2:	4b08      	ldr	r3, [pc, #32]	; (8005204 <_cbOnUARTRx+0x3c>)
 80051e4:	701a      	strb	r2, [r3, #0]
    goto Done;
 80051e6:	e009      	b.n	80051fc <_cbOnUARTRx+0x34>
  }
  _StartSysView();
 80051e8:	f7ff ffde 	bl	80051a8 <_StartSysView>
  SEGGER_RTT_WriteDownBuffer(_SVInfo.ChannelID, &Data, 1);  // Write data into corresponding RTT buffer for application to read and handle accordingly
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <_cbOnUARTRx+0x3c>)
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	4618      	mov	r0, r3
 80051f2:	1dfb      	adds	r3, r7, #7
 80051f4:	2201      	movs	r2, #1
 80051f6:	4619      	mov	r1, r3
 80051f8:	f000 fb8a 	bl	8005910 <SEGGER_RTT_WriteDownBuffer>
Done:
  return;
 80051fc:	bf00      	nop
}
 80051fe:	3708      	adds	r7, #8
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000014 	.word	0x20000014

08005208 <_cbOnUARTTx>:

static int _cbOnUARTTx(U8* pChar) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  int r;

  if (_SVInfo.NumBytesHelloSent < _TARGET_HELLO_SIZE) {  // Not all bytes of <Hello> message sent to SysView yet?
 8005210:	4b14      	ldr	r3, [pc, #80]	; (8005264 <_cbOnUARTTx+0x5c>)
 8005212:	785b      	ldrb	r3, [r3, #1]
 8005214:	2b03      	cmp	r3, #3
 8005216:	d80f      	bhi.n	8005238 <_cbOnUARTTx+0x30>
    *pChar = _abHelloMsg[_SVInfo.NumBytesHelloSent];
 8005218:	4b12      	ldr	r3, [pc, #72]	; (8005264 <_cbOnUARTTx+0x5c>)
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	461a      	mov	r2, r3
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <_cbOnUARTTx+0x60>)
 8005220:	5c9a      	ldrb	r2, [r3, r2]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	701a      	strb	r2, [r3, #0]
    _SVInfo.NumBytesHelloSent++;
 8005226:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <_cbOnUARTTx+0x5c>)
 8005228:	785b      	ldrb	r3, [r3, #1]
 800522a:	3301      	adds	r3, #1
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4b0d      	ldr	r3, [pc, #52]	; (8005264 <_cbOnUARTTx+0x5c>)
 8005230:	705a      	strb	r2, [r3, #1]
    r = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	60fb      	str	r3, [r7, #12]
    goto Done;
 8005236:	e00f      	b.n	8005258 <_cbOnUARTTx+0x50>
  }
  r = SEGGER_RTT_ReadUpBufferNoLock(_SVInfo.ChannelID, pChar, 1);
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <_cbOnUARTTx+0x5c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fa09 	bl	8005658 <SEGGER_RTT_ReadUpBufferNoLock>
 8005246:	4603      	mov	r3, r0
 8005248:	60fb      	str	r3, [r7, #12]
  if (r < 0) {  // Failed to read from up buffer?
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	da02      	bge.n	8005256 <_cbOnUARTTx+0x4e>
    r = 0;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e000      	b.n	8005258 <_cbOnUARTTx+0x50>
  }
Done:
 8005256:	bf00      	nop
  return r;
 8005258:	68fb      	ldr	r3, [r7, #12]
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	20000014 	.word	0x20000014
 8005268:	08008880 	.word	0x08008880

0800526c <SEGGER_UART_init>:

void SEGGER_UART_init(U32 baud)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
	HIF_UART_Init(baud, _cbOnUARTTx, _cbOnUARTRx);
 8005274:	4a04      	ldr	r2, [pc, #16]	; (8005288 <SEGGER_UART_init+0x1c>)
 8005276:	4905      	ldr	r1, [pc, #20]	; (800528c <SEGGER_UART_init+0x20>)
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f853 	bl	8005324 <HIF_UART_Init>
}
 800527e:	bf00      	nop
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}
 8005286:	bf00      	nop
 8005288:	080051c9 	.word	0x080051c9
 800528c:	08005209 	.word	0x08005209

08005290 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8005296:	4b1e      	ldr	r3, [pc, #120]	; (8005310 <USART2_IRQHandler+0x80>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d011      	beq.n	80052ca <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 80052a6:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <USART2_IRQHandler+0x84>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 030b 	and.w	r3, r3, #11
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d108      	bne.n	80052ca <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 80052b8:	4b17      	ldr	r3, [pc, #92]	; (8005318 <USART2_IRQHandler+0x88>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 80052c0:	4b15      	ldr	r3, [pc, #84]	; (8005318 <USART2_IRQHandler+0x88>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	79fa      	ldrb	r2, [r7, #7]
 80052c6:	4610      	mov	r0, r2
 80052c8:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d01a      	beq.n	800530a <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 80052d4:	4b11      	ldr	r3, [pc, #68]	; (800531c <USART2_IRQHandler+0x8c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d015      	beq.n	8005308 <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <USART2_IRQHandler+0x8c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	1dfa      	adds	r2, r7, #7
 80052e2:	4610      	mov	r0, r2
 80052e4:	4798      	blx	r3
 80052e6:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d106      	bne.n	80052fc <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 80052ee:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <USART2_IRQHandler+0x90>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a0b      	ldr	r2, [pc, #44]	; (8005320 <USART2_IRQHandler+0x90>)
 80052f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052f8:	6013      	str	r3, [r2, #0]
 80052fa:	e006      	b.n	800530a <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <USART2_IRQHandler+0x80>)
 80052fe:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8005300:	79fa      	ldrb	r2, [r7, #7]
 8005302:	4b04      	ldr	r3, [pc, #16]	; (8005314 <USART2_IRQHandler+0x84>)
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	e000      	b.n	800530a <USART2_IRQHandler+0x7a>
      return;
 8005308:	bf00      	nop
    }
  }
}
 800530a:	3710      	adds	r7, #16
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40004400 	.word	0x40004400
 8005314:	40004404 	.word	0x40004404
 8005318:	20012f50 	.word	0x20012f50
 800531c:	20012f54 	.word	0x20012f54
 8005320:	4000440c 	.word	0x4000440c

08005324 <HIF_UART_Init>:

/*********************************************************************
*
*       HIF_UART_Init()
*/
void HIF_UART_Init(uint32_t Baudrate, UART_ON_TX_FUNC_P cbOnTx, UART_ON_RX_FUNC_P cbOnRx) {
 8005324:	b580      	push	{r7, lr}
 8005326:	b086      	sub	sp, #24
 8005328:	af00      	add	r7, sp, #0
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
  uint32_t v;
  uint32_t Div;
  //
  // Configure USART RX/TX pins for alternate function AF7
  //
  RCC_APB1ENR |= (1 <<  17);        // Enable USART2 clock
 8005330:	4b2e      	ldr	r3, [pc, #184]	; (80053ec <HIF_UART_Init+0xc8>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a2d      	ldr	r2, [pc, #180]	; (80053ec <HIF_UART_Init+0xc8>)
 8005336:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800533a:	6013      	str	r3, [r2, #0]
  RCC_AHB1ENR |= (1 <<  0);        // Enable IO port A clock
 800533c:	4b2c      	ldr	r3, [pc, #176]	; (80053f0 <HIF_UART_Init+0xcc>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a2b      	ldr	r2, [pc, #172]	; (80053f0 <HIF_UART_Init+0xcc>)
 8005342:	f043 0301 	orr.w	r3, r3, #1
 8005346:	6013      	str	r3, [r2, #0]
  v  = GPIO_AFRL;
 8005348:	4b2a      	ldr	r3, [pc, #168]	; (80053f4 <HIF_UART_Init+0xd0>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	613b      	str	r3, [r7, #16]
  v &= ~((15UL << ((GPIO_UART_TX_BIT) << 2)) | (15UL << ((GPIO_UART_RX_BIT) << 2)));
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005354:	613b      	str	r3, [r7, #16]
  v |=   ((7UL << ((GPIO_UART_TX_BIT) << 2)) | (7UL << ((GPIO_UART_RX_BIT) << 2)));
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800535c:	613b      	str	r3, [r7, #16]
  GPIO_AFRL = v;
 800535e:	4a25      	ldr	r2, [pc, #148]	; (80053f4 <HIF_UART_Init+0xd0>)
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	6013      	str	r3, [r2, #0]
  //
  // Configure USART RX/TX pins for alternate function usage
  //
  v  = GPIO_MODER;
 8005364:	4b24      	ldr	r3, [pc, #144]	; (80053f8 <HIF_UART_Init+0xd4>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	613b      	str	r3, [r7, #16]
  v &= ~((3UL << (GPIO_UART_TX_BIT << 1)) | (3UL << (GPIO_UART_RX_BIT << 1)));
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005370:	613b      	str	r3, [r7, #16]
  v |=  ((2UL << (GPIO_UART_TX_BIT << 1)) | (2UL << (GPIO_UART_RX_BIT << 1)));         // PA10: alternate function
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8005378:	613b      	str	r3, [r7, #16]
  GPIO_MODER = v;
 800537a:	4a1f      	ldr	r2, [pc, #124]	; (80053f8 <HIF_UART_Init+0xd4>)
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	6013      	str	r3, [r2, #0]
  //
  // Initialize USART
  //
  USART_CR1 = 0
 8005380:	4b1e      	ldr	r3, [pc, #120]	; (80053fc <HIF_UART_Init+0xd8>)
 8005382:	f24a 022c 	movw	r2, #41004	; 0xa02c
 8005386:	601a      	str	r2, [r3, #0]
            | (0 << 10)                         // PCE    = 0; No parity control
            | (1 <<  5)                         // RXNEIE = 1; RXNE interrupt enabled
            | (1 <<  3)                         // TE     = 1; Transmitter enabled
            | (1 <<  2)                         // RE     = 1; Receiver enabled
            ;
  USART_CR2 = 0
 8005388:	4b1d      	ldr	r3, [pc, #116]	; (8005400 <HIF_UART_Init+0xdc>)
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
            | (0 << 12)                         // STOP = 00b; 1 stop bit
            ;
  USART_CR3 = 0
 800538e:	4b1d      	ldr	r3, [pc, #116]	; (8005404 <HIF_UART_Init+0xe0>)
 8005390:	2280      	movs	r2, #128	; 0x80
 8005392:	601a      	str	r2, [r3, #0]
            | (1 <<  7)                         // DMAT   = 1; DMA for transmitter enabled
            ;
  //
  // Set baudrate
  //
  Div = Baudrate * 8;                       // We use 8x oversampling.
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	00db      	lsls	r3, r3, #3
 8005398:	617b      	str	r3, [r7, #20]
  Div = ((2 * (UART_BASECLK)) / Div) + 1;   // Calculate divider for baudrate and round it correctly. This is necessary to get a tolerance as small as possible.
 800539a:	4a1b      	ldr	r2, [pc, #108]	; (8005408 <HIF_UART_Init+0xe4>)
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a2:	3301      	adds	r3, #1
 80053a4:	617b      	str	r3, [r7, #20]
  Div = Div / 2;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	085b      	lsrs	r3, r3, #1
 80053aa:	617b      	str	r3, [r7, #20]
  if (Div > 0xFFF) {
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b2:	d302      	bcc.n	80053ba <HIF_UART_Init+0x96>
    Div = 0xFFF;        // Limit to 12 bit (mantissa in BRR)
 80053b4:	f640 73ff 	movw	r3, #4095	; 0xfff
 80053b8:	617b      	str	r3, [r7, #20]
  }
  if (Div >= 1) {
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d004      	beq.n	80053ca <HIF_UART_Init+0xa6>
    USART_BRR = 0xFFF0 & (Div << 4);    // Use only mantissa of fractional divider
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	4a11      	ldr	r2, [pc, #68]	; (800540c <HIF_UART_Init+0xe8>)
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	6013      	str	r3, [r2, #0]
  }
  //
  // Setup callbacks which are called by ISR handler and enable interrupt in NVIC
  //
  _cbOnRx = cbOnRx;
 80053ca:	4a11      	ldr	r2, [pc, #68]	; (8005410 <HIF_UART_Init+0xec>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6013      	str	r3, [r2, #0]
  _cbOnTx = cbOnTx;
 80053d0:	4a10      	ldr	r2, [pc, #64]	; (8005414 <HIF_UART_Init+0xf0>)
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	6013      	str	r3, [r2, #0]
  NVIC_SetPriority(USART_IRQn, 6);  // Highest prio, so it is not disabled by embOS
 80053d6:	2106      	movs	r1, #6
 80053d8:	2026      	movs	r0, #38	; 0x26
 80053da:	f7ff febb 	bl	8005154 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART_IRQn);
 80053de:	2026      	movs	r0, #38	; 0x26
 80053e0:	f7ff fe9a 	bl	8005118 <__NVIC_EnableIRQ>
}
 80053e4:	bf00      	nop
 80053e6:	3718      	adds	r7, #24
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	40023840 	.word	0x40023840
 80053f0:	40023830 	.word	0x40023830
 80053f4:	40020020 	.word	0x40020020
 80053f8:	40020000 	.word	0x40020000
 80053fc:	4000440c 	.word	0x4000440c
 8005400:	40004410 	.word	0x40004410
 8005404:	40004414 	.word	0x40004414
 8005408:	0501bd00 	.word	0x0501bd00
 800540c:	40004408 	.word	0x40004408
 8005410:	20012f50 	.word	0x20012f50
 8005414:	20012f54 	.word	0x20012f54

08005418 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800541e:	4b24      	ldr	r3, [pc, #144]	; (80054b0 <_DoInit+0x98>)
 8005420:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2203      	movs	r2, #3
 8005426:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2203      	movs	r2, #3
 800542c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	4a20      	ldr	r2, [pc, #128]	; (80054b4 <_DoInit+0x9c>)
 8005432:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a20      	ldr	r2, [pc, #128]	; (80054b8 <_DoInit+0xa0>)
 8005438:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005440:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	4a17      	ldr	r2, [pc, #92]	; (80054b4 <_DoInit+0x9c>)
 8005458:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a17      	ldr	r2, [pc, #92]	; (80054bc <_DoInit+0xa4>)
 800545e:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2210      	movs	r2, #16
 8005464:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	3307      	adds	r3, #7
 800547c:	4a10      	ldr	r2, [pc, #64]	; (80054c0 <_DoInit+0xa8>)
 800547e:	6810      	ldr	r0, [r2, #0]
 8005480:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005482:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a0e      	ldr	r2, [pc, #56]	; (80054c4 <_DoInit+0xac>)
 800548a:	6810      	ldr	r0, [r2, #0]
 800548c:	6018      	str	r0, [r3, #0]
 800548e:	8891      	ldrh	r1, [r2, #4]
 8005490:	7992      	ldrb	r2, [r2, #6]
 8005492:	8099      	strh	r1, [r3, #4]
 8005494:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005496:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2220      	movs	r2, #32
 800549e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80054a0:	f3bf 8f5f 	dmb	sy
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr
 80054b0:	20012f58 	.word	0x20012f58
 80054b4:	080087f4 	.word	0x080087f4
 80054b8:	20013000 	.word	0x20013000
 80054bc:	20013400 	.word	0x20013400
 80054c0:	08008800 	.word	0x08008800
 80054c4:	08008804 	.word	0x08008804

080054c8 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b08a      	sub	sp, #40	; 0x28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	60b9      	str	r1, [r7, #8]
 80054d2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80054d4:	2300      	movs	r3, #0
 80054d6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	68db      	ldr	r3, [r3, #12]
 80054dc:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80054e4:	69ba      	ldr	r2, [r7, #24]
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d905      	bls.n	80054f8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80054ec:	69ba      	ldr	r2, [r7, #24]
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24
 80054f6:	e007      	b.n	8005508 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689a      	ldr	r2, [r3, #8]
 80054fc:	69b9      	ldr	r1, [r7, #24]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	1acb      	subs	r3, r1, r3
 8005502:	4413      	add	r3, r2
 8005504:	3b01      	subs	r3, #1
 8005506:	627b      	str	r3, [r7, #36]	; 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005512:	4293      	cmp	r3, r2
 8005514:	bf28      	it	cs
 8005516:	4613      	movcs	r3, r2
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800551a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4293      	cmp	r3, r2
 8005520:	bf28      	it	cs
 8005522:	4613      	movcs	r3, r2
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	685a      	ldr	r2, [r3, #4]
 800552a:	69fb      	ldr	r3, [r7, #28]
 800552c:	4413      	add	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8005530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	6978      	ldr	r0, [r7, #20]
 8005536:	f002 fadb 	bl	8007af0 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800553a:	6a3a      	ldr	r2, [r7, #32]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	4413      	add	r3, r2
 8005540:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005546:	4413      	add	r3, r2
 8005548:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8005552:	69fa      	ldr	r2, [r7, #28]
 8005554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005556:	4413      	add	r3, r2
 8005558:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	69fa      	ldr	r2, [r7, #28]
 8005560:	429a      	cmp	r2, r3
 8005562:	d101      	bne.n	8005568 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8005564:	2300      	movs	r3, #0
 8005566:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005568:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	69fa      	ldr	r2, [r7, #28]
 8005570:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1b2      	bne.n	80054de <_WriteBlocking+0x16>
  return NumBytesWritten;
 8005578:	6a3b      	ldr	r3, [r7, #32]
}
 800557a:	4618      	mov	r0, r3
 800557c:	3728      	adds	r7, #40	; 0x28
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d911      	bls.n	80055ca <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	4413      	add	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	6938      	ldr	r0, [r7, #16]
 80055b6:	f002 fa9b 	bl	8007af0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80055ba:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 80055be:	69fa      	ldr	r2, [r7, #28]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	441a      	add	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 80055c8:	e01f      	b.n	800560a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 80055ca:	69bb      	ldr	r3, [r7, #24]
 80055cc:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	685a      	ldr	r2, [r3, #4]
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	4413      	add	r3, r2
 80055d6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80055d8:	697a      	ldr	r2, [r7, #20]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	6938      	ldr	r0, [r7, #16]
 80055de:	f002 fa87 	bl	8007af0 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80055f0:	68ba      	ldr	r2, [r7, #8]
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	4413      	add	r3, r2
 80055f6:	697a      	ldr	r2, [r7, #20]
 80055f8:	4619      	mov	r1, r3
 80055fa:	6938      	ldr	r0, [r7, #16]
 80055fc:	f002 fa78 	bl	8007af0 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005600:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	60da      	str	r2, [r3, #12]
}
 800560a:	bf00      	nop
 800560c:	3720      	adds	r7, #32
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 8005612:	b480      	push	{r7}
 8005614:	b087      	sub	sp, #28
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 8005626:	693a      	ldr	r2, [r7, #16]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	429a      	cmp	r2, r3
 800562c:	d808      	bhi.n	8005640 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	1ad2      	subs	r2, r2, r3
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	4413      	add	r3, r2
 800563a:	3b01      	subs	r3, #1
 800563c:	617b      	str	r3, [r7, #20]
 800563e:	e004      	b.n	800564a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	3b01      	subs	r3, #1
 8005648:	617b      	str	r3, [r7, #20]
  }
  return r;
 800564a:	697b      	ldr	r3, [r7, #20]
}
 800564c:	4618      	mov	r0, r3
 800564e:	371c      	adds	r7, #28
 8005650:	46bd      	mov	sp, r7
 8005652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005656:	4770      	bx	lr

08005658 <SEGGER_RTT_ReadUpBufferNoLock>:
*    Number of bytes that have been read.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005658:	b580      	push	{r7, lr}
 800565a:	b08c      	sub	sp, #48	; 0x30
 800565c:	af00      	add	r7, sp, #0
 800565e:	60f8      	str	r0, [r7, #12]
 8005660:	60b9      	str	r1, [r7, #8]
 8005662:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_UP*   pRing;
  volatile char*          pSrc;

  INIT();
 8005664:	4b3e      	ldr	r3, [pc, #248]	; (8005760 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005666:	623b      	str	r3, [r7, #32]
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <SEGGER_RTT_ReadUpBufferNoLock+0x1e>
 8005672:	f7ff fed1 	bl	8005418 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1c5a      	adds	r2, r3, #1
 800567a:	4613      	mov	r3, r2
 800567c:	005b      	lsls	r3, r3, #1
 800567e:	4413      	add	r3, r2
 8005680:	00db      	lsls	r3, r3, #3
 8005682:	4a37      	ldr	r2, [pc, #220]	; (8005760 <SEGGER_RTT_ReadUpBufferNoLock+0x108>)
 8005684:	4413      	add	r3, r2
 8005686:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	691b      	ldr	r3, [r3, #16]
 8005690:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8005692:	69fb      	ldr	r3, [r7, #28]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005698:	2300      	movs	r3, #0
 800569a:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800569c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d92b      	bls.n	80056fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	689a      	ldr	r2, [r3, #8]
 80056a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4293      	cmp	r3, r2
 80056b4:	bf28      	it	cs
 80056b6:	4613      	movcs	r3, r2
 80056b8:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	685a      	ldr	r2, [r3, #4]
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	4413      	add	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	6939      	ldr	r1, [r7, #16]
 80056c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80056ca:	f002 fa11 	bl	8007af0 <memcpy>
    NumBytesRead += NumBytesRem;
 80056ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	4413      	add	r3, r2
 80056d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80056d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	4413      	add	r3, r2
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80056e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	4413      	add	r3, r2
 80056ec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d101      	bne.n	80056fc <SEGGER_RTT_ReadUpBufferNoLock+0xa4>
      RdOff = 0u;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80056fc:	69ba      	ldr	r2, [r7, #24]
 80056fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005704:	697a      	ldr	r2, [r7, #20]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4293      	cmp	r3, r2
 800570a:	bf28      	it	cs
 800570c:	4613      	movcs	r3, r2
 800570e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d019      	beq.n	800574a <SEGGER_RTT_ReadUpBufferNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	685a      	ldr	r2, [r3, #4]
 800571a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571c:	4413      	add	r3, r2
 800571e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005720:	697a      	ldr	r2, [r7, #20]
 8005722:	6939      	ldr	r1, [r7, #16]
 8005724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005726:	f002 f9e3 	bl	8007af0 <memcpy>
    NumBytesRead += NumBytesRem;
 800572a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 8005732:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	4413      	add	r3, r2
 8005738:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	1ad3      	subs	r3, r2, r3
 8005740:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005742:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	4413      	add	r3, r2
 8005748:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  //
  // Update read offset of buffer
  //
  if (NumBytesRead) {
 800574a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800574c:	2b00      	cmp	r3, #0
 800574e:	d002      	beq.n	8005756 <SEGGER_RTT_ReadUpBufferNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005754:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005758:	4618      	mov	r0, r3
 800575a:	3730      	adds	r7, #48	; 0x30
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	20012f58 	.word	0x20012f58

08005764 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	60f8      	str	r0, [r7, #12]
 800576c:	60b9      	str	r1, [r7, #8]
 800576e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005770:	4b3e      	ldr	r3, [pc, #248]	; (800586c <SEGGER_RTT_ReadNoLock+0x108>)
 8005772:	623b      	str	r3, [r7, #32]
 8005774:	6a3b      	ldr	r3, [r7, #32]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <SEGGER_RTT_ReadNoLock+0x1e>
 800577e:	f7ff fe4b 	bl	8005418 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	4613      	mov	r3, r2
 8005786:	005b      	lsls	r3, r3, #1
 8005788:	4413      	add	r3, r2
 800578a:	00db      	lsls	r3, r3, #3
 800578c:	3360      	adds	r3, #96	; 0x60
 800578e:	4a37      	ldr	r2, [pc, #220]	; (800586c <SEGGER_RTT_ReadNoLock+0x108>)
 8005790:	4413      	add	r3, r2
 8005792:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8005798:	69fb      	ldr	r3, [r7, #28]
 800579a:	691b      	ldr	r3, [r3, #16]
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80057a4:	2300      	movs	r3, #0
 80057a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80057a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d92b      	bls.n	8005808 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4293      	cmp	r3, r2
 80057c0:	bf28      	it	cs
 80057c2:	4613      	movcs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057cc:	4413      	add	r3, r2
 80057ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80057d0:	697a      	ldr	r2, [r7, #20]
 80057d2:	6939      	ldr	r1, [r7, #16]
 80057d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057d6:	f002 f98b 	bl	8007af0 <memcpy>
    NumBytesRead += NumBytesRem;
 80057da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	4413      	add	r3, r2
 80057e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80057e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	4413      	add	r3, r2
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	1ad3      	subs	r3, r2, r3
 80057f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80057f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	4413      	add	r3, r2
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005800:	429a      	cmp	r2, r3
 8005802:	d101      	bne.n	8005808 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005804:	2300      	movs	r3, #0
 8005806:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	4293      	cmp	r3, r2
 8005816:	bf28      	it	cs
 8005818:	4613      	movcs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d019      	beq.n	8005856 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005828:	4413      	add	r3, r2
 800582a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800582c:	697a      	ldr	r2, [r7, #20]
 800582e:	6939      	ldr	r1, [r7, #16]
 8005830:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005832:	f002 f95d 	bl	8007af0 <memcpy>
    NumBytesRead += NumBytesRem;
 8005836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	4413      	add	r3, r2
 800583c:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800583e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	4413      	add	r3, r2
 8005844:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800584e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	4413      	add	r3, r2
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 8005856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005860:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8005862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8005864:	4618      	mov	r0, r3
 8005866:	3730      	adds	r7, #48	; 0x30
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	20012f58 	.word	0x20012f58

08005870 <SEGGER_RTT_WriteDownBufferNoLock>:
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*
*  Additional information
*    This function must not be called when J-Link might also do RTT.
*/
unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005870:	b580      	push	{r7, lr}
 8005872:	b088      	sub	sp, #32
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
  SEGGER_RTT_BUFFER_UP*   pRing;
  //
  // Get "to-target" ring buffer.
  // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offsets that might be modified by J-Link.
  //
  pData = (const char *)pBuffer;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005880:	68fa      	ldr	r2, [r7, #12]
 8005882:	4613      	mov	r3, r2
 8005884:	005b      	lsls	r3, r3, #1
 8005886:	4413      	add	r3, r2
 8005888:	00db      	lsls	r3, r3, #3
 800588a:	3360      	adds	r3, #96	; 0x60
 800588c:	4a1f      	ldr	r2, [pc, #124]	; (800590c <SEGGER_RTT_WriteDownBufferNoLock+0x9c>)
 800588e:	4413      	add	r3, r2
 8005890:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	2b02      	cmp	r3, #2
 8005898:	d029      	beq.n	80058ee <SEGGER_RTT_WriteDownBufferNoLock+0x7e>
 800589a:	2b02      	cmp	r3, #2
 800589c:	d82e      	bhi.n	80058fc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d002      	beq.n	80058a8 <SEGGER_RTT_WriteDownBufferNoLock+0x38>
 80058a2:	2b01      	cmp	r3, #1
 80058a4:	d013      	beq.n	80058ce <SEGGER_RTT_WriteDownBufferNoLock+0x5e>
 80058a6:	e029      	b.n	80058fc <SEGGER_RTT_WriteDownBufferNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058a8:	6978      	ldr	r0, [r7, #20]
 80058aa:	f7ff feb2 	bl	8005612 <_GetAvailWriteSpace>
 80058ae:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d202      	bcs.n	80058be <SEGGER_RTT_WriteDownBufferNoLock+0x4e>
      Status = 0u;
 80058b8:	2300      	movs	r3, #0
 80058ba:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 80058bc:	e021      	b.n	8005902 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
      Status = NumBytes;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	6978      	ldr	r0, [r7, #20]
 80058c8:	f7ff fe5b 	bl	8005582 <_WriteNoCheck>
    break;
 80058cc:	e019      	b.n	8005902 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 80058ce:	6978      	ldr	r0, [r7, #20]
 80058d0:	f7ff fe9f 	bl	8005612 <_GetAvailWriteSpace>
 80058d4:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	4293      	cmp	r3, r2
 80058dc:	bf28      	it	cs
 80058de:	4613      	movcs	r3, r2
 80058e0:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	69b9      	ldr	r1, [r7, #24]
 80058e6:	6978      	ldr	r0, [r7, #20]
 80058e8:	f7ff fe4b 	bl	8005582 <_WriteNoCheck>
    break;
 80058ec:	e009      	b.n	8005902 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 80058ee:	687a      	ldr	r2, [r7, #4]
 80058f0:	69b9      	ldr	r1, [r7, #24]
 80058f2:	6978      	ldr	r0, [r7, #20]
 80058f4:	f7ff fde8 	bl	80054c8 <_WriteBlocking>
 80058f8:	61f8      	str	r0, [r7, #28]
    break;
 80058fa:	e002      	b.n	8005902 <SEGGER_RTT_WriteDownBufferNoLock+0x92>
  default:
    Status = 0u;
 80058fc:	2300      	movs	r3, #0
 80058fe:	61fb      	str	r3, [r7, #28]
    break;
 8005900:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8005902:	69fb      	ldr	r3, [r7, #28]
}
 8005904:	4618      	mov	r0, r3
 8005906:	3720      	adds	r7, #32
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	20012f58 	.word	0x20012f58

08005910 <SEGGER_RTT_WriteDownBuffer>:
*    This function locks against all other RTT operations. I.e. during
*    the write operation, writing from the application is also locked.
*    If only one consumer writes to the down buffer, 
*    call SEGGER_RTT_WriteDownBufferNoLock() instead.
*/
unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8005910:	b580      	push	{r7, lr}
 8005912:	b088      	sub	sp, #32
 8005914:	af00      	add	r7, sp, #0
 8005916:	60f8      	str	r0, [r7, #12]
 8005918:	60b9      	str	r1, [r7, #8]
 800591a:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800591c:	4b0e      	ldr	r3, [pc, #56]	; (8005958 <SEGGER_RTT_WriteDownBuffer+0x48>)
 800591e:	61fb      	str	r3, [r7, #28]
 8005920:	69fb      	ldr	r3, [r7, #28]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d101      	bne.n	800592e <SEGGER_RTT_WriteDownBuffer+0x1e>
 800592a:	f7ff fd75 	bl	8005418 <_DoInit>
  SEGGER_RTT_LOCK();
 800592e:	f3ef 8311 	mrs	r3, BASEPRI
 8005932:	f04f 0120 	mov.w	r1, #32
 8005936:	f381 8811 	msr	BASEPRI, r1
 800593a:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	68b9      	ldr	r1, [r7, #8]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff ff95 	bl	8005870 <SEGGER_RTT_WriteDownBufferNoLock>
 8005946:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800594e:	697b      	ldr	r3, [r7, #20]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	20012f58 	.word	0x20012f58

0800595c <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800595c:	b580      	push	{r7, lr}
 800595e:	b088      	sub	sp, #32
 8005960:	af00      	add	r7, sp, #0
 8005962:	60f8      	str	r0, [r7, #12]
 8005964:	60b9      	str	r1, [r7, #8]
 8005966:	607a      	str	r2, [r7, #4]
 8005968:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800596a:	4b3d      	ldr	r3, [pc, #244]	; (8005a60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800596c:	61bb      	str	r3, [r7, #24]
 800596e:	69bb      	ldr	r3, [r7, #24]
 8005970:	781b      	ldrb	r3, [r3, #0]
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <SEGGER_RTT_AllocUpBuffer+0x20>
 8005978:	f7ff fd4e 	bl	8005418 <_DoInit>
  SEGGER_RTT_LOCK();
 800597c:	f3ef 8311 	mrs	r3, BASEPRI
 8005980:	f04f 0120 	mov.w	r1, #32
 8005984:	f381 8811 	msr	BASEPRI, r1
 8005988:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800598a:	4b35      	ldr	r3, [pc, #212]	; (8005a60 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800598c:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800598e:	2300      	movs	r3, #0
 8005990:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8005992:	6939      	ldr	r1, [r7, #16]
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	1c5a      	adds	r2, r3, #1
 8005998:	4613      	mov	r3, r2
 800599a:	005b      	lsls	r3, r3, #1
 800599c:	4413      	add	r3, r2
 800599e:	00db      	lsls	r3, r3, #3
 80059a0:	440b      	add	r3, r1
 80059a2:	3304      	adds	r3, #4
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d008      	beq.n	80059bc <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	3301      	adds	r3, #1
 80059ae:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	69fa      	ldr	r2, [r7, #28]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	dbeb      	blt.n	8005992 <SEGGER_RTT_AllocUpBuffer+0x36>
 80059ba:	e000      	b.n	80059be <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80059bc:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	691b      	ldr	r3, [r3, #16]
 80059c2:	69fa      	ldr	r2, [r7, #28]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	da3f      	bge.n	8005a48 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80059c8:	6939      	ldr	r1, [r7, #16]
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	1c5a      	adds	r2, r3, #1
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	440b      	add	r3, r1
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80059dc:	6939      	ldr	r1, [r7, #16]
 80059de:	69fb      	ldr	r3, [r7, #28]
 80059e0:	1c5a      	adds	r2, r3, #1
 80059e2:	4613      	mov	r3, r2
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	4413      	add	r3, r2
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	440b      	add	r3, r1
 80059ec:	3304      	adds	r3, #4
 80059ee:	68ba      	ldr	r2, [r7, #8]
 80059f0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80059f2:	6939      	ldr	r1, [r7, #16]
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	4613      	mov	r3, r2
 80059f8:	005b      	lsls	r3, r3, #1
 80059fa:	4413      	add	r3, r2
 80059fc:	00db      	lsls	r3, r3, #3
 80059fe:	440b      	add	r3, r1
 8005a00:	3320      	adds	r3, #32
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8005a06:	6939      	ldr	r1, [r7, #16]
 8005a08:	69fa      	ldr	r2, [r7, #28]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	005b      	lsls	r3, r3, #1
 8005a0e:	4413      	add	r3, r2
 8005a10:	00db      	lsls	r3, r3, #3
 8005a12:	440b      	add	r3, r1
 8005a14:	3328      	adds	r3, #40	; 0x28
 8005a16:	2200      	movs	r2, #0
 8005a18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005a1a:	6939      	ldr	r1, [r7, #16]
 8005a1c:	69fa      	ldr	r2, [r7, #28]
 8005a1e:	4613      	mov	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	4413      	add	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	440b      	add	r3, r1
 8005a28:	3324      	adds	r3, #36	; 0x24
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8005a2e:	6939      	ldr	r1, [r7, #16]
 8005a30:	69fa      	ldr	r2, [r7, #28]
 8005a32:	4613      	mov	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	00db      	lsls	r3, r3, #3
 8005a3a:	440b      	add	r3, r1
 8005a3c:	332c      	adds	r3, #44	; 0x2c
 8005a3e:	683a      	ldr	r2, [r7, #0]
 8005a40:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005a42:	f3bf 8f5f 	dmb	sy
 8005a46:	e002      	b.n	8005a4e <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005a48:	f04f 33ff 	mov.w	r3, #4294967295
 8005a4c:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005a54:	69fb      	ldr	r3, [r7, #28]
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	3720      	adds	r7, #32
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	20012f58 	.word	0x20012f58

08005a64 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005a72:	4b33      	ldr	r3, [pc, #204]	; (8005b40 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d101      	bne.n	8005a84 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8005a80:	f7ff fcca 	bl	8005418 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005a84:	4b2e      	ldr	r3, [pc, #184]	; (8005b40 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005a86:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d24d      	bcs.n	8005b30 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005a94:	f3ef 8311 	mrs	r3, BASEPRI
 8005a98:	f04f 0120 	mov.w	r1, #32
 8005a9c:	f381 8811 	msr	BASEPRI, r1
 8005aa0:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d031      	beq.n	8005b0c <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005aa8:	6979      	ldr	r1, [r7, #20]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	00db      	lsls	r3, r3, #3
 8005ab4:	440b      	add	r3, r1
 8005ab6:	3360      	adds	r3, #96	; 0x60
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005abc:	6979      	ldr	r1, [r7, #20]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	4613      	mov	r3, r2
 8005ac2:	005b      	lsls	r3, r3, #1
 8005ac4:	4413      	add	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	440b      	add	r3, r1
 8005aca:	3364      	adds	r3, #100	; 0x64
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005ad0:	6979      	ldr	r1, [r7, #20]
 8005ad2:	68fa      	ldr	r2, [r7, #12]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	005b      	lsls	r3, r3, #1
 8005ad8:	4413      	add	r3, r2
 8005ada:	00db      	lsls	r3, r3, #3
 8005adc:	440b      	add	r3, r1
 8005ade:	3368      	adds	r3, #104	; 0x68
 8005ae0:	683a      	ldr	r2, [r7, #0]
 8005ae2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4413      	add	r3, r2
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	440b      	add	r3, r1
 8005af2:	3370      	adds	r3, #112	; 0x70
 8005af4:	2200      	movs	r2, #0
 8005af6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005af8:	6979      	ldr	r1, [r7, #20]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	4613      	mov	r3, r2
 8005afe:	005b      	lsls	r3, r3, #1
 8005b00:	4413      	add	r3, r2
 8005b02:	00db      	lsls	r3, r3, #3
 8005b04:	440b      	add	r3, r1
 8005b06:	336c      	adds	r3, #108	; 0x6c
 8005b08:	2200      	movs	r2, #0
 8005b0a:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	4613      	mov	r3, r2
 8005b12:	005b      	lsls	r3, r3, #1
 8005b14:	4413      	add	r3, r2
 8005b16:	00db      	lsls	r3, r3, #3
 8005b18:	440b      	add	r3, r1
 8005b1a:	3374      	adds	r3, #116	; 0x74
 8005b1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b1e:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005b20:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	e002      	b.n	8005b36 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8005b30:	f04f 33ff 	mov.w	r3, #4294967295
 8005b34:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005b36:	69fb      	ldr	r3, [r7, #28]
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3720      	adds	r7, #32
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20012f58 	.word	0x20012f58

08005b44 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005b44:	b480      	push	{r7}
 8005b46:	b087      	sub	sp, #28
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8005b50:	2300      	movs	r3, #0
 8005b52:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b54:	e002      	b.n	8005b5c <_EncodeStr+0x18>
    Len++;
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	4413      	add	r3, r2
 8005b62:	781b      	ldrb	r3, [r3, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d1f6      	bne.n	8005b56 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d901      	bls.n	8005b74 <_EncodeStr+0x30>
    Len = Limit;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2bfe      	cmp	r3, #254	; 0xfe
 8005b78:	d806      	bhi.n	8005b88 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	60fa      	str	r2, [r7, #12]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	b2d2      	uxtb	r2, r2
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e011      	b.n	8005bac <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1c5a      	adds	r2, r3, #1
 8005b8c:	60fa      	str	r2, [r7, #12]
 8005b8e:	22ff      	movs	r2, #255	; 0xff
 8005b90:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1c5a      	adds	r2, r3, #1
 8005b96:	60fa      	str	r2, [r7, #12]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	0a19      	lsrs	r1, r3, #8
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1c5a      	adds	r2, r3, #1
 8005ba6:	60fa      	str	r2, [r7, #12]
 8005ba8:	b2ca      	uxtb	r2, r1
 8005baa:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bb0:	e00a      	b.n	8005bc8 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8005bb2:	68ba      	ldr	r2, [r7, #8]
 8005bb4:	1c53      	adds	r3, r2, #1
 8005bb6:	60bb      	str	r3, [r7, #8]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	1c59      	adds	r1, r3, #1
 8005bbc:	60f9      	str	r1, [r7, #12]
 8005bbe:	7812      	ldrb	r2, [r2, #0]
 8005bc0:	701a      	strb	r2, [r3, #0]
    n++;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	693b      	ldr	r3, [r7, #16]
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d3f0      	bcc.n	8005bb2 <_EncodeStr+0x6e>
  }
  return pPayload;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005bde:	b480      	push	{r7}
 8005be0:	b083      	sub	sp, #12
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	3304      	adds	r3, #4
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
	...

08005bf8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005bfe:	4b35      	ldr	r3, [pc, #212]	; (8005cd4 <_HandleIncomingPacket+0xdc>)
 8005c00:	7e1b      	ldrb	r3, [r3, #24]
 8005c02:	4618      	mov	r0, r3
 8005c04:	1cfb      	adds	r3, r7, #3
 8005c06:	2201      	movs	r2, #1
 8005c08:	4619      	mov	r1, r3
 8005c0a:	f7ff fdab 	bl	8005764 <SEGGER_RTT_ReadNoLock>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	dd59      	ble.n	8005ccc <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	2b80      	cmp	r3, #128	; 0x80
 8005c1c:	d032      	beq.n	8005c84 <_HandleIncomingPacket+0x8c>
 8005c1e:	2b80      	cmp	r3, #128	; 0x80
 8005c20:	dc42      	bgt.n	8005ca8 <_HandleIncomingPacket+0xb0>
 8005c22:	2b07      	cmp	r3, #7
 8005c24:	dc16      	bgt.n	8005c54 <_HandleIncomingPacket+0x5c>
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	dd3e      	ble.n	8005ca8 <_HandleIncomingPacket+0xb0>
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	2b06      	cmp	r3, #6
 8005c2e:	d83b      	bhi.n	8005ca8 <_HandleIncomingPacket+0xb0>
 8005c30:	a201      	add	r2, pc, #4	; (adr r2, 8005c38 <_HandleIncomingPacket+0x40>)
 8005c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c36:	bf00      	nop
 8005c38:	08005c5b 	.word	0x08005c5b
 8005c3c:	08005c61 	.word	0x08005c61
 8005c40:	08005c67 	.word	0x08005c67
 8005c44:	08005c6d 	.word	0x08005c6d
 8005c48:	08005c73 	.word	0x08005c73
 8005c4c:	08005c79 	.word	0x08005c79
 8005c50:	08005c7f 	.word	0x08005c7f
 8005c54:	2b7f      	cmp	r3, #127	; 0x7f
 8005c56:	d034      	beq.n	8005cc2 <_HandleIncomingPacket+0xca>
 8005c58:	e026      	b.n	8005ca8 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005c5a:	f000 ffed 	bl	8006c38 <SEGGER_SYSVIEW_Start>
      break;
 8005c5e:	e035      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8005c60:	f001 f8a4 	bl	8006dac <SEGGER_SYSVIEW_Stop>
      break;
 8005c64:	e032      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005c66:	f001 fa7d 	bl	8007164 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005c6a:	e02f      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005c6c:	f001 fa42 	bl	80070f4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8005c70:	e02c      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8005c72:	f001 f8c1 	bl	8006df8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005c76:	e029      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005c78:	f001 fcb0 	bl	80075dc <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005c7c:	e026      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8005c7e:	f001 fc8f 	bl	80075a0 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8005c82:	e023      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005c84:	4b13      	ldr	r3, [pc, #76]	; (8005cd4 <_HandleIncomingPacket+0xdc>)
 8005c86:	7e1b      	ldrb	r3, [r3, #24]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	1cfb      	adds	r3, r7, #3
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	4619      	mov	r1, r3
 8005c90:	f7ff fd68 	bl	8005764 <SEGGER_RTT_ReadNoLock>
 8005c94:	4603      	mov	r3, r0
 8005c96:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	dd13      	ble.n	8005cc6 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005c9e:	78fb      	ldrb	r3, [r7, #3]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f001 fbfd 	bl	80074a0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005ca6:	e00e      	b.n	8005cc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	b25b      	sxtb	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	da0c      	bge.n	8005cca <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005cb0:	4b08      	ldr	r3, [pc, #32]	; (8005cd4 <_HandleIncomingPacket+0xdc>)
 8005cb2:	7e1b      	ldrb	r3, [r3, #24]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	1cfb      	adds	r3, r7, #3
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4619      	mov	r1, r3
 8005cbc:	f7ff fd52 	bl	8005764 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005cc0:	e003      	b.n	8005cca <_HandleIncomingPacket+0xd2>
      break;
 8005cc2:	bf00      	nop
 8005cc4:	e002      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
      break;
 8005cc6:	bf00      	nop
 8005cc8:	e000      	b.n	8005ccc <_HandleIncomingPacket+0xd4>
      break;
 8005cca:	bf00      	nop
    }
  }
}
 8005ccc:	bf00      	nop
 8005cce:	3708      	adds	r7, #8
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	20014418 	.word	0x20014418

08005cd8 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	; 0x30
 8005cdc:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005cde:	2301      	movs	r3, #1
 8005ce0:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8005ce2:	1d3b      	adds	r3, r7, #4
 8005ce4:	3301      	adds	r3, #1
 8005ce6:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cec:	4b31      	ldr	r3, [pc, #196]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cf2:	e00b      	b.n	8005d0c <_TrySendOverflowPacket+0x34>
 8005cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cf6:	b2da      	uxtb	r2, r3
 8005cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cfa:	1c59      	adds	r1, r3, #1
 8005cfc:	62f9      	str	r1, [r7, #44]	; 0x2c
 8005cfe:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d08:	09db      	lsrs	r3, r3, #7
 8005d0a:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8005d10:	d8f0      	bhi.n	8005cf4 <_TrySendOverflowPacket+0x1c>
 8005d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d14:	1c5a      	adds	r2, r3, #1
 8005d16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d1a:	b2d2      	uxtb	r2, r2
 8005d1c:	701a      	strb	r2, [r3, #0]
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005d22:	4b25      	ldr	r3, [pc, #148]	; (8005db8 <_TrySendOverflowPacket+0xe0>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005d28:	4b22      	ldr	r3, [pc, #136]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	627b      	str	r3, [r7, #36]	; 0x24
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	e00b      	b.n	8005d54 <_TrySendOverflowPacket+0x7c>
 8005d3c:	6a3b      	ldr	r3, [r7, #32]
 8005d3e:	b2da      	uxtb	r2, r3
 8005d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d42:	1c59      	adds	r1, r3, #1
 8005d44:	6279      	str	r1, [r7, #36]	; 0x24
 8005d46:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	09db      	lsrs	r3, r3, #7
 8005d52:	623b      	str	r3, [r7, #32]
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	2b7f      	cmp	r3, #127	; 0x7f
 8005d58:	d8f0      	bhi.n	8005d3c <_TrySendOverflowPacket+0x64>
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d5c:	1c5a      	adds	r2, r3, #1
 8005d5e:	627a      	str	r2, [r7, #36]	; 0x24
 8005d60:	6a3a      	ldr	r2, [r7, #32]
 8005d62:	b2d2      	uxtb	r2, r2
 8005d64:	701a      	strb	r2, [r3, #0]
 8005d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d68:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005d6a:	4b12      	ldr	r3, [pc, #72]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005d6c:	785b      	ldrb	r3, [r3, #1]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	1d3b      	adds	r3, r7, #4
 8005d72:	69fa      	ldr	r2, [r7, #28]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	461a      	mov	r2, r3
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	f7fa fa28 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005d80:	4603      	mov	r3, r0
 8005d82:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d009      	beq.n	8005d9e <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005d8a:	4a0a      	ldr	r2, [pc, #40]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8005d90:	4b08      	ldr	r3, [pc, #32]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	3b01      	subs	r3, #1
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005d9a:	701a      	strb	r2, [r3, #0]
 8005d9c:	e004      	b.n	8005da8 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8005d9e:	4b05      	ldr	r3, [pc, #20]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	3301      	adds	r3, #1
 8005da4:	4a03      	ldr	r2, [pc, #12]	; (8005db4 <_TrySendOverflowPacket+0xdc>)
 8005da6:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005da8:	693b      	ldr	r3, [r7, #16]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3730      	adds	r7, #48	; 0x30
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	20014418 	.word	0x20014418
 8005db8:	e0001004 	.word	0xe0001004

08005dbc <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	; 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005dc8:	4b6c      	ldr	r3, [pc, #432]	; (8005f7c <_SendPacket+0x1c0>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d010      	beq.n	8005df2 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8005dd0:	4b6a      	ldr	r3, [pc, #424]	; (8005f7c <_SendPacket+0x1c0>)
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80a3 	beq.w	8005f20 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005dda:	4b68      	ldr	r3, [pc, #416]	; (8005f7c <_SendPacket+0x1c0>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d109      	bne.n	8005df6 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8005de2:	f7ff ff79 	bl	8005cd8 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005de6:	4b65      	ldr	r3, [pc, #404]	; (8005f7c <_SendPacket+0x1c0>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	f040 809a 	bne.w	8005f24 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8005df0:	e001      	b.n	8005df6 <_SendPacket+0x3a>
    goto Send;
 8005df2:	bf00      	nop
 8005df4:	e000      	b.n	8005df8 <_SendPacket+0x3c>
Send:
 8005df6:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2b1f      	cmp	r3, #31
 8005dfc:	d809      	bhi.n	8005e12 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8005dfe:	4b5f      	ldr	r3, [pc, #380]	; (8005f7c <_SendPacket+0x1c0>)
 8005e00:	69da      	ldr	r2, [r3, #28]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	fa22 f303 	lsr.w	r3, r2, r3
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	f040 808b 	bne.w	8005f28 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b17      	cmp	r3, #23
 8005e16:	d807      	bhi.n	8005e28 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	60fb      	str	r3, [r7, #12]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	701a      	strb	r2, [r3, #0]
 8005e26:	e03d      	b.n	8005ea4 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8005e30:	69fb      	ldr	r3, [r7, #28]
 8005e32:	2b7f      	cmp	r3, #127	; 0x7f
 8005e34:	d912      	bls.n	8005e5c <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005e36:	69fb      	ldr	r3, [r7, #28]
 8005e38:	09da      	lsrs	r2, r3, #7
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	b2d2      	uxtb	r2, r2
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	68fa      	ldr	r2, [r7, #12]
 8005e4c:	3a01      	subs	r2, #1
 8005e4e:	60fa      	str	r2, [r7, #12]
 8005e50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e54:	b2da      	uxtb	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	701a      	strb	r2, [r3, #0]
 8005e5a:	e006      	b.n	8005e6a <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	b2da      	uxtb	r2, r3
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b7f      	cmp	r3, #127	; 0x7f
 8005e6e:	d912      	bls.n	8005e96 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	09da      	lsrs	r2, r3, #7
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	3b01      	subs	r3, #1
 8005e78:	60fb      	str	r3, [r7, #12]
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	68fa      	ldr	r2, [r7, #12]
 8005e86:	3a01      	subs	r2, #1
 8005e88:	60fa      	str	r2, [r7, #12]
 8005e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	701a      	strb	r2, [r3, #0]
 8005e94:	e006      	b.n	8005ea4 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	60fb      	str	r3, [r7, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	b2da      	uxtb	r2, r3
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005ea4:	4b36      	ldr	r3, [pc, #216]	; (8005f80 <_SendPacket+0x1c4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005eaa:	4b34      	ldr	r3, [pc, #208]	; (8005f7c <_SendPacket+0x1c0>)
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	69ba      	ldr	r2, [r7, #24]
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	623b      	str	r3, [r7, #32]
 8005ebc:	e00b      	b.n	8005ed6 <_SendPacket+0x11a>
 8005ebe:	6a3b      	ldr	r3, [r7, #32]
 8005ec0:	b2da      	uxtb	r2, r3
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	6279      	str	r1, [r7, #36]	; 0x24
 8005ec8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ecc:	b2d2      	uxtb	r2, r2
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	09db      	lsrs	r3, r3, #7
 8005ed4:	623b      	str	r3, [r7, #32]
 8005ed6:	6a3b      	ldr	r3, [r7, #32]
 8005ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8005eda:	d8f0      	bhi.n	8005ebe <_SendPacket+0x102>
 8005edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	627a      	str	r2, [r7, #36]	; 0x24
 8005ee2:	6a3a      	ldr	r2, [r7, #32]
 8005ee4:	b2d2      	uxtb	r2, r2
 8005ee6:	701a      	strb	r2, [r3, #0]
 8005ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eea:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005eec:	4b23      	ldr	r3, [pc, #140]	; (8005f7c <_SendPacket+0x1c0>)
 8005eee:	785b      	ldrb	r3, [r3, #1]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	461a      	mov	r2, r3
 8005efa:	68f9      	ldr	r1, [r7, #12]
 8005efc:	f7fa f968 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005f00:	4603      	mov	r3, r0
 8005f02:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d003      	beq.n	8005f12 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005f0a:	4a1c      	ldr	r2, [pc, #112]	; (8005f7c <_SendPacket+0x1c0>)
 8005f0c:	69bb      	ldr	r3, [r7, #24]
 8005f0e:	60d3      	str	r3, [r2, #12]
 8005f10:	e00b      	b.n	8005f2a <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005f12:	4b1a      	ldr	r3, [pc, #104]	; (8005f7c <_SendPacket+0x1c0>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	b2da      	uxtb	r2, r3
 8005f1a:	4b18      	ldr	r3, [pc, #96]	; (8005f7c <_SendPacket+0x1c0>)
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	e004      	b.n	8005f2a <_SendPacket+0x16e>
    goto SendDone;
 8005f20:	bf00      	nop
 8005f22:	e002      	b.n	8005f2a <_SendPacket+0x16e>
      goto SendDone;
 8005f24:	bf00      	nop
 8005f26:	e000      	b.n	8005f2a <_SendPacket+0x16e>
      goto SendDone;
 8005f28:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8005f2a:	4b14      	ldr	r3, [pc, #80]	; (8005f7c <_SendPacket+0x1c0>)
 8005f2c:	7e1b      	ldrb	r3, [r3, #24]
 8005f2e:	4619      	mov	r1, r3
 8005f30:	4a14      	ldr	r2, [pc, #80]	; (8005f84 <_SendPacket+0x1c8>)
 8005f32:	460b      	mov	r3, r1
 8005f34:	005b      	lsls	r3, r3, #1
 8005f36:	440b      	add	r3, r1
 8005f38:	00db      	lsls	r3, r3, #3
 8005f3a:	4413      	add	r3, r2
 8005f3c:	336c      	adds	r3, #108	; 0x6c
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	4b0e      	ldr	r3, [pc, #56]	; (8005f7c <_SendPacket+0x1c0>)
 8005f42:	7e1b      	ldrb	r3, [r3, #24]
 8005f44:	4618      	mov	r0, r3
 8005f46:	490f      	ldr	r1, [pc, #60]	; (8005f84 <_SendPacket+0x1c8>)
 8005f48:	4603      	mov	r3, r0
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	4403      	add	r3, r0
 8005f4e:	00db      	lsls	r3, r3, #3
 8005f50:	440b      	add	r3, r1
 8005f52:	3370      	adds	r3, #112	; 0x70
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d00b      	beq.n	8005f72 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005f5a:	4b08      	ldr	r3, [pc, #32]	; (8005f7c <_SendPacket+0x1c0>)
 8005f5c:	789b      	ldrb	r3, [r3, #2]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d107      	bne.n	8005f72 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005f62:	4b06      	ldr	r3, [pc, #24]	; (8005f7c <_SendPacket+0x1c0>)
 8005f64:	2201      	movs	r2, #1
 8005f66:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005f68:	f7ff fe46 	bl	8005bf8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005f6c:	4b03      	ldr	r3, [pc, #12]	; (8005f7c <_SendPacket+0x1c0>)
 8005f6e:	2200      	movs	r2, #0
 8005f70:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005f72:	bf00      	nop
 8005f74:	3728      	adds	r7, #40	; 0x28
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20014418 	.word	0x20014418
 8005f80:	e0001004 	.word	0xe0001004
 8005f84:	20012f58 	.word	0x20012f58

08005f88 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b08a      	sub	sp, #40	; 0x28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	3301      	adds	r3, #1
 8005f9e:	2b80      	cmp	r3, #128	; 0x80
 8005fa0:	d80a      	bhi.n	8005fb8 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	1c59      	adds	r1, r3, #1
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	6051      	str	r1, [r2, #4]
 8005fac:	78fa      	ldrb	r2, [r7, #3]
 8005fae:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	2b80      	cmp	r3, #128	; 0x80
 8005fbe:	d15a      	bne.n	8006076 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691a      	ldr	r2, [r3, #16]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	b2d2      	uxtb	r2, r2
 8005fca:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	68db      	ldr	r3, [r3, #12]
 8005fd6:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	627b      	str	r3, [r7, #36]	; 0x24
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	623b      	str	r3, [r7, #32]
 8005fe0:	e00b      	b.n	8005ffa <_StoreChar+0x72>
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	b2da      	uxtb	r2, r3
 8005fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe8:	1c59      	adds	r1, r3, #1
 8005fea:	6279      	str	r1, [r7, #36]	; 0x24
 8005fec:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8005ff0:	b2d2      	uxtb	r2, r2
 8005ff2:	701a      	strb	r2, [r3, #0]
 8005ff4:	6a3b      	ldr	r3, [r7, #32]
 8005ff6:	09db      	lsrs	r3, r3, #7
 8005ff8:	623b      	str	r3, [r7, #32]
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8005ffe:	d8f0      	bhi.n	8005fe2 <_StoreChar+0x5a>
 8006000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	627a      	str	r2, [r7, #36]	; 0x24
 8006006:	6a3a      	ldr	r2, [r7, #32]
 8006008:	b2d2      	uxtb	r2, r2
 800600a:	701a      	strb	r2, [r3, #0]
 800600c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800600e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	61fb      	str	r3, [r7, #28]
 8006014:	2300      	movs	r3, #0
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e00b      	b.n	8006032 <_StoreChar+0xaa>
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	b2da      	uxtb	r2, r3
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	1c59      	adds	r1, r3, #1
 8006022:	61f9      	str	r1, [r7, #28]
 8006024:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006028:	b2d2      	uxtb	r2, r2
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	09db      	lsrs	r3, r3, #7
 8006030:	61bb      	str	r3, [r7, #24]
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b7f      	cmp	r3, #127	; 0x7f
 8006036:	d8f0      	bhi.n	800601a <_StoreChar+0x92>
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	1c5a      	adds	r2, r3, #1
 800603c:	61fa      	str	r2, [r7, #28]
 800603e:	69ba      	ldr	r2, [r7, #24]
 8006040:	b2d2      	uxtb	r2, r2
 8006042:	701a      	strb	r2, [r3, #0]
 8006044:	69fb      	ldr	r3, [r7, #28]
 8006046:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	221a      	movs	r2, #26
 800604e:	6939      	ldr	r1, [r7, #16]
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff feb3 	bl	8005dbc <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4618      	mov	r0, r3
 800605c:	f7ff fdbf 	bl	8005bde <_PreparePacket>
 8006060:	4602      	mov	r2, r0
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	689b      	ldr	r3, [r3, #8]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	611a      	str	r2, [r3, #16]
  }
}
 8006076:	bf00      	nop
 8006078:	3728      	adds	r7, #40	; 0x28
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
	...

08006080 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8006080:	b580      	push	{r7, lr}
 8006082:	b08a      	sub	sp, #40	; 0x28
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	60b9      	str	r1, [r7, #8]
 800608a:	607a      	str	r2, [r7, #4]
 800608c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8006092:	2301      	movs	r3, #1
 8006094:	627b      	str	r3, [r7, #36]	; 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8006096:	2301      	movs	r3, #1
 8006098:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800609a:	e007      	b.n	80060ac <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800609c:	6a3a      	ldr	r2, [r7, #32]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060a4:	623b      	str	r3, [r7, #32]
    Width++;
 80060a6:	69fb      	ldr	r3, [r7, #28]
 80060a8:	3301      	adds	r3, #1
 80060aa:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80060ac:	6a3a      	ldr	r2, [r7, #32]
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d2f3      	bcs.n	800609c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d901      	bls.n	80060c0 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80060c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060c2:	f003 0301 	and.w	r3, r3, #1
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d11f      	bne.n	800610a <_PrintUnsigned+0x8a>
    if (FieldWidth != 0u) {
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d01c      	beq.n	800610a <_PrintUnsigned+0x8a>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80060d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060d2:	f003 0302 	and.w	r3, r3, #2
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d005      	beq.n	80060e6 <_PrintUnsigned+0x66>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <_PrintUnsigned+0x66>
        c = '0';
 80060e0:	2330      	movs	r3, #48	; 0x30
 80060e2:	76fb      	strb	r3, [r7, #27]
 80060e4:	e001      	b.n	80060ea <_PrintUnsigned+0x6a>
      } else {
        c = ' ';
 80060e6:	2320      	movs	r3, #32
 80060e8:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060ea:	e007      	b.n	80060fc <_PrintUnsigned+0x7c>
        FieldWidth--;
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	3b01      	subs	r3, #1
 80060f0:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, c);
 80060f2:	7efb      	ldrb	r3, [r7, #27]
 80060f4:	4619      	mov	r1, r3
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f7ff ff46 	bl	8005f88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <_PrintUnsigned+0x8a>
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	429a      	cmp	r2, r3
 8006108:	d3f0      	bcc.n	80060ec <_PrintUnsigned+0x6c>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2b01      	cmp	r3, #1
 800610e:	d903      	bls.n	8006118 <_PrintUnsigned+0x98>
      NumDigits--;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	3b01      	subs	r3, #1
 8006114:	603b      	str	r3, [r7, #0]
 8006116:	e009      	b.n	800612c <_PrintUnsigned+0xac>
    } else {
      Div = v / Digit;
 8006118:	68ba      	ldr	r2, [r7, #8]
 800611a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8006122:	697a      	ldr	r2, [r7, #20]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	429a      	cmp	r2, r3
 8006128:	d200      	bcs.n	800612c <_PrintUnsigned+0xac>
        break;
 800612a:	e005      	b.n	8006138 <_PrintUnsigned+0xb8>
      }
    }
    Digit *= Base;
 800612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	fb02 f303 	mul.w	r3, r2, r3
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8006136:	e7e8      	b.n	800610a <_PrintUnsigned+0x8a>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8006138:	68ba      	ldr	r2, [r7, #8]
 800613a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006140:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006146:	fb02 f303 	mul.w	r3, r2, r3
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8006150:	4a15      	ldr	r2, [pc, #84]	; (80061a8 <_PrintUnsigned+0x128>)
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	4413      	add	r3, r2
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	4619      	mov	r1, r3
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff ff14 	bl	8005f88 <_StoreChar>
    Digit /= Base;
 8006160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	fbb2 f3f3 	udiv	r3, r2, r3
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
  } while (Digit);
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	2b00      	cmp	r3, #0
 800616e:	d1e3      	bne.n	8006138 <_PrintUnsigned+0xb8>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8006170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006172:	f003 0301 	and.w	r3, r3, #1
 8006176:	2b00      	cmp	r3, #0
 8006178:	d011      	beq.n	800619e <_PrintUnsigned+0x11e>
    if (FieldWidth != 0u) {
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00e      	beq.n	800619e <_PrintUnsigned+0x11e>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006180:	e006      	b.n	8006190 <_PrintUnsigned+0x110>
        FieldWidth--;
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	3b01      	subs	r3, #1
 8006186:	633b      	str	r3, [r7, #48]	; 0x30
        _StoreChar(pBufferDesc, ' ');
 8006188:	2120      	movs	r1, #32
 800618a:	68f8      	ldr	r0, [r7, #12]
 800618c:	f7ff fefc 	bl	8005f88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <_PrintUnsigned+0x11e>
 8006196:	69fa      	ldr	r2, [r7, #28]
 8006198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800619a:	429a      	cmp	r2, r3
 800619c:	d3f1      	bcc.n	8006182 <_PrintUnsigned+0x102>
      }
    }
  }
}
 800619e:	bf00      	nop
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	08008890 	.word	0x08008890

080061ac <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b088      	sub	sp, #32
 80061b0:	af02      	add	r7, sp, #8
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	60b9      	str	r1, [r7, #8]
 80061b6:	607a      	str	r2, [r7, #4]
 80061b8:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	bfb8      	it	lt
 80061c0:	425b      	neglt	r3, r3
 80061c2:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80061c4:	2301      	movs	r3, #1
 80061c6:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061c8:	e007      	b.n	80061da <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80061d2:	613b      	str	r3, [r7, #16]
    Width++;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	3301      	adds	r3, #1
 80061d8:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	429a      	cmp	r2, r3
 80061e0:	daf3      	bge.n	80061ca <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d901      	bls.n	80061ee <_PrintInt+0x42>
    Width = NumDigits;
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d00a      	beq.n	800620a <_PrintInt+0x5e>
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db04      	blt.n	8006204 <_PrintInt+0x58>
 80061fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <_PrintInt+0x5e>
    FieldWidth--;
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	3b01      	subs	r3, #1
 8006208:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800620a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <_PrintInt+0x6e>
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d016      	beq.n	8006248 <_PrintInt+0x9c>
 800621a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800621c:	f003 0301 	and.w	r3, r3, #1
 8006220:	2b00      	cmp	r3, #0
 8006222:	d111      	bne.n	8006248 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8006224:	6a3b      	ldr	r3, [r7, #32]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00e      	beq.n	8006248 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800622a:	e006      	b.n	800623a <_PrintInt+0x8e>
        FieldWidth--;
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	3b01      	subs	r3, #1
 8006230:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8006232:	2120      	movs	r1, #32
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fea7 	bl	8005f88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <_PrintInt+0x9c>
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	6a3b      	ldr	r3, [r7, #32]
 8006244:	429a      	cmp	r2, r3
 8006246:	d3f1      	bcc.n	800622c <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	da07      	bge.n	800625e <_PrintInt+0xb2>
    v = -v;
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	425b      	negs	r3, r3
 8006252:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8006254:	212d      	movs	r1, #45	; 0x2d
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fe96 	bl	8005f88 <_StoreChar>
 800625c:	e008      	b.n	8006270 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b00      	cmp	r3, #0
 8006266:	d003      	beq.n	8006270 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8006268:	212b      	movs	r1, #43	; 0x2b
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff fe8c 	bl	8005f88 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8006270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d019      	beq.n	80062ae <_PrintInt+0x102>
 800627a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800627c:	f003 0301 	and.w	r3, r3, #1
 8006280:	2b00      	cmp	r3, #0
 8006282:	d114      	bne.n	80062ae <_PrintInt+0x102>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d111      	bne.n	80062ae <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d00e      	beq.n	80062ae <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8006290:	e006      	b.n	80062a0 <_PrintInt+0xf4>
        FieldWidth--;
 8006292:	6a3b      	ldr	r3, [r7, #32]
 8006294:	3b01      	subs	r3, #1
 8006296:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8006298:	2130      	movs	r1, #48	; 0x30
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f7ff fe74 	bl	8005f88 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80062a0:	6a3b      	ldr	r3, [r7, #32]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <_PrintInt+0x102>
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	6a3b      	ldr	r3, [r7, #32]
 80062aa:	429a      	cmp	r2, r3
 80062ac:	d3f1      	bcc.n	8006292 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80062ae:	68b9      	ldr	r1, [r7, #8]
 80062b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b2:	9301      	str	r3, [sp, #4]
 80062b4:	6a3b      	ldr	r3, [r7, #32]
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	687a      	ldr	r2, [r7, #4]
 80062bc:	68f8      	ldr	r0, [r7, #12]
 80062be:	f7ff fedf 	bl	8006080 <_PrintUnsigned>
}
 80062c2:	bf00      	nop
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b098      	sub	sp, #96	; 0x60
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80062d8:	f3ef 8311 	mrs	r3, BASEPRI
 80062dc:	f04f 0120 	mov.w	r1, #32
 80062e0:	f381 8811 	msr	BASEPRI, r1
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
 80062e6:	48b7      	ldr	r0, [pc, #732]	; (80065c4 <_VPrintTarget+0x2f8>)
 80062e8:	f7ff fc79 	bl	8005bde <_PreparePacket>
 80062ec:	62f8      	str	r0, [r7, #44]	; 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 80062ee:	4bb5      	ldr	r3, [pc, #724]	; (80065c4 <_VPrintTarget+0x2f8>)
 80062f0:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 80062f2:	2300      	movs	r3, #0
 80062f4:	627b      	str	r3, [r7, #36]	; 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 80062f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f8:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3301      	adds	r3, #1
 80062fe:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
    sFormat++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8006312:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 8183 	beq.w	8006622 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 800631c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006320:	2b25      	cmp	r3, #37	; 0x25
 8006322:	f040 8170 	bne.w	8006606 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8006326:	2300      	movs	r3, #0
 8006328:	64bb      	str	r3, [r7, #72]	; 0x48
      v = 1;
 800632a:	2301      	movs	r3, #1
 800632c:	653b      	str	r3, [r7, #80]	; 0x50
      do {
        c = *sFormat;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        switch (c) {
 8006336:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800633a:	3b23      	subs	r3, #35	; 0x23
 800633c:	2b0d      	cmp	r3, #13
 800633e:	d83f      	bhi.n	80063c0 <_VPrintTarget+0xf4>
 8006340:	a201      	add	r2, pc, #4	; (adr r2, 8006348 <_VPrintTarget+0x7c>)
 8006342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006346:	bf00      	nop
 8006348:	080063b1 	.word	0x080063b1
 800634c:	080063c1 	.word	0x080063c1
 8006350:	080063c1 	.word	0x080063c1
 8006354:	080063c1 	.word	0x080063c1
 8006358:	080063c1 	.word	0x080063c1
 800635c:	080063c1 	.word	0x080063c1
 8006360:	080063c1 	.word	0x080063c1
 8006364:	080063c1 	.word	0x080063c1
 8006368:	080063a1 	.word	0x080063a1
 800636c:	080063c1 	.word	0x080063c1
 8006370:	08006381 	.word	0x08006381
 8006374:	080063c1 	.word	0x080063c1
 8006378:	080063c1 	.word	0x080063c1
 800637c:	08006391 	.word	0x08006391
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8006380:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006382:	f043 0301 	orr.w	r3, r3, #1
 8006386:	64bb      	str	r3, [r7, #72]	; 0x48
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	e01a      	b.n	80063c6 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8006390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006392:	f043 0302 	orr.w	r3, r3, #2
 8006396:	64bb      	str	r3, [r7, #72]	; 0x48
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	3301      	adds	r3, #1
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	e012      	b.n	80063c6 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80063a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063a2:	f043 0304 	orr.w	r3, r3, #4
 80063a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	3301      	adds	r3, #1
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	e00a      	b.n	80063c6 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80063b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063b2:	f043 0308 	orr.w	r3, r3, #8
 80063b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3301      	adds	r3, #1
 80063bc:	60fb      	str	r3, [r7, #12]
 80063be:	e002      	b.n	80063c6 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80063c0:	2300      	movs	r3, #0
 80063c2:	653b      	str	r3, [r7, #80]	; 0x50
 80063c4:	bf00      	nop
        }
      } while (v);
 80063c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1b0      	bne.n	800632e <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80063cc:	2300      	movs	r3, #0
 80063ce:	647b      	str	r3, [r7, #68]	; 0x44
      do {
        c = *sFormat;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
        if ((c < '0') || (c > '9')) {
 80063d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063dc:	2b2f      	cmp	r3, #47	; 0x2f
 80063de:	d912      	bls.n	8006406 <_VPrintTarget+0x13a>
 80063e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063e4:	2b39      	cmp	r3, #57	; 0x39
 80063e6:	d80e      	bhi.n	8006406 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 80063ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063f0:	4613      	mov	r3, r2
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	4413      	add	r3, r2
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	461a      	mov	r2, r3
 80063fa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80063fe:	4413      	add	r3, r2
 8006400:	3b30      	subs	r3, #48	; 0x30
 8006402:	647b      	str	r3, [r7, #68]	; 0x44
        c = *sFormat;
 8006404:	e7e4      	b.n	80063d0 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8006406:	2300      	movs	r3, #0
 8006408:	64fb      	str	r3, [r7, #76]	; 0x4c
      c = *sFormat;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	781b      	ldrb	r3, [r3, #0]
 800640e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      if (c == '.') {
 8006412:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006416:	2b2e      	cmp	r3, #46	; 0x2e
 8006418:	d11d      	bne.n	8006456 <_VPrintTarget+0x18a>
        sFormat++;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	3301      	adds	r3, #1
 800641e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	781b      	ldrb	r3, [r3, #0]
 8006424:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          if ((c < '0') || (c > '9')) {
 8006428:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800642c:	2b2f      	cmp	r3, #47	; 0x2f
 800642e:	d912      	bls.n	8006456 <_VPrintTarget+0x18a>
 8006430:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006434:	2b39      	cmp	r3, #57	; 0x39
 8006436:	d80e      	bhi.n	8006456 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	3301      	adds	r3, #1
 800643c:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 800643e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006440:	4613      	mov	r3, r2
 8006442:	009b      	lsls	r3, r3, #2
 8006444:	4413      	add	r3, r2
 8006446:	005b      	lsls	r3, r3, #1
 8006448:	461a      	mov	r2, r3
 800644a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800644e:	4413      	add	r3, r2
 8006450:	3b30      	subs	r3, #48	; 0x30
 8006452:	64fb      	str	r3, [r7, #76]	; 0x4c
          c = *sFormat;
 8006454:	e7e4      	b.n	8006420 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 800645e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006462:	2b6c      	cmp	r3, #108	; 0x6c
 8006464:	d003      	beq.n	800646e <_VPrintTarget+0x1a2>
 8006466:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800646a:	2b68      	cmp	r3, #104	; 0x68
 800646c:	d107      	bne.n	800647e <_VPrintTarget+0x1b2>
          c = *sFormat;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
          sFormat++;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	3301      	adds	r3, #1
 800647a:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 800647c:	e7ef      	b.n	800645e <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 800647e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006482:	2b25      	cmp	r3, #37	; 0x25
 8006484:	f000 80b3 	beq.w	80065ee <_VPrintTarget+0x322>
 8006488:	2b25      	cmp	r3, #37	; 0x25
 800648a:	f2c0 80b7 	blt.w	80065fc <_VPrintTarget+0x330>
 800648e:	2b78      	cmp	r3, #120	; 0x78
 8006490:	f300 80b4 	bgt.w	80065fc <_VPrintTarget+0x330>
 8006494:	2b58      	cmp	r3, #88	; 0x58
 8006496:	f2c0 80b1 	blt.w	80065fc <_VPrintTarget+0x330>
 800649a:	3b58      	subs	r3, #88	; 0x58
 800649c:	2b20      	cmp	r3, #32
 800649e:	f200 80ad 	bhi.w	80065fc <_VPrintTarget+0x330>
 80064a2:	a201      	add	r2, pc, #4	; (adr r2, 80064a8 <_VPrintTarget+0x1dc>)
 80064a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a8:	0800659f 	.word	0x0800659f
 80064ac:	080065fd 	.word	0x080065fd
 80064b0:	080065fd 	.word	0x080065fd
 80064b4:	080065fd 	.word	0x080065fd
 80064b8:	080065fd 	.word	0x080065fd
 80064bc:	080065fd 	.word	0x080065fd
 80064c0:	080065fd 	.word	0x080065fd
 80064c4:	080065fd 	.word	0x080065fd
 80064c8:	080065fd 	.word	0x080065fd
 80064cc:	080065fd 	.word	0x080065fd
 80064d0:	080065fd 	.word	0x080065fd
 80064d4:	0800652d 	.word	0x0800652d
 80064d8:	08006553 	.word	0x08006553
 80064dc:	080065fd 	.word	0x080065fd
 80064e0:	080065fd 	.word	0x080065fd
 80064e4:	080065fd 	.word	0x080065fd
 80064e8:	080065fd 	.word	0x080065fd
 80064ec:	080065fd 	.word	0x080065fd
 80064f0:	080065fd 	.word	0x080065fd
 80064f4:	080065fd 	.word	0x080065fd
 80064f8:	080065fd 	.word	0x080065fd
 80064fc:	080065fd 	.word	0x080065fd
 8006500:	080065fd 	.word	0x080065fd
 8006504:	080065fd 	.word	0x080065fd
 8006508:	080065c9 	.word	0x080065c9
 800650c:	080065fd 	.word	0x080065fd
 8006510:	080065fd 	.word	0x080065fd
 8006514:	080065fd 	.word	0x080065fd
 8006518:	080065fd 	.word	0x080065fd
 800651c:	08006579 	.word	0x08006579
 8006520:	080065fd 	.word	0x080065fd
 8006524:	080065fd 	.word	0x080065fd
 8006528:	0800659f 	.word	0x0800659f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	1d19      	adds	r1, r3, #4
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6011      	str	r1, [r2, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	653b      	str	r3, [r7, #80]	; 0x50
        c0 = (char)v;
 800653a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800653c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        _StoreChar(&BufferDesc, c0);
 8006540:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006544:	f107 0314 	add.w	r3, r7, #20
 8006548:	4611      	mov	r1, r2
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fd1c 	bl	8005f88 <_StoreChar>
        break;
 8006550:	e055      	b.n	80065fe <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	1d19      	adds	r1, r3, #4
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	6011      	str	r1, [r2, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006560:	f107 0014 	add.w	r0, r7, #20
 8006564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006566:	9301      	str	r3, [sp, #4]
 8006568:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800656a:	9300      	str	r3, [sp, #0]
 800656c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800656e:	220a      	movs	r2, #10
 8006570:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006572:	f7ff fe1b 	bl	80061ac <_PrintInt>
        break;
 8006576:	e042      	b.n	80065fe <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	1d19      	adds	r1, r3, #4
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	6011      	str	r1, [r2, #0]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8006586:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006588:	f107 0014 	add.w	r0, r7, #20
 800658c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006596:	220a      	movs	r2, #10
 8006598:	f7ff fd72 	bl	8006080 <_PrintUnsigned>
        break;
 800659c:	e02f      	b.n	80065fe <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	1d19      	adds	r1, r3, #4
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6011      	str	r1, [r2, #0]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80065ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065ae:	f107 0014 	add.w	r0, r7, #20
 80065b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065b4:	9301      	str	r3, [sp, #4]
 80065b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	2210      	movs	r2, #16
 80065be:	f7ff fd5f 	bl	8006080 <_PrintUnsigned>
        break;
 80065c2:	e01c      	b.n	80065fe <_VPrintTarget+0x332>
 80065c4:	20014448 	.word	0x20014448
      case 'p':
        v = va_arg(*pParamList, int);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	1d19      	adds	r1, r3, #4
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	6011      	str	r1, [r2, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	653b      	str	r3, [r7, #80]	; 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80065d6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80065d8:	f107 0014 	add.w	r0, r7, #20
 80065dc:	2300      	movs	r3, #0
 80065de:	9301      	str	r3, [sp, #4]
 80065e0:	2308      	movs	r3, #8
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2308      	movs	r3, #8
 80065e6:	2210      	movs	r2, #16
 80065e8:	f7ff fd4a 	bl	8006080 <_PrintUnsigned>
        break;
 80065ec:	e007      	b.n	80065fe <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 80065ee:	f107 0314 	add.w	r3, r7, #20
 80065f2:	2125      	movs	r1, #37	; 0x25
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff fcc7 	bl	8005f88 <_StoreChar>
        break;
 80065fa:	e000      	b.n	80065fe <_VPrintTarget+0x332>
      default:
        break;
 80065fc:	bf00      	nop
      }
      sFormat++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e007      	b.n	8006616 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8006606:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800660a:	f107 0314 	add.w	r3, r7, #20
 800660e:	4611      	mov	r1, r2
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fcb9 	bl	8005f88 <_StoreChar>
    }
  } while (*sFormat);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	f47f ae72 	bne.w	8006304 <_VPrintTarget+0x38>
 8006620:	e000      	b.n	8006624 <_VPrintTarget+0x358>
      break;
 8006622:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8006624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006626:	2b00      	cmp	r3, #0
 8006628:	d041      	beq.n	80066ae <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800662a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	b2d2      	uxtb	r2, r2
 8006630:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	643b      	str	r3, [r7, #64]	; 0x40
 8006636:	6a3b      	ldr	r3, [r7, #32]
 8006638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800663a:	e00b      	b.n	8006654 <_VPrintTarget+0x388>
 800663c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800663e:	b2da      	uxtb	r2, r3
 8006640:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006642:	1c59      	adds	r1, r3, #1
 8006644:	6439      	str	r1, [r7, #64]	; 0x40
 8006646:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800664a:	b2d2      	uxtb	r2, r2
 800664c:	701a      	strb	r2, [r3, #0]
 800664e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006650:	09db      	lsrs	r3, r3, #7
 8006652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006656:	2b7f      	cmp	r3, #127	; 0x7f
 8006658:	d8f0      	bhi.n	800663c <_VPrintTarget+0x370>
 800665a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	643a      	str	r2, [r7, #64]	; 0x40
 8006660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006662:	b2d2      	uxtb	r2, r2
 8006664:	701a      	strb	r2, [r3, #0]
 8006666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006668:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	63bb      	str	r3, [r7, #56]	; 0x38
 800666e:	2300      	movs	r3, #0
 8006670:	637b      	str	r3, [r7, #52]	; 0x34
 8006672:	e00b      	b.n	800668c <_VPrintTarget+0x3c0>
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	b2da      	uxtb	r2, r3
 8006678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800667a:	1c59      	adds	r1, r3, #1
 800667c:	63b9      	str	r1, [r7, #56]	; 0x38
 800667e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006682:	b2d2      	uxtb	r2, r2
 8006684:	701a      	strb	r2, [r3, #0]
 8006686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006688:	09db      	lsrs	r3, r3, #7
 800668a:	637b      	str	r3, [r7, #52]	; 0x34
 800668c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800668e:	2b7f      	cmp	r3, #127	; 0x7f
 8006690:	d8f0      	bhi.n	8006674 <_VPrintTarget+0x3a8>
 8006692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006694:	1c5a      	adds	r2, r3, #1
 8006696:	63ba      	str	r2, [r7, #56]	; 0x38
 8006698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]
 800669e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a0:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066a2:	69fb      	ldr	r3, [r7, #28]
 80066a4:	69b9      	ldr	r1, [r7, #24]
 80066a6:	221a      	movs	r2, #26
 80066a8:	4618      	mov	r0, r3
 80066aa:	f7ff fb87 	bl	8005dbc <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80066ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b0:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80066b4:	bf00      	nop
 80066b6:	3758      	adds	r7, #88	; 0x58
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af02      	add	r7, sp, #8
 80066c2:	60f8      	str	r0, [r7, #12]
 80066c4:	60b9      	str	r1, [r7, #8]
 80066c6:	607a      	str	r2, [r7, #4]
 80066c8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066ca:	2300      	movs	r3, #0
 80066cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80066d0:	4917      	ldr	r1, [pc, #92]	; (8006730 <SEGGER_SYSVIEW_Init+0x74>)
 80066d2:	4818      	ldr	r0, [pc, #96]	; (8006734 <SEGGER_SYSVIEW_Init+0x78>)
 80066d4:	f7ff f942 	bl	800595c <SEGGER_RTT_AllocUpBuffer>
 80066d8:	4603      	mov	r3, r0
 80066da:	b2da      	uxtb	r2, r3
 80066dc:	4b16      	ldr	r3, [pc, #88]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 80066de:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80066e0:	4b15      	ldr	r3, [pc, #84]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 80066e2:	785a      	ldrb	r2, [r3, #1]
 80066e4:	4b14      	ldr	r3, [pc, #80]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 80066e6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80066e8:	4b13      	ldr	r3, [pc, #76]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 80066ea:	7e1b      	ldrb	r3, [r3, #24]
 80066ec:	4618      	mov	r0, r3
 80066ee:	2300      	movs	r3, #0
 80066f0:	9300      	str	r3, [sp, #0]
 80066f2:	2308      	movs	r3, #8
 80066f4:	4a11      	ldr	r2, [pc, #68]	; (800673c <SEGGER_SYSVIEW_Init+0x80>)
 80066f6:	490f      	ldr	r1, [pc, #60]	; (8006734 <SEGGER_SYSVIEW_Init+0x78>)
 80066f8:	f7ff f9b4 	bl	8005a64 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8006702:	4b0f      	ldr	r3, [pc, #60]	; (8006740 <SEGGER_SYSVIEW_Init+0x84>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 8006708:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800670a:	4a0b      	ldr	r2, [pc, #44]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8006710:	4a09      	ldr	r2, [pc, #36]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8006716:	4a08      	ldr	r2, [pc, #32]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800671c:	4a06      	ldr	r2, [pc, #24]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8006722:	4b05      	ldr	r3, [pc, #20]	; (8006738 <SEGGER_SYSVIEW_Init+0x7c>)
 8006724:	2200      	movs	r2, #0
 8006726:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8006728:	bf00      	nop
 800672a:	3710      	adds	r7, #16
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20013410 	.word	0x20013410
 8006734:	0800880c 	.word	0x0800880c
 8006738:	20014418 	.word	0x20014418
 800673c:	20014410 	.word	0x20014410
 8006740:	e0001004 	.word	0xe0001004

08006744 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006744:	b480      	push	{r7}
 8006746:	b083      	sub	sp, #12
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800674c:	4a04      	ldr	r2, [pc, #16]	; (8006760 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6113      	str	r3, [r2, #16]
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	20014418 	.word	0x20014418

08006764 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800676c:	f3ef 8311 	mrs	r3, BASEPRI
 8006770:	f04f 0120 	mov.w	r1, #32
 8006774:	f381 8811 	msr	BASEPRI, r1
 8006778:	60fb      	str	r3, [r7, #12]
 800677a:	4808      	ldr	r0, [pc, #32]	; (800679c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800677c:	f7ff fa2f 	bl	8005bde <_PreparePacket>
 8006780:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	68b8      	ldr	r0, [r7, #8]
 8006788:	f7ff fb18 	bl	8005dbc <_SendPacket>
  RECORD_END();
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f383 8811 	msr	BASEPRI, r3
}
 8006792:	bf00      	nop
 8006794:	3710      	adds	r7, #16
 8006796:	46bd      	mov	sp, r7
 8006798:	bd80      	pop	{r7, pc}
 800679a:	bf00      	nop
 800679c:	20014448 	.word	0x20014448

080067a0 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b088      	sub	sp, #32
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80067aa:	f3ef 8311 	mrs	r3, BASEPRI
 80067ae:	f04f 0120 	mov.w	r1, #32
 80067b2:	f381 8811 	msr	BASEPRI, r1
 80067b6:	617b      	str	r3, [r7, #20]
 80067b8:	4816      	ldr	r0, [pc, #88]	; (8006814 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80067ba:	f7ff fa10 	bl	8005bde <_PreparePacket>
 80067be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	61fb      	str	r3, [r7, #28]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	61bb      	str	r3, [r7, #24]
 80067cc:	e00b      	b.n	80067e6 <SEGGER_SYSVIEW_RecordU32+0x46>
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	61f9      	str	r1, [r7, #28]
 80067d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80067dc:	b2d2      	uxtb	r2, r2
 80067de:	701a      	strb	r2, [r3, #0]
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	09db      	lsrs	r3, r3, #7
 80067e4:	61bb      	str	r3, [r7, #24]
 80067e6:	69bb      	ldr	r3, [r7, #24]
 80067e8:	2b7f      	cmp	r3, #127	; 0x7f
 80067ea:	d8f0      	bhi.n	80067ce <SEGGER_SYSVIEW_RecordU32+0x2e>
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	61fa      	str	r2, [r7, #28]
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	b2d2      	uxtb	r2, r2
 80067f6:	701a      	strb	r2, [r3, #0]
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68f9      	ldr	r1, [r7, #12]
 8006800:	6938      	ldr	r0, [r7, #16]
 8006802:	f7ff fadb 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	f383 8811 	msr	BASEPRI, r3
}
 800680c:	bf00      	nop
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20014448 	.word	0x20014448

08006818 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8006824:	f3ef 8311 	mrs	r3, BASEPRI
 8006828:	f04f 0120 	mov.w	r1, #32
 800682c:	f381 8811 	msr	BASEPRI, r1
 8006830:	61fb      	str	r3, [r7, #28]
 8006832:	4825      	ldr	r0, [pc, #148]	; (80068c8 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006834:	f7ff f9d3 	bl	8005bde <_PreparePacket>
 8006838:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	62bb      	str	r3, [r7, #40]	; 0x28
 8006846:	e00b      	b.n	8006860 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800684a:	b2da      	uxtb	r2, r3
 800684c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800684e:	1c59      	adds	r1, r3, #1
 8006850:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006852:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	701a      	strb	r2, [r3, #0]
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	09db      	lsrs	r3, r3, #7
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006862:	2b7f      	cmp	r3, #127	; 0x7f
 8006864:	d8f0      	bhi.n	8006848 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006868:	1c5a      	adds	r2, r3, #1
 800686a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800686c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800686e:	b2d2      	uxtb	r2, r2
 8006870:	701a      	strb	r2, [r3, #0]
 8006872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006874:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	623b      	str	r3, [r7, #32]
 800687e:	e00b      	b.n	8006898 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	b2da      	uxtb	r2, r3
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	1c59      	adds	r1, r3, #1
 8006888:	6279      	str	r1, [r7, #36]	; 0x24
 800688a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	09db      	lsrs	r3, r3, #7
 8006896:	623b      	str	r3, [r7, #32]
 8006898:	6a3b      	ldr	r3, [r7, #32]
 800689a:	2b7f      	cmp	r3, #127	; 0x7f
 800689c:	d8f0      	bhi.n	8006880 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	627a      	str	r2, [r7, #36]	; 0x24
 80068a4:	6a3a      	ldr	r2, [r7, #32]
 80068a6:	b2d2      	uxtb	r2, r2
 80068a8:	701a      	strb	r2, [r3, #0]
 80068aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ac:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80068ae:	68fa      	ldr	r2, [r7, #12]
 80068b0:	6979      	ldr	r1, [r7, #20]
 80068b2:	69b8      	ldr	r0, [r7, #24]
 80068b4:	f7ff fa82 	bl	8005dbc <_SendPacket>
  RECORD_END();
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f383 8811 	msr	BASEPRI, r3
}
 80068be:	bf00      	nop
 80068c0:	3730      	adds	r7, #48	; 0x30
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20014448 	.word	0x20014448

080068cc <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08e      	sub	sp, #56	; 0x38
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	607a      	str	r2, [r7, #4]
 80068d8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80068da:	f3ef 8311 	mrs	r3, BASEPRI
 80068de:	f04f 0120 	mov.w	r1, #32
 80068e2:	f381 8811 	msr	BASEPRI, r1
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	4832      	ldr	r0, [pc, #200]	; (80069b4 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80068ea:	f7ff f978 	bl	8005bde <_PreparePacket>
 80068ee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80068f0:	69bb      	ldr	r3, [r7, #24]
 80068f2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	637b      	str	r3, [r7, #52]	; 0x34
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	633b      	str	r3, [r7, #48]	; 0x30
 80068fc:	e00b      	b.n	8006916 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	b2da      	uxtb	r2, r3
 8006902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006904:	1c59      	adds	r1, r3, #1
 8006906:	6379      	str	r1, [r7, #52]	; 0x34
 8006908:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800690c:	b2d2      	uxtb	r2, r2
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	09db      	lsrs	r3, r3, #7
 8006914:	633b      	str	r3, [r7, #48]	; 0x30
 8006916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006918:	2b7f      	cmp	r3, #127	; 0x7f
 800691a:	d8f0      	bhi.n	80068fe <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800691c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800691e:	1c5a      	adds	r2, r3, #1
 8006920:	637a      	str	r2, [r7, #52]	; 0x34
 8006922:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006924:	b2d2      	uxtb	r2, r2
 8006926:	701a      	strb	r2, [r3, #0]
 8006928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800692a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	62bb      	str	r3, [r7, #40]	; 0x28
 8006934:	e00b      	b.n	800694e <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006938:	b2da      	uxtb	r2, r3
 800693a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800693c:	1c59      	adds	r1, r3, #1
 800693e:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006940:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006944:	b2d2      	uxtb	r2, r2
 8006946:	701a      	strb	r2, [r3, #0]
 8006948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694a:	09db      	lsrs	r3, r3, #7
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	2b7f      	cmp	r3, #127	; 0x7f
 8006952:	d8f0      	bhi.n	8006936 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006956:	1c5a      	adds	r2, r3, #1
 8006958:	62fa      	str	r2, [r7, #44]	; 0x2c
 800695a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800695c:	b2d2      	uxtb	r2, r2
 800695e:	701a      	strb	r2, [r3, #0]
 8006960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006962:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	623b      	str	r3, [r7, #32]
 800696c:	e00b      	b.n	8006986 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	b2da      	uxtb	r2, r3
 8006972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006974:	1c59      	adds	r1, r3, #1
 8006976:	6279      	str	r1, [r7, #36]	; 0x24
 8006978:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800697c:	b2d2      	uxtb	r2, r2
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	6a3b      	ldr	r3, [r7, #32]
 8006982:	09db      	lsrs	r3, r3, #7
 8006984:	623b      	str	r3, [r7, #32]
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	2b7f      	cmp	r3, #127	; 0x7f
 800698a:	d8f0      	bhi.n	800696e <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	627a      	str	r2, [r7, #36]	; 0x24
 8006992:	6a3a      	ldr	r2, [r7, #32]
 8006994:	b2d2      	uxtb	r2, r2
 8006996:	701a      	strb	r2, [r3, #0]
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	6979      	ldr	r1, [r7, #20]
 80069a0:	69b8      	ldr	r0, [r7, #24]
 80069a2:	f7ff fa0b 	bl	8005dbc <_SendPacket>
  RECORD_END();
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	f383 8811 	msr	BASEPRI, r3
}
 80069ac:	bf00      	nop
 80069ae:	3738      	adds	r7, #56	; 0x38
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20014448 	.word	0x20014448

080069b8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b090      	sub	sp, #64	; 0x40
 80069bc:	af00      	add	r7, sp, #0
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	60b9      	str	r1, [r7, #8]
 80069c2:	607a      	str	r2, [r7, #4]
 80069c4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80069c6:	f3ef 8311 	mrs	r3, BASEPRI
 80069ca:	f04f 0120 	mov.w	r1, #32
 80069ce:	f381 8811 	msr	BASEPRI, r1
 80069d2:	61fb      	str	r3, [r7, #28]
 80069d4:	4840      	ldr	r0, [pc, #256]	; (8006ad8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80069d6:	f7ff f902 	bl	8005bde <_PreparePacket>
 80069da:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80069dc:	69bb      	ldr	r3, [r7, #24]
 80069de:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e8:	e00b      	b.n	8006a02 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80069ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ec:	b2da      	uxtb	r2, r3
 80069ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f0:	1c59      	adds	r1, r3, #1
 80069f2:	63f9      	str	r1, [r7, #60]	; 0x3c
 80069f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80069f8:	b2d2      	uxtb	r2, r2
 80069fa:	701a      	strb	r2, [r3, #0]
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	09db      	lsrs	r3, r3, #7
 8006a00:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a04:	2b7f      	cmp	r3, #127	; 0x7f
 8006a06:	d8f0      	bhi.n	80069ea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
 8006a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a16:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	633b      	str	r3, [r7, #48]	; 0x30
 8006a20:	e00b      	b.n	8006a3a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8006a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a24:	b2da      	uxtb	r2, r3
 8006a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a28:	1c59      	adds	r1, r3, #1
 8006a2a:	6379      	str	r1, [r7, #52]	; 0x34
 8006a2c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a30:	b2d2      	uxtb	r2, r2
 8006a32:	701a      	strb	r2, [r3, #0]
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	09db      	lsrs	r3, r3, #7
 8006a38:	633b      	str	r3, [r7, #48]	; 0x30
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	2b7f      	cmp	r3, #127	; 0x7f
 8006a3e:	d8f0      	bhi.n	8006a22 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8006a40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a42:	1c5a      	adds	r2, r3, #1
 8006a44:	637a      	str	r2, [r7, #52]	; 0x34
 8006a46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a48:	b2d2      	uxtb	r2, r2
 8006a4a:	701a      	strb	r2, [r3, #0]
 8006a4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a58:	e00b      	b.n	8006a72 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5c:	b2da      	uxtb	r2, r3
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	1c59      	adds	r1, r3, #1
 8006a62:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006a64:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006a68:	b2d2      	uxtb	r2, r2
 8006a6a:	701a      	strb	r2, [r3, #0]
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	09db      	lsrs	r3, r3, #7
 8006a70:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a74:	2b7f      	cmp	r3, #127	; 0x7f
 8006a76:	d8f0      	bhi.n	8006a5a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7a:	1c5a      	adds	r2, r3, #1
 8006a7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006a80:	b2d2      	uxtb	r2, r2
 8006a82:	701a      	strb	r2, [r3, #0]
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a8e:	623b      	str	r3, [r7, #32]
 8006a90:	e00b      	b.n	8006aaa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a98:	1c59      	adds	r1, r3, #1
 8006a9a:	6279      	str	r1, [r7, #36]	; 0x24
 8006a9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	09db      	lsrs	r3, r3, #7
 8006aa8:	623b      	str	r3, [r7, #32]
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	2b7f      	cmp	r3, #127	; 0x7f
 8006aae:	d8f0      	bhi.n	8006a92 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab2:	1c5a      	adds	r2, r3, #1
 8006ab4:	627a      	str	r2, [r7, #36]	; 0x24
 8006ab6:	6a3a      	ldr	r2, [r7, #32]
 8006ab8:	b2d2      	uxtb	r2, r2
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	6979      	ldr	r1, [r7, #20]
 8006ac4:	69b8      	ldr	r0, [r7, #24]
 8006ac6:	f7ff f979 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	f383 8811 	msr	BASEPRI, r3
}
 8006ad0:	bf00      	nop
 8006ad2:	3740      	adds	r7, #64	; 0x40
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20014448 	.word	0x20014448

08006adc <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b092      	sub	sp, #72	; 0x48
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]
 8006ae8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006aea:	f3ef 8311 	mrs	r3, BASEPRI
 8006aee:	f04f 0120 	mov.w	r1, #32
 8006af2:	f381 8811 	msr	BASEPRI, r1
 8006af6:	61fb      	str	r3, [r7, #28]
 8006af8:	484e      	ldr	r0, [pc, #312]	; (8006c34 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 8006afa:	f7ff f870 	bl	8005bde <_PreparePacket>
 8006afe:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	647b      	str	r3, [r7, #68]	; 0x44
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	643b      	str	r3, [r7, #64]	; 0x40
 8006b0c:	e00b      	b.n	8006b26 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 8006b0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b10:	b2da      	uxtb	r2, r3
 8006b12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b14:	1c59      	adds	r1, r3, #1
 8006b16:	6479      	str	r1, [r7, #68]	; 0x44
 8006b18:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b1c:	b2d2      	uxtb	r2, r2
 8006b1e:	701a      	strb	r2, [r3, #0]
 8006b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b22:	09db      	lsrs	r3, r3, #7
 8006b24:	643b      	str	r3, [r7, #64]	; 0x40
 8006b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b28:	2b7f      	cmp	r3, #127	; 0x7f
 8006b2a:	d8f0      	bhi.n	8006b0e <SEGGER_SYSVIEW_RecordU32x5+0x32>
 8006b2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b2e:	1c5a      	adds	r2, r3, #1
 8006b30:	647a      	str	r2, [r7, #68]	; 0x44
 8006b32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b34:	b2d2      	uxtb	r2, r2
 8006b36:	701a      	strb	r2, [r3, #0]
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006b3c:	697b      	ldr	r3, [r7, #20]
 8006b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b44:	e00b      	b.n	8006b5e <SEGGER_SYSVIEW_RecordU32x5+0x82>
 8006b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b48:	b2da      	uxtb	r2, r3
 8006b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b4c:	1c59      	adds	r1, r3, #1
 8006b4e:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006b50:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b54:	b2d2      	uxtb	r2, r2
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5a:	09db      	lsrs	r3, r3, #7
 8006b5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b60:	2b7f      	cmp	r3, #127	; 0x7f
 8006b62:	d8f0      	bhi.n	8006b46 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006b64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006b6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b6c:	b2d2      	uxtb	r2, r2
 8006b6e:	701a      	strb	r2, [r3, #0]
 8006b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b72:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	637b      	str	r3, [r7, #52]	; 0x34
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8006b7c:	e00b      	b.n	8006b96 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 8006b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b80:	b2da      	uxtb	r2, r3
 8006b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b84:	1c59      	adds	r1, r3, #1
 8006b86:	6379      	str	r1, [r7, #52]	; 0x34
 8006b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
 8006b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b92:	09db      	lsrs	r3, r3, #7
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	2b7f      	cmp	r3, #127	; 0x7f
 8006b9a:	d8f0      	bhi.n	8006b7e <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	637a      	str	r2, [r7, #52]	; 0x34
 8006ba2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ba4:	b2d2      	uxtb	r2, r2
 8006ba6:	701a      	strb	r2, [r3, #0]
 8006ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006baa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006bac:	697b      	ldr	r3, [r7, #20]
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bb2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bb4:	e00b      	b.n	8006bce <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb8:	b2da      	uxtb	r2, r3
 8006bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bbc:	1c59      	adds	r1, r3, #1
 8006bbe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006bc0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bc4:	b2d2      	uxtb	r2, r2
 8006bc6:	701a      	strb	r2, [r3, #0]
 8006bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bca:	09db      	lsrs	r3, r3, #7
 8006bcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd0:	2b7f      	cmp	r3, #127	; 0x7f
 8006bd2:	d8f0      	bhi.n	8006bb6 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd6:	1c5a      	adds	r2, r3, #1
 8006bd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006bdc:	b2d2      	uxtb	r2, r2
 8006bde:	701a      	strb	r2, [r3, #0]
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006be4:	697b      	ldr	r3, [r7, #20]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
 8006be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bea:	623b      	str	r3, [r7, #32]
 8006bec:	e00b      	b.n	8006c06 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 8006bee:	6a3b      	ldr	r3, [r7, #32]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf4:	1c59      	adds	r1, r3, #1
 8006bf6:	6279      	str	r1, [r7, #36]	; 0x24
 8006bf8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	09db      	lsrs	r3, r3, #7
 8006c04:	623b      	str	r3, [r7, #32]
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0a:	d8f0      	bhi.n	8006bee <SEGGER_SYSVIEW_RecordU32x5+0x112>
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	1c5a      	adds	r2, r3, #1
 8006c10:	627a      	str	r2, [r7, #36]	; 0x24
 8006c12:	6a3a      	ldr	r2, [r7, #32]
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	6979      	ldr	r1, [r7, #20]
 8006c20:	69b8      	ldr	r0, [r7, #24]
 8006c22:	f7ff f8cb 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8006c26:	69fb      	ldr	r3, [r7, #28]
 8006c28:	f383 8811 	msr	BASEPRI, r3
}
 8006c2c:	bf00      	nop
 8006c2e:	3748      	adds	r7, #72	; 0x48
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}
 8006c34:	20014448 	.word	0x20014448

08006c38 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b08c      	sub	sp, #48	; 0x30
 8006c3c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006c3e:	4b58      	ldr	r3, [pc, #352]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006c40:	2201      	movs	r2, #1
 8006c42:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006c44:	f3ef 8311 	mrs	r3, BASEPRI
 8006c48:	f04f 0120 	mov.w	r1, #32
 8006c4c:	f381 8811 	msr	BASEPRI, r1
 8006c50:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006c52:	4b53      	ldr	r3, [pc, #332]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006c54:	785b      	ldrb	r3, [r3, #1]
 8006c56:	220a      	movs	r2, #10
 8006c58:	4952      	ldr	r1, [pc, #328]	; (8006da4 <SEGGER_SYSVIEW_Start+0x16c>)
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	f7f9 fab8 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006c66:	200a      	movs	r0, #10
 8006c68:	f7ff fd7c 	bl	8006764 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006c6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c70:	f04f 0120 	mov.w	r1, #32
 8006c74:	f381 8811 	msr	BASEPRI, r1
 8006c78:	60bb      	str	r3, [r7, #8]
 8006c7a:	484b      	ldr	r0, [pc, #300]	; (8006da8 <SEGGER_SYSVIEW_Start+0x170>)
 8006c7c:	f7fe ffaf 	bl	8005bde <_PreparePacket>
 8006c80:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c8a:	4b45      	ldr	r3, [pc, #276]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c90:	e00b      	b.n	8006caa <SEGGER_SYSVIEW_Start+0x72>
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c98:	1c59      	adds	r1, r3, #1
 8006c9a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006c9c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ca0:	b2d2      	uxtb	r2, r2
 8006ca2:	701a      	strb	r2, [r3, #0]
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	09db      	lsrs	r3, r3, #7
 8006ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cac:	2b7f      	cmp	r3, #127	; 0x7f
 8006cae:	d8f0      	bhi.n	8006c92 <SEGGER_SYSVIEW_Start+0x5a>
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cb8:	b2d2      	uxtb	r2, r2
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cbe:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc4:	4b36      	ldr	r3, [pc, #216]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	623b      	str	r3, [r7, #32]
 8006cca:	e00b      	b.n	8006ce4 <SEGGER_SYSVIEW_Start+0xac>
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd2:	1c59      	adds	r1, r3, #1
 8006cd4:	6279      	str	r1, [r7, #36]	; 0x24
 8006cd6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006cda:	b2d2      	uxtb	r2, r2
 8006cdc:	701a      	strb	r2, [r3, #0]
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	09db      	lsrs	r3, r3, #7
 8006ce2:	623b      	str	r3, [r7, #32]
 8006ce4:	6a3b      	ldr	r3, [r7, #32]
 8006ce6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ce8:	d8f0      	bhi.n	8006ccc <SEGGER_SYSVIEW_Start+0x94>
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	1c5a      	adds	r2, r3, #1
 8006cee:	627a      	str	r2, [r7, #36]	; 0x24
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	b2d2      	uxtb	r2, r2
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	61fb      	str	r3, [r7, #28]
 8006cfe:	4b28      	ldr	r3, [pc, #160]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	61bb      	str	r3, [r7, #24]
 8006d04:	e00b      	b.n	8006d1e <SEGGER_SYSVIEW_Start+0xe6>
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	69fb      	ldr	r3, [r7, #28]
 8006d0c:	1c59      	adds	r1, r3, #1
 8006d0e:	61f9      	str	r1, [r7, #28]
 8006d10:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d14:	b2d2      	uxtb	r2, r2
 8006d16:	701a      	strb	r2, [r3, #0]
 8006d18:	69bb      	ldr	r3, [r7, #24]
 8006d1a:	09db      	lsrs	r3, r3, #7
 8006d1c:	61bb      	str	r3, [r7, #24]
 8006d1e:	69bb      	ldr	r3, [r7, #24]
 8006d20:	2b7f      	cmp	r3, #127	; 0x7f
 8006d22:	d8f0      	bhi.n	8006d06 <SEGGER_SYSVIEW_Start+0xce>
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	61fa      	str	r2, [r7, #28]
 8006d2a:	69ba      	ldr	r2, [r7, #24]
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	701a      	strb	r2, [r3, #0]
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	e00b      	b.n	8006d56 <SEGGER_SYSVIEW_Start+0x11e>
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	b2da      	uxtb	r2, r3
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	1c59      	adds	r1, r3, #1
 8006d46:	6179      	str	r1, [r7, #20]
 8006d48:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006d4c:	b2d2      	uxtb	r2, r2
 8006d4e:	701a      	strb	r2, [r3, #0]
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	09db      	lsrs	r3, r3, #7
 8006d54:	613b      	str	r3, [r7, #16]
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5a:	d8f0      	bhi.n	8006d3e <SEGGER_SYSVIEW_Start+0x106>
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	1c5a      	adds	r2, r3, #1
 8006d60:	617a      	str	r2, [r7, #20]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	b2d2      	uxtb	r2, r2
 8006d66:	701a      	strb	r2, [r3, #0]
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006d6c:	2218      	movs	r2, #24
 8006d6e:	6839      	ldr	r1, [r7, #0]
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f7ff f823 	bl	8005dbc <_SendPacket>
      RECORD_END();
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006d7c:	4b08      	ldr	r3, [pc, #32]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d002      	beq.n	8006d8a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006d84:	4b06      	ldr	r3, [pc, #24]	; (8006da0 <SEGGER_SYSVIEW_Start+0x168>)
 8006d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d88:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006d8a:	f000 f9eb 	bl	8007164 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8006d8e:	f000 f9b1 	bl	80070f4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006d92:	f000 fc23 	bl	80075dc <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006d96:	bf00      	nop
 8006d98:	3730      	adds	r7, #48	; 0x30
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20014418 	.word	0x20014418
 8006da4:	08008884 	.word	0x08008884
 8006da8:	20014448 	.word	0x20014448

08006dac <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006db2:	f3ef 8311 	mrs	r3, BASEPRI
 8006db6:	f04f 0120 	mov.w	r1, #32
 8006dba:	f381 8811 	msr	BASEPRI, r1
 8006dbe:	607b      	str	r3, [r7, #4]
 8006dc0:	480b      	ldr	r0, [pc, #44]	; (8006df0 <SEGGER_SYSVIEW_Stop+0x44>)
 8006dc2:	f7fe ff0c 	bl	8005bde <_PreparePacket>
 8006dc6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006dc8:	4b0a      	ldr	r3, [pc, #40]	; (8006df4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d007      	beq.n	8006de0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006dd0:	220b      	movs	r2, #11
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6838      	ldr	r0, [r7, #0]
 8006dd6:	f7fe fff1 	bl	8005dbc <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006dda:	4b06      	ldr	r3, [pc, #24]	; (8006df4 <SEGGER_SYSVIEW_Stop+0x48>)
 8006ddc:	2200      	movs	r2, #0
 8006dde:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f383 8811 	msr	BASEPRI, r3
}
 8006de6:	bf00      	nop
 8006de8:	3708      	adds	r7, #8
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	20014448 	.word	0x20014448
 8006df4:	20014418 	.word	0x20014418

08006df8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b08c      	sub	sp, #48	; 0x30
 8006dfc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006dfe:	f3ef 8311 	mrs	r3, BASEPRI
 8006e02:	f04f 0120 	mov.w	r1, #32
 8006e06:	f381 8811 	msr	BASEPRI, r1
 8006e0a:	60fb      	str	r3, [r7, #12]
 8006e0c:	4845      	ldr	r0, [pc, #276]	; (8006f24 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006e0e:	f7fe fee6 	bl	8005bde <_PreparePacket>
 8006e12:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e1c:	4b42      	ldr	r3, [pc, #264]	; (8006f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e1e:	685b      	ldr	r3, [r3, #4]
 8006e20:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e22:	e00b      	b.n	8006e3c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e2a:	1c59      	adds	r1, r3, #1
 8006e2c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8006e2e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]
 8006e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e38:	09db      	lsrs	r3, r3, #7
 8006e3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e40:	d8f0      	bhi.n	8006e24 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8006e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e44:	1c5a      	adds	r2, r3, #1
 8006e46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006e4a:	b2d2      	uxtb	r2, r2
 8006e4c:	701a      	strb	r2, [r3, #0]
 8006e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e50:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	4b34      	ldr	r3, [pc, #208]	; (8006f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e58:	689b      	ldr	r3, [r3, #8]
 8006e5a:	623b      	str	r3, [r7, #32]
 8006e5c:	e00b      	b.n	8006e76 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006e5e:	6a3b      	ldr	r3, [r7, #32]
 8006e60:	b2da      	uxtb	r2, r3
 8006e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e64:	1c59      	adds	r1, r3, #1
 8006e66:	6279      	str	r1, [r7, #36]	; 0x24
 8006e68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006e6c:	b2d2      	uxtb	r2, r2
 8006e6e:	701a      	strb	r2, [r3, #0]
 8006e70:	6a3b      	ldr	r3, [r7, #32]
 8006e72:	09db      	lsrs	r3, r3, #7
 8006e74:	623b      	str	r3, [r7, #32]
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	2b7f      	cmp	r3, #127	; 0x7f
 8006e7a:	d8f0      	bhi.n	8006e5e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e7e:	1c5a      	adds	r2, r3, #1
 8006e80:	627a      	str	r2, [r7, #36]	; 0x24
 8006e82:	6a3a      	ldr	r2, [r7, #32]
 8006e84:	b2d2      	uxtb	r2, r2
 8006e86:	701a      	strb	r2, [r3, #0]
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	4b25      	ldr	r3, [pc, #148]	; (8006f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006e92:	691b      	ldr	r3, [r3, #16]
 8006e94:	61bb      	str	r3, [r7, #24]
 8006e96:	e00b      	b.n	8006eb0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006e98:	69bb      	ldr	r3, [r7, #24]
 8006e9a:	b2da      	uxtb	r2, r3
 8006e9c:	69fb      	ldr	r3, [r7, #28]
 8006e9e:	1c59      	adds	r1, r3, #1
 8006ea0:	61f9      	str	r1, [r7, #28]
 8006ea2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ea6:	b2d2      	uxtb	r2, r2
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	69bb      	ldr	r3, [r7, #24]
 8006eac:	09db      	lsrs	r3, r3, #7
 8006eae:	61bb      	str	r3, [r7, #24]
 8006eb0:	69bb      	ldr	r3, [r7, #24]
 8006eb2:	2b7f      	cmp	r3, #127	; 0x7f
 8006eb4:	d8f0      	bhi.n	8006e98 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	1c5a      	adds	r2, r3, #1
 8006eba:	61fa      	str	r2, [r7, #28]
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	617b      	str	r3, [r7, #20]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	e00b      	b.n	8006ee8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	1c59      	adds	r1, r3, #1
 8006ed8:	6179      	str	r1, [r7, #20]
 8006eda:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006ede:	b2d2      	uxtb	r2, r2
 8006ee0:	701a      	strb	r2, [r3, #0]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	09db      	lsrs	r3, r3, #7
 8006ee6:	613b      	str	r3, [r7, #16]
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	2b7f      	cmp	r3, #127	; 0x7f
 8006eec:	d8f0      	bhi.n	8006ed0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	1c5a      	adds	r2, r3, #1
 8006ef2:	617a      	str	r2, [r7, #20]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006efe:	2218      	movs	r2, #24
 8006f00:	6879      	ldr	r1, [r7, #4]
 8006f02:	68b8      	ldr	r0, [r7, #8]
 8006f04:	f7fe ff5a 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006f0e:	4b06      	ldr	r3, [pc, #24]	; (8006f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d002      	beq.n	8006f1c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006f16:	4b04      	ldr	r3, [pc, #16]	; (8006f28 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1a:	4798      	blx	r3
  }
}
 8006f1c:	bf00      	nop
 8006f1e:	3730      	adds	r7, #48	; 0x30
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}
 8006f24:	20014448 	.word	0x20014448
 8006f28:	20014418 	.word	0x20014418

08006f2c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b092      	sub	sp, #72	; 0x48
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8006f34:	f3ef 8311 	mrs	r3, BASEPRI
 8006f38:	f04f 0120 	mov.w	r1, #32
 8006f3c:	f381 8811 	msr	BASEPRI, r1
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	486a      	ldr	r0, [pc, #424]	; (80070ec <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8006f44:	f7fe fe4b 	bl	8005bde <_PreparePacket>
 8006f48:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006f4a:	693b      	ldr	r3, [r7, #16]
 8006f4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	647b      	str	r3, [r7, #68]	; 0x44
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681a      	ldr	r2, [r3, #0]
 8006f56:	4b66      	ldr	r3, [pc, #408]	; (80070f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006f58:	691b      	ldr	r3, [r3, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8006f5e:	e00b      	b.n	8006f78 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f66:	1c59      	adds	r1, r3, #1
 8006f68:	6479      	str	r1, [r7, #68]	; 0x44
 8006f6a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f74:	09db      	lsrs	r3, r3, #7
 8006f76:	643b      	str	r3, [r7, #64]	; 0x40
 8006f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f7c:	d8f0      	bhi.n	8006f60 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8006f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	647a      	str	r2, [r7, #68]	; 0x44
 8006f84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f98:	e00b      	b.n	8006fb2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f9c:	b2da      	uxtb	r2, r3
 8006f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fa0:	1c59      	adds	r1, r3, #1
 8006fa2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8006fa4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fae:	09db      	lsrs	r3, r3, #7
 8006fb0:	63bb      	str	r3, [r7, #56]	; 0x38
 8006fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fb4:	2b7f      	cmp	r3, #127	; 0x7f
 8006fb6:	d8f0      	bhi.n	8006f9a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fba:	1c5a      	adds	r2, r3, #1
 8006fbc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc0:	b2d2      	uxtb	r2, r2
 8006fc2:	701a      	strb	r2, [r3, #0]
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	2220      	movs	r2, #32
 8006fce:	4619      	mov	r1, r3
 8006fd0:	68f8      	ldr	r0, [r7, #12]
 8006fd2:	f7fe fdb7 	bl	8005b44 <_EncodeStr>
 8006fd6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006fd8:	2209      	movs	r2, #9
 8006fda:	68f9      	ldr	r1, [r7, #12]
 8006fdc:	6938      	ldr	r0, [r7, #16]
 8006fde:	f7fe feed 	bl	8005dbc <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006fe2:	693b      	ldr	r3, [r7, #16]
 8006fe4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	637b      	str	r3, [r7, #52]	; 0x34
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b40      	ldr	r3, [pc, #256]	; (80070f0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ff6:	e00b      	b.n	8007010 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ffe:	1c59      	adds	r1, r3, #1
 8007000:	6379      	str	r1, [r7, #52]	; 0x34
 8007002:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800700c:	09db      	lsrs	r3, r3, #7
 800700e:	633b      	str	r3, [r7, #48]	; 0x30
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	2b7f      	cmp	r3, #127	; 0x7f
 8007014:	d8f0      	bhi.n	8006ff8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8007016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007018:	1c5a      	adds	r2, r3, #1
 800701a:	637a      	str	r2, [r7, #52]	; 0x34
 800701c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800701e:	b2d2      	uxtb	r2, r2
 8007020:	701a      	strb	r2, [r3, #0]
 8007022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007024:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007030:	e00b      	b.n	800704a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8007032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007034:	b2da      	uxtb	r2, r3
 8007036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007038:	1c59      	adds	r1, r3, #1
 800703a:	62f9      	str	r1, [r7, #44]	; 0x2c
 800703c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007040:	b2d2      	uxtb	r2, r2
 8007042:	701a      	strb	r2, [r3, #0]
 8007044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007046:	09db      	lsrs	r3, r3, #7
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
 800704a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704c:	2b7f      	cmp	r3, #127	; 0x7f
 800704e:	d8f0      	bhi.n	8007032 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8007050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007052:	1c5a      	adds	r2, r3, #1
 8007054:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007058:	b2d2      	uxtb	r2, r2
 800705a:	701a      	strb	r2, [r3, #0]
 800705c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800705e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	623b      	str	r3, [r7, #32]
 800706a:	e00b      	b.n	8007084 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	b2da      	uxtb	r2, r3
 8007070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007072:	1c59      	adds	r1, r3, #1
 8007074:	6279      	str	r1, [r7, #36]	; 0x24
 8007076:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800707a:	b2d2      	uxtb	r2, r2
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	6a3b      	ldr	r3, [r7, #32]
 8007080:	09db      	lsrs	r3, r3, #7
 8007082:	623b      	str	r3, [r7, #32]
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	2b7f      	cmp	r3, #127	; 0x7f
 8007088:	d8f0      	bhi.n	800706c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800708a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	627a      	str	r2, [r7, #36]	; 0x24
 8007090:	6a3a      	ldr	r2, [r7, #32]
 8007092:	b2d2      	uxtb	r2, r2
 8007094:	701a      	strb	r2, [r3, #0]
 8007096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007098:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	61fb      	str	r3, [r7, #28]
 800709e:	2300      	movs	r3, #0
 80070a0:	61bb      	str	r3, [r7, #24]
 80070a2:	e00b      	b.n	80070bc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80070a4:	69bb      	ldr	r3, [r7, #24]
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	1c59      	adds	r1, r3, #1
 80070ac:	61f9      	str	r1, [r7, #28]
 80070ae:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80070b2:	b2d2      	uxtb	r2, r2
 80070b4:	701a      	strb	r2, [r3, #0]
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	09db      	lsrs	r3, r3, #7
 80070ba:	61bb      	str	r3, [r7, #24]
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	2b7f      	cmp	r3, #127	; 0x7f
 80070c0:	d8f0      	bhi.n	80070a4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80070c2:	69fb      	ldr	r3, [r7, #28]
 80070c4:	1c5a      	adds	r2, r3, #1
 80070c6:	61fa      	str	r2, [r7, #28]
 80070c8:	69ba      	ldr	r2, [r7, #24]
 80070ca:	b2d2      	uxtb	r2, r2
 80070cc:	701a      	strb	r2, [r3, #0]
 80070ce:	69fb      	ldr	r3, [r7, #28]
 80070d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80070d2:	2215      	movs	r2, #21
 80070d4:	68f9      	ldr	r1, [r7, #12]
 80070d6:	6938      	ldr	r0, [r7, #16]
 80070d8:	f7fe fe70 	bl	8005dbc <_SendPacket>
  RECORD_END();
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	f383 8811 	msr	BASEPRI, r3
}
 80070e2:	bf00      	nop
 80070e4:	3748      	adds	r7, #72	; 0x48
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20014448 	.word	0x20014448
 80070f0:	20014418 	.word	0x20014418

080070f4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80070f4:	b580      	push	{r7, lr}
 80070f6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80070f8:	4b07      	ldr	r3, [pc, #28]	; (8007118 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d008      	beq.n	8007112 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8007100:	4b05      	ldr	r3, [pc, #20]	; (8007118 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8007102:	6a1b      	ldr	r3, [r3, #32]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800710a:	4b03      	ldr	r3, [pc, #12]	; (8007118 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	4798      	blx	r3
  }
}
 8007112:	bf00      	nop
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20014418 	.word	0x20014418

0800711c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800711c:	b580      	push	{r7, lr}
 800711e:	b086      	sub	sp, #24
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007124:	f3ef 8311 	mrs	r3, BASEPRI
 8007128:	f04f 0120 	mov.w	r1, #32
 800712c:	f381 8811 	msr	BASEPRI, r1
 8007130:	617b      	str	r3, [r7, #20]
 8007132:	480b      	ldr	r0, [pc, #44]	; (8007160 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8007134:	f7fe fd53 	bl	8005bde <_PreparePacket>
 8007138:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800713a:	2280      	movs	r2, #128	; 0x80
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	6938      	ldr	r0, [r7, #16]
 8007140:	f7fe fd00 	bl	8005b44 <_EncodeStr>
 8007144:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8007146:	220e      	movs	r2, #14
 8007148:	68f9      	ldr	r1, [r7, #12]
 800714a:	6938      	ldr	r0, [r7, #16]
 800714c:	f7fe fe36 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8007150:	697b      	ldr	r3, [r7, #20]
 8007152:	f383 8811 	msr	BASEPRI, r3
}
 8007156:	bf00      	nop
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20014448 	.word	0x20014448

08007164 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8007164:	b590      	push	{r4, r7, lr}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800716a:	4b15      	ldr	r3, [pc, #84]	; (80071c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800716c:	6a1b      	ldr	r3, [r3, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d01a      	beq.n	80071a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8007172:	4b13      	ldr	r3, [pc, #76]	; (80071c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8007174:	6a1b      	ldr	r3, [r3, #32]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d015      	beq.n	80071a8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800717c:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800717e:	6a1b      	ldr	r3, [r3, #32]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4798      	blx	r3
 8007184:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8007188:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800718a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800718e:	f04f 0200 	mov.w	r2, #0
 8007192:	f04f 0300 	mov.w	r3, #0
 8007196:	000a      	movs	r2, r1
 8007198:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800719a:	4613      	mov	r3, r2
 800719c:	461a      	mov	r2, r3
 800719e:	4621      	mov	r1, r4
 80071a0:	200d      	movs	r0, #13
 80071a2:	f7ff fb39 	bl	8006818 <SEGGER_SYSVIEW_RecordU32x2>
 80071a6:	e006      	b.n	80071b6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80071a8:	4b06      	ldr	r3, [pc, #24]	; (80071c4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4619      	mov	r1, r3
 80071ae:	200c      	movs	r0, #12
 80071b0:	f7ff faf6 	bl	80067a0 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80071b4:	bf00      	nop
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	bf00      	nop
 80071c0:	20014418 	.word	0x20014418
 80071c4:	e0001004 	.word	0xe0001004

080071c8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80071ce:	f3ef 8311 	mrs	r3, BASEPRI
 80071d2:	f04f 0120 	mov.w	r1, #32
 80071d6:	f381 8811 	msr	BASEPRI, r1
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	4819      	ldr	r0, [pc, #100]	; (8007244 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80071de:	f7fe fcfe 	bl	8005bde <_PreparePacket>
 80071e2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80071e8:	4b17      	ldr	r3, [pc, #92]	; (8007248 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071f0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	613b      	str	r3, [r7, #16]
 80071fa:	e00b      	b.n	8007214 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	b2da      	uxtb	r2, r3
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	1c59      	adds	r1, r3, #1
 8007204:	6179      	str	r1, [r7, #20]
 8007206:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800720a:	b2d2      	uxtb	r2, r2
 800720c:	701a      	strb	r2, [r3, #0]
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	09db      	lsrs	r3, r3, #7
 8007212:	613b      	str	r3, [r7, #16]
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	2b7f      	cmp	r3, #127	; 0x7f
 8007218:	d8f0      	bhi.n	80071fc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	1c5a      	adds	r2, r3, #1
 800721e:	617a      	str	r2, [r7, #20]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	b2d2      	uxtb	r2, r2
 8007224:	701a      	strb	r2, [r3, #0]
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800722a:	2202      	movs	r2, #2
 800722c:	6879      	ldr	r1, [r7, #4]
 800722e:	68b8      	ldr	r0, [r7, #8]
 8007230:	f7fe fdc4 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f383 8811 	msr	BASEPRI, r3
}
 800723a:	bf00      	nop
 800723c:	3718      	adds	r7, #24
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
 8007242:	bf00      	nop
 8007244:	20014448 	.word	0x20014448
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b082      	sub	sp, #8
 8007250:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8007252:	f3ef 8311 	mrs	r3, BASEPRI
 8007256:	f04f 0120 	mov.w	r1, #32
 800725a:	f381 8811 	msr	BASEPRI, r1
 800725e:	607b      	str	r3, [r7, #4]
 8007260:	4807      	ldr	r0, [pc, #28]	; (8007280 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8007262:	f7fe fcbc 	bl	8005bde <_PreparePacket>
 8007266:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8007268:	2203      	movs	r2, #3
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6838      	ldr	r0, [r7, #0]
 800726e:	f7fe fda5 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f383 8811 	msr	BASEPRI, r3
}
 8007278:	bf00      	nop
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}
 8007280:	20014448 	.word	0x20014448

08007284 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800728a:	f3ef 8311 	mrs	r3, BASEPRI
 800728e:	f04f 0120 	mov.w	r1, #32
 8007292:	f381 8811 	msr	BASEPRI, r1
 8007296:	607b      	str	r3, [r7, #4]
 8007298:	4807      	ldr	r0, [pc, #28]	; (80072b8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800729a:	f7fe fca0 	bl	8005bde <_PreparePacket>
 800729e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80072a0:	2212      	movs	r2, #18
 80072a2:	6839      	ldr	r1, [r7, #0]
 80072a4:	6838      	ldr	r0, [r7, #0]
 80072a6:	f7fe fd89 	bl	8005dbc <_SendPacket>
  RECORD_END();
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f383 8811 	msr	BASEPRI, r3
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20014448 	.word	0x20014448

080072bc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80072bc:	b580      	push	{r7, lr}
 80072be:	b082      	sub	sp, #8
 80072c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80072c2:	f3ef 8311 	mrs	r3, BASEPRI
 80072c6:	f04f 0120 	mov.w	r1, #32
 80072ca:	f381 8811 	msr	BASEPRI, r1
 80072ce:	607b      	str	r3, [r7, #4]
 80072d0:	4807      	ldr	r0, [pc, #28]	; (80072f0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80072d2:	f7fe fc84 	bl	8005bde <_PreparePacket>
 80072d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80072d8:	2211      	movs	r2, #17
 80072da:	6839      	ldr	r1, [r7, #0]
 80072dc:	6838      	ldr	r0, [r7, #0]
 80072de:	f7fe fd6d 	bl	8005dbc <_SendPacket>
  RECORD_END();
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f383 8811 	msr	BASEPRI, r3
}
 80072e8:	bf00      	nop
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20014448 	.word	0x20014448

080072f4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80072fc:	f3ef 8311 	mrs	r3, BASEPRI
 8007300:	f04f 0120 	mov.w	r1, #32
 8007304:	f381 8811 	msr	BASEPRI, r1
 8007308:	617b      	str	r3, [r7, #20]
 800730a:	4819      	ldr	r0, [pc, #100]	; (8007370 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800730c:	f7fe fc67 	bl	8005bde <_PreparePacket>
 8007310:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8007316:	4b17      	ldr	r3, [pc, #92]	; (8007374 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	61fb      	str	r3, [r7, #28]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	61bb      	str	r3, [r7, #24]
 8007328:	e00b      	b.n	8007342 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	b2da      	uxtb	r2, r3
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	1c59      	adds	r1, r3, #1
 8007332:	61f9      	str	r1, [r7, #28]
 8007334:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007338:	b2d2      	uxtb	r2, r2
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	09db      	lsrs	r3, r3, #7
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	69bb      	ldr	r3, [r7, #24]
 8007344:	2b7f      	cmp	r3, #127	; 0x7f
 8007346:	d8f0      	bhi.n	800732a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	61fa      	str	r2, [r7, #28]
 800734e:	69ba      	ldr	r2, [r7, #24]
 8007350:	b2d2      	uxtb	r2, r2
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8007358:	2208      	movs	r2, #8
 800735a:	68f9      	ldr	r1, [r7, #12]
 800735c:	6938      	ldr	r0, [r7, #16]
 800735e:	f7fe fd2d 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	f383 8811 	msr	BASEPRI, r3
}
 8007368:	bf00      	nop
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20014448 	.word	0x20014448
 8007374:	20014418 	.word	0x20014418

08007378 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8007378:	b580      	push	{r7, lr}
 800737a:	b088      	sub	sp, #32
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007380:	f3ef 8311 	mrs	r3, BASEPRI
 8007384:	f04f 0120 	mov.w	r1, #32
 8007388:	f381 8811 	msr	BASEPRI, r1
 800738c:	617b      	str	r3, [r7, #20]
 800738e:	4819      	ldr	r0, [pc, #100]	; (80073f4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8007390:	f7fe fc25 	bl	8005bde <_PreparePacket>
 8007394:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8007396:	693b      	ldr	r3, [r7, #16]
 8007398:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800739a:	4b17      	ldr	r3, [pc, #92]	; (80073f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	1ad3      	subs	r3, r2, r3
 80073a2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	61fb      	str	r3, [r7, #28]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	e00b      	b.n	80073c6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	61f9      	str	r1, [r7, #28]
 80073b8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80073bc:	b2d2      	uxtb	r2, r2
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	69bb      	ldr	r3, [r7, #24]
 80073c2:	09db      	lsrs	r3, r3, #7
 80073c4:	61bb      	str	r3, [r7, #24]
 80073c6:	69bb      	ldr	r3, [r7, #24]
 80073c8:	2b7f      	cmp	r3, #127	; 0x7f
 80073ca:	d8f0      	bhi.n	80073ae <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	61fa      	str	r2, [r7, #28]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	b2d2      	uxtb	r2, r2
 80073d6:	701a      	strb	r2, [r3, #0]
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80073dc:	2204      	movs	r2, #4
 80073de:	68f9      	ldr	r1, [r7, #12]
 80073e0:	6938      	ldr	r0, [r7, #16]
 80073e2:	f7fe fceb 	bl	8005dbc <_SendPacket>
  RECORD_END();
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	f383 8811 	msr	BASEPRI, r3
}
 80073ec:	bf00      	nop
 80073ee:	3720      	adds	r7, #32
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	20014448 	.word	0x20014448
 80073f8:	20014418 	.word	0x20014418

080073fc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b088      	sub	sp, #32
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8007404:	f3ef 8311 	mrs	r3, BASEPRI
 8007408:	f04f 0120 	mov.w	r1, #32
 800740c:	f381 8811 	msr	BASEPRI, r1
 8007410:	617b      	str	r3, [r7, #20]
 8007412:	4819      	ldr	r0, [pc, #100]	; (8007478 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8007414:	f7fe fbe3 	bl	8005bde <_PreparePacket>
 8007418:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800741e:	4b17      	ldr	r3, [pc, #92]	; (800747c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8007420:	691b      	ldr	r3, [r3, #16]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	61fb      	str	r3, [r7, #28]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	e00b      	b.n	800744a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	b2da      	uxtb	r2, r3
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	1c59      	adds	r1, r3, #1
 800743a:	61f9      	str	r1, [r7, #28]
 800743c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007440:	b2d2      	uxtb	r2, r2
 8007442:	701a      	strb	r2, [r3, #0]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	09db      	lsrs	r3, r3, #7
 8007448:	61bb      	str	r3, [r7, #24]
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	2b7f      	cmp	r3, #127	; 0x7f
 800744e:	d8f0      	bhi.n	8007432 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	1c5a      	adds	r2, r3, #1
 8007454:	61fa      	str	r2, [r7, #28]
 8007456:	69ba      	ldr	r2, [r7, #24]
 8007458:	b2d2      	uxtb	r2, r2
 800745a:	701a      	strb	r2, [r3, #0]
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8007460:	2206      	movs	r2, #6
 8007462:	68f9      	ldr	r1, [r7, #12]
 8007464:	6938      	ldr	r0, [r7, #16]
 8007466:	f7fe fca9 	bl	8005dbc <_SendPacket>
  RECORD_END();
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f383 8811 	msr	BASEPRI, r3
}
 8007470:	bf00      	nop
 8007472:	3720      	adds	r7, #32
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20014448 	.word	0x20014448
 800747c:	20014418 	.word	0x20014418

08007480 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8007488:	4b04      	ldr	r3, [pc, #16]	; (800749c <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	1ad3      	subs	r3, r2, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	20014418 	.word	0x20014418

080074a0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b08c      	sub	sp, #48	; 0x30
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	4603      	mov	r3, r0
 80074a8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80074aa:	4b3b      	ldr	r3, [pc, #236]	; (8007598 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d06d      	beq.n	800758e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 80074b2:	4b39      	ldr	r3, [pc, #228]	; (8007598 <SEGGER_SYSVIEW_SendModule+0xf8>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 80074b8:	2300      	movs	r3, #0
 80074ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80074bc:	e008      	b.n	80074d0 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 80074be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 80074c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d007      	beq.n	80074da <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	3301      	adds	r3, #1
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d3f2      	bcc.n	80074be <SEGGER_SYSVIEW_SendModule+0x1e>
 80074d8:	e000      	b.n	80074dc <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 80074da:	bf00      	nop
      }
    }
    if (pModule != 0) {
 80074dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d055      	beq.n	800758e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80074e2:	f3ef 8311 	mrs	r3, BASEPRI
 80074e6:	f04f 0120 	mov.w	r1, #32
 80074ea:	f381 8811 	msr	BASEPRI, r1
 80074ee:	617b      	str	r3, [r7, #20]
 80074f0:	482a      	ldr	r0, [pc, #168]	; (800759c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80074f2:	f7fe fb74 	bl	8005bde <_PreparePacket>
 80074f6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	623b      	str	r3, [r7, #32]
 8007504:	e00b      	b.n	800751e <SEGGER_SYSVIEW_SendModule+0x7e>
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	b2da      	uxtb	r2, r3
 800750a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750c:	1c59      	adds	r1, r3, #1
 800750e:	6279      	str	r1, [r7, #36]	; 0x24
 8007510:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007514:	b2d2      	uxtb	r2, r2
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	09db      	lsrs	r3, r3, #7
 800751c:	623b      	str	r3, [r7, #32]
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	2b7f      	cmp	r3, #127	; 0x7f
 8007522:	d8f0      	bhi.n	8007506 <SEGGER_SYSVIEW_SendModule+0x66>
 8007524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	627a      	str	r2, [r7, #36]	; 0x24
 800752a:	6a3a      	ldr	r2, [r7, #32]
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	701a      	strb	r2, [r3, #0]
 8007530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007532:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	61fb      	str	r3, [r7, #28]
 8007538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	61bb      	str	r3, [r7, #24]
 800753e:	e00b      	b.n	8007558 <SEGGER_SYSVIEW_SendModule+0xb8>
 8007540:	69bb      	ldr	r3, [r7, #24]
 8007542:	b2da      	uxtb	r2, r3
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	1c59      	adds	r1, r3, #1
 8007548:	61f9      	str	r1, [r7, #28]
 800754a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800754e:	b2d2      	uxtb	r2, r2
 8007550:	701a      	strb	r2, [r3, #0]
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	09db      	lsrs	r3, r3, #7
 8007556:	61bb      	str	r3, [r7, #24]
 8007558:	69bb      	ldr	r3, [r7, #24]
 800755a:	2b7f      	cmp	r3, #127	; 0x7f
 800755c:	d8f0      	bhi.n	8007540 <SEGGER_SYSVIEW_SendModule+0xa0>
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	1c5a      	adds	r2, r3, #1
 8007562:	61fa      	str	r2, [r7, #28]
 8007564:	69ba      	ldr	r2, [r7, #24]
 8007566:	b2d2      	uxtb	r2, r2
 8007568:	701a      	strb	r2, [r3, #0]
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2280      	movs	r2, #128	; 0x80
 8007574:	4619      	mov	r1, r3
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f7fe fae4 	bl	8005b44 <_EncodeStr>
 800757c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800757e:	2216      	movs	r2, #22
 8007580:	68f9      	ldr	r1, [r7, #12]
 8007582:	6938      	ldr	r0, [r7, #16]
 8007584:	f7fe fc1a 	bl	8005dbc <_SendPacket>
      RECORD_END();
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800758e:	bf00      	nop
 8007590:	3730      	adds	r7, #48	; 0x30
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20014440 	.word	0x20014440
 800759c:	20014448 	.word	0x20014448

080075a0 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 80075a6:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00f      	beq.n	80075ce <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 80075ae:	4b0a      	ldr	r3, [pc, #40]	; (80075d8 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d002      	beq.n	80075c2 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	68db      	ldr	r3, [r3, #12]
 80075c0:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	691b      	ldr	r3, [r3, #16]
 80075c6:	607b      	str	r3, [r7, #4]
    } while (pModule);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1f2      	bne.n	80075b4 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 80075ce:	bf00      	nop
 80075d0:	3708      	adds	r7, #8
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	20014440 	.word	0x20014440

080075dc <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80075e2:	f3ef 8311 	mrs	r3, BASEPRI
 80075e6:	f04f 0120 	mov.w	r1, #32
 80075ea:	f381 8811 	msr	BASEPRI, r1
 80075ee:	60fb      	str	r3, [r7, #12]
 80075f0:	4817      	ldr	r0, [pc, #92]	; (8007650 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80075f2:	f7fe faf4 	bl	8005bde <_PreparePacket>
 80075f6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	617b      	str	r3, [r7, #20]
 8007600:	4b14      	ldr	r3, [pc, #80]	; (8007654 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	613b      	str	r3, [r7, #16]
 8007606:	e00b      	b.n	8007620 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	b2da      	uxtb	r2, r3
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	1c59      	adds	r1, r3, #1
 8007610:	6179      	str	r1, [r7, #20]
 8007612:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8007616:	b2d2      	uxtb	r2, r2
 8007618:	701a      	strb	r2, [r3, #0]
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	09db      	lsrs	r3, r3, #7
 800761e:	613b      	str	r3, [r7, #16]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	2b7f      	cmp	r3, #127	; 0x7f
 8007624:	d8f0      	bhi.n	8007608 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	617a      	str	r2, [r7, #20]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	b2d2      	uxtb	r2, r2
 8007630:	701a      	strb	r2, [r3, #0]
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8007636:	221b      	movs	r2, #27
 8007638:	6879      	ldr	r1, [r7, #4]
 800763a:	68b8      	ldr	r0, [r7, #8]
 800763c:	f7fe fbbe 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f383 8811 	msr	BASEPRI, r3
}
 8007646:	bf00      	nop
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20014448 	.word	0x20014448
 8007654:	20014444 	.word	0x20014444

08007658 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8007658:	b40f      	push	{r0, r1, r2, r3}
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8007660:	f107 0314 	add.w	r3, r7, #20
 8007664:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8007666:	1d3b      	adds	r3, r7, #4
 8007668:	461a      	mov	r2, r3
 800766a:	2100      	movs	r1, #0
 800766c:	6938      	ldr	r0, [r7, #16]
 800766e:	f7fe fe2d 	bl	80062cc <_VPrintTarget>
  va_end(ParamList);
}
 8007672:	bf00      	nop
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800767c:	b004      	add	sp, #16
 800767e:	4770      	bx	lr

08007680 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8007680:	b580      	push	{r7, lr}
 8007682:	b08a      	sub	sp, #40	; 0x28
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8007688:	f3ef 8311 	mrs	r3, BASEPRI
 800768c:	f04f 0120 	mov.w	r1, #32
 8007690:	f381 8811 	msr	BASEPRI, r1
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	4827      	ldr	r0, [pc, #156]	; (8007734 <SEGGER_SYSVIEW_Warn+0xb4>)
 8007698:	f7fe faa1 	bl	8005bde <_PreparePacket>
 800769c:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800769e:	2280      	movs	r2, #128	; 0x80
 80076a0:	6879      	ldr	r1, [r7, #4]
 80076a2:	6938      	ldr	r0, [r7, #16]
 80076a4:	f7fe fa4e 	bl	8005b44 <_EncodeStr>
 80076a8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	627b      	str	r3, [r7, #36]	; 0x24
 80076ae:	2301      	movs	r3, #1
 80076b0:	623b      	str	r3, [r7, #32]
 80076b2:	e00b      	b.n	80076cc <SEGGER_SYSVIEW_Warn+0x4c>
 80076b4:	6a3b      	ldr	r3, [r7, #32]
 80076b6:	b2da      	uxtb	r2, r3
 80076b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ba:	1c59      	adds	r1, r3, #1
 80076bc:	6279      	str	r1, [r7, #36]	; 0x24
 80076be:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076c2:	b2d2      	uxtb	r2, r2
 80076c4:	701a      	strb	r2, [r3, #0]
 80076c6:	6a3b      	ldr	r3, [r7, #32]
 80076c8:	09db      	lsrs	r3, r3, #7
 80076ca:	623b      	str	r3, [r7, #32]
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	2b7f      	cmp	r3, #127	; 0x7f
 80076d0:	d8f0      	bhi.n	80076b4 <SEGGER_SYSVIEW_Warn+0x34>
 80076d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d4:	1c5a      	adds	r2, r3, #1
 80076d6:	627a      	str	r2, [r7, #36]	; 0x24
 80076d8:	6a3a      	ldr	r2, [r7, #32]
 80076da:	b2d2      	uxtb	r2, r2
 80076dc:	701a      	strb	r2, [r3, #0]
 80076de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	61fb      	str	r3, [r7, #28]
 80076e6:	2300      	movs	r3, #0
 80076e8:	61bb      	str	r3, [r7, #24]
 80076ea:	e00b      	b.n	8007704 <SEGGER_SYSVIEW_Warn+0x84>
 80076ec:	69bb      	ldr	r3, [r7, #24]
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	69fb      	ldr	r3, [r7, #28]
 80076f2:	1c59      	adds	r1, r3, #1
 80076f4:	61f9      	str	r1, [r7, #28]
 80076f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	69bb      	ldr	r3, [r7, #24]
 8007700:	09db      	lsrs	r3, r3, #7
 8007702:	61bb      	str	r3, [r7, #24]
 8007704:	69bb      	ldr	r3, [r7, #24]
 8007706:	2b7f      	cmp	r3, #127	; 0x7f
 8007708:	d8f0      	bhi.n	80076ec <SEGGER_SYSVIEW_Warn+0x6c>
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	1c5a      	adds	r2, r3, #1
 800770e:	61fa      	str	r2, [r7, #28]
 8007710:	69ba      	ldr	r2, [r7, #24]
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800771a:	221a      	movs	r2, #26
 800771c:	68f9      	ldr	r1, [r7, #12]
 800771e:	6938      	ldr	r0, [r7, #16]
 8007720:	f7fe fb4c 	bl	8005dbc <_SendPacket>
  RECORD_END();
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	f383 8811 	msr	BASEPRI, r3
}
 800772a:	bf00      	nop
 800772c:	3728      	adds	r7, #40	; 0x28
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	20014448 	.word	0x20014448

08007738 <SEGGER_SYSVIEW_IsStarted>:
*
*  Return value
*      0: Recording not started.
*    > 0: Recording started.
*/
int SEGGER_SYSVIEW_IsStarted(void) {
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
  //
  // Check if host is sending data which needs to be processed.
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800773c:	4b13      	ldr	r3, [pc, #76]	; (800778c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800773e:	7e1b      	ldrb	r3, [r3, #24]
 8007740:	4619      	mov	r1, r3
 8007742:	4a13      	ldr	r2, [pc, #76]	; (8007790 <SEGGER_SYSVIEW_IsStarted+0x58>)
 8007744:	460b      	mov	r3, r1
 8007746:	005b      	lsls	r3, r3, #1
 8007748:	440b      	add	r3, r1
 800774a:	00db      	lsls	r3, r3, #3
 800774c:	4413      	add	r3, r2
 800774e:	336c      	adds	r3, #108	; 0x6c
 8007750:	681a      	ldr	r2, [r3, #0]
 8007752:	4b0e      	ldr	r3, [pc, #56]	; (800778c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007754:	7e1b      	ldrb	r3, [r3, #24]
 8007756:	4618      	mov	r0, r3
 8007758:	490d      	ldr	r1, [pc, #52]	; (8007790 <SEGGER_SYSVIEW_IsStarted+0x58>)
 800775a:	4603      	mov	r3, r0
 800775c:	005b      	lsls	r3, r3, #1
 800775e:	4403      	add	r3, r0
 8007760:	00db      	lsls	r3, r3, #3
 8007762:	440b      	add	r3, r1
 8007764:	3370      	adds	r3, #112	; 0x70
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	429a      	cmp	r2, r3
 800776a:	d00b      	beq.n	8007784 <SEGGER_SYSVIEW_IsStarted+0x4c>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800776c:	4b07      	ldr	r3, [pc, #28]	; (800778c <SEGGER_SYSVIEW_IsStarted+0x54>)
 800776e:	789b      	ldrb	r3, [r3, #2]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d107      	bne.n	8007784 <SEGGER_SYSVIEW_IsStarted+0x4c>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8007774:	4b05      	ldr	r3, [pc, #20]	; (800778c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007776:	2201      	movs	r2, #1
 8007778:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800777a:	f7fe fa3d 	bl	8005bf8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800777e:	4b03      	ldr	r3, [pc, #12]	; (800778c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007780:	2200      	movs	r2, #0
 8007782:	709a      	strb	r2, [r3, #2]
    }
  }
#endif
  return _SYSVIEW_Globals.EnableState;
 8007784:	4b01      	ldr	r3, [pc, #4]	; (800778c <SEGGER_SYSVIEW_IsStarted+0x54>)
 8007786:	781b      	ldrb	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	bd80      	pop	{r7, pc}
 800778c:	20014418 	.word	0x20014418
 8007790:	20012f58 	.word	0x20012f58

08007794 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8007798:	4803      	ldr	r0, [pc, #12]	; (80077a8 <_cbSendSystemDesc+0x14>)
 800779a:	f7ff fcbf 	bl	800711c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800779e:	4803      	ldr	r0, [pc, #12]	; (80077ac <_cbSendSystemDesc+0x18>)
 80077a0:	f7ff fcbc 	bl	800711c <SEGGER_SYSVIEW_SendSysDesc>
}
 80077a4:	bf00      	nop
 80077a6:	bd80      	pop	{r7, pc}
 80077a8:	08008814 	.word	0x08008814
 80077ac:	08008850 	.word	0x08008850

080077b0 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80077b0:	b580      	push	{r7, lr}
 80077b2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80077b4:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80077b6:	6818      	ldr	r0, [r3, #0]
 80077b8:	4b05      	ldr	r3, [pc, #20]	; (80077d0 <SEGGER_SYSVIEW_Conf+0x20>)
 80077ba:	6819      	ldr	r1, [r3, #0]
 80077bc:	4b05      	ldr	r3, [pc, #20]	; (80077d4 <SEGGER_SYSVIEW_Conf+0x24>)
 80077be:	4a06      	ldr	r2, [pc, #24]	; (80077d8 <SEGGER_SYSVIEW_Conf+0x28>)
 80077c0:	f7fe ff7c 	bl	80066bc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80077c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80077c8:	f7fe ffbc 	bl	8006744 <SEGGER_SYSVIEW_SetRAMBase>
}
 80077cc:	bf00      	nop
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20000000 	.word	0x20000000
 80077d4:	08007795 	.word	0x08007795
 80077d8:	08008878 	.word	0x08008878

080077dc <std>:
 80077dc:	2300      	movs	r3, #0
 80077de:	b510      	push	{r4, lr}
 80077e0:	4604      	mov	r4, r0
 80077e2:	e9c0 3300 	strd	r3, r3, [r0]
 80077e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077ea:	6083      	str	r3, [r0, #8]
 80077ec:	8181      	strh	r1, [r0, #12]
 80077ee:	6643      	str	r3, [r0, #100]	; 0x64
 80077f0:	81c2      	strh	r2, [r0, #14]
 80077f2:	6183      	str	r3, [r0, #24]
 80077f4:	4619      	mov	r1, r3
 80077f6:	2208      	movs	r2, #8
 80077f8:	305c      	adds	r0, #92	; 0x5c
 80077fa:	f000 f904 	bl	8007a06 <memset>
 80077fe:	4b05      	ldr	r3, [pc, #20]	; (8007814 <std+0x38>)
 8007800:	6263      	str	r3, [r4, #36]	; 0x24
 8007802:	4b05      	ldr	r3, [pc, #20]	; (8007818 <std+0x3c>)
 8007804:	62a3      	str	r3, [r4, #40]	; 0x28
 8007806:	4b05      	ldr	r3, [pc, #20]	; (800781c <std+0x40>)
 8007808:	62e3      	str	r3, [r4, #44]	; 0x2c
 800780a:	4b05      	ldr	r3, [pc, #20]	; (8007820 <std+0x44>)
 800780c:	6224      	str	r4, [r4, #32]
 800780e:	6323      	str	r3, [r4, #48]	; 0x30
 8007810:	bd10      	pop	{r4, pc}
 8007812:	bf00      	nop
 8007814:	08007961 	.word	0x08007961
 8007818:	08007983 	.word	0x08007983
 800781c:	080079bb 	.word	0x080079bb
 8007820:	080079df 	.word	0x080079df

08007824 <stdio_exit_handler>:
 8007824:	4a02      	ldr	r2, [pc, #8]	; (8007830 <stdio_exit_handler+0xc>)
 8007826:	4903      	ldr	r1, [pc, #12]	; (8007834 <stdio_exit_handler+0x10>)
 8007828:	4803      	ldr	r0, [pc, #12]	; (8007838 <stdio_exit_handler+0x14>)
 800782a:	f000 b869 	b.w	8007900 <_fwalk_sglue>
 800782e:	bf00      	nop
 8007830:	2000001c 	.word	0x2000001c
 8007834:	080083b1 	.word	0x080083b1
 8007838:	20000028 	.word	0x20000028

0800783c <cleanup_stdio>:
 800783c:	6841      	ldr	r1, [r0, #4]
 800783e:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <cleanup_stdio+0x34>)
 8007840:	4299      	cmp	r1, r3
 8007842:	b510      	push	{r4, lr}
 8007844:	4604      	mov	r4, r0
 8007846:	d001      	beq.n	800784c <cleanup_stdio+0x10>
 8007848:	f000 fdb2 	bl	80083b0 <_fflush_r>
 800784c:	68a1      	ldr	r1, [r4, #8]
 800784e:	4b09      	ldr	r3, [pc, #36]	; (8007874 <cleanup_stdio+0x38>)
 8007850:	4299      	cmp	r1, r3
 8007852:	d002      	beq.n	800785a <cleanup_stdio+0x1e>
 8007854:	4620      	mov	r0, r4
 8007856:	f000 fdab 	bl	80083b0 <_fflush_r>
 800785a:	68e1      	ldr	r1, [r4, #12]
 800785c:	4b06      	ldr	r3, [pc, #24]	; (8007878 <cleanup_stdio+0x3c>)
 800785e:	4299      	cmp	r1, r3
 8007860:	d004      	beq.n	800786c <cleanup_stdio+0x30>
 8007862:	4620      	mov	r0, r4
 8007864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007868:	f000 bda2 	b.w	80083b0 <_fflush_r>
 800786c:	bd10      	pop	{r4, pc}
 800786e:	bf00      	nop
 8007870:	2001452c 	.word	0x2001452c
 8007874:	20014594 	.word	0x20014594
 8007878:	200145fc 	.word	0x200145fc

0800787c <global_stdio_init.part.0>:
 800787c:	b510      	push	{r4, lr}
 800787e:	4b0b      	ldr	r3, [pc, #44]	; (80078ac <global_stdio_init.part.0+0x30>)
 8007880:	4c0b      	ldr	r4, [pc, #44]	; (80078b0 <global_stdio_init.part.0+0x34>)
 8007882:	4a0c      	ldr	r2, [pc, #48]	; (80078b4 <global_stdio_init.part.0+0x38>)
 8007884:	601a      	str	r2, [r3, #0]
 8007886:	4620      	mov	r0, r4
 8007888:	2200      	movs	r2, #0
 800788a:	2104      	movs	r1, #4
 800788c:	f7ff ffa6 	bl	80077dc <std>
 8007890:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007894:	2201      	movs	r2, #1
 8007896:	2109      	movs	r1, #9
 8007898:	f7ff ffa0 	bl	80077dc <std>
 800789c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078a0:	2202      	movs	r2, #2
 80078a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078a6:	2112      	movs	r1, #18
 80078a8:	f7ff bf98 	b.w	80077dc <std>
 80078ac:	20014664 	.word	0x20014664
 80078b0:	2001452c 	.word	0x2001452c
 80078b4:	08007825 	.word	0x08007825

080078b8 <__sfp_lock_acquire>:
 80078b8:	4801      	ldr	r0, [pc, #4]	; (80078c0 <__sfp_lock_acquire+0x8>)
 80078ba:	f000 b917 	b.w	8007aec <__retarget_lock_acquire_recursive>
 80078be:	bf00      	nop
 80078c0:	2001466d 	.word	0x2001466d

080078c4 <__sfp_lock_release>:
 80078c4:	4801      	ldr	r0, [pc, #4]	; (80078cc <__sfp_lock_release+0x8>)
 80078c6:	f000 b912 	b.w	8007aee <__retarget_lock_release_recursive>
 80078ca:	bf00      	nop
 80078cc:	2001466d 	.word	0x2001466d

080078d0 <__sinit>:
 80078d0:	b510      	push	{r4, lr}
 80078d2:	4604      	mov	r4, r0
 80078d4:	f7ff fff0 	bl	80078b8 <__sfp_lock_acquire>
 80078d8:	6a23      	ldr	r3, [r4, #32]
 80078da:	b11b      	cbz	r3, 80078e4 <__sinit+0x14>
 80078dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078e0:	f7ff bff0 	b.w	80078c4 <__sfp_lock_release>
 80078e4:	4b04      	ldr	r3, [pc, #16]	; (80078f8 <__sinit+0x28>)
 80078e6:	6223      	str	r3, [r4, #32]
 80078e8:	4b04      	ldr	r3, [pc, #16]	; (80078fc <__sinit+0x2c>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1f5      	bne.n	80078dc <__sinit+0xc>
 80078f0:	f7ff ffc4 	bl	800787c <global_stdio_init.part.0>
 80078f4:	e7f2      	b.n	80078dc <__sinit+0xc>
 80078f6:	bf00      	nop
 80078f8:	0800783d 	.word	0x0800783d
 80078fc:	20014664 	.word	0x20014664

08007900 <_fwalk_sglue>:
 8007900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007904:	4607      	mov	r7, r0
 8007906:	4688      	mov	r8, r1
 8007908:	4614      	mov	r4, r2
 800790a:	2600      	movs	r6, #0
 800790c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007910:	f1b9 0901 	subs.w	r9, r9, #1
 8007914:	d505      	bpl.n	8007922 <_fwalk_sglue+0x22>
 8007916:	6824      	ldr	r4, [r4, #0]
 8007918:	2c00      	cmp	r4, #0
 800791a:	d1f7      	bne.n	800790c <_fwalk_sglue+0xc>
 800791c:	4630      	mov	r0, r6
 800791e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007922:	89ab      	ldrh	r3, [r5, #12]
 8007924:	2b01      	cmp	r3, #1
 8007926:	d907      	bls.n	8007938 <_fwalk_sglue+0x38>
 8007928:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800792c:	3301      	adds	r3, #1
 800792e:	d003      	beq.n	8007938 <_fwalk_sglue+0x38>
 8007930:	4629      	mov	r1, r5
 8007932:	4638      	mov	r0, r7
 8007934:	47c0      	blx	r8
 8007936:	4306      	orrs	r6, r0
 8007938:	3568      	adds	r5, #104	; 0x68
 800793a:	e7e9      	b.n	8007910 <_fwalk_sglue+0x10>

0800793c <iprintf>:
 800793c:	b40f      	push	{r0, r1, r2, r3}
 800793e:	b507      	push	{r0, r1, r2, lr}
 8007940:	4906      	ldr	r1, [pc, #24]	; (800795c <iprintf+0x20>)
 8007942:	ab04      	add	r3, sp, #16
 8007944:	6808      	ldr	r0, [r1, #0]
 8007946:	f853 2b04 	ldr.w	r2, [r3], #4
 800794a:	6881      	ldr	r1, [r0, #8]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	f000 f9ff 	bl	8007d50 <_vfiprintf_r>
 8007952:	b003      	add	sp, #12
 8007954:	f85d eb04 	ldr.w	lr, [sp], #4
 8007958:	b004      	add	sp, #16
 800795a:	4770      	bx	lr
 800795c:	20000074 	.word	0x20000074

08007960 <__sread>:
 8007960:	b510      	push	{r4, lr}
 8007962:	460c      	mov	r4, r1
 8007964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007968:	f000 f878 	bl	8007a5c <_read_r>
 800796c:	2800      	cmp	r0, #0
 800796e:	bfab      	itete	ge
 8007970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007972:	89a3      	ldrhlt	r3, [r4, #12]
 8007974:	181b      	addge	r3, r3, r0
 8007976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800797a:	bfac      	ite	ge
 800797c:	6563      	strge	r3, [r4, #84]	; 0x54
 800797e:	81a3      	strhlt	r3, [r4, #12]
 8007980:	bd10      	pop	{r4, pc}

08007982 <__swrite>:
 8007982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007986:	461f      	mov	r7, r3
 8007988:	898b      	ldrh	r3, [r1, #12]
 800798a:	05db      	lsls	r3, r3, #23
 800798c:	4605      	mov	r5, r0
 800798e:	460c      	mov	r4, r1
 8007990:	4616      	mov	r6, r2
 8007992:	d505      	bpl.n	80079a0 <__swrite+0x1e>
 8007994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007998:	2302      	movs	r3, #2
 800799a:	2200      	movs	r2, #0
 800799c:	f000 f84c 	bl	8007a38 <_lseek_r>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	4632      	mov	r2, r6
 80079ae:	463b      	mov	r3, r7
 80079b0:	4628      	mov	r0, r5
 80079b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079b6:	f000 b863 	b.w	8007a80 <_write_r>

080079ba <__sseek>:
 80079ba:	b510      	push	{r4, lr}
 80079bc:	460c      	mov	r4, r1
 80079be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c2:	f000 f839 	bl	8007a38 <_lseek_r>
 80079c6:	1c43      	adds	r3, r0, #1
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	bf15      	itete	ne
 80079cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80079ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079d6:	81a3      	strheq	r3, [r4, #12]
 80079d8:	bf18      	it	ne
 80079da:	81a3      	strhne	r3, [r4, #12]
 80079dc:	bd10      	pop	{r4, pc}

080079de <__sclose>:
 80079de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e2:	f000 b819 	b.w	8007a18 <_close_r>

080079e6 <memcmp>:
 80079e6:	b510      	push	{r4, lr}
 80079e8:	3901      	subs	r1, #1
 80079ea:	4402      	add	r2, r0
 80079ec:	4290      	cmp	r0, r2
 80079ee:	d101      	bne.n	80079f4 <memcmp+0xe>
 80079f0:	2000      	movs	r0, #0
 80079f2:	e005      	b.n	8007a00 <memcmp+0x1a>
 80079f4:	7803      	ldrb	r3, [r0, #0]
 80079f6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80079fa:	42a3      	cmp	r3, r4
 80079fc:	d001      	beq.n	8007a02 <memcmp+0x1c>
 80079fe:	1b18      	subs	r0, r3, r4
 8007a00:	bd10      	pop	{r4, pc}
 8007a02:	3001      	adds	r0, #1
 8007a04:	e7f2      	b.n	80079ec <memcmp+0x6>

08007a06 <memset>:
 8007a06:	4402      	add	r2, r0
 8007a08:	4603      	mov	r3, r0
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d100      	bne.n	8007a10 <memset+0xa>
 8007a0e:	4770      	bx	lr
 8007a10:	f803 1b01 	strb.w	r1, [r3], #1
 8007a14:	e7f9      	b.n	8007a0a <memset+0x4>
	...

08007a18 <_close_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d06      	ldr	r5, [pc, #24]	; (8007a34 <_close_r+0x1c>)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	f7f9 f98d 	bl	8000d42 <_close>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_close_r+0x1a>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_close_r+0x1a>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	20014668 	.word	0x20014668

08007a38 <_lseek_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	; (8007a58 <_lseek_r+0x20>)
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	4608      	mov	r0, r1
 8007a40:	4611      	mov	r1, r2
 8007a42:	2200      	movs	r2, #0
 8007a44:	602a      	str	r2, [r5, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	f7f9 f9a2 	bl	8000d90 <_lseek>
 8007a4c:	1c43      	adds	r3, r0, #1
 8007a4e:	d102      	bne.n	8007a56 <_lseek_r+0x1e>
 8007a50:	682b      	ldr	r3, [r5, #0]
 8007a52:	b103      	cbz	r3, 8007a56 <_lseek_r+0x1e>
 8007a54:	6023      	str	r3, [r4, #0]
 8007a56:	bd38      	pop	{r3, r4, r5, pc}
 8007a58:	20014668 	.word	0x20014668

08007a5c <_read_r>:
 8007a5c:	b538      	push	{r3, r4, r5, lr}
 8007a5e:	4d07      	ldr	r5, [pc, #28]	; (8007a7c <_read_r+0x20>)
 8007a60:	4604      	mov	r4, r0
 8007a62:	4608      	mov	r0, r1
 8007a64:	4611      	mov	r1, r2
 8007a66:	2200      	movs	r2, #0
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	f7f9 f930 	bl	8000cd0 <_read>
 8007a70:	1c43      	adds	r3, r0, #1
 8007a72:	d102      	bne.n	8007a7a <_read_r+0x1e>
 8007a74:	682b      	ldr	r3, [r5, #0]
 8007a76:	b103      	cbz	r3, 8007a7a <_read_r+0x1e>
 8007a78:	6023      	str	r3, [r4, #0]
 8007a7a:	bd38      	pop	{r3, r4, r5, pc}
 8007a7c:	20014668 	.word	0x20014668

08007a80 <_write_r>:
 8007a80:	b538      	push	{r3, r4, r5, lr}
 8007a82:	4d07      	ldr	r5, [pc, #28]	; (8007aa0 <_write_r+0x20>)
 8007a84:	4604      	mov	r4, r0
 8007a86:	4608      	mov	r0, r1
 8007a88:	4611      	mov	r1, r2
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f7f9 f93b 	bl	8000d0a <_write>
 8007a94:	1c43      	adds	r3, r0, #1
 8007a96:	d102      	bne.n	8007a9e <_write_r+0x1e>
 8007a98:	682b      	ldr	r3, [r5, #0]
 8007a9a:	b103      	cbz	r3, 8007a9e <_write_r+0x1e>
 8007a9c:	6023      	str	r3, [r4, #0]
 8007a9e:	bd38      	pop	{r3, r4, r5, pc}
 8007aa0:	20014668 	.word	0x20014668

08007aa4 <__libc_init_array>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	4d0d      	ldr	r5, [pc, #52]	; (8007adc <__libc_init_array+0x38>)
 8007aa8:	4c0d      	ldr	r4, [pc, #52]	; (8007ae0 <__libc_init_array+0x3c>)
 8007aaa:	1b64      	subs	r4, r4, r5
 8007aac:	10a4      	asrs	r4, r4, #2
 8007aae:	2600      	movs	r6, #0
 8007ab0:	42a6      	cmp	r6, r4
 8007ab2:	d109      	bne.n	8007ac8 <__libc_init_array+0x24>
 8007ab4:	4d0b      	ldr	r5, [pc, #44]	; (8007ae4 <__libc_init_array+0x40>)
 8007ab6:	4c0c      	ldr	r4, [pc, #48]	; (8007ae8 <__libc_init_array+0x44>)
 8007ab8:	f000 fdda 	bl	8008670 <_init>
 8007abc:	1b64      	subs	r4, r4, r5
 8007abe:	10a4      	asrs	r4, r4, #2
 8007ac0:	2600      	movs	r6, #0
 8007ac2:	42a6      	cmp	r6, r4
 8007ac4:	d105      	bne.n	8007ad2 <__libc_init_array+0x2e>
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
 8007ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8007acc:	4798      	blx	r3
 8007ace:	3601      	adds	r6, #1
 8007ad0:	e7ee      	b.n	8007ab0 <__libc_init_array+0xc>
 8007ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ad6:	4798      	blx	r3
 8007ad8:	3601      	adds	r6, #1
 8007ada:	e7f2      	b.n	8007ac2 <__libc_init_array+0x1e>
 8007adc:	080088dc 	.word	0x080088dc
 8007ae0:	080088dc 	.word	0x080088dc
 8007ae4:	080088dc 	.word	0x080088dc
 8007ae8:	080088e0 	.word	0x080088e0

08007aec <__retarget_lock_acquire_recursive>:
 8007aec:	4770      	bx	lr

08007aee <__retarget_lock_release_recursive>:
 8007aee:	4770      	bx	lr

08007af0 <memcpy>:
 8007af0:	440a      	add	r2, r1
 8007af2:	4291      	cmp	r1, r2
 8007af4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007af8:	d100      	bne.n	8007afc <memcpy+0xc>
 8007afa:	4770      	bx	lr
 8007afc:	b510      	push	{r4, lr}
 8007afe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b06:	4291      	cmp	r1, r2
 8007b08:	d1f9      	bne.n	8007afe <memcpy+0xe>
 8007b0a:	bd10      	pop	{r4, pc}

08007b0c <_free_r>:
 8007b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b0e:	2900      	cmp	r1, #0
 8007b10:	d044      	beq.n	8007b9c <_free_r+0x90>
 8007b12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b16:	9001      	str	r0, [sp, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f1a1 0404 	sub.w	r4, r1, #4
 8007b1e:	bfb8      	it	lt
 8007b20:	18e4      	addlt	r4, r4, r3
 8007b22:	f000 f8df 	bl	8007ce4 <__malloc_lock>
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <_free_r+0x94>)
 8007b28:	9801      	ldr	r0, [sp, #4]
 8007b2a:	6813      	ldr	r3, [r2, #0]
 8007b2c:	b933      	cbnz	r3, 8007b3c <_free_r+0x30>
 8007b2e:	6063      	str	r3, [r4, #4]
 8007b30:	6014      	str	r4, [r2, #0]
 8007b32:	b003      	add	sp, #12
 8007b34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007b38:	f000 b8da 	b.w	8007cf0 <__malloc_unlock>
 8007b3c:	42a3      	cmp	r3, r4
 8007b3e:	d908      	bls.n	8007b52 <_free_r+0x46>
 8007b40:	6825      	ldr	r5, [r4, #0]
 8007b42:	1961      	adds	r1, r4, r5
 8007b44:	428b      	cmp	r3, r1
 8007b46:	bf01      	itttt	eq
 8007b48:	6819      	ldreq	r1, [r3, #0]
 8007b4a:	685b      	ldreq	r3, [r3, #4]
 8007b4c:	1949      	addeq	r1, r1, r5
 8007b4e:	6021      	streq	r1, [r4, #0]
 8007b50:	e7ed      	b.n	8007b2e <_free_r+0x22>
 8007b52:	461a      	mov	r2, r3
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	b10b      	cbz	r3, 8007b5c <_free_r+0x50>
 8007b58:	42a3      	cmp	r3, r4
 8007b5a:	d9fa      	bls.n	8007b52 <_free_r+0x46>
 8007b5c:	6811      	ldr	r1, [r2, #0]
 8007b5e:	1855      	adds	r5, r2, r1
 8007b60:	42a5      	cmp	r5, r4
 8007b62:	d10b      	bne.n	8007b7c <_free_r+0x70>
 8007b64:	6824      	ldr	r4, [r4, #0]
 8007b66:	4421      	add	r1, r4
 8007b68:	1854      	adds	r4, r2, r1
 8007b6a:	42a3      	cmp	r3, r4
 8007b6c:	6011      	str	r1, [r2, #0]
 8007b6e:	d1e0      	bne.n	8007b32 <_free_r+0x26>
 8007b70:	681c      	ldr	r4, [r3, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	6053      	str	r3, [r2, #4]
 8007b76:	440c      	add	r4, r1
 8007b78:	6014      	str	r4, [r2, #0]
 8007b7a:	e7da      	b.n	8007b32 <_free_r+0x26>
 8007b7c:	d902      	bls.n	8007b84 <_free_r+0x78>
 8007b7e:	230c      	movs	r3, #12
 8007b80:	6003      	str	r3, [r0, #0]
 8007b82:	e7d6      	b.n	8007b32 <_free_r+0x26>
 8007b84:	6825      	ldr	r5, [r4, #0]
 8007b86:	1961      	adds	r1, r4, r5
 8007b88:	428b      	cmp	r3, r1
 8007b8a:	bf04      	itt	eq
 8007b8c:	6819      	ldreq	r1, [r3, #0]
 8007b8e:	685b      	ldreq	r3, [r3, #4]
 8007b90:	6063      	str	r3, [r4, #4]
 8007b92:	bf04      	itt	eq
 8007b94:	1949      	addeq	r1, r1, r5
 8007b96:	6021      	streq	r1, [r4, #0]
 8007b98:	6054      	str	r4, [r2, #4]
 8007b9a:	e7ca      	b.n	8007b32 <_free_r+0x26>
 8007b9c:	b003      	add	sp, #12
 8007b9e:	bd30      	pop	{r4, r5, pc}
 8007ba0:	20014670 	.word	0x20014670

08007ba4 <sbrk_aligned>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	4e0e      	ldr	r6, [pc, #56]	; (8007be0 <sbrk_aligned+0x3c>)
 8007ba8:	460c      	mov	r4, r1
 8007baa:	6831      	ldr	r1, [r6, #0]
 8007bac:	4605      	mov	r5, r0
 8007bae:	b911      	cbnz	r1, 8007bb6 <sbrk_aligned+0x12>
 8007bb0:	f000 fcbc 	bl	800852c <_sbrk_r>
 8007bb4:	6030      	str	r0, [r6, #0]
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f000 fcb7 	bl	800852c <_sbrk_r>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d00a      	beq.n	8007bd8 <sbrk_aligned+0x34>
 8007bc2:	1cc4      	adds	r4, r0, #3
 8007bc4:	f024 0403 	bic.w	r4, r4, #3
 8007bc8:	42a0      	cmp	r0, r4
 8007bca:	d007      	beq.n	8007bdc <sbrk_aligned+0x38>
 8007bcc:	1a21      	subs	r1, r4, r0
 8007bce:	4628      	mov	r0, r5
 8007bd0:	f000 fcac 	bl	800852c <_sbrk_r>
 8007bd4:	3001      	adds	r0, #1
 8007bd6:	d101      	bne.n	8007bdc <sbrk_aligned+0x38>
 8007bd8:	f04f 34ff 	mov.w	r4, #4294967295
 8007bdc:	4620      	mov	r0, r4
 8007bde:	bd70      	pop	{r4, r5, r6, pc}
 8007be0:	20014674 	.word	0x20014674

08007be4 <_malloc_r>:
 8007be4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007be8:	1ccd      	adds	r5, r1, #3
 8007bea:	f025 0503 	bic.w	r5, r5, #3
 8007bee:	3508      	adds	r5, #8
 8007bf0:	2d0c      	cmp	r5, #12
 8007bf2:	bf38      	it	cc
 8007bf4:	250c      	movcc	r5, #12
 8007bf6:	2d00      	cmp	r5, #0
 8007bf8:	4607      	mov	r7, r0
 8007bfa:	db01      	blt.n	8007c00 <_malloc_r+0x1c>
 8007bfc:	42a9      	cmp	r1, r5
 8007bfe:	d905      	bls.n	8007c0c <_malloc_r+0x28>
 8007c00:	230c      	movs	r3, #12
 8007c02:	603b      	str	r3, [r7, #0]
 8007c04:	2600      	movs	r6, #0
 8007c06:	4630      	mov	r0, r6
 8007c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ce0 <_malloc_r+0xfc>
 8007c10:	f000 f868 	bl	8007ce4 <__malloc_lock>
 8007c14:	f8d8 3000 	ldr.w	r3, [r8]
 8007c18:	461c      	mov	r4, r3
 8007c1a:	bb5c      	cbnz	r4, 8007c74 <_malloc_r+0x90>
 8007c1c:	4629      	mov	r1, r5
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7ff ffc0 	bl	8007ba4 <sbrk_aligned>
 8007c24:	1c43      	adds	r3, r0, #1
 8007c26:	4604      	mov	r4, r0
 8007c28:	d155      	bne.n	8007cd6 <_malloc_r+0xf2>
 8007c2a:	f8d8 4000 	ldr.w	r4, [r8]
 8007c2e:	4626      	mov	r6, r4
 8007c30:	2e00      	cmp	r6, #0
 8007c32:	d145      	bne.n	8007cc0 <_malloc_r+0xdc>
 8007c34:	2c00      	cmp	r4, #0
 8007c36:	d048      	beq.n	8007cca <_malloc_r+0xe6>
 8007c38:	6823      	ldr	r3, [r4, #0]
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	eb04 0903 	add.w	r9, r4, r3
 8007c42:	f000 fc73 	bl	800852c <_sbrk_r>
 8007c46:	4581      	cmp	r9, r0
 8007c48:	d13f      	bne.n	8007cca <_malloc_r+0xe6>
 8007c4a:	6821      	ldr	r1, [r4, #0]
 8007c4c:	1a6d      	subs	r5, r5, r1
 8007c4e:	4629      	mov	r1, r5
 8007c50:	4638      	mov	r0, r7
 8007c52:	f7ff ffa7 	bl	8007ba4 <sbrk_aligned>
 8007c56:	3001      	adds	r0, #1
 8007c58:	d037      	beq.n	8007cca <_malloc_r+0xe6>
 8007c5a:	6823      	ldr	r3, [r4, #0]
 8007c5c:	442b      	add	r3, r5
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	f8d8 3000 	ldr.w	r3, [r8]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d038      	beq.n	8007cda <_malloc_r+0xf6>
 8007c68:	685a      	ldr	r2, [r3, #4]
 8007c6a:	42a2      	cmp	r2, r4
 8007c6c:	d12b      	bne.n	8007cc6 <_malloc_r+0xe2>
 8007c6e:	2200      	movs	r2, #0
 8007c70:	605a      	str	r2, [r3, #4]
 8007c72:	e00f      	b.n	8007c94 <_malloc_r+0xb0>
 8007c74:	6822      	ldr	r2, [r4, #0]
 8007c76:	1b52      	subs	r2, r2, r5
 8007c78:	d41f      	bmi.n	8007cba <_malloc_r+0xd6>
 8007c7a:	2a0b      	cmp	r2, #11
 8007c7c:	d917      	bls.n	8007cae <_malloc_r+0xca>
 8007c7e:	1961      	adds	r1, r4, r5
 8007c80:	42a3      	cmp	r3, r4
 8007c82:	6025      	str	r5, [r4, #0]
 8007c84:	bf18      	it	ne
 8007c86:	6059      	strne	r1, [r3, #4]
 8007c88:	6863      	ldr	r3, [r4, #4]
 8007c8a:	bf08      	it	eq
 8007c8c:	f8c8 1000 	streq.w	r1, [r8]
 8007c90:	5162      	str	r2, [r4, r5]
 8007c92:	604b      	str	r3, [r1, #4]
 8007c94:	4638      	mov	r0, r7
 8007c96:	f104 060b 	add.w	r6, r4, #11
 8007c9a:	f000 f829 	bl	8007cf0 <__malloc_unlock>
 8007c9e:	f026 0607 	bic.w	r6, r6, #7
 8007ca2:	1d23      	adds	r3, r4, #4
 8007ca4:	1af2      	subs	r2, r6, r3
 8007ca6:	d0ae      	beq.n	8007c06 <_malloc_r+0x22>
 8007ca8:	1b9b      	subs	r3, r3, r6
 8007caa:	50a3      	str	r3, [r4, r2]
 8007cac:	e7ab      	b.n	8007c06 <_malloc_r+0x22>
 8007cae:	42a3      	cmp	r3, r4
 8007cb0:	6862      	ldr	r2, [r4, #4]
 8007cb2:	d1dd      	bne.n	8007c70 <_malloc_r+0x8c>
 8007cb4:	f8c8 2000 	str.w	r2, [r8]
 8007cb8:	e7ec      	b.n	8007c94 <_malloc_r+0xb0>
 8007cba:	4623      	mov	r3, r4
 8007cbc:	6864      	ldr	r4, [r4, #4]
 8007cbe:	e7ac      	b.n	8007c1a <_malloc_r+0x36>
 8007cc0:	4634      	mov	r4, r6
 8007cc2:	6876      	ldr	r6, [r6, #4]
 8007cc4:	e7b4      	b.n	8007c30 <_malloc_r+0x4c>
 8007cc6:	4613      	mov	r3, r2
 8007cc8:	e7cc      	b.n	8007c64 <_malloc_r+0x80>
 8007cca:	230c      	movs	r3, #12
 8007ccc:	603b      	str	r3, [r7, #0]
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f000 f80e 	bl	8007cf0 <__malloc_unlock>
 8007cd4:	e797      	b.n	8007c06 <_malloc_r+0x22>
 8007cd6:	6025      	str	r5, [r4, #0]
 8007cd8:	e7dc      	b.n	8007c94 <_malloc_r+0xb0>
 8007cda:	605b      	str	r3, [r3, #4]
 8007cdc:	deff      	udf	#255	; 0xff
 8007cde:	bf00      	nop
 8007ce0:	20014670 	.word	0x20014670

08007ce4 <__malloc_lock>:
 8007ce4:	4801      	ldr	r0, [pc, #4]	; (8007cec <__malloc_lock+0x8>)
 8007ce6:	f7ff bf01 	b.w	8007aec <__retarget_lock_acquire_recursive>
 8007cea:	bf00      	nop
 8007cec:	2001466c 	.word	0x2001466c

08007cf0 <__malloc_unlock>:
 8007cf0:	4801      	ldr	r0, [pc, #4]	; (8007cf8 <__malloc_unlock+0x8>)
 8007cf2:	f7ff befc 	b.w	8007aee <__retarget_lock_release_recursive>
 8007cf6:	bf00      	nop
 8007cf8:	2001466c 	.word	0x2001466c

08007cfc <__sfputc_r>:
 8007cfc:	6893      	ldr	r3, [r2, #8]
 8007cfe:	3b01      	subs	r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	b410      	push	{r4}
 8007d04:	6093      	str	r3, [r2, #8]
 8007d06:	da08      	bge.n	8007d1a <__sfputc_r+0x1e>
 8007d08:	6994      	ldr	r4, [r2, #24]
 8007d0a:	42a3      	cmp	r3, r4
 8007d0c:	db01      	blt.n	8007d12 <__sfputc_r+0x16>
 8007d0e:	290a      	cmp	r1, #10
 8007d10:	d103      	bne.n	8007d1a <__sfputc_r+0x1e>
 8007d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d16:	f000 bb73 	b.w	8008400 <__swbuf_r>
 8007d1a:	6813      	ldr	r3, [r2, #0]
 8007d1c:	1c58      	adds	r0, r3, #1
 8007d1e:	6010      	str	r0, [r2, #0]
 8007d20:	7019      	strb	r1, [r3, #0]
 8007d22:	4608      	mov	r0, r1
 8007d24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <__sfputs_r>:
 8007d2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2c:	4606      	mov	r6, r0
 8007d2e:	460f      	mov	r7, r1
 8007d30:	4614      	mov	r4, r2
 8007d32:	18d5      	adds	r5, r2, r3
 8007d34:	42ac      	cmp	r4, r5
 8007d36:	d101      	bne.n	8007d3c <__sfputs_r+0x12>
 8007d38:	2000      	movs	r0, #0
 8007d3a:	e007      	b.n	8007d4c <__sfputs_r+0x22>
 8007d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d40:	463a      	mov	r2, r7
 8007d42:	4630      	mov	r0, r6
 8007d44:	f7ff ffda 	bl	8007cfc <__sfputc_r>
 8007d48:	1c43      	adds	r3, r0, #1
 8007d4a:	d1f3      	bne.n	8007d34 <__sfputs_r+0xa>
 8007d4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007d50 <_vfiprintf_r>:
 8007d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d54:	460d      	mov	r5, r1
 8007d56:	b09d      	sub	sp, #116	; 0x74
 8007d58:	4614      	mov	r4, r2
 8007d5a:	4698      	mov	r8, r3
 8007d5c:	4606      	mov	r6, r0
 8007d5e:	b118      	cbz	r0, 8007d68 <_vfiprintf_r+0x18>
 8007d60:	6a03      	ldr	r3, [r0, #32]
 8007d62:	b90b      	cbnz	r3, 8007d68 <_vfiprintf_r+0x18>
 8007d64:	f7ff fdb4 	bl	80078d0 <__sinit>
 8007d68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d6a:	07d9      	lsls	r1, r3, #31
 8007d6c:	d405      	bmi.n	8007d7a <_vfiprintf_r+0x2a>
 8007d6e:	89ab      	ldrh	r3, [r5, #12]
 8007d70:	059a      	lsls	r2, r3, #22
 8007d72:	d402      	bmi.n	8007d7a <_vfiprintf_r+0x2a>
 8007d74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d76:	f7ff feb9 	bl	8007aec <__retarget_lock_acquire_recursive>
 8007d7a:	89ab      	ldrh	r3, [r5, #12]
 8007d7c:	071b      	lsls	r3, r3, #28
 8007d7e:	d501      	bpl.n	8007d84 <_vfiprintf_r+0x34>
 8007d80:	692b      	ldr	r3, [r5, #16]
 8007d82:	b99b      	cbnz	r3, 8007dac <_vfiprintf_r+0x5c>
 8007d84:	4629      	mov	r1, r5
 8007d86:	4630      	mov	r0, r6
 8007d88:	f000 fb78 	bl	800847c <__swsetup_r>
 8007d8c:	b170      	cbz	r0, 8007dac <_vfiprintf_r+0x5c>
 8007d8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d90:	07dc      	lsls	r4, r3, #31
 8007d92:	d504      	bpl.n	8007d9e <_vfiprintf_r+0x4e>
 8007d94:	f04f 30ff 	mov.w	r0, #4294967295
 8007d98:	b01d      	add	sp, #116	; 0x74
 8007d9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d9e:	89ab      	ldrh	r3, [r5, #12]
 8007da0:	0598      	lsls	r0, r3, #22
 8007da2:	d4f7      	bmi.n	8007d94 <_vfiprintf_r+0x44>
 8007da4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007da6:	f7ff fea2 	bl	8007aee <__retarget_lock_release_recursive>
 8007daa:	e7f3      	b.n	8007d94 <_vfiprintf_r+0x44>
 8007dac:	2300      	movs	r3, #0
 8007dae:	9309      	str	r3, [sp, #36]	; 0x24
 8007db0:	2320      	movs	r3, #32
 8007db2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007db6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dba:	2330      	movs	r3, #48	; 0x30
 8007dbc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007f70 <_vfiprintf_r+0x220>
 8007dc0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dc4:	f04f 0901 	mov.w	r9, #1
 8007dc8:	4623      	mov	r3, r4
 8007dca:	469a      	mov	sl, r3
 8007dcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dd0:	b10a      	cbz	r2, 8007dd6 <_vfiprintf_r+0x86>
 8007dd2:	2a25      	cmp	r2, #37	; 0x25
 8007dd4:	d1f9      	bne.n	8007dca <_vfiprintf_r+0x7a>
 8007dd6:	ebba 0b04 	subs.w	fp, sl, r4
 8007dda:	d00b      	beq.n	8007df4 <_vfiprintf_r+0xa4>
 8007ddc:	465b      	mov	r3, fp
 8007dde:	4622      	mov	r2, r4
 8007de0:	4629      	mov	r1, r5
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7ff ffa1 	bl	8007d2a <__sfputs_r>
 8007de8:	3001      	adds	r0, #1
 8007dea:	f000 80a9 	beq.w	8007f40 <_vfiprintf_r+0x1f0>
 8007dee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007df0:	445a      	add	r2, fp
 8007df2:	9209      	str	r2, [sp, #36]	; 0x24
 8007df4:	f89a 3000 	ldrb.w	r3, [sl]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	f000 80a1 	beq.w	8007f40 <_vfiprintf_r+0x1f0>
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f04f 32ff 	mov.w	r2, #4294967295
 8007e04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e08:	f10a 0a01 	add.w	sl, sl, #1
 8007e0c:	9304      	str	r3, [sp, #16]
 8007e0e:	9307      	str	r3, [sp, #28]
 8007e10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e14:	931a      	str	r3, [sp, #104]	; 0x68
 8007e16:	4654      	mov	r4, sl
 8007e18:	2205      	movs	r2, #5
 8007e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e1e:	4854      	ldr	r0, [pc, #336]	; (8007f70 <_vfiprintf_r+0x220>)
 8007e20:	f7f8 fa26 	bl	8000270 <memchr>
 8007e24:	9a04      	ldr	r2, [sp, #16]
 8007e26:	b9d8      	cbnz	r0, 8007e60 <_vfiprintf_r+0x110>
 8007e28:	06d1      	lsls	r1, r2, #27
 8007e2a:	bf44      	itt	mi
 8007e2c:	2320      	movmi	r3, #32
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e32:	0713      	lsls	r3, r2, #28
 8007e34:	bf44      	itt	mi
 8007e36:	232b      	movmi	r3, #43	; 0x2b
 8007e38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e40:	2b2a      	cmp	r3, #42	; 0x2a
 8007e42:	d015      	beq.n	8007e70 <_vfiprintf_r+0x120>
 8007e44:	9a07      	ldr	r2, [sp, #28]
 8007e46:	4654      	mov	r4, sl
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f04f 0c0a 	mov.w	ip, #10
 8007e4e:	4621      	mov	r1, r4
 8007e50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e54:	3b30      	subs	r3, #48	; 0x30
 8007e56:	2b09      	cmp	r3, #9
 8007e58:	d94d      	bls.n	8007ef6 <_vfiprintf_r+0x1a6>
 8007e5a:	b1b0      	cbz	r0, 8007e8a <_vfiprintf_r+0x13a>
 8007e5c:	9207      	str	r2, [sp, #28]
 8007e5e:	e014      	b.n	8007e8a <_vfiprintf_r+0x13a>
 8007e60:	eba0 0308 	sub.w	r3, r0, r8
 8007e64:	fa09 f303 	lsl.w	r3, r9, r3
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	9304      	str	r3, [sp, #16]
 8007e6c:	46a2      	mov	sl, r4
 8007e6e:	e7d2      	b.n	8007e16 <_vfiprintf_r+0xc6>
 8007e70:	9b03      	ldr	r3, [sp, #12]
 8007e72:	1d19      	adds	r1, r3, #4
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	9103      	str	r1, [sp, #12]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	bfbb      	ittet	lt
 8007e7c:	425b      	neglt	r3, r3
 8007e7e:	f042 0202 	orrlt.w	r2, r2, #2
 8007e82:	9307      	strge	r3, [sp, #28]
 8007e84:	9307      	strlt	r3, [sp, #28]
 8007e86:	bfb8      	it	lt
 8007e88:	9204      	strlt	r2, [sp, #16]
 8007e8a:	7823      	ldrb	r3, [r4, #0]
 8007e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8007e8e:	d10c      	bne.n	8007eaa <_vfiprintf_r+0x15a>
 8007e90:	7863      	ldrb	r3, [r4, #1]
 8007e92:	2b2a      	cmp	r3, #42	; 0x2a
 8007e94:	d134      	bne.n	8007f00 <_vfiprintf_r+0x1b0>
 8007e96:	9b03      	ldr	r3, [sp, #12]
 8007e98:	1d1a      	adds	r2, r3, #4
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	9203      	str	r2, [sp, #12]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	bfb8      	it	lt
 8007ea2:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ea6:	3402      	adds	r4, #2
 8007ea8:	9305      	str	r3, [sp, #20]
 8007eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007f80 <_vfiprintf_r+0x230>
 8007eae:	7821      	ldrb	r1, [r4, #0]
 8007eb0:	2203      	movs	r2, #3
 8007eb2:	4650      	mov	r0, sl
 8007eb4:	f7f8 f9dc 	bl	8000270 <memchr>
 8007eb8:	b138      	cbz	r0, 8007eca <_vfiprintf_r+0x17a>
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	eba0 000a 	sub.w	r0, r0, sl
 8007ec0:	2240      	movs	r2, #64	; 0x40
 8007ec2:	4082      	lsls	r2, r0
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	3401      	adds	r4, #1
 8007ec8:	9304      	str	r3, [sp, #16]
 8007eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ece:	4829      	ldr	r0, [pc, #164]	; (8007f74 <_vfiprintf_r+0x224>)
 8007ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ed4:	2206      	movs	r2, #6
 8007ed6:	f7f8 f9cb 	bl	8000270 <memchr>
 8007eda:	2800      	cmp	r0, #0
 8007edc:	d03f      	beq.n	8007f5e <_vfiprintf_r+0x20e>
 8007ede:	4b26      	ldr	r3, [pc, #152]	; (8007f78 <_vfiprintf_r+0x228>)
 8007ee0:	bb1b      	cbnz	r3, 8007f2a <_vfiprintf_r+0x1da>
 8007ee2:	9b03      	ldr	r3, [sp, #12]
 8007ee4:	3307      	adds	r3, #7
 8007ee6:	f023 0307 	bic.w	r3, r3, #7
 8007eea:	3308      	adds	r3, #8
 8007eec:	9303      	str	r3, [sp, #12]
 8007eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ef0:	443b      	add	r3, r7
 8007ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8007ef4:	e768      	b.n	8007dc8 <_vfiprintf_r+0x78>
 8007ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007efa:	460c      	mov	r4, r1
 8007efc:	2001      	movs	r0, #1
 8007efe:	e7a6      	b.n	8007e4e <_vfiprintf_r+0xfe>
 8007f00:	2300      	movs	r3, #0
 8007f02:	3401      	adds	r4, #1
 8007f04:	9305      	str	r3, [sp, #20]
 8007f06:	4619      	mov	r1, r3
 8007f08:	f04f 0c0a 	mov.w	ip, #10
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f12:	3a30      	subs	r2, #48	; 0x30
 8007f14:	2a09      	cmp	r2, #9
 8007f16:	d903      	bls.n	8007f20 <_vfiprintf_r+0x1d0>
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d0c6      	beq.n	8007eaa <_vfiprintf_r+0x15a>
 8007f1c:	9105      	str	r1, [sp, #20]
 8007f1e:	e7c4      	b.n	8007eaa <_vfiprintf_r+0x15a>
 8007f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f24:	4604      	mov	r4, r0
 8007f26:	2301      	movs	r3, #1
 8007f28:	e7f0      	b.n	8007f0c <_vfiprintf_r+0x1bc>
 8007f2a:	ab03      	add	r3, sp, #12
 8007f2c:	9300      	str	r3, [sp, #0]
 8007f2e:	462a      	mov	r2, r5
 8007f30:	4b12      	ldr	r3, [pc, #72]	; (8007f7c <_vfiprintf_r+0x22c>)
 8007f32:	a904      	add	r1, sp, #16
 8007f34:	4630      	mov	r0, r6
 8007f36:	f3af 8000 	nop.w
 8007f3a:	4607      	mov	r7, r0
 8007f3c:	1c78      	adds	r0, r7, #1
 8007f3e:	d1d6      	bne.n	8007eee <_vfiprintf_r+0x19e>
 8007f40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f42:	07d9      	lsls	r1, r3, #31
 8007f44:	d405      	bmi.n	8007f52 <_vfiprintf_r+0x202>
 8007f46:	89ab      	ldrh	r3, [r5, #12]
 8007f48:	059a      	lsls	r2, r3, #22
 8007f4a:	d402      	bmi.n	8007f52 <_vfiprintf_r+0x202>
 8007f4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f4e:	f7ff fdce 	bl	8007aee <__retarget_lock_release_recursive>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	065b      	lsls	r3, r3, #25
 8007f56:	f53f af1d 	bmi.w	8007d94 <_vfiprintf_r+0x44>
 8007f5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f5c:	e71c      	b.n	8007d98 <_vfiprintf_r+0x48>
 8007f5e:	ab03      	add	r3, sp, #12
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	462a      	mov	r2, r5
 8007f64:	4b05      	ldr	r3, [pc, #20]	; (8007f7c <_vfiprintf_r+0x22c>)
 8007f66:	a904      	add	r1, sp, #16
 8007f68:	4630      	mov	r0, r6
 8007f6a:	f000 f879 	bl	8008060 <_printf_i>
 8007f6e:	e7e4      	b.n	8007f3a <_vfiprintf_r+0x1ea>
 8007f70:	080088a0 	.word	0x080088a0
 8007f74:	080088aa 	.word	0x080088aa
 8007f78:	00000000 	.word	0x00000000
 8007f7c:	08007d2b 	.word	0x08007d2b
 8007f80:	080088a6 	.word	0x080088a6

08007f84 <_printf_common>:
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	4616      	mov	r6, r2
 8007f8a:	4699      	mov	r9, r3
 8007f8c:	688a      	ldr	r2, [r1, #8]
 8007f8e:	690b      	ldr	r3, [r1, #16]
 8007f90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f94:	4293      	cmp	r3, r2
 8007f96:	bfb8      	it	lt
 8007f98:	4613      	movlt	r3, r2
 8007f9a:	6033      	str	r3, [r6, #0]
 8007f9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007fa0:	4607      	mov	r7, r0
 8007fa2:	460c      	mov	r4, r1
 8007fa4:	b10a      	cbz	r2, 8007faa <_printf_common+0x26>
 8007fa6:	3301      	adds	r3, #1
 8007fa8:	6033      	str	r3, [r6, #0]
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	0699      	lsls	r1, r3, #26
 8007fae:	bf42      	ittt	mi
 8007fb0:	6833      	ldrmi	r3, [r6, #0]
 8007fb2:	3302      	addmi	r3, #2
 8007fb4:	6033      	strmi	r3, [r6, #0]
 8007fb6:	6825      	ldr	r5, [r4, #0]
 8007fb8:	f015 0506 	ands.w	r5, r5, #6
 8007fbc:	d106      	bne.n	8007fcc <_printf_common+0x48>
 8007fbe:	f104 0a19 	add.w	sl, r4, #25
 8007fc2:	68e3      	ldr	r3, [r4, #12]
 8007fc4:	6832      	ldr	r2, [r6, #0]
 8007fc6:	1a9b      	subs	r3, r3, r2
 8007fc8:	42ab      	cmp	r3, r5
 8007fca:	dc26      	bgt.n	800801a <_printf_common+0x96>
 8007fcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fd0:	1e13      	subs	r3, r2, #0
 8007fd2:	6822      	ldr	r2, [r4, #0]
 8007fd4:	bf18      	it	ne
 8007fd6:	2301      	movne	r3, #1
 8007fd8:	0692      	lsls	r2, r2, #26
 8007fda:	d42b      	bmi.n	8008034 <_printf_common+0xb0>
 8007fdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fe0:	4649      	mov	r1, r9
 8007fe2:	4638      	mov	r0, r7
 8007fe4:	47c0      	blx	r8
 8007fe6:	3001      	adds	r0, #1
 8007fe8:	d01e      	beq.n	8008028 <_printf_common+0xa4>
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	6922      	ldr	r2, [r4, #16]
 8007fee:	f003 0306 	and.w	r3, r3, #6
 8007ff2:	2b04      	cmp	r3, #4
 8007ff4:	bf02      	ittt	eq
 8007ff6:	68e5      	ldreq	r5, [r4, #12]
 8007ff8:	6833      	ldreq	r3, [r6, #0]
 8007ffa:	1aed      	subeq	r5, r5, r3
 8007ffc:	68a3      	ldr	r3, [r4, #8]
 8007ffe:	bf0c      	ite	eq
 8008000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008004:	2500      	movne	r5, #0
 8008006:	4293      	cmp	r3, r2
 8008008:	bfc4      	itt	gt
 800800a:	1a9b      	subgt	r3, r3, r2
 800800c:	18ed      	addgt	r5, r5, r3
 800800e:	2600      	movs	r6, #0
 8008010:	341a      	adds	r4, #26
 8008012:	42b5      	cmp	r5, r6
 8008014:	d11a      	bne.n	800804c <_printf_common+0xc8>
 8008016:	2000      	movs	r0, #0
 8008018:	e008      	b.n	800802c <_printf_common+0xa8>
 800801a:	2301      	movs	r3, #1
 800801c:	4652      	mov	r2, sl
 800801e:	4649      	mov	r1, r9
 8008020:	4638      	mov	r0, r7
 8008022:	47c0      	blx	r8
 8008024:	3001      	adds	r0, #1
 8008026:	d103      	bne.n	8008030 <_printf_common+0xac>
 8008028:	f04f 30ff 	mov.w	r0, #4294967295
 800802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008030:	3501      	adds	r5, #1
 8008032:	e7c6      	b.n	8007fc2 <_printf_common+0x3e>
 8008034:	18e1      	adds	r1, r4, r3
 8008036:	1c5a      	adds	r2, r3, #1
 8008038:	2030      	movs	r0, #48	; 0x30
 800803a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800803e:	4422      	add	r2, r4
 8008040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008048:	3302      	adds	r3, #2
 800804a:	e7c7      	b.n	8007fdc <_printf_common+0x58>
 800804c:	2301      	movs	r3, #1
 800804e:	4622      	mov	r2, r4
 8008050:	4649      	mov	r1, r9
 8008052:	4638      	mov	r0, r7
 8008054:	47c0      	blx	r8
 8008056:	3001      	adds	r0, #1
 8008058:	d0e6      	beq.n	8008028 <_printf_common+0xa4>
 800805a:	3601      	adds	r6, #1
 800805c:	e7d9      	b.n	8008012 <_printf_common+0x8e>
	...

08008060 <_printf_i>:
 8008060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	7e0f      	ldrb	r7, [r1, #24]
 8008066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008068:	2f78      	cmp	r7, #120	; 0x78
 800806a:	4691      	mov	r9, r2
 800806c:	4680      	mov	r8, r0
 800806e:	460c      	mov	r4, r1
 8008070:	469a      	mov	sl, r3
 8008072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008076:	d807      	bhi.n	8008088 <_printf_i+0x28>
 8008078:	2f62      	cmp	r7, #98	; 0x62
 800807a:	d80a      	bhi.n	8008092 <_printf_i+0x32>
 800807c:	2f00      	cmp	r7, #0
 800807e:	f000 80d4 	beq.w	800822a <_printf_i+0x1ca>
 8008082:	2f58      	cmp	r7, #88	; 0x58
 8008084:	f000 80c0 	beq.w	8008208 <_printf_i+0x1a8>
 8008088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800808c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008090:	e03a      	b.n	8008108 <_printf_i+0xa8>
 8008092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008096:	2b15      	cmp	r3, #21
 8008098:	d8f6      	bhi.n	8008088 <_printf_i+0x28>
 800809a:	a101      	add	r1, pc, #4	; (adr r1, 80080a0 <_printf_i+0x40>)
 800809c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080a0:	080080f9 	.word	0x080080f9
 80080a4:	0800810d 	.word	0x0800810d
 80080a8:	08008089 	.word	0x08008089
 80080ac:	08008089 	.word	0x08008089
 80080b0:	08008089 	.word	0x08008089
 80080b4:	08008089 	.word	0x08008089
 80080b8:	0800810d 	.word	0x0800810d
 80080bc:	08008089 	.word	0x08008089
 80080c0:	08008089 	.word	0x08008089
 80080c4:	08008089 	.word	0x08008089
 80080c8:	08008089 	.word	0x08008089
 80080cc:	08008211 	.word	0x08008211
 80080d0:	08008139 	.word	0x08008139
 80080d4:	080081cb 	.word	0x080081cb
 80080d8:	08008089 	.word	0x08008089
 80080dc:	08008089 	.word	0x08008089
 80080e0:	08008233 	.word	0x08008233
 80080e4:	08008089 	.word	0x08008089
 80080e8:	08008139 	.word	0x08008139
 80080ec:	08008089 	.word	0x08008089
 80080f0:	08008089 	.word	0x08008089
 80080f4:	080081d3 	.word	0x080081d3
 80080f8:	682b      	ldr	r3, [r5, #0]
 80080fa:	1d1a      	adds	r2, r3, #4
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	602a      	str	r2, [r5, #0]
 8008100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008108:	2301      	movs	r3, #1
 800810a:	e09f      	b.n	800824c <_printf_i+0x1ec>
 800810c:	6820      	ldr	r0, [r4, #0]
 800810e:	682b      	ldr	r3, [r5, #0]
 8008110:	0607      	lsls	r7, r0, #24
 8008112:	f103 0104 	add.w	r1, r3, #4
 8008116:	6029      	str	r1, [r5, #0]
 8008118:	d501      	bpl.n	800811e <_printf_i+0xbe>
 800811a:	681e      	ldr	r6, [r3, #0]
 800811c:	e003      	b.n	8008126 <_printf_i+0xc6>
 800811e:	0646      	lsls	r6, r0, #25
 8008120:	d5fb      	bpl.n	800811a <_printf_i+0xba>
 8008122:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008126:	2e00      	cmp	r6, #0
 8008128:	da03      	bge.n	8008132 <_printf_i+0xd2>
 800812a:	232d      	movs	r3, #45	; 0x2d
 800812c:	4276      	negs	r6, r6
 800812e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008132:	485a      	ldr	r0, [pc, #360]	; (800829c <_printf_i+0x23c>)
 8008134:	230a      	movs	r3, #10
 8008136:	e012      	b.n	800815e <_printf_i+0xfe>
 8008138:	682b      	ldr	r3, [r5, #0]
 800813a:	6820      	ldr	r0, [r4, #0]
 800813c:	1d19      	adds	r1, r3, #4
 800813e:	6029      	str	r1, [r5, #0]
 8008140:	0605      	lsls	r5, r0, #24
 8008142:	d501      	bpl.n	8008148 <_printf_i+0xe8>
 8008144:	681e      	ldr	r6, [r3, #0]
 8008146:	e002      	b.n	800814e <_printf_i+0xee>
 8008148:	0641      	lsls	r1, r0, #25
 800814a:	d5fb      	bpl.n	8008144 <_printf_i+0xe4>
 800814c:	881e      	ldrh	r6, [r3, #0]
 800814e:	4853      	ldr	r0, [pc, #332]	; (800829c <_printf_i+0x23c>)
 8008150:	2f6f      	cmp	r7, #111	; 0x6f
 8008152:	bf0c      	ite	eq
 8008154:	2308      	moveq	r3, #8
 8008156:	230a      	movne	r3, #10
 8008158:	2100      	movs	r1, #0
 800815a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800815e:	6865      	ldr	r5, [r4, #4]
 8008160:	60a5      	str	r5, [r4, #8]
 8008162:	2d00      	cmp	r5, #0
 8008164:	bfa2      	ittt	ge
 8008166:	6821      	ldrge	r1, [r4, #0]
 8008168:	f021 0104 	bicge.w	r1, r1, #4
 800816c:	6021      	strge	r1, [r4, #0]
 800816e:	b90e      	cbnz	r6, 8008174 <_printf_i+0x114>
 8008170:	2d00      	cmp	r5, #0
 8008172:	d04b      	beq.n	800820c <_printf_i+0x1ac>
 8008174:	4615      	mov	r5, r2
 8008176:	fbb6 f1f3 	udiv	r1, r6, r3
 800817a:	fb03 6711 	mls	r7, r3, r1, r6
 800817e:	5dc7      	ldrb	r7, [r0, r7]
 8008180:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008184:	4637      	mov	r7, r6
 8008186:	42bb      	cmp	r3, r7
 8008188:	460e      	mov	r6, r1
 800818a:	d9f4      	bls.n	8008176 <_printf_i+0x116>
 800818c:	2b08      	cmp	r3, #8
 800818e:	d10b      	bne.n	80081a8 <_printf_i+0x148>
 8008190:	6823      	ldr	r3, [r4, #0]
 8008192:	07de      	lsls	r6, r3, #31
 8008194:	d508      	bpl.n	80081a8 <_printf_i+0x148>
 8008196:	6923      	ldr	r3, [r4, #16]
 8008198:	6861      	ldr	r1, [r4, #4]
 800819a:	4299      	cmp	r1, r3
 800819c:	bfde      	ittt	le
 800819e:	2330      	movle	r3, #48	; 0x30
 80081a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80081a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80081a8:	1b52      	subs	r2, r2, r5
 80081aa:	6122      	str	r2, [r4, #16]
 80081ac:	f8cd a000 	str.w	sl, [sp]
 80081b0:	464b      	mov	r3, r9
 80081b2:	aa03      	add	r2, sp, #12
 80081b4:	4621      	mov	r1, r4
 80081b6:	4640      	mov	r0, r8
 80081b8:	f7ff fee4 	bl	8007f84 <_printf_common>
 80081bc:	3001      	adds	r0, #1
 80081be:	d14a      	bne.n	8008256 <_printf_i+0x1f6>
 80081c0:	f04f 30ff 	mov.w	r0, #4294967295
 80081c4:	b004      	add	sp, #16
 80081c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ca:	6823      	ldr	r3, [r4, #0]
 80081cc:	f043 0320 	orr.w	r3, r3, #32
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	4833      	ldr	r0, [pc, #204]	; (80082a0 <_printf_i+0x240>)
 80081d4:	2778      	movs	r7, #120	; 0x78
 80081d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	6829      	ldr	r1, [r5, #0]
 80081de:	061f      	lsls	r7, r3, #24
 80081e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80081e4:	d402      	bmi.n	80081ec <_printf_i+0x18c>
 80081e6:	065f      	lsls	r7, r3, #25
 80081e8:	bf48      	it	mi
 80081ea:	b2b6      	uxthmi	r6, r6
 80081ec:	07df      	lsls	r7, r3, #31
 80081ee:	bf48      	it	mi
 80081f0:	f043 0320 	orrmi.w	r3, r3, #32
 80081f4:	6029      	str	r1, [r5, #0]
 80081f6:	bf48      	it	mi
 80081f8:	6023      	strmi	r3, [r4, #0]
 80081fa:	b91e      	cbnz	r6, 8008204 <_printf_i+0x1a4>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	f023 0320 	bic.w	r3, r3, #32
 8008202:	6023      	str	r3, [r4, #0]
 8008204:	2310      	movs	r3, #16
 8008206:	e7a7      	b.n	8008158 <_printf_i+0xf8>
 8008208:	4824      	ldr	r0, [pc, #144]	; (800829c <_printf_i+0x23c>)
 800820a:	e7e4      	b.n	80081d6 <_printf_i+0x176>
 800820c:	4615      	mov	r5, r2
 800820e:	e7bd      	b.n	800818c <_printf_i+0x12c>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	6826      	ldr	r6, [r4, #0]
 8008214:	6961      	ldr	r1, [r4, #20]
 8008216:	1d18      	adds	r0, r3, #4
 8008218:	6028      	str	r0, [r5, #0]
 800821a:	0635      	lsls	r5, r6, #24
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	d501      	bpl.n	8008224 <_printf_i+0x1c4>
 8008220:	6019      	str	r1, [r3, #0]
 8008222:	e002      	b.n	800822a <_printf_i+0x1ca>
 8008224:	0670      	lsls	r0, r6, #25
 8008226:	d5fb      	bpl.n	8008220 <_printf_i+0x1c0>
 8008228:	8019      	strh	r1, [r3, #0]
 800822a:	2300      	movs	r3, #0
 800822c:	6123      	str	r3, [r4, #16]
 800822e:	4615      	mov	r5, r2
 8008230:	e7bc      	b.n	80081ac <_printf_i+0x14c>
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	1d1a      	adds	r2, r3, #4
 8008236:	602a      	str	r2, [r5, #0]
 8008238:	681d      	ldr	r5, [r3, #0]
 800823a:	6862      	ldr	r2, [r4, #4]
 800823c:	2100      	movs	r1, #0
 800823e:	4628      	mov	r0, r5
 8008240:	f7f8 f816 	bl	8000270 <memchr>
 8008244:	b108      	cbz	r0, 800824a <_printf_i+0x1ea>
 8008246:	1b40      	subs	r0, r0, r5
 8008248:	6060      	str	r0, [r4, #4]
 800824a:	6863      	ldr	r3, [r4, #4]
 800824c:	6123      	str	r3, [r4, #16]
 800824e:	2300      	movs	r3, #0
 8008250:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008254:	e7aa      	b.n	80081ac <_printf_i+0x14c>
 8008256:	6923      	ldr	r3, [r4, #16]
 8008258:	462a      	mov	r2, r5
 800825a:	4649      	mov	r1, r9
 800825c:	4640      	mov	r0, r8
 800825e:	47d0      	blx	sl
 8008260:	3001      	adds	r0, #1
 8008262:	d0ad      	beq.n	80081c0 <_printf_i+0x160>
 8008264:	6823      	ldr	r3, [r4, #0]
 8008266:	079b      	lsls	r3, r3, #30
 8008268:	d413      	bmi.n	8008292 <_printf_i+0x232>
 800826a:	68e0      	ldr	r0, [r4, #12]
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	4298      	cmp	r0, r3
 8008270:	bfb8      	it	lt
 8008272:	4618      	movlt	r0, r3
 8008274:	e7a6      	b.n	80081c4 <_printf_i+0x164>
 8008276:	2301      	movs	r3, #1
 8008278:	4632      	mov	r2, r6
 800827a:	4649      	mov	r1, r9
 800827c:	4640      	mov	r0, r8
 800827e:	47d0      	blx	sl
 8008280:	3001      	adds	r0, #1
 8008282:	d09d      	beq.n	80081c0 <_printf_i+0x160>
 8008284:	3501      	adds	r5, #1
 8008286:	68e3      	ldr	r3, [r4, #12]
 8008288:	9903      	ldr	r1, [sp, #12]
 800828a:	1a5b      	subs	r3, r3, r1
 800828c:	42ab      	cmp	r3, r5
 800828e:	dcf2      	bgt.n	8008276 <_printf_i+0x216>
 8008290:	e7eb      	b.n	800826a <_printf_i+0x20a>
 8008292:	2500      	movs	r5, #0
 8008294:	f104 0619 	add.w	r6, r4, #25
 8008298:	e7f5      	b.n	8008286 <_printf_i+0x226>
 800829a:	bf00      	nop
 800829c:	080088b1 	.word	0x080088b1
 80082a0:	080088c2 	.word	0x080088c2

080082a4 <__sflush_r>:
 80082a4:	898a      	ldrh	r2, [r1, #12]
 80082a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082aa:	4605      	mov	r5, r0
 80082ac:	0710      	lsls	r0, r2, #28
 80082ae:	460c      	mov	r4, r1
 80082b0:	d458      	bmi.n	8008364 <__sflush_r+0xc0>
 80082b2:	684b      	ldr	r3, [r1, #4]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	dc05      	bgt.n	80082c4 <__sflush_r+0x20>
 80082b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	dc02      	bgt.n	80082c4 <__sflush_r+0x20>
 80082be:	2000      	movs	r0, #0
 80082c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082c6:	2e00      	cmp	r6, #0
 80082c8:	d0f9      	beq.n	80082be <__sflush_r+0x1a>
 80082ca:	2300      	movs	r3, #0
 80082cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082d0:	682f      	ldr	r7, [r5, #0]
 80082d2:	6a21      	ldr	r1, [r4, #32]
 80082d4:	602b      	str	r3, [r5, #0]
 80082d6:	d032      	beq.n	800833e <__sflush_r+0x9a>
 80082d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082da:	89a3      	ldrh	r3, [r4, #12]
 80082dc:	075a      	lsls	r2, r3, #29
 80082de:	d505      	bpl.n	80082ec <__sflush_r+0x48>
 80082e0:	6863      	ldr	r3, [r4, #4]
 80082e2:	1ac0      	subs	r0, r0, r3
 80082e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082e6:	b10b      	cbz	r3, 80082ec <__sflush_r+0x48>
 80082e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082ea:	1ac0      	subs	r0, r0, r3
 80082ec:	2300      	movs	r3, #0
 80082ee:	4602      	mov	r2, r0
 80082f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082f2:	6a21      	ldr	r1, [r4, #32]
 80082f4:	4628      	mov	r0, r5
 80082f6:	47b0      	blx	r6
 80082f8:	1c43      	adds	r3, r0, #1
 80082fa:	89a3      	ldrh	r3, [r4, #12]
 80082fc:	d106      	bne.n	800830c <__sflush_r+0x68>
 80082fe:	6829      	ldr	r1, [r5, #0]
 8008300:	291d      	cmp	r1, #29
 8008302:	d82b      	bhi.n	800835c <__sflush_r+0xb8>
 8008304:	4a29      	ldr	r2, [pc, #164]	; (80083ac <__sflush_r+0x108>)
 8008306:	410a      	asrs	r2, r1
 8008308:	07d6      	lsls	r6, r2, #31
 800830a:	d427      	bmi.n	800835c <__sflush_r+0xb8>
 800830c:	2200      	movs	r2, #0
 800830e:	6062      	str	r2, [r4, #4]
 8008310:	04d9      	lsls	r1, r3, #19
 8008312:	6922      	ldr	r2, [r4, #16]
 8008314:	6022      	str	r2, [r4, #0]
 8008316:	d504      	bpl.n	8008322 <__sflush_r+0x7e>
 8008318:	1c42      	adds	r2, r0, #1
 800831a:	d101      	bne.n	8008320 <__sflush_r+0x7c>
 800831c:	682b      	ldr	r3, [r5, #0]
 800831e:	b903      	cbnz	r3, 8008322 <__sflush_r+0x7e>
 8008320:	6560      	str	r0, [r4, #84]	; 0x54
 8008322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008324:	602f      	str	r7, [r5, #0]
 8008326:	2900      	cmp	r1, #0
 8008328:	d0c9      	beq.n	80082be <__sflush_r+0x1a>
 800832a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800832e:	4299      	cmp	r1, r3
 8008330:	d002      	beq.n	8008338 <__sflush_r+0x94>
 8008332:	4628      	mov	r0, r5
 8008334:	f7ff fbea 	bl	8007b0c <_free_r>
 8008338:	2000      	movs	r0, #0
 800833a:	6360      	str	r0, [r4, #52]	; 0x34
 800833c:	e7c0      	b.n	80082c0 <__sflush_r+0x1c>
 800833e:	2301      	movs	r3, #1
 8008340:	4628      	mov	r0, r5
 8008342:	47b0      	blx	r6
 8008344:	1c41      	adds	r1, r0, #1
 8008346:	d1c8      	bne.n	80082da <__sflush_r+0x36>
 8008348:	682b      	ldr	r3, [r5, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d0c5      	beq.n	80082da <__sflush_r+0x36>
 800834e:	2b1d      	cmp	r3, #29
 8008350:	d001      	beq.n	8008356 <__sflush_r+0xb2>
 8008352:	2b16      	cmp	r3, #22
 8008354:	d101      	bne.n	800835a <__sflush_r+0xb6>
 8008356:	602f      	str	r7, [r5, #0]
 8008358:	e7b1      	b.n	80082be <__sflush_r+0x1a>
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	e7ad      	b.n	80082c0 <__sflush_r+0x1c>
 8008364:	690f      	ldr	r7, [r1, #16]
 8008366:	2f00      	cmp	r7, #0
 8008368:	d0a9      	beq.n	80082be <__sflush_r+0x1a>
 800836a:	0793      	lsls	r3, r2, #30
 800836c:	680e      	ldr	r6, [r1, #0]
 800836e:	bf08      	it	eq
 8008370:	694b      	ldreq	r3, [r1, #20]
 8008372:	600f      	str	r7, [r1, #0]
 8008374:	bf18      	it	ne
 8008376:	2300      	movne	r3, #0
 8008378:	eba6 0807 	sub.w	r8, r6, r7
 800837c:	608b      	str	r3, [r1, #8]
 800837e:	f1b8 0f00 	cmp.w	r8, #0
 8008382:	dd9c      	ble.n	80082be <__sflush_r+0x1a>
 8008384:	6a21      	ldr	r1, [r4, #32]
 8008386:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008388:	4643      	mov	r3, r8
 800838a:	463a      	mov	r2, r7
 800838c:	4628      	mov	r0, r5
 800838e:	47b0      	blx	r6
 8008390:	2800      	cmp	r0, #0
 8008392:	dc06      	bgt.n	80083a2 <__sflush_r+0xfe>
 8008394:	89a3      	ldrh	r3, [r4, #12]
 8008396:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800839a:	81a3      	strh	r3, [r4, #12]
 800839c:	f04f 30ff 	mov.w	r0, #4294967295
 80083a0:	e78e      	b.n	80082c0 <__sflush_r+0x1c>
 80083a2:	4407      	add	r7, r0
 80083a4:	eba8 0800 	sub.w	r8, r8, r0
 80083a8:	e7e9      	b.n	800837e <__sflush_r+0xda>
 80083aa:	bf00      	nop
 80083ac:	dfbffffe 	.word	0xdfbffffe

080083b0 <_fflush_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	690b      	ldr	r3, [r1, #16]
 80083b4:	4605      	mov	r5, r0
 80083b6:	460c      	mov	r4, r1
 80083b8:	b913      	cbnz	r3, 80083c0 <_fflush_r+0x10>
 80083ba:	2500      	movs	r5, #0
 80083bc:	4628      	mov	r0, r5
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	b118      	cbz	r0, 80083ca <_fflush_r+0x1a>
 80083c2:	6a03      	ldr	r3, [r0, #32]
 80083c4:	b90b      	cbnz	r3, 80083ca <_fflush_r+0x1a>
 80083c6:	f7ff fa83 	bl	80078d0 <__sinit>
 80083ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d0f3      	beq.n	80083ba <_fflush_r+0xa>
 80083d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083d4:	07d0      	lsls	r0, r2, #31
 80083d6:	d404      	bmi.n	80083e2 <_fflush_r+0x32>
 80083d8:	0599      	lsls	r1, r3, #22
 80083da:	d402      	bmi.n	80083e2 <_fflush_r+0x32>
 80083dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083de:	f7ff fb85 	bl	8007aec <__retarget_lock_acquire_recursive>
 80083e2:	4628      	mov	r0, r5
 80083e4:	4621      	mov	r1, r4
 80083e6:	f7ff ff5d 	bl	80082a4 <__sflush_r>
 80083ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083ec:	07da      	lsls	r2, r3, #31
 80083ee:	4605      	mov	r5, r0
 80083f0:	d4e4      	bmi.n	80083bc <_fflush_r+0xc>
 80083f2:	89a3      	ldrh	r3, [r4, #12]
 80083f4:	059b      	lsls	r3, r3, #22
 80083f6:	d4e1      	bmi.n	80083bc <_fflush_r+0xc>
 80083f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083fa:	f7ff fb78 	bl	8007aee <__retarget_lock_release_recursive>
 80083fe:	e7dd      	b.n	80083bc <_fflush_r+0xc>

08008400 <__swbuf_r>:
 8008400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008402:	460e      	mov	r6, r1
 8008404:	4614      	mov	r4, r2
 8008406:	4605      	mov	r5, r0
 8008408:	b118      	cbz	r0, 8008412 <__swbuf_r+0x12>
 800840a:	6a03      	ldr	r3, [r0, #32]
 800840c:	b90b      	cbnz	r3, 8008412 <__swbuf_r+0x12>
 800840e:	f7ff fa5f 	bl	80078d0 <__sinit>
 8008412:	69a3      	ldr	r3, [r4, #24]
 8008414:	60a3      	str	r3, [r4, #8]
 8008416:	89a3      	ldrh	r3, [r4, #12]
 8008418:	071a      	lsls	r2, r3, #28
 800841a:	d525      	bpl.n	8008468 <__swbuf_r+0x68>
 800841c:	6923      	ldr	r3, [r4, #16]
 800841e:	b31b      	cbz	r3, 8008468 <__swbuf_r+0x68>
 8008420:	6823      	ldr	r3, [r4, #0]
 8008422:	6922      	ldr	r2, [r4, #16]
 8008424:	1a98      	subs	r0, r3, r2
 8008426:	6963      	ldr	r3, [r4, #20]
 8008428:	b2f6      	uxtb	r6, r6
 800842a:	4283      	cmp	r3, r0
 800842c:	4637      	mov	r7, r6
 800842e:	dc04      	bgt.n	800843a <__swbuf_r+0x3a>
 8008430:	4621      	mov	r1, r4
 8008432:	4628      	mov	r0, r5
 8008434:	f7ff ffbc 	bl	80083b0 <_fflush_r>
 8008438:	b9e0      	cbnz	r0, 8008474 <__swbuf_r+0x74>
 800843a:	68a3      	ldr	r3, [r4, #8]
 800843c:	3b01      	subs	r3, #1
 800843e:	60a3      	str	r3, [r4, #8]
 8008440:	6823      	ldr	r3, [r4, #0]
 8008442:	1c5a      	adds	r2, r3, #1
 8008444:	6022      	str	r2, [r4, #0]
 8008446:	701e      	strb	r6, [r3, #0]
 8008448:	6962      	ldr	r2, [r4, #20]
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	429a      	cmp	r2, r3
 800844e:	d004      	beq.n	800845a <__swbuf_r+0x5a>
 8008450:	89a3      	ldrh	r3, [r4, #12]
 8008452:	07db      	lsls	r3, r3, #31
 8008454:	d506      	bpl.n	8008464 <__swbuf_r+0x64>
 8008456:	2e0a      	cmp	r6, #10
 8008458:	d104      	bne.n	8008464 <__swbuf_r+0x64>
 800845a:	4621      	mov	r1, r4
 800845c:	4628      	mov	r0, r5
 800845e:	f7ff ffa7 	bl	80083b0 <_fflush_r>
 8008462:	b938      	cbnz	r0, 8008474 <__swbuf_r+0x74>
 8008464:	4638      	mov	r0, r7
 8008466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f000 f806 	bl	800847c <__swsetup_r>
 8008470:	2800      	cmp	r0, #0
 8008472:	d0d5      	beq.n	8008420 <__swbuf_r+0x20>
 8008474:	f04f 37ff 	mov.w	r7, #4294967295
 8008478:	e7f4      	b.n	8008464 <__swbuf_r+0x64>
	...

0800847c <__swsetup_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <__swsetup_r+0xac>)
 8008480:	4605      	mov	r5, r0
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	460c      	mov	r4, r1
 8008486:	b118      	cbz	r0, 8008490 <__swsetup_r+0x14>
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b90b      	cbnz	r3, 8008490 <__swsetup_r+0x14>
 800848c:	f7ff fa20 	bl	80078d0 <__sinit>
 8008490:	89a3      	ldrh	r3, [r4, #12]
 8008492:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008496:	0718      	lsls	r0, r3, #28
 8008498:	d422      	bmi.n	80084e0 <__swsetup_r+0x64>
 800849a:	06d9      	lsls	r1, r3, #27
 800849c:	d407      	bmi.n	80084ae <__swsetup_r+0x32>
 800849e:	2309      	movs	r3, #9
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80084a6:	81a3      	strh	r3, [r4, #12]
 80084a8:	f04f 30ff 	mov.w	r0, #4294967295
 80084ac:	e034      	b.n	8008518 <__swsetup_r+0x9c>
 80084ae:	0758      	lsls	r0, r3, #29
 80084b0:	d512      	bpl.n	80084d8 <__swsetup_r+0x5c>
 80084b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084b4:	b141      	cbz	r1, 80084c8 <__swsetup_r+0x4c>
 80084b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084ba:	4299      	cmp	r1, r3
 80084bc:	d002      	beq.n	80084c4 <__swsetup_r+0x48>
 80084be:	4628      	mov	r0, r5
 80084c0:	f7ff fb24 	bl	8007b0c <_free_r>
 80084c4:	2300      	movs	r3, #0
 80084c6:	6363      	str	r3, [r4, #52]	; 0x34
 80084c8:	89a3      	ldrh	r3, [r4, #12]
 80084ca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	2300      	movs	r3, #0
 80084d2:	6063      	str	r3, [r4, #4]
 80084d4:	6923      	ldr	r3, [r4, #16]
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	89a3      	ldrh	r3, [r4, #12]
 80084da:	f043 0308 	orr.w	r3, r3, #8
 80084de:	81a3      	strh	r3, [r4, #12]
 80084e0:	6923      	ldr	r3, [r4, #16]
 80084e2:	b94b      	cbnz	r3, 80084f8 <__swsetup_r+0x7c>
 80084e4:	89a3      	ldrh	r3, [r4, #12]
 80084e6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80084ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80084ee:	d003      	beq.n	80084f8 <__swsetup_r+0x7c>
 80084f0:	4621      	mov	r1, r4
 80084f2:	4628      	mov	r0, r5
 80084f4:	f000 f850 	bl	8008598 <__smakebuf_r>
 80084f8:	89a0      	ldrh	r0, [r4, #12]
 80084fa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80084fe:	f010 0301 	ands.w	r3, r0, #1
 8008502:	d00a      	beq.n	800851a <__swsetup_r+0x9e>
 8008504:	2300      	movs	r3, #0
 8008506:	60a3      	str	r3, [r4, #8]
 8008508:	6963      	ldr	r3, [r4, #20]
 800850a:	425b      	negs	r3, r3
 800850c:	61a3      	str	r3, [r4, #24]
 800850e:	6923      	ldr	r3, [r4, #16]
 8008510:	b943      	cbnz	r3, 8008524 <__swsetup_r+0xa8>
 8008512:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008516:	d1c4      	bne.n	80084a2 <__swsetup_r+0x26>
 8008518:	bd38      	pop	{r3, r4, r5, pc}
 800851a:	0781      	lsls	r1, r0, #30
 800851c:	bf58      	it	pl
 800851e:	6963      	ldrpl	r3, [r4, #20]
 8008520:	60a3      	str	r3, [r4, #8]
 8008522:	e7f4      	b.n	800850e <__swsetup_r+0x92>
 8008524:	2000      	movs	r0, #0
 8008526:	e7f7      	b.n	8008518 <__swsetup_r+0x9c>
 8008528:	20000074 	.word	0x20000074

0800852c <_sbrk_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4d06      	ldr	r5, [pc, #24]	; (8008548 <_sbrk_r+0x1c>)
 8008530:	2300      	movs	r3, #0
 8008532:	4604      	mov	r4, r0
 8008534:	4608      	mov	r0, r1
 8008536:	602b      	str	r3, [r5, #0]
 8008538:	f000 f88c 	bl	8008654 <_sbrk>
 800853c:	1c43      	adds	r3, r0, #1
 800853e:	d102      	bne.n	8008546 <_sbrk_r+0x1a>
 8008540:	682b      	ldr	r3, [r5, #0]
 8008542:	b103      	cbz	r3, 8008546 <_sbrk_r+0x1a>
 8008544:	6023      	str	r3, [r4, #0]
 8008546:	bd38      	pop	{r3, r4, r5, pc}
 8008548:	20014668 	.word	0x20014668

0800854c <__swhatbuf_r>:
 800854c:	b570      	push	{r4, r5, r6, lr}
 800854e:	460c      	mov	r4, r1
 8008550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008554:	2900      	cmp	r1, #0
 8008556:	b096      	sub	sp, #88	; 0x58
 8008558:	4615      	mov	r5, r2
 800855a:	461e      	mov	r6, r3
 800855c:	da0d      	bge.n	800857a <__swhatbuf_r+0x2e>
 800855e:	89a3      	ldrh	r3, [r4, #12]
 8008560:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008564:	f04f 0100 	mov.w	r1, #0
 8008568:	bf0c      	ite	eq
 800856a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800856e:	2340      	movne	r3, #64	; 0x40
 8008570:	2000      	movs	r0, #0
 8008572:	6031      	str	r1, [r6, #0]
 8008574:	602b      	str	r3, [r5, #0]
 8008576:	b016      	add	sp, #88	; 0x58
 8008578:	bd70      	pop	{r4, r5, r6, pc}
 800857a:	466a      	mov	r2, sp
 800857c:	f000 f848 	bl	8008610 <_fstat_r>
 8008580:	2800      	cmp	r0, #0
 8008582:	dbec      	blt.n	800855e <__swhatbuf_r+0x12>
 8008584:	9901      	ldr	r1, [sp, #4]
 8008586:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800858a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800858e:	4259      	negs	r1, r3
 8008590:	4159      	adcs	r1, r3
 8008592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008596:	e7eb      	b.n	8008570 <__swhatbuf_r+0x24>

08008598 <__smakebuf_r>:
 8008598:	898b      	ldrh	r3, [r1, #12]
 800859a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800859c:	079d      	lsls	r5, r3, #30
 800859e:	4606      	mov	r6, r0
 80085a0:	460c      	mov	r4, r1
 80085a2:	d507      	bpl.n	80085b4 <__smakebuf_r+0x1c>
 80085a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80085a8:	6023      	str	r3, [r4, #0]
 80085aa:	6123      	str	r3, [r4, #16]
 80085ac:	2301      	movs	r3, #1
 80085ae:	6163      	str	r3, [r4, #20]
 80085b0:	b002      	add	sp, #8
 80085b2:	bd70      	pop	{r4, r5, r6, pc}
 80085b4:	ab01      	add	r3, sp, #4
 80085b6:	466a      	mov	r2, sp
 80085b8:	f7ff ffc8 	bl	800854c <__swhatbuf_r>
 80085bc:	9900      	ldr	r1, [sp, #0]
 80085be:	4605      	mov	r5, r0
 80085c0:	4630      	mov	r0, r6
 80085c2:	f7ff fb0f 	bl	8007be4 <_malloc_r>
 80085c6:	b948      	cbnz	r0, 80085dc <__smakebuf_r+0x44>
 80085c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085cc:	059a      	lsls	r2, r3, #22
 80085ce:	d4ef      	bmi.n	80085b0 <__smakebuf_r+0x18>
 80085d0:	f023 0303 	bic.w	r3, r3, #3
 80085d4:	f043 0302 	orr.w	r3, r3, #2
 80085d8:	81a3      	strh	r3, [r4, #12]
 80085da:	e7e3      	b.n	80085a4 <__smakebuf_r+0xc>
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	6020      	str	r0, [r4, #0]
 80085e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085e4:	81a3      	strh	r3, [r4, #12]
 80085e6:	9b00      	ldr	r3, [sp, #0]
 80085e8:	6163      	str	r3, [r4, #20]
 80085ea:	9b01      	ldr	r3, [sp, #4]
 80085ec:	6120      	str	r0, [r4, #16]
 80085ee:	b15b      	cbz	r3, 8008608 <__smakebuf_r+0x70>
 80085f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085f4:	4630      	mov	r0, r6
 80085f6:	f000 f81d 	bl	8008634 <_isatty_r>
 80085fa:	b128      	cbz	r0, 8008608 <__smakebuf_r+0x70>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f023 0303 	bic.w	r3, r3, #3
 8008602:	f043 0301 	orr.w	r3, r3, #1
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	89a3      	ldrh	r3, [r4, #12]
 800860a:	431d      	orrs	r5, r3
 800860c:	81a5      	strh	r5, [r4, #12]
 800860e:	e7cf      	b.n	80085b0 <__smakebuf_r+0x18>

08008610 <_fstat_r>:
 8008610:	b538      	push	{r3, r4, r5, lr}
 8008612:	4d07      	ldr	r5, [pc, #28]	; (8008630 <_fstat_r+0x20>)
 8008614:	2300      	movs	r3, #0
 8008616:	4604      	mov	r4, r0
 8008618:	4608      	mov	r0, r1
 800861a:	4611      	mov	r1, r2
 800861c:	602b      	str	r3, [r5, #0]
 800861e:	f7f8 fb9c 	bl	8000d5a <_fstat>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	d102      	bne.n	800862c <_fstat_r+0x1c>
 8008626:	682b      	ldr	r3, [r5, #0]
 8008628:	b103      	cbz	r3, 800862c <_fstat_r+0x1c>
 800862a:	6023      	str	r3, [r4, #0]
 800862c:	bd38      	pop	{r3, r4, r5, pc}
 800862e:	bf00      	nop
 8008630:	20014668 	.word	0x20014668

08008634 <_isatty_r>:
 8008634:	b538      	push	{r3, r4, r5, lr}
 8008636:	4d06      	ldr	r5, [pc, #24]	; (8008650 <_isatty_r+0x1c>)
 8008638:	2300      	movs	r3, #0
 800863a:	4604      	mov	r4, r0
 800863c:	4608      	mov	r0, r1
 800863e:	602b      	str	r3, [r5, #0]
 8008640:	f7f8 fb9b 	bl	8000d7a <_isatty>
 8008644:	1c43      	adds	r3, r0, #1
 8008646:	d102      	bne.n	800864e <_isatty_r+0x1a>
 8008648:	682b      	ldr	r3, [r5, #0]
 800864a:	b103      	cbz	r3, 800864e <_isatty_r+0x1a>
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	bd38      	pop	{r3, r4, r5, pc}
 8008650:	20014668 	.word	0x20014668

08008654 <_sbrk>:
 8008654:	4a04      	ldr	r2, [pc, #16]	; (8008668 <_sbrk+0x14>)
 8008656:	6811      	ldr	r1, [r2, #0]
 8008658:	4603      	mov	r3, r0
 800865a:	b909      	cbnz	r1, 8008660 <_sbrk+0xc>
 800865c:	4903      	ldr	r1, [pc, #12]	; (800866c <_sbrk+0x18>)
 800865e:	6011      	str	r1, [r2, #0]
 8008660:	6810      	ldr	r0, [r2, #0]
 8008662:	4403      	add	r3, r0
 8008664:	6013      	str	r3, [r2, #0]
 8008666:	4770      	bx	lr
 8008668:	20014678 	.word	0x20014678
 800866c:	20014680 	.word	0x20014680

08008670 <_init>:
 8008670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008672:	bf00      	nop
 8008674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008676:	bc08      	pop	{r3}
 8008678:	469e      	mov	lr, r3
 800867a:	4770      	bx	lr

0800867c <_fini>:
 800867c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800867e:	bf00      	nop
 8008680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008682:	bc08      	pop	{r3}
 8008684:	469e      	mov	lr, r3
 8008686:	4770      	bx	lr
